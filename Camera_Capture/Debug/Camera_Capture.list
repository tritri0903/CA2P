
Camera_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac9c  0800ac9c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca4  0800aca4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800acac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  2000007c  0800ad28  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800ad28  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a2d  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315f  00000000  00000000  00033b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00036c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9c  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167e4  00000000  00000000  00038b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196c8  00000000  00000000  0004f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cec2  00000000  00000000  00068a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043c8  00000000  00000000  000e590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e9cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009fb8 	.word	0x08009fb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08009fb8 	.word	0x08009fb8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <Start_DMA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Start_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t len) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	// 1. Mettre le CS à LOW pour commencer la communication
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET); // Exemple avec GPIOB et PIN 12
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <Start_DMA+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fd13 	bl	8001f0a <HAL_GPIO_WritePin>

	// 2. Configuration du SPI en mode réception DMA
	// HAL_SPI_TransmitReceive_DMA permet de gérer à la fois la transmission et la réception via DMA
	if (HAL_SPI_Receive_DMA(hspi, pData, len) != HAL_OK) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	0018      	movs	r0, r3
 80004ee:	f003 ff7f 	bl	80043f0 <HAL_SPI_Receive_DMA>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <Start_DMA+0x2e>
		// Gérer les erreurs si nécessaire
		Error_Handler();
 80004f6:	f000 fb41 	bl	8000b7c <Error_Handler>
	}
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <Capture_SD>:

void Capture_SD(uint32_t length) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4c6b      	ldr	r4, [pc, #428]	; (80006b8 <Capture_SD+0x1b0>)
 800050c:	44a5      	add	sp, r4
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	uint8_t temp_last;
	uint8_t SD_Buffer[BURST_SIZE];
	uint8_t DMA_Buffer[BURST_SIZE];
	is_header = false;
 8000512:	4b6a      	ldr	r3, [pc, #424]	; (80006bc <Capture_SD+0x1b4>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

	while(SD_Card_Open("Temp.jpg")){
 8000518:	e002      	b.n	8000520 <Capture_SD+0x18>
		HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f001 f85e 	bl	80015dc <HAL_Delay>
	while(SD_Card_Open("Temp.jpg")){
 8000520:	4b67      	ldr	r3, [pc, #412]	; (80006c0 <Capture_SD+0x1b8>)
 8000522:	0018      	movs	r0, r3
 8000524:	f000 ffb0 	bl	8001488 <SD_Card_Open>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d1f6      	bne.n	800051a <Capture_SD+0x12>
	}

	while (length > 0) {
 800052c:	e0b8      	b.n	80006a0 <Capture_SD+0x198>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800052e:	4b65      	ldr	r3, [pc, #404]	; (80006c4 <Capture_SD+0x1bc>)
 8000530:	2200      	movs	r2, #0
 8000532:	2120      	movs	r1, #32
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fce8 	bl	8001f0a <HAL_GPIO_WritePin>
		set_fifo_burst();
 800053a:	f000 fe6d 	bl	8001218 <set_fifo_burst>
		DMA_Complet = 0;
 800053e:	4b62      	ldr	r3, [pc, #392]	; (80006c8 <Capture_SD+0x1c0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]

		length = length - BURST_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a61      	ldr	r2, [pc, #388]	; (80006cc <Capture_SD+0x1c4>)
 8000548:	4694      	mov	ip, r2
 800054a:	4463      	add	r3, ip
 800054c:	607b      	str	r3, [r7, #4]
		if (length > BURST_SIZE) {
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	429a      	cmp	r2, r3
 8000556:	d908      	bls.n	800056a <Capture_SD+0x62>
			Start_DMA(&hspi1, DMA_Buffer, BURST_SIZE);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	009a      	lsls	r2, r3, #2
 800055c:	2308      	movs	r3, #8
 800055e:	18f9      	adds	r1, r7, r3
 8000560:	4b5b      	ldr	r3, [pc, #364]	; (80006d0 <Capture_SD+0x1c8>)
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ffb2 	bl	80004cc <Start_DMA>
 8000568:	e009      	b.n	800057e <Capture_SD+0x76>
		} else {
			Start_DMA(&hspi1, DMA_Buffer, BURST_SIZE);
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	009a      	lsls	r2, r3, #2
 800056e:	2308      	movs	r3, #8
 8000570:	18f9      	adds	r1, r7, r3
 8000572:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <Capture_SD+0x1c8>)
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff ffa9 	bl	80004cc <Start_DMA>
			length = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
		}
		while (!DMA_Complet) {
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	4b51      	ldr	r3, [pc, #324]	; (80006c8 <Capture_SD+0x1c0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0fb      	beq.n	8000580 <Capture_SD+0x78>
		};
		uint16_t i;
		uint16_t index = 0;
 8000588:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <Capture_SD+0x1cc>)
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < BURST_SIZE; i++) {
 8000590:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <Capture_SD+0x1d0>)
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
 8000598:	e06e      	b.n	8000678 <Capture_SD+0x170>
			if (is_header == true) {
 800059a:	4b48      	ldr	r3, [pc, #288]	; (80006bc <Capture_SD+0x1b4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d115      	bne.n	80005ce <Capture_SD+0xc6>
				SD_Buffer[index] = DMA_Buffer[i];
 80005a2:	4b4d      	ldr	r3, [pc, #308]	; (80006d8 <Capture_SD+0x1d0>)
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	881a      	ldrh	r2, [r3, #0]
 80005a8:	484a      	ldr	r0, [pc, #296]	; (80006d4 <Capture_SD+0x1cc>)
 80005aa:	183b      	adds	r3, r7, r0
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	494b      	ldr	r1, [pc, #300]	; (80006dc <Capture_SD+0x1d4>)
 80005b0:	2482      	movs	r4, #130	; 0x82
 80005b2:	00e4      	lsls	r4, r4, #3
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	19c9      	adds	r1, r1, r7
 80005b8:	5c89      	ldrb	r1, [r1, r2]
 80005ba:	4a49      	ldr	r2, [pc, #292]	; (80006e0 <Capture_SD+0x1d8>)
 80005bc:	1912      	adds	r2, r2, r4
 80005be:	19d2      	adds	r2, r2, r7
 80005c0:	54d1      	strb	r1, [r2, r3]
				index++;
 80005c2:	183b      	adds	r3, r7, r0
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	3201      	adds	r2, #1
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	e033      	b.n	8000636 <Capture_SD+0x12e>

			} else if ((DMA_Buffer[i] == 0xD8) & (temp_last == 0xFF)) {//If find the start
 80005ce:	4d42      	ldr	r5, [pc, #264]	; (80006d8 <Capture_SD+0x1d0>)
 80005d0:	197b      	adds	r3, r7, r5
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	4a41      	ldr	r2, [pc, #260]	; (80006dc <Capture_SD+0x1d4>)
 80005d6:	2082      	movs	r0, #130	; 0x82
 80005d8:	00c0      	lsls	r0, r0, #3
 80005da:	1812      	adds	r2, r2, r0
 80005dc:	19d2      	adds	r2, r2, r7
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	3bd8      	subs	r3, #216	; 0xd8
 80005e2:	425a      	negs	r2, r3
 80005e4:	4153      	adcs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4e3e      	ldr	r6, [pc, #248]	; (80006e4 <Capture_SD+0x1dc>)
 80005ea:	19ba      	adds	r2, r7, r6
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	3aff      	subs	r2, #255	; 0xff
 80005f0:	4251      	negs	r1, r2
 80005f2:	414a      	adcs	r2, r1
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	4013      	ands	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d01b      	beq.n	8000636 <Capture_SD+0x12e>
				SD_Buffer[index] = temp_last;
 80005fe:	4c35      	ldr	r4, [pc, #212]	; (80006d4 <Capture_SD+0x1cc>)
 8000600:	193b      	adds	r3, r7, r4
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <Capture_SD+0x1d8>)
 8000606:	1812      	adds	r2, r2, r0
 8000608:	19d2      	adds	r2, r2, r7
 800060a:	19b9      	adds	r1, r7, r6
 800060c:	7809      	ldrb	r1, [r1, #0]
 800060e:	54d1      	strb	r1, [r2, r3]
				SD_Buffer[index+1] = DMA_Buffer[i];
 8000610:	197b      	adds	r3, r7, r5
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	193b      	adds	r3, r7, r4
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4930      	ldr	r1, [pc, #192]	; (80006dc <Capture_SD+0x1d4>)
 800061c:	1809      	adds	r1, r1, r0
 800061e:	19c9      	adds	r1, r1, r7
 8000620:	5c89      	ldrb	r1, [r1, r2]
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <Capture_SD+0x1d8>)
 8000624:	1812      	adds	r2, r2, r0
 8000626:	19d2      	adds	r2, r2, r7
 8000628:	54d1      	strb	r1, [r2, r3]
				index = 2;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2202      	movs	r2, #2
 800062e:	801a      	strh	r2, [r3, #0]
				is_header = true;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <Capture_SD+0x1b4>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
			}
			if ((DMA_Buffer[i] == 0xD9) && (temp_last == 0xFF)) { //If find the end ,break while,
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <Capture_SD+0x1d0>)
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <Capture_SD+0x1d4>)
 800063e:	2182      	movs	r1, #130	; 0x82
 8000640:	00c9      	lsls	r1, r1, #3
 8000642:	1852      	adds	r2, r2, r1
 8000644:	19d2      	adds	r2, r2, r7
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2bd9      	cmp	r3, #217	; 0xd9
 800064a:	d104      	bne.n	8000656 <Capture_SD+0x14e>
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <Capture_SD+0x1dc>)
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	d019      	beq.n	800068a <Capture_SD+0x182>
				break;
			}
			temp_last = DMA_Buffer[i];
 8000656:	4820      	ldr	r0, [pc, #128]	; (80006d8 <Capture_SD+0x1d0>)
 8000658:	183b      	adds	r3, r7, r0
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <Capture_SD+0x1dc>)
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	491e      	ldr	r1, [pc, #120]	; (80006dc <Capture_SD+0x1d4>)
 8000662:	2482      	movs	r4, #130	; 0x82
 8000664:	00e4      	lsls	r4, r4, #3
 8000666:	1909      	adds	r1, r1, r4
 8000668:	19c9      	adds	r1, r1, r7
 800066a:	5c8a      	ldrb	r2, [r1, r2]
 800066c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < BURST_SIZE; i++) {
 800066e:	183b      	adds	r3, r7, r0
 8000670:	881a      	ldrh	r2, [r3, #0]
 8000672:	183b      	adds	r3, r7, r0
 8000674:	3201      	adds	r2, #1
 8000676:	801a      	strh	r2, [r3, #0]
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <Capture_SD+0x1d0>)
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	429a      	cmp	r2, r3
 8000684:	d200      	bcs.n	8000688 <Capture_SD+0x180>
 8000686:	e788      	b.n	800059a <Capture_SD+0x92>
 8000688:	e000      	b.n	800068c <Capture_SD+0x184>
				break;
 800068a:	46c0      	nop			; (mov r8, r8)
		}
		uint8_t BW = SD_Card_Write(&SD_Buffer);
 800068c:	2382      	movs	r3, #130	; 0x82
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	0018      	movs	r0, r3
 8000694:	f000 ff10 	bl	80014b8 <SD_Card_Write>
 8000698:	0002      	movs	r2, r0
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <Capture_SD+0x1e0>)
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	701a      	strb	r2, [r3, #0]
	while (length > 0) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d000      	beq.n	80006a8 <Capture_SD+0x1a0>
 80006a6:	e742      	b.n	800052e <Capture_SD+0x26>
	}
	SD_Card_Close();
 80006a8:	f000 ff1c 	bl	80014e4 <SD_Card_Close>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <Capture_SD+0x1e4>)
 80006b2:	449d      	add	sp, r3
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	fffffbec 	.word	0xfffffbec
 80006bc:	2000025d 	.word	0x2000025d
 80006c0:	08009fd0 	.word	0x08009fd0
 80006c4:	50000800 	.word	0x50000800
 80006c8:	2000025c 	.word	0x2000025c
 80006cc:	fffffe00 	.word	0xfffffe00
 80006d0:	200000ec 	.word	0x200000ec
 80006d4:	0000040a 	.word	0x0000040a
 80006d8:	0000040c 	.word	0x0000040c
 80006dc:	fffffbf8 	.word	0xfffffbf8
 80006e0:	fffffdf8 	.word	0xfffffdf8
 80006e4:	0000040f 	.word	0x0000040f
 80006e8:	00000409 	.word	0x00000409
 80006ec:	00000414 	.word	0x00000414

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 ff01 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f855 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 f981 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f000 f961 	bl	80009c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000706:	f000 f92f 	bl	8000968 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800070a:	f000 f8f5 	bl	80008f8 <MX_SPI1_Init>
  MX_I2C1_Init();
 800070e:	f000 f8b3 	bl	8000878 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000712:	f005 f933 	bl	800597c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <main+0x9c>)
 8000718:	2201      	movs	r2, #1
 800071a:	2120      	movs	r1, #32
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fbf4 	bl	8001f0a <HAL_GPIO_WritePin>

	while (1) {
		SD_Status = SD_Card_Init();
 8000722:	f000 fe95 	bl	8001450 <SD_Card_Init>
 8000726:	0003      	movs	r3, r0
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <main+0xa0>)
 800072c:	701a      	strb	r2, [r3, #0]
		if(!SD_Status){
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <main+0xa0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <main+0x50>
			break;
		}
		Debug_Print("No SD Card");
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0xa4>)
 8000738:	0018      	movs	r0, r3
 800073a:	f000 f9eb 	bl	8000b14 <Debug_Print>
		SD_Status = SD_Card_Init();
 800073e:	e7f0      	b.n	8000722 <main+0x32>
			break;
 8000740:	46c0      	nop			; (mov r8, r8)
	}

	Debug_Print("SD Card Mounted Successfully! \r\n");
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0xa8>)
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f9e5 	bl	8000b14 <Debug_Print>

	ArduCAM_Init(OV2640);
 800074a:	2005      	movs	r0, #5
 800074c:	f000 fc1e 	bl	8000f8c <ArduCAM_Init>
	Debug_Print("ArduCAM Ready! \r\n");
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xac>)
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f9de 	bl	8000b14 <Debug_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	019b      	lsls	r3, r3, #6
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <main+0x9c>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f001 fbb5 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d1f6      	bne.n	8000758 <main+0x68>
			len = SingleCapTransfer();
 800076a:	f000 fc85 	bl	8001078 <SingleCapTransfer>
 800076e:	0003      	movs	r3, r0
 8000770:	607b      	str	r3, [r7, #4]
			Debug_Print("Capture Done! \r\n");
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <main+0xb0>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 f9cd 	bl	8000b14 <Debug_Print>
			Capture_SD(len);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fec3 	bl	8000508 <Capture_SD>
			Debug_Print("Capture Save! \r\n");
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <main+0xb4>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f9c5 	bl	8000b14 <Debug_Print>
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800078a:	e7e5      	b.n	8000758 <main+0x68>
 800078c:	50000800 	.word	0x50000800
 8000790:	20000000 	.word	0x20000000
 8000794:	08009fdc 	.word	0x08009fdc
 8000798:	08009fe8 	.word	0x08009fe8
 800079c:	0800a00c 	.word	0x0800a00c
 80007a0:	0800a020 	.word	0x0800a020
 80007a4:	0800a034 	.word	0x0800a034

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b09d      	sub	sp, #116	; 0x74
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2438      	movs	r4, #56	; 0x38
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2338      	movs	r3, #56	; 0x38
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f008 ff77 	bl	80096ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	2324      	movs	r3, #36	; 0x24
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	0018      	movs	r0, r3
 80007c4:	2314      	movs	r3, #20
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f008 ff6f 	bl	80096ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ce:	003b      	movs	r3, r7
 80007d0:	0018      	movs	r0, r3
 80007d2:	2324      	movs	r3, #36	; 0x24
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f008 ff68 	bl	80096ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xc8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a24      	ldr	r2, [pc, #144]	; (8000874 <SystemClock_Config+0xcc>)
 80007e2:	401a      	ands	r2, r3
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xc8>)
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	0109      	lsls	r1, r1, #4
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	22a0      	movs	r2, #160	; 0xa0
 80007f8:	02d2      	lsls	r2, r2, #11
 80007fa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	193b      	adds	r3, r7, r4
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f991 	bl	8002b2c <HAL_RCC_OscConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800080e:	f000 f9b5 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	2124      	movs	r1, #36	; 0x24
 8000814:	187b      	adds	r3, r7, r1
 8000816:	220f      	movs	r2, #15
 8000818:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2202      	movs	r2, #2
 800081e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2290      	movs	r2, #144	; 0x90
 8000824:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fd3c 	bl	80032b4 <HAL_RCC_ClockConfig>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000840:	f000 f99c 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000844:	003b      	movs	r3, r7
 8000846:	220a      	movs	r2, #10
 8000848:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000856:	003b      	movs	r3, r7
 8000858:	0018      	movs	r0, r3
 800085a:	f002 ff4f 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000862:	f000 f98b 	bl	8000b7c <Error_Handler>
  }
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b01d      	add	sp, #116	; 0x74
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40007000 	.word	0x40007000
 8000874:	ffffe7ff 	.word	0xffffe7ff

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fb45 	bl	8001f44 <HAL_I2C_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f95d 	bl	8000b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 f898 	bl	80029fc <HAL_I2CEx_ConfigAnalogFilter>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f954 	bl	8000b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f8db 	bl	8002a94 <HAL_I2CEx_ConfigDigitalFilter>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f94b 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000098 	.word	0x20000098
 80008f0:	40005400 	.word	0x40005400
 80008f4:	00000509 	.word	0x00000509

080008f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_SPI1_Init+0x68>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <MX_SPI1_Init+0x6c>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_SPI1_Init+0x68>)
 8000904:	2282      	movs	r2, #130	; 0x82
 8000906:	0052      	lsls	r2, r2, #1
 8000908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_SPI1_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_SPI1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_SPI1_Init+0x68>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_SPI1_Init+0x68>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI1_Init+0x68>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_SPI1_Init+0x68>)
 800092c:	2218      	movs	r2, #24
 800092e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_SPI1_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_SPI1_Init+0x68>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_SPI1_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_SPI1_Init+0x68>)
 8000944:	2207      	movs	r2, #7
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_SPI1_Init+0x68>)
 800094a:	0018      	movs	r0, r3
 800094c:	f003 f864 	bl	8003a18 <HAL_SPI_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 f912 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200000ec 	.word	0x200000ec
 8000964:	40013000 	.word	0x40013000

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_USART2_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000974:	22e1      	movs	r2, #225	; 0xe1
 8000976:	0252      	lsls	r2, r2, #9
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f004 fa43 	bl	8004e38 <HAL_UART_Init>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f8e1 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001d4 	.word	0x200001d4
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	200a      	movs	r0, #10
 80009ec:	f000 fec6 	bl	800177c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 fed8 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	2414      	movs	r4, #20
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2314      	movs	r3, #20
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f008 fe49 	bl	80096ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	430a      	orrs	r2, r1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a68:	2102      	movs	r1, #2
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	2202      	movs	r2, #2
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	23a0      	movs	r3, #160	; 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fa41 	bl	8001f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_GPIO_Init+0x10c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	21a0      	movs	r1, #160	; 0xa0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fa3b 	bl	8001f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0192      	lsls	r2, r2, #6
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2284      	movs	r2, #132	; 0x84
 8000aa0:	0392      	lsls	r2, r2, #14
 8000aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_GPIO_Init+0x10c>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f001 f897 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2220      	movs	r2, #32
 8000aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ace:	193a      	adds	r2, r7, r4
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 f884 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SD_CS_Pin;
 8000adc:	0021      	movs	r1, r4
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	22a0      	movs	r2, #160	; 0xa0
 8000ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <MX_GPIO_Init+0x10c>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	0010      	movs	r0, r2
 8000afe:	f001 f871 	bl	8001be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b00b      	add	sp, #44	; 0x2c
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	50000800 	.word	0x50000800

08000b14 <Debug_Print>:

/* USER CODE BEGIN 4 */

void Debug_Print(const char *message) {
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b0c3      	sub	sp, #268	; 0x10c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t TxBuffer[256];

	sprintf(TxBuffer, message);
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	2408      	movs	r4, #8
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f008 fda1 	bl	800966c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) TxBuffer, strlen(TxBuffer),
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff faeb 	bl	8000108 <strlen>
 8000b32:	0003      	movs	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	2301      	movs	r3, #1
 8000b38:	425b      	negs	r3, r3
 8000b3a:	1939      	adds	r1, r7, r4
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <Debug_Print+0x38>)
 8000b3e:	f004 f9cf 	bl	8004ee0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b043      	add	sp, #268	; 0x10c
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	200001d4 	.word	0x200001d4

08000b50 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET); // Exemple avec GPIOB et PIN 12
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_SPI_RxCpltCallback+0x24>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 f9d3 	bl	8001f0a <HAL_GPIO_WritePin>
	DMA_Complet = 1;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_SPI_RxCpltCallback+0x28>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	50000800 	.word	0x50000800
 8000b78:	2000025c 	.word	0x2000025c

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_MspInit+0x24>)
 8000b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x24>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_MspInit+0x24>)
 8000b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_MspInit+0x24>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0549      	lsls	r1, r1, #21
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	240c      	movs	r4, #12
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f008 fd72 	bl	80096ac <memset>
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d128      	bne.n	8000c24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd8:	2102      	movs	r1, #2
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	2202      	movs	r2, #2
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	0021      	movs	r1, r4
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	22c0      	movs	r2, #192	; 0xc0
 8000bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2212      	movs	r2, #18
 8000bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2203      	movs	r2, #3
 8000c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2201      	movs	r2, #1
 8000c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0x84>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f000 ffe7 	bl	8001be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0389      	lsls	r1, r1, #14
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b009      	add	sp, #36	; 0x24
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	50000400 	.word	0x50000400

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	2414      	movs	r4, #20
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	2314      	movs	r3, #20
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f008 fd2e 	bl	80096ac <memset>
  if(hspi->Instance==SPI1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <HAL_SPI_MspInit+0x178>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d000      	beq.n	8000c5c <HAL_SPI_MspInit+0x24>
 8000c5a:	e0a4      	b.n	8000da6 <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5c:	4b55      	ldr	r3, [pc, #340]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c60:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	0149      	lsls	r1, r1, #5
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c76:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c86:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c88:	2102      	movs	r1, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <HAL_SPI_MspInit+0x17c>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	22c0      	movs	r2, #192	; 0xc0
 8000c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2203      	movs	r2, #3
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	193a      	adds	r2, r7, r4
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 ff8f 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2208      	movs	r2, #8
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <HAL_SPI_MspInit+0x180>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f000 ff79 	bl	8001be4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_SPI_MspInit+0x188>)
 8000cf6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fd58 	bl	80017e0 <HAL_DMA_Init>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8000d34:	f7ff ff22 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_SPI_MspInit+0x184>)
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <HAL_SPI_MspInit+0x190>)
 8000d48:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d52:	2210      	movs	r2, #16
 8000d54:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 fd2f 	bl	80017e0 <HAL_DMA_Init>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8000d86:	f7ff fef9 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d8e:	649a      	str	r2, [r3, #72]	; 0x48
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_SPI_MspInit+0x18c>)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2019      	movs	r0, #25
 8000d9c:	f000 fcee 	bl	800177c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000da0:	2019      	movs	r0, #25
 8000da2:	f000 fd00 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b00b      	add	sp, #44	; 0x2c
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	50000400 	.word	0x50000400
 8000dbc:	20000144 	.word	0x20000144
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	2000018c 	.word	0x2000018c
 8000dc8:	40020030 	.word	0x40020030

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	240c      	movs	r4, #12
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f008 fc64 	bl	80096ac <memset>
  if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d129      	bne.n	8000e42 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0289      	lsls	r1, r1, #10
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e14:	0021      	movs	r1, r4
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	220c      	movs	r2, #12
 8000e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2202      	movs	r2, #2
 8000e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2204      	movs	r2, #4
 8000e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	187a      	adds	r2, r7, r1
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fed1 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b009      	add	sp, #36	; 0x24
 8000e48:	bd90      	pop	{r4, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40021000 	.word	0x40021000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 fb94 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fdcd 	bl	8001a2a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fdc9 	bl	8001a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000144 	.word	0x20000144
 8000ea4:	2000018c 	.word	0x2000018c

08000ea8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <SPI1_IRQHandler+0x14>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fc84 	bl	80047bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	200000ec 	.word	0x200000ec

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f008 fbe4 	bl	80096bc <__errno>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	425b      	negs	r3, r3
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	18d2      	adds	r2, r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b006      	add	sp, #24
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20002000 	.word	0x20002000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000260 	.word	0x20000260
 8000f28:	20000a68 	.word	0x20000a68

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff fff6 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f008 fbaf 	bl	80096c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fbc1 	bl	80006f0 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f7c:	0800acac 	.word	0x0800acac
  ldr r2, =_sbss
 8000f80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f84:	20000a68 	.word	0x20000a68

08000f88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_COMP_IRQHandler>
	...

08000f8c <ArduCAM_Init>:
byte sensor_addr = 0x60;
byte m_fmt = JPEG;

uint8_t vid, pid;

void ArduCAM_Init(byte model) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	701a      	strb	r2, [r3, #0]
	write_reg(0x07, 0x80);
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	2007      	movs	r0, #7
 8000f9c:	f000 f922 	bl	80011e4 <write_reg>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f000 fb1b 	bl	80015dc <HAL_Delay>
	write_reg(0x07, 0x00);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2007      	movs	r0, #7
 8000faa:	f000 f91b 	bl	80011e4 <write_reg>
	HAL_Delay(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f000 fb14 	bl	80015dc <HAL_Delay>

	set_format(JPEG);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 f885 	bl	80010c4 <set_format>

	wrSensorReg8_8(0xff, 0x01);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	20ff      	movs	r0, #255	; 0xff
 8000fbe:	f000 f9a1 	bl	8001304 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <ArduCAM_Init+0xcc>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f000 f9c6 	bl	8001358 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <ArduCAM_Init+0xd0>)
 8000fce:	0019      	movs	r1, r3
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f000 f9c1 	bl	8001358 <rdSensorReg8_8>
	if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <ArduCAM_Init+0xcc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b26      	cmp	r3, #38	; 0x26
 8000fdc:	d00c      	beq.n	8000ff8 <ArduCAM_Init+0x6c>
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <ArduCAM_Init+0xd0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b41      	cmp	r3, #65	; 0x41
 8000fe4:	d103      	bne.n	8000fee <ArduCAM_Init+0x62>
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <ArduCAM_Init+0xd0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b42      	cmp	r3, #66	; 0x42
 8000fec:	d004      	beq.n	8000ff8 <ArduCAM_Init+0x6c>
		//Serial.println(F("ACK CMD Can't find OV2640 module! END"));
		HAL_Delay(1000);
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 faf2 	bl	80015dc <HAL_Delay>
	} else {
		//Serial.println(F("ACK CMD OV2640 detected. END"));break;
	}

	wrSensorReg8_8(0xff, 0x01);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	f000 f982 	bl	8001304 <wrSensorReg8_8>
	wrSensorReg8_8(0x12, 0x80);
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	2012      	movs	r0, #18
 8001004:	f000 f97e 	bl	8001304 <wrSensorReg8_8>
	HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f000 fae7 	bl	80015dc <HAL_Delay>
	if (m_fmt == JPEG) {
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <ArduCAM_Init+0xd4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d118      	bne.n	8001048 <ArduCAM_Init+0xbc>
		wrSensorRegs8_8(OV2640_JPEG_INIT);
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <ArduCAM_Init+0xd8>)
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f9d7 	bl	80013cc <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_YUV422);
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <ArduCAM_Init+0xdc>)
 8001020:	0018      	movs	r0, r3
 8001022:	f000 f9d3 	bl	80013cc <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_JPEG);
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <ArduCAM_Init+0xe0>)
 8001028:	0018      	movs	r0, r3
 800102a:	f000 f9cf 	bl	80013cc <wrSensorRegs8_8>
		wrSensorReg8_8(0xff, 0x01);
 800102e:	2101      	movs	r1, #1
 8001030:	20ff      	movs	r0, #255	; 0xff
 8001032:	f000 f967 	bl	8001304 <wrSensorReg8_8>
		wrSensorReg8_8(0x15, 0x00);
 8001036:	2100      	movs	r1, #0
 8001038:	2015      	movs	r0, #21
 800103a:	f000 f963 	bl	8001304 <wrSensorReg8_8>
		wrSensorRegs8_8(OV2640_320x240_JPEG);
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <ArduCAM_Init+0xe4>)
 8001040:	0018      	movs	r0, r3
 8001042:	f000 f9c3 	bl	80013cc <wrSensorRegs8_8>
		//wrSensorReg8_8(0xff, 0x00);
		//wrSensorReg8_8(0x44, 0x32);
	} else {
		wrSensorRegs8_8(OV2640_QVGA);
	}
}
 8001046:	e003      	b.n	8001050 <ArduCAM_Init+0xc4>
		wrSensorRegs8_8(OV2640_QVGA);
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <ArduCAM_Init+0xe8>)
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f9be 	bl	80013cc <wrSensorRegs8_8>
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000264 	.word	0x20000264
 800105c:	20000265 	.word	0x20000265
 8001060:	20000009 	.word	0x20000009
 8001064:	0800a3d4 	.word	0x0800a3d4
 8001068:	0800a6d0 	.word	0x0800a6d0
 800106c:	0800a6f8 	.word	0x0800a6f8
 8001070:	0800a71c 	.word	0x0800a71c
 8001074:	0800a0cc 	.word	0x0800a0cc

08001078 <SingleCapTransfer>:

uint32_t SingleCapTransfer(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	uint32_t length = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]

	flush_fifo();
 8001082:	f000 f8dd 	bl	8001240 <flush_fifo>
	HAL_Delay(1000);
 8001086:	23fa      	movs	r3, #250	; 0xfa
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	0018      	movs	r0, r3
 800108c:	f000 faa6 	bl	80015dc <HAL_Delay>
	flush_fifo();
 8001090:	f000 f8d6 	bl	8001240 <flush_fifo>
	clear_fifo_flag();
 8001094:	f000 f8e6 	bl	8001264 <clear_fifo_flag>
	start_capture();
 8001098:	f000 f8db 	bl	8001252 <start_capture>
	while (!get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK));
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	2108      	movs	r1, #8
 80010a0:	2041      	movs	r0, #65	; 0x41
 80010a2:	f000 f90e 	bl	80012c2 <get_bit>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d0f9      	beq.n	800109e <SingleCapTransfer+0x26>

	length = (int) read_fifo_length();
 80010aa:	f000 f8e4 	bl	8001276 <read_fifo_length>
 80010ae:	0003      	movs	r3, r0
 80010b0:	607b      	str	r3, [r7, #4]
	length--;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
	return length;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <set_format>:

void set_format(byte fmt) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	701a      	strb	r2, [r3, #0]
	if (fmt == BMP)
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <set_format+0x1c>
		m_fmt = BMP;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <set_format+0x2c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	else
		m_fmt = JPEG;
}
 80010de:	e002      	b.n	80010e6 <set_format+0x22>
		m_fmt = JPEG;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <set_format+0x2c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000009 	.word	0x20000009

080010f4 <bus_read>:

void set_frame(byte nbr) {
	write_reg(ARDUCHIP_FRAMES, nbr - 1);
}

uint8_t bus_read(uint8_t address) {
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
	uint8_t txData = address;
 8001100:	250f      	movs	r5, #15
 8001102:	197b      	adds	r3, r7, r5
 8001104:	1dfa      	adds	r2, r7, #7
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	701a      	strb	r2, [r3, #0]
	uint8_t rxData = 0x00;
 800110a:	240e      	movs	r4, #14
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]

	// Abaisse le signal CS (chip select)
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <bus_read+0x60>)
 8001114:	2200      	movs	r2, #0
 8001116:	2120      	movs	r1, #32
 8001118:	0018      	movs	r0, r3
 800111a:	f000 fef6 	bl	8001f0a <HAL_GPIO_WritePin>

	// Envoi de l'adresse via SPI
	HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	1979      	adds	r1, r7, r5
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <bus_read+0x64>)
 8001126:	2201      	movs	r2, #1
 8001128:	f002 fd0a 	bl	8003b40 <HAL_SPI_Transmit>

	//HAL_Delay(1);

	// Lecture de la donnée via SPI
	HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	1939      	adds	r1, r7, r4
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <bus_read+0x64>)
 8001134:	2201      	movs	r2, #1
 8001136:	f002 fe61 	bl	8003dfc <HAL_SPI_Receive>

	//HAL_Delay(1);

	// Libère le signal CS
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <bus_read+0x60>)
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fee2 	bl	8001f0a <HAL_GPIO_WritePin>

	return rxData;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bdb0      	pop	{r4, r5, r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	50000800 	.word	0x50000800
 8001158:	200000ec 	.word	0x200000ec

0800115c <bus_write>:

uint8_t bus_write(uint8_t address, uint8_t value) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	0002      	movs	r2, r0
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	1c0a      	adds	r2, r1, #0
 800116c:	701a      	strb	r2, [r3, #0]
	// Abaisse le signal CS (chip select)
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <bus_write+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	2120      	movs	r1, #32
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fec8 	bl	8001f0a <HAL_GPIO_WritePin>

	// Attente de 10 millisecondes
	//HAL_Delay(1);

	// Envoi de l'adresse via SPI
	HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 800117a:	2301      	movs	r3, #1
 800117c:	425b      	negs	r3, r3
 800117e:	1df9      	adds	r1, r7, #7
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <bus_write+0x54>)
 8001182:	2201      	movs	r2, #1
 8001184:	f002 fcdc 	bl	8003b40 <HAL_SPI_Transmit>

	// Envoi de la valeur via SPI
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001188:	2301      	movs	r3, #1
 800118a:	425b      	negs	r3, r3
 800118c:	1db9      	adds	r1, r7, #6
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <bus_write+0x54>)
 8001190:	2201      	movs	r2, #1
 8001192:	f002 fcd5 	bl	8003b40 <HAL_SPI_Transmit>

	// Attente de 10 millisecondes
	//HAL_Delay(1);

	// Libère le signal CS
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <bus_write+0x50>)
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	0018      	movs	r0, r3
 800119e:	f000 feb4 	bl	8001f0a <HAL_GPIO_WritePin>

	return 1;  // Indique que l'opération s'est bien déroulée
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	50000800 	.word	0x50000800
 80011b0:	200000ec 	.word	0x200000ec

080011b4 <read_reg>:

uint8_t read_reg(uint8_t addr) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	0002      	movs	r2, r0
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	227f      	movs	r2, #127	; 0x7f
 80011c6:	4013      	ands	r3, r2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	250f      	movs	r5, #15
 80011cc:	197c      	adds	r4, r7, r5
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff90 	bl	80010f4 <bus_read>
 80011d4:	0003      	movs	r3, r0
 80011d6:	7023      	strb	r3, [r4, #0]
	return data;
 80011d8:	197b      	adds	r3, r7, r5
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}

080011e4 <write_reg>:

void write_reg(uint8_t addr, uint8_t data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	1c0a      	adds	r2, r1, #0
 80011f4:	701a      	strb	r2, [r3, #0]
	bus_write(addr | 0x80, data);
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4252      	negs	r2, r2
 80011fe:	4313      	orrs	r3, r2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0019      	movs	r1, r3
 8001208:	0010      	movs	r0, r2
 800120a:	f7ff ffa7 	bl	800115c <bus_write>
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <set_fifo_burst>:
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}

void set_fifo_burst() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	uint8_t value = 0x3C;
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	223c      	movs	r2, #60	; 0x3c
 8001222:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	1df9      	adds	r1, r7, #7
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <set_fifo_burst+0x24>)
 800122c:	2201      	movs	r2, #1
 800122e:	f002 fc87 	bl	8003b40 <HAL_SPI_Transmit>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	200000ec 	.word	0x200000ec

08001240 <flush_fifo>:

void flush_fifo(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001244:	2101      	movs	r1, #1
 8001246:	2004      	movs	r0, #4
 8001248:	f7ff ffcc 	bl	80011e4 <write_reg>
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <start_capture>:

void start_capture(void) {
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8001256:	2102      	movs	r1, #2
 8001258:	2004      	movs	r0, #4
 800125a:	f7ff ffc3 	bl	80011e4 <write_reg>
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <clear_fifo_flag>:

void clear_fifo_flag(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001268:	2101      	movs	r1, #1
 800126a:	2004      	movs	r0, #4
 800126c:	f7ff ffba 	bl	80011e4 <write_reg>
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <read_fifo_length>:

uint32_t read_fifo_length(void) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
	uint32_t len1, len2, len3, len = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 8001280:	2042      	movs	r0, #66	; 0x42
 8001282:	f7ff ff97 	bl	80011b4 <read_reg>
 8001286:	0003      	movs	r3, r0
 8001288:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 800128a:	2043      	movs	r0, #67	; 0x43
 800128c:	f7ff ff92 	bl	80011b4 <read_reg>
 8001290:	0003      	movs	r3, r0
 8001292:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8001294:	2044      	movs	r0, #68	; 0x44
 8001296:	f7ff ff8d 	bl	80011b4 <read_reg>
 800129a:	0003      	movs	r3, r0
 800129c:	001a      	movs	r2, r3
 800129e:	237f      	movs	r3, #127	; 0x7f
 80012a0:	4013      	ands	r3, r2
 80012a2:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	431a      	orrs	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	0a5b      	lsrs	r3, r3, #9
 80012b6:	60fb      	str	r3, [r7, #12]
	return len;
 80012b8:	68fb      	ldr	r3, [r7, #12]
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <get_bit>:
	temp = read_reg(addr);
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit) {
 80012c2:	b5b0      	push	{r4, r5, r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	0002      	movs	r2, r0
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	1c0a      	adds	r2, r1, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = read_reg(addr);
 80012d4:	250f      	movs	r5, #15
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ff69 	bl	80011b4 <read_reg>
 80012e2:	0003      	movs	r3, r0
 80012e4:	7023      	strb	r3, [r4, #0]
	temp = temp & bit;
 80012e6:	0028      	movs	r0, r5
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	183a      	adds	r2, r7, r0
 80012ec:	1db9      	adds	r1, r7, #6
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	7809      	ldrb	r1, [r1, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
	return temp;
 80012f6:	183b      	adds	r3, r7, r0
 80012f8:	781b      	ldrb	r3, [r3, #0]
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001304 <wrSensorReg8_8>:
		wrSensorRegs16_8(ov5642_320x240);
		break;
	}
}

byte wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	0002      	movs	r2, r0
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	1dbb      	adds	r3, r7, #6
 8001312:	1c0a      	adds	r2, r1, #0
 8001314:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1); // Temporisation en millisecondes pour laisser le temps au capteur
 8001316:	2001      	movs	r0, #1
 8001318:	f000 f960 	bl	80015dc <HAL_Delay>
	uint8_t data[2] = { regID, regDat };
 800131c:	200c      	movs	r0, #12
 800131e:	183b      	adds	r3, r7, r0
 8001320:	1dfa      	adds	r2, r7, #7
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	183b      	adds	r3, r7, r0
 8001328:	1dba      	adds	r2, r7, #6
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	705a      	strb	r2, [r3, #1]
	//data[0] = regID; // Première valeur de 8 bits
	//data[1] = regDat; // Deuxième valeur de 8 bits

	// Démarre la transmission en envoyant l'adresse du capteur avec HAL I2C
	HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &data, 2, 1000);
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <wrSensorReg8_8+0x4c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b299      	uxth	r1, r3
 8001334:	183a      	adds	r2, r7, r0
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <wrSensorReg8_8+0x50>)
 8001338:	23fa      	movs	r3, #250	; 0xfa
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2302      	movs	r3, #2
 8001340:	f000 fe96 	bl	8002070 <HAL_I2C_Master_Transmit>

	// Envoie la valeur du registre au capteur
	//HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regDat, 1, HAL_MAX_DELAY);

	return 0;  // Succès
 8001344:	2300      	movs	r3, #0
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000008 	.word	0x20000008
 8001354:	20000098 	.word	0x20000098

08001358 <rdSensorReg8_8>:

byte rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af02      	add	r7, sp, #8
 800135e:	0002      	movs	r2, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);  // Petit délai pour la stabilité du bus
 8001366:	200a      	movs	r0, #10
 8001368:	f000 f938 	bl	80015dc <HAL_Delay>

	// Envoi de l'adresse du capteur en mode écriture et ID du registre
	if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY)
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <rdSensorReg8_8+0x6c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b299      	uxth	r1, r3
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <rdSensorReg8_8+0x70>)
 8001376:	2301      	movs	r3, #1
 8001378:	425b      	negs	r3, r3
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	f000 fe77 	bl	8002070 <HAL_I2C_Master_Transmit>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <rdSensorReg8_8+0x32>
			!= HAL_OK) {
		return 1;  // Erreur lors de l'écriture de l'adresse
 8001386:	2301      	movs	r3, #1
 8001388:	e018      	b.n	80013bc <rdSensorReg8_8+0x64>
	}

	HAL_Delay(1);  // Délai pour la synchronisation du bus
 800138a:	2001      	movs	r0, #1
 800138c:	f000 f926 	bl	80015dc <HAL_Delay>

	// Relance de l'I2C avec l'adresse du capteur en mode lecture
	if (HAL_I2C_Master_Receive(&hi2c1, sensor_addr | 0x01, regDat, 1,
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <rdSensorReg8_8+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	4313      	orrs	r3, r2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	b299      	uxth	r1, r3
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	480a      	ldr	r0, [pc, #40]	; (80013c8 <rdSensorReg8_8+0x70>)
 80013a0:	2301      	movs	r3, #1
 80013a2:	425b      	negs	r3, r3
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f000 ff6a 	bl	8002280 <HAL_I2C_Master_Receive>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <rdSensorReg8_8+0x5c>
			HAL_MAX_DELAY) != HAL_OK) {
		return 2;  // Erreur lors de la lecture
 80013b0:	2302      	movs	r3, #2
 80013b2:	e003      	b.n	80013bc <rdSensorReg8_8+0x64>
	}

	HAL_Delay(1);  // Délai pour s'assurer de la bonne fin de la transaction
 80013b4:	2001      	movs	r0, #1
 80013b6:	f000 f911 	bl	80015dc <HAL_Delay>

	return 0;  // Lecture réussie
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000098 	.word	0x20000098

080013cc <wrSensorRegs8_8>:

// I2C Array Write 8-bit address, 8-bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	int err = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
	uint16_t reg_addr = 0;
 80013d8:	2312      	movs	r3, #18
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
	uint16_t reg_val = 0;
 80013e0:	2310      	movs	r3, #16
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	801a      	strh	r2, [r3, #0]
	const struct sensor_reg *next = reglist;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60fb      	str	r3, [r7, #12]

	while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 80013ec:	e020      	b.n	8001430 <wrSensorRegs8_8+0x64>
	{
		reg_addr = next->reg;
 80013ee:	2112      	movs	r1, #18
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	801a      	strh	r2, [r3, #0]
		reg_val = next->val;
 80013f8:	2010      	movs	r0, #16
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	8852      	ldrh	r2, [r2, #2]
 8001400:	801a      	strh	r2, [r3, #0]

		err = wrSensorReg8_8(reg_addr, reg_val); // Écriture dans le registre
 8001402:	187b      	adds	r3, r7, r1
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	183b      	adds	r3, r7, r0
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	0019      	movs	r1, r3
 8001410:	0010      	movs	r0, r2
 8001412:	f7ff ff77 	bl	8001304 <wrSensorReg8_8>
 8001416:	0003      	movs	r3, r0
 8001418:	617b      	str	r3, [r7, #20]
		if (err != 0) {
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <wrSensorRegs8_8+0x58>
			return err; // Retourne l'erreur immédiatement si une écriture échoue
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	e010      	b.n	8001446 <wrSensorRegs8_8+0x7a>
		}

		HAL_Delay(1); // Pause de 1 ms pour garantir la stabilité du bus I2C
 8001424:	2001      	movs	r0, #1
 8001426:	f000 f8d9 	bl	80015dc <HAL_Delay>

		next++; // Passe au prochain registre
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
	while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001430:	2312      	movs	r3, #18
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	2bff      	cmp	r3, #255	; 0xff
 8001438:	d1d9      	bne.n	80013ee <wrSensorRegs8_8+0x22>
 800143a:	2310      	movs	r3, #16
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	2bff      	cmp	r3, #255	; 0xff
 8001442:	d1d4      	bne.n	80013ee <wrSensorRegs8_8+0x22>
	}

	return err; // Retourne 0 si toutes les écritures sont réussies
 8001444:	697b      	ldr	r3, [r7, #20]
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b006      	add	sp, #24
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <SD_Card_Init>:
UINT RWC, WWC; // Read/Write Word Counter
DWORD FreeClusters;
uint32_t TotalSize, FreeSpace;
char RW_Buffer[1024];

int SD_Card_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, "", 1);
 8001454:	4909      	ldr	r1, [pc, #36]	; (800147c <SD_Card_Init+0x2c>)
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SD_Card_Init+0x30>)
 8001458:	2201      	movs	r2, #1
 800145a:	0018      	movs	r0, r3
 800145c:	f007 fb28 	bl	8008ab0 <f_mount>
 8001460:	0003      	movs	r3, r0
 8001462:	001a      	movs	r2, r3
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <SD_Card_Init+0x34>)
 8001466:	701a      	strb	r2, [r3, #0]
	if (FR_Status != FR_OK) {
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <SD_Card_Init+0x34>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SD_Card_Init+0x24>
		return 1;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <SD_Card_Init+0x26>
	} else {
		return 0;
 8001474:	2300      	movs	r3, #0
	}
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800a048 	.word	0x0800a048
 8001480:	20000268 	.word	0x20000268
 8001484:	200006cc 	.word	0x200006cc

08001488 <SD_Card_Open>:
	f_write(&Fil, buf, sizeof(buf), &WWC);
	f_close(&Fil);
	return 0;
}

int SD_Card_Open(const char *file){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	FR_Status = f_open(&Fil, file, FA_WRITE | FA_OPEN_APPEND);
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SD_Card_Open+0x28>)
 8001494:	2232      	movs	r2, #50	; 0x32
 8001496:	0018      	movs	r0, r3
 8001498:	f007 fb56 	bl	8008b48 <f_open>
 800149c:	0003      	movs	r3, r0
 800149e:	001a      	movs	r2, r3
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SD_Card_Open+0x2c>)
 80014a2:	701a      	strb	r2, [r3, #0]
	return FR_Status;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <SD_Card_Open+0x2c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000049c 	.word	0x2000049c
 80014b4:	200006cc 	.word	0x200006cc

080014b8 <SD_Card_Write>:

int SD_Card_Write(uint8_t* buf) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	// Write Data To The Text File
	f_write(&Fil, buf, 512, &WWC);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <SD_Card_Write+0x24>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <SD_Card_Write+0x28>)
 80014ca:	f007 fd31 	bl	8008f30 <f_write>
	return WWC;
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <SD_Card_Write+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	200006d0 	.word	0x200006d0
 80014e0:	2000049c 	.word	0x2000049c

080014e4 <SD_Card_Close>:

void SD_Card_Close(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	// Close The File
	f_close(&Fil);
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <SD_Card_Close+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f007 ff23 	bl	8009336 <f_close>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	2000049c 	.word	0x2000049c

080014fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_Init+0x3c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Init+0x3c>)
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001514:	2000      	movs	r0, #0
 8001516:	f000 f811 	bl	800153c <HAL_InitTick>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d003      	beq.n	8001526 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e001      	b.n	800152a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001526:	f7ff fb2f 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_InitTick+0x5c>)
 8001546:	681c      	ldr	r4, [r3, #0]
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_InitTick+0x60>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	0019      	movs	r1, r3
 800154e:	23fa      	movs	r3, #250	; 0xfa
 8001550:	0098      	lsls	r0, r3, #2
 8001552:	f7fe fdeb 	bl	800012c <__udivsi3>
 8001556:	0003      	movs	r3, r0
 8001558:	0019      	movs	r1, r3
 800155a:	0020      	movs	r0, r4
 800155c:	f7fe fde6 	bl	800012c <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f92f 	bl	80017c6 <HAL_SYSTICK_Config>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e00f      	b.n	8001590 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d80b      	bhi.n	800158e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2301      	movs	r3, #1
 800157a:	425b      	negs	r3, r3
 800157c:	2200      	movs	r2, #0
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8fc 	bl	800177c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_InitTick+0x64>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b003      	add	sp, #12
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	20000004 	.word	0x20000004
 800159c:	20000010 	.word	0x20000010
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	18d2      	adds	r2, r2, r3
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_IncTick+0x20>)
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	20000010 	.word	0x20000010
 80015c4:	200006d4 	.word	0x200006d4

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	200006d4 	.word	0x200006d4

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	001a      	movs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	f7ff ffe0 	bl	80015c8 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	20000010 	.word	0x20000010

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	0002      	movs	r2, r0
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b7f      	cmp	r3, #127	; 0x7f
 8001636:	d809      	bhi.n	800164c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	231f      	movs	r3, #31
 8001640:	401a      	ands	r2, r3
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_EnableIRQ+0x30>)
 8001644:	2101      	movs	r1, #1
 8001646:	4091      	lsls	r1, r2
 8001648:	000a      	movs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
  }
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	0002      	movs	r2, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b7f      	cmp	r3, #127	; 0x7f
 800166c:	d828      	bhi.n	80016c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166e:	4a2f      	ldr	r2, [pc, #188]	; (800172c <__NVIC_SetPriority+0xd4>)
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	33c0      	adds	r3, #192	; 0xc0
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	589b      	ldr	r3, [r3, r2]
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	0011      	movs	r1, r2
 8001684:	2203      	movs	r2, #3
 8001686:	400a      	ands	r2, r1
 8001688:	00d2      	lsls	r2, r2, #3
 800168a:	21ff      	movs	r1, #255	; 0xff
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	43d2      	mvns	r2, r2
 8001692:	401a      	ands	r2, r3
 8001694:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	22ff      	movs	r2, #255	; 0xff
 800169c:	401a      	ands	r2, r3
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	0018      	movs	r0, r3
 80016a4:	2303      	movs	r3, #3
 80016a6:	4003      	ands	r3, r0
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ac:	481f      	ldr	r0, [pc, #124]	; (800172c <__NVIC_SetPriority+0xd4>)
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	430a      	orrs	r2, r1
 80016b8:	33c0      	adds	r3, #192	; 0xc0
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016be:	e031      	b.n	8001724 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <__NVIC_SetPriority+0xd8>)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	0019      	movs	r1, r3
 80016c8:	230f      	movs	r3, #15
 80016ca:	400b      	ands	r3, r1
 80016cc:	3b08      	subs	r3, #8
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3306      	adds	r3, #6
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	3304      	adds	r3, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1dfa      	adds	r2, r7, #7
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	0011      	movs	r1, r2
 80016e0:	2203      	movs	r2, #3
 80016e2:	400a      	ands	r2, r1
 80016e4:	00d2      	lsls	r2, r2, #3
 80016e6:	21ff      	movs	r1, #255	; 0xff
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	019b      	lsls	r3, r3, #6
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	401a      	ands	r2, r3
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	2303      	movs	r3, #3
 8001702:	4003      	ands	r3, r0
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <__NVIC_SetPriority+0xd8>)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	001c      	movs	r4, r3
 8001710:	230f      	movs	r3, #15
 8001712:	4023      	ands	r3, r4
 8001714:	3b08      	subs	r3, #8
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	430a      	orrs	r2, r1
 800171a:	3306      	adds	r3, #6
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	18c3      	adds	r3, r0, r3
 8001720:	3304      	adds	r3, #4
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b003      	add	sp, #12
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	045b      	lsls	r3, r3, #17
 8001744:	429a      	cmp	r2, r3
 8001746:	d301      	bcc.n	800174c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001748:	2301      	movs	r3, #1
 800174a:	e010      	b.n	800176e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <SysTick_Config+0x44>)
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	3a01      	subs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001754:	2301      	movs	r3, #1
 8001756:	425b      	negs	r3, r3
 8001758:	2103      	movs	r1, #3
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff ff7c 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x44>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x44>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	210f      	movs	r1, #15
 8001788:	187b      	adds	r3, r7, r1
 800178a:	1c02      	adds	r2, r0, #0
 800178c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	187b      	adds	r3, r7, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b004      	add	sp, #16
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	0002      	movs	r2, r0
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ff33 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ffaf 	bl	8001734 <SysTick_Config>
 80017d6:	0003      	movs	r3, r0
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e061      	b.n	80018b6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_DMA_Init+0xe0>)
 80017f8:	4694      	mov	ip, r2
 80017fa:	4463      	add	r3, ip
 80017fc:	2114      	movs	r1, #20
 80017fe:	0018      	movs	r0, r3
 8001800:	f7fe fc94 	bl	800012c <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <HAL_DMA_Init+0xe4>)
 8001810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2225      	movs	r2, #37	; 0x25
 8001816:	2102      	movs	r1, #2
 8001818:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <HAL_DMA_Init+0xe8>)
 8001826:	4013      	ands	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	429a      	cmp	r2, r3
 800186a:	d018      	beq.n	800189e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_DMA_Init+0xec>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	211c      	movs	r1, #28
 8001876:	400b      	ands	r3, r1
 8001878:	210f      	movs	r1, #15
 800187a:	4099      	lsls	r1, r3
 800187c:	000b      	movs	r3, r1
 800187e:	43d9      	mvns	r1, r3
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_DMA_Init+0xec>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_DMA_Init+0xec>)
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	201c      	movs	r0, #28
 8001894:	4003      	ands	r3, r0
 8001896:	409a      	lsls	r2, r3
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_DMA_Init+0xec>)
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2225      	movs	r2, #37	; 0x25
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	bffdfff8 	.word	0xbffdfff8
 80018c4:	40020000 	.word	0x40020000
 80018c8:	ffff800f 	.word	0xffff800f
 80018cc:	400200a8 	.word	0x400200a8

080018d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2317      	movs	r3, #23
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2224      	movs	r2, #36	; 0x24
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Start_IT+0x24>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e04f      	b.n	8001994 <HAL_DMA_Start_IT+0xc4>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2101      	movs	r1, #1
 80018fa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2225      	movs	r2, #37	; 0x25
 8001900:	5c9b      	ldrb	r3, [r3, r2]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d13a      	bne.n	800197e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2225      	movs	r2, #37	; 0x25
 800190c:	2102      	movs	r1, #2
 800190e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f92a 	bl	8001b86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	210e      	movs	r1, #14
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e00f      	b.n	800196c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2104      	movs	r1, #4
 8001958:	438a      	bics	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	210a      	movs	r1, #10
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2224      	movs	r2, #36	; 0x24
 8001982:	2100      	movs	r1, #0
 8001984:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001986:	2317      	movs	r3, #23
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800198e:	2317      	movs	r3, #23
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b006      	add	sp, #24
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	210f      	movs	r1, #15
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2225      	movs	r2, #37	; 0x25
 80019b0:	5c9b      	ldrb	r3, [r3, r2]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d006      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e02a      	b.n	8001a1c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	210e      	movs	r1, #14
 80019d2:	438a      	bics	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	438a      	bics	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	221c      	movs	r2, #28
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2101      	movs	r1, #1
 80019f4:	4091      	lsls	r1, r2
 80019f6:	000a      	movs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2225      	movs	r2, #37	; 0x25
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2224      	movs	r2, #36	; 0x24
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	0010      	movs	r0, r2
 8001a1a:	4798      	blx	r3
    }
  }
  return status;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	781b      	ldrb	r3, [r3, #0]
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	221c      	movs	r2, #28
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	d026      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x7a>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d022      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2220      	movs	r2, #32
 8001a66:	4013      	ands	r3, r2
 8001a68:	d107      	bne.n	8001a7a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2104      	movs	r1, #4
 8001a76:	438a      	bics	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	221c      	movs	r2, #28
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2104      	movs	r1, #4
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x6e>
 8001a96:	e071      	b.n	8001b7c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001aa2:	e06b      	b.n	8001b7c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	221c      	movs	r2, #28
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2202      	movs	r2, #2
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d02d      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xea>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d029      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d10b      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	210a      	movs	r1, #10
 8001ad8:	438a      	bics	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2225      	movs	r2, #37	; 0x25
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	221c      	movs	r2, #28
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	2102      	movs	r1, #2
 8001af2:	4091      	lsls	r1, r2
 8001af4:	000a      	movs	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2224      	movs	r2, #36	; 0x24
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d039      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	0010      	movs	r0, r2
 8001b10:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b12:	e033      	b.n	8001b7c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	221c      	movs	r2, #28
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	d02a      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x154>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d026      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	210e      	movs	r1, #14
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	221c      	movs	r2, #28
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4091      	lsls	r1, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2225      	movs	r2, #37	; 0x25
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2224      	movs	r2, #36	; 0x24
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	0010      	movs	r0, r2
 8001b7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46c0      	nop			; (mov r8, r8)
}
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	221c      	movs	r2, #28
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4091      	lsls	r1, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d108      	bne.n	8001bca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc8:	e007      	b.n	8001bda <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	60da      	str	r2, [r3, #12]
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bfa:	e14f      	b.n	8001e9c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4091      	lsls	r1, r2
 8001c06:	000a      	movs	r2, r1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <HAL_GPIO_Init+0x30>
 8001c12:	e140      	b.n	8001e96 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d130      	bne.n	8001c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	0013      	movs	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c62:	2201      	movs	r2, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	2201      	movs	r2, #1
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2203      	movs	r2, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d017      	beq.n	8001cca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	58d3      	ldr	r3, [r2, r3]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	4013      	ands	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2107      	movs	r1, #7
 8001d02:	400b      	ands	r3, r1
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	6939      	ldr	r1, [r7, #16]
 8001d1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <HAL_GPIO_Init+0x17c>
 8001d5e:	e09a      	b.n	8001e96 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	589b      	ldr	r3, [r3, r2]
 8001d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	409a      	lsls	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	23a0      	movs	r3, #160	; 0xa0
 8001d94:	05db      	lsls	r3, r3, #23
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x1ea>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <HAL_GPIO_Init+0x2d8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x1e6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a46      	ldr	r2, [pc, #280]	; (8001ec0 <HAL_GPIO_Init+0x2dc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x1e2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a45      	ldr	r2, [pc, #276]	; (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x1de>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a44      	ldr	r2, [pc, #272]	; (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x1da>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e008      	b.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e004      	b.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de0:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	035b      	lsls	r3, r3, #13
 8001e06:	4013      	ands	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	4013      	ands	r3, r2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	029b      	lsls	r3, r3, #10
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	025b      	lsls	r3, r3, #9
 8001e84:	4013      	ands	r3, r2
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	1e13      	subs	r3, r2, #0
 8001ea6:	d000      	beq.n	8001eaa <HAL_GPIO_Init+0x2c6>
 8001ea8:	e6a8      	b.n	8001bfc <HAL_GPIO_Init+0x18>
  }
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	50000400 	.word	0x50000400
 8001ec0:	50000800 	.word	0x50000800
 8001ec4:	50000c00 	.word	0x50000c00
 8001ec8:	50001c00 	.word	0x50001c00
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	000a      	movs	r2, r1
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	1cba      	adds	r2, r7, #2
 8001ee4:	8812      	ldrh	r2, [r2, #0]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001eea:	230f      	movs	r3, #15
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001efc:	230f      	movs	r3, #15
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	781b      	ldrb	r3, [r3, #0]
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	0008      	movs	r0, r1
 8001f14:	0011      	movs	r1, r2
 8001f16:	1cbb      	adds	r3, r7, #2
 8001f18:	1c02      	adds	r2, r0, #0
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	1c7b      	adds	r3, r7, #1
 8001f1e:	1c0a      	adds	r2, r1, #0
 8001f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f22:	1c7b      	adds	r3, r7, #1
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	1cbb      	adds	r3, r7, #2
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f32:	e003      	b.n	8001f3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001f34:	1cbb      	adds	r3, r7, #2
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e082      	b.n	800205c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2241      	movs	r2, #65	; 0x41
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	2100      	movs	r1, #0
 8001f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fe1f 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2241      	movs	r2, #65	; 0x41
 8001f76:	2124      	movs	r1, #36	; 0x24
 8001f78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	438a      	bics	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_I2C_Init+0x120>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4931      	ldr	r1, [pc, #196]	; (8002068 <HAL_I2C_Init+0x124>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0209      	lsls	r1, r1, #8
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e007      	b.n	8001fd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2184      	movs	r1, #132	; 0x84
 8001fcc:	0209      	lsls	r1, r1, #8
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d104      	bne.n	8001fe4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <HAL_I2C_Init+0x128>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	491a      	ldr	r1, [pc, #104]	; (8002068 <HAL_I2C_Init+0x124>)
 8002000:	400a      	ands	r2, r1
 8002002:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	431a      	orrs	r2, r3
 800200e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69d9      	ldr	r1, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2241      	movs	r2, #65	; 0x41
 8002048:	2120      	movs	r1, #32
 800204a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2242      	movs	r2, #66	; 0x42
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f0ffffff 	.word	0xf0ffffff
 8002068:	ffff7fff 	.word	0xffff7fff
 800206c:	02008000 	.word	0x02008000

08002070 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	0008      	movs	r0, r1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	0019      	movs	r1, r3
 800207e:	230a      	movs	r3, #10
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	1c02      	adds	r2, r0, #0
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	2308      	movs	r3, #8
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	1c0a      	adds	r2, r1, #0
 800208c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2241      	movs	r2, #65	; 0x41
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d000      	beq.n	800209c <HAL_I2C_Master_Transmit+0x2c>
 800209a:	e0e7      	b.n	800226c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_I2C_Master_Transmit+0x3a>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e0e1      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020b2:	f7ff fa89 	bl	80015c8 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	0219      	lsls	r1, r3, #8
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	f000 fa04 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2241      	movs	r2, #65	; 0x41
 80020d8:	2121      	movs	r1, #33	; 0x21
 80020da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2242      	movs	r2, #66	; 0x42
 80020e0:	2110      	movs	r1, #16
 80020e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2208      	movs	r2, #8
 80020f4:	18ba      	adds	r2, r7, r2
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2bff      	cmp	r3, #255	; 0xff
 8002108:	d911      	bls.n	800212e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	b2da      	uxtb	r2, r3
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	045c      	lsls	r4, r3, #17
 800211a:	230a      	movs	r3, #10
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	8819      	ldrh	r1, [r3, #0]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HAL_I2C_Master_Transmit+0x208>)
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	0023      	movs	r3, r4
 8002128:	f000 fc2e 	bl	8002988 <I2C_TransferConfig>
 800212c:	e075      	b.n	800221a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	b2da      	uxtb	r2, r3
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	049c      	lsls	r4, r3, #18
 8002142:	230a      	movs	r3, #10
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	8819      	ldrh	r1, [r3, #0]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <HAL_I2C_Master_Transmit+0x208>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	0023      	movs	r3, r4
 8002150:	f000 fc1a 	bl	8002988 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002154:	e061      	b.n	800221a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 fa07 	bl	8002570 <I2C_WaitOnTXISFlagUntilTimeout>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e081      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03a      	beq.n	800221a <HAL_I2C_Master_Transmit+0x1aa>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d136      	bne.n	800221a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	0013      	movs	r3, r2
 80021b6:	2200      	movs	r2, #0
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	f000 f98b 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e053      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2bff      	cmp	r3, #255	; 0xff
 80021ce:	d911      	bls.n	80021f4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	045c      	lsls	r4, r3, #17
 80021e0:	230a      	movs	r3, #10
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	8819      	ldrh	r1, [r3, #0]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	0023      	movs	r3, r4
 80021ee:	f000 fbcb 	bl	8002988 <I2C_TransferConfig>
 80021f2:	e012      	b.n	800221a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	b2da      	uxtb	r2, r3
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	049c      	lsls	r4, r3, #18
 8002208:	230a      	movs	r3, #10
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	8819      	ldrh	r1, [r3, #0]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	0023      	movs	r3, r4
 8002216:	f000 fbb7 	bl	8002988 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d198      	bne.n	8002156 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f9e6 	bl	80025fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e01a      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2220      	movs	r2, #32
 800223e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	490c      	ldr	r1, [pc, #48]	; (800227c <HAL_I2C_Master_Transmit+0x20c>)
 800224c:	400a      	ands	r2, r1
 800224e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2241      	movs	r2, #65	; 0x41
 8002254:	2120      	movs	r1, #32
 8002256:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2242      	movs	r2, #66	; 0x42
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	2100      	movs	r1, #0
 8002266:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b007      	add	sp, #28
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	80002000 	.word	0x80002000
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	0008      	movs	r0, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	0019      	movs	r1, r3
 800228e:	230a      	movs	r3, #10
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	1c02      	adds	r2, r0, #0
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	2308      	movs	r3, #8
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	1c0a      	adds	r2, r1, #0
 800229c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2241      	movs	r2, #65	; 0x41
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d000      	beq.n	80022ac <HAL_I2C_Master_Receive+0x2c>
 80022aa:	e0e8      	b.n	800247e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	5c9b      	ldrb	r3, [r3, r2]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Master_Receive+0x3a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0e2      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022c2:	f7ff f981 	bl	80015c8 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	0219      	lsls	r1, r3, #8
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	f000 f8fc 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0cd      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2241      	movs	r2, #65	; 0x41
 80022e8:	2122      	movs	r1, #34	; 0x22
 80022ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2242      	movs	r2, #66	; 0x42
 80022f0:	2110      	movs	r1, #16
 80022f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2208      	movs	r2, #8
 8002304:	18ba      	adds	r2, r7, r2
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2bff      	cmp	r3, #255	; 0xff
 8002318:	d911      	bls.n	800233e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	b2da      	uxtb	r2, r3
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	045c      	lsls	r4, r3, #17
 800232a:	230a      	movs	r3, #10
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	8819      	ldrh	r1, [r3, #0]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	4b55      	ldr	r3, [pc, #340]	; (8002488 <HAL_I2C_Master_Receive+0x208>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	0023      	movs	r3, r4
 8002338:	f000 fb26 	bl	8002988 <I2C_TransferConfig>
 800233c:	e076      	b.n	800242c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	b2da      	uxtb	r2, r3
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	049c      	lsls	r4, r3, #18
 8002352:	230a      	movs	r3, #10
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	8819      	ldrh	r1, [r3, #0]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_I2C_Master_Receive+0x208>)
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	0023      	movs	r3, r4
 8002360:	f000 fb12 	bl	8002988 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002364:	e062      	b.n	800242c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f989 	bl	8002684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e082      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03a      	beq.n	800242c <HAL_I2C_Master_Receive+0x1ac>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d136      	bne.n	800242c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	0013      	movs	r3, r2
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	f000 f882 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e053      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d911      	bls.n	8002406 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	045c      	lsls	r4, r3, #17
 80023f2:	230a      	movs	r3, #10
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	8819      	ldrh	r1, [r3, #0]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	0023      	movs	r3, r4
 8002400:	f000 fac2 	bl	8002988 <I2C_TransferConfig>
 8002404:	e012      	b.n	800242c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	b2da      	uxtb	r2, r3
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	049c      	lsls	r4, r3, #18
 800241a:	230a      	movs	r3, #10
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	8819      	ldrh	r1, [r3, #0]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	0023      	movs	r3, r4
 8002428:	f000 faae 	bl	8002988 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d197      	bne.n	8002366 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f8dd 	bl	80025fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01a      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	490b      	ldr	r1, [pc, #44]	; (800248c <HAL_I2C_Master_Receive+0x20c>)
 800245e:	400a      	ands	r2, r1
 8002460:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	2120      	movs	r1, #32
 8002468:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2242      	movs	r2, #66	; 0x42
 800246e:	2100      	movs	r1, #0
 8002470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	2100      	movs	r1, #0
 8002478:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b007      	add	sp, #28
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	80002400 	.word	0x80002400
 800248c:	fe00e800 	.word	0xfe00e800

08002490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d103      	bne.n	80024ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d007      	beq.n	80024cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	430a      	orrs	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
  }
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e4:	e030      	b.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	d02d      	beq.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7ff f86c 	bl	80015c8 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d122      	bne.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	4013      	ands	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	425a      	negs	r2, r3
 8002512:	4153      	adcs	r3, r2
 8002514:	b2db      	uxtb	r3, r3
 8002516:	001a      	movs	r2, r3
 8002518:	1dfb      	adds	r3, r7, #7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d113      	bne.n	8002548 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	2220      	movs	r2, #32
 8002526:	431a      	orrs	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2241      	movs	r2, #65	; 0x41
 8002530:	2120      	movs	r1, #32
 8002532:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2242      	movs	r2, #66	; 0x42
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e00f      	b.n	8002568 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	425a      	negs	r2, r3
 8002558:	4153      	adcs	r3, r2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	001a      	movs	r2, r3
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d0bf      	beq.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}

08002570 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800257c:	e032      	b.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f8ff 	bl	8002788 <I2C_IsErrorOccurred>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d001      	beq.n	8002592 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e030      	b.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	d025      	beq.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7ff f816 	bl	80015c8 <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2202      	movs	r2, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d013      	beq.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	2220      	movs	r2, #32
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2241      	movs	r2, #65	; 0x41
 80025cc:	2120      	movs	r1, #32
 80025ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2242      	movs	r2, #66	; 0x42
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e007      	b.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d1c5      	bne.n	800257e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	e02f      	b.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f8b9 	bl	8002788 <I2C_IsErrorOccurred>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d001      	beq.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e02d      	b.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe ffd3 	bl	80015c8 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11a      	bne.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2220      	movs	r2, #32
 800263c:	4013      	ands	r3, r2
 800263e:	2b20      	cmp	r3, #32
 8002640:	d013      	beq.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	2220      	movs	r2, #32
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2241      	movs	r2, #65	; 0x41
 8002652:	2120      	movs	r1, #32
 8002654:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2242      	movs	r2, #66	; 0x42
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	2100      	movs	r1, #0
 8002664:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	2b20      	cmp	r3, #32
 8002676:	d1c8      	bne.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002690:	e06b      	b.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f875 	bl	8002788 <I2C_IsErrorOccurred>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e069      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2220      	movs	r2, #32
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d138      	bne.n	8002726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2204      	movs	r2, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d105      	bne.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e055      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2210      	movs	r2, #16
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d107      	bne.n	80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2204      	movs	r2, #4
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
 80026ea:	e002      	b.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2220      	movs	r2, #32
 80026f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	491f      	ldr	r1, [pc, #124]	; (8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002706:	400a      	ands	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2241      	movs	r2, #65	; 0x41
 800270e:	2120      	movs	r1, #32
 8002710:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2242      	movs	r2, #66	; 0x42
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2240      	movs	r2, #64	; 0x40
 800271e:	2100      	movs	r1, #0
 8002720:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e029      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe ff4f 	bl	80015c8 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00f      	beq.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	2220      	movs	r2, #32
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2241      	movs	r2, #65	; 0x41
 800275a:	2120      	movs	r1, #32
 800275c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2204      	movs	r2, #4
 8002772:	4013      	ands	r3, r2
 8002774:	2b04      	cmp	r3, #4
 8002776:	d18c      	bne.n	8002692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b08b      	sub	sp, #44	; 0x2c
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2327      	movs	r3, #39	; 0x27
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2210      	movs	r2, #16
 80027b0:	4013      	ands	r3, r2
 80027b2:	d100      	bne.n	80027b6 <I2C_IsErrorOccurred+0x2e>
 80027b4:	e082      	b.n	80028bc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2210      	movs	r2, #16
 80027bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027be:	e060      	b.n	8002882 <I2C_IsErrorOccurred+0xfa>
 80027c0:	2427      	movs	r4, #39	; 0x27
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	193a      	adds	r2, r7, r4
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	d058      	beq.n	8002882 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027d0:	f7fe fefa 	bl	80015c8 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d306      	bcc.n	80027ee <I2C_IsErrorOccurred+0x66>
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	193a      	adds	r2, r7, r4
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d149      	bne.n	8002882 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027fc:	2013      	movs	r0, #19
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	2142      	movs	r1, #66	; 0x42
 8002804:	5c52      	ldrb	r2, [r2, r1]
 8002806:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	401a      	ands	r2, r3
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	429a      	cmp	r2, r3
 800281a:	d126      	bne.n	800286a <I2C_IsErrorOccurred+0xe2>
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	01db      	lsls	r3, r3, #7
 8002822:	429a      	cmp	r2, r3
 8002824:	d021      	beq.n	800286a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002826:	183b      	adds	r3, r7, r0
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d01d      	beq.n	800286a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	01c9      	lsls	r1, r1, #7
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002840:	f7fe fec2 	bl	80015c8 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	e00f      	b.n	800286a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800284a:	f7fe febd 	bl	80015c8 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b19      	cmp	r3, #25
 8002856:	d908      	bls.n	800286a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2220      	movs	r2, #32
 800285c:	4313      	orrs	r3, r2
 800285e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002860:	2327      	movs	r3, #39	; 0x27
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]

              break;
 8002868:	e00b      	b.n	8002882 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2220      	movs	r2, #32
 8002872:	4013      	ands	r3, r2
 8002874:	2127      	movs	r1, #39	; 0x27
 8002876:	187a      	adds	r2, r7, r1
 8002878:	1879      	adds	r1, r7, r1
 800287a:	7809      	ldrb	r1, [r1, #0]
 800287c:	7011      	strb	r1, [r2, #0]
 800287e:	2b20      	cmp	r3, #32
 8002880:	d1e3      	bne.n	800284a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2220      	movs	r2, #32
 800288a:	4013      	ands	r3, r2
 800288c:	2b20      	cmp	r3, #32
 800288e:	d004      	beq.n	800289a <I2C_IsErrorOccurred+0x112>
 8002890:	2327      	movs	r3, #39	; 0x27
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d092      	beq.n	80027c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800289a:	2327      	movs	r3, #39	; 0x27
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2204      	movs	r2, #4
 80028b0:	4313      	orrs	r3, r2
 80028b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028b4:	2327      	movs	r3, #39	; 0x27
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00c      	beq.n	80028e8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0052      	lsls	r2, r2, #1
 80028de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028e0:	2327      	movs	r3, #39	; 0x27
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	d00c      	beq.n	800290c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2208      	movs	r2, #8
 80028f6:	4313      	orrs	r3, r2
 80028f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	00d2      	lsls	r2, r2, #3
 8002902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002904:	2327      	movs	r3, #39	; 0x27
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d00c      	beq.n	8002930 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2202      	movs	r2, #2
 800291a:	4313      	orrs	r3, r2
 800291c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002928:	2327      	movs	r3, #39	; 0x27
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002930:	2327      	movs	r3, #39	; 0x27
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01d      	beq.n	8002976 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff fda7 	bl	8002490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	490d      	ldr	r1, [pc, #52]	; (8002984 <I2C_IsErrorOccurred+0x1fc>)
 800294e:	400a      	ands	r2, r1
 8002950:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	2120      	movs	r1, #32
 8002964:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2242      	movs	r2, #66	; 0x42
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2240      	movs	r2, #64	; 0x40
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002976:	2327      	movs	r3, #39	; 0x27
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b00b      	add	sp, #44	; 0x2c
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	0008      	movs	r0, r1
 8002992:	0011      	movs	r1, r2
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	240a      	movs	r4, #10
 8002998:	193b      	adds	r3, r7, r4
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	2009      	movs	r0, #9
 80029a0:	183b      	adds	r3, r7, r0
 80029a2:	1c0a      	adds	r2, r1, #0
 80029a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	059b      	lsls	r3, r3, #22
 80029ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	0419      	lsls	r1, r3, #16
 80029b4:	23ff      	movs	r3, #255	; 0xff
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	4313      	orrs	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d2:	0d51      	lsrs	r1, r2, #21
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	00d2      	lsls	r2, r2, #3
 80029d8:	400a      	ands	r2, r1
 80029da:	4907      	ldr	r1, [pc, #28]	; (80029f8 <I2C_TransferConfig+0x70>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	43d2      	mvns	r2, r2
 80029e0:	401a      	ands	r2, r3
 80029e2:	0011      	movs	r1, r2
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b007      	add	sp, #28
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	03ff63ff 	.word	0x03ff63ff

080029fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2241      	movs	r2, #65	; 0x41
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d138      	bne.n	8002a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	5c9b      	ldrb	r3, [r3, r2]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e032      	b.n	8002a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2124      	movs	r1, #36	; 0x24
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4911      	ldr	r1, [pc, #68]	; (8002a90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2241      	movs	r2, #65	; 0x41
 8002a74:	2120      	movs	r1, #32
 8002a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	ffffefff 	.word	0xffffefff

08002a94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2241      	movs	r2, #65	; 0x41
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d139      	bne.n	8002b1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2240      	movs	r2, #64	; 0x40
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e033      	b.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	2101      	movs	r1, #1
 8002abe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2241      	movs	r2, #65	; 0x41
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2241      	movs	r2, #65	; 0x41
 8002b0e:	2120      	movs	r1, #32
 8002b10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	fffff0ff 	.word	0xfffff0ff

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 fbaf 	bl	800329e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4bcf      	ldr	r3, [pc, #828]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	220c      	movs	r2, #12
 8002b46:	4013      	ands	r3, r2
 8002b48:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	4bcd      	ldr	r3, [pc, #820]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	025b      	lsls	r3, r3, #9
 8002b52:	4013      	ands	r3, r2
 8002b54:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <HAL_RCC_OscConfig+0x36>
 8002b60:	e07e      	b.n	8002c60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d007      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x68>
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4bc1      	ldr	r3, [pc, #772]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	4013      	ands	r3, r2
 8002b82:	d100      	bne.n	8002b86 <HAL_RCC_OscConfig+0x5a>
 8002b84:	e06b      	b.n	8002c5e <HAL_RCC_OscConfig+0x132>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d167      	bne.n	8002c5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f000 fb85 	bl	800329e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	025b      	lsls	r3, r3, #9
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x84>
 8002ba0:	4bb7      	ldr	r3, [pc, #732]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4bb6      	ldr	r3, [pc, #728]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0249      	lsls	r1, r1, #9
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e027      	b.n	8002c00 <HAL_RCC_OscConfig+0xd4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	23a0      	movs	r3, #160	; 0xa0
 8002bb6:	02db      	lsls	r3, r3, #11
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d10e      	bne.n	8002bda <HAL_RCC_OscConfig+0xae>
 8002bbc:	4bb0      	ldr	r3, [pc, #704]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4baf      	ldr	r3, [pc, #700]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	02c9      	lsls	r1, r1, #11
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4bad      	ldr	r3, [pc, #692]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4bac      	ldr	r3, [pc, #688]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0249      	lsls	r1, r1, #9
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e012      	b.n	8002c00 <HAL_RCC_OscConfig+0xd4>
 8002bda:	4ba9      	ldr	r3, [pc, #676]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4ba8      	ldr	r3, [pc, #672]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002be0:	49a8      	ldr	r1, [pc, #672]	; (8002e84 <HAL_RCC_OscConfig+0x358>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4ba6      	ldr	r3, [pc, #664]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	025b      	lsls	r3, r3, #9
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4ba2      	ldr	r3, [pc, #648]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4ba1      	ldr	r3, [pc, #644]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002bfa:	49a3      	ldr	r1, [pc, #652]	; (8002e88 <HAL_RCC_OscConfig+0x35c>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fcde 	bl	80015c8 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c10:	e009      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c12:	f7fe fcd9 	bl	80015c8 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	; 0x64
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 fb3c 	bl	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c26:	4b96      	ldr	r3, [pc, #600]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d0ef      	beq.n	8002c12 <HAL_RCC_OscConfig+0xe6>
 8002c32:	e015      	b.n	8002c60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fcc8 	bl	80015c8 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fcc3 	bl	80015c8 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e326      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c50:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x112>
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d100      	bne.n	8002c6c <HAL_RCC_OscConfig+0x140>
 8002c6a:	e08b      	b.n	8002d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d13e      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1d0>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d13b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c84:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_RCC_OscConfig+0x16c>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e302      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a7b      	ldr	r2, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x360>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	021a      	lsls	r2, r3, #8
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cae:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2209      	movs	r2, #9
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc0:	f000 fc40 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8002cc4:	0001      	movs	r1, r0
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	220f      	movs	r2, #15
 8002cce:	4013      	ands	r3, r2
 8002cd0:	4a6f      	ldr	r2, [pc, #444]	; (8002e90 <HAL_RCC_OscConfig+0x364>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	40da      	lsrs	r2, r3
 8002cd8:	4b6e      	ldr	r3, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x368>)
 8002cda:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002cdc:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x36c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2513      	movs	r5, #19
 8002ce2:	197c      	adds	r4, r7, r5
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fe fc29 	bl	800153c <HAL_InitTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002cee:	197b      	adds	r3, r7, r5
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d046      	beq.n	8002d84 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002cf6:	197b      	adds	r3, r7, r5
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	e2d0      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d027      	beq.n	8002d52 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2209      	movs	r2, #9
 8002d08:	4393      	bics	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fc58 	bl	80015c8 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fc53 	bl	80015c8 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e2b6      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d0f1      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b51      	ldr	r3, [pc, #324]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a53      	ldr	r2, [pc, #332]	; (8002e8c <HAL_RCC_OscConfig+0x360>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	021a      	lsls	r2, r3, #8
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	e018      	b.n	8002d84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d58:	2101      	movs	r1, #1
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fc33 	bl	80015c8 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe fc2e 	bl	80015c8 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e291      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	d1f1      	bne.n	8002d68 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d100      	bne.n	8002d90 <HAL_RCC_OscConfig+0x264>
 8002d8e:	e0a1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d140      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x282>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e277      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0x370>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	0a19      	lsrs	r1, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	061a      	lsls	r2, r3, #24
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	3301      	adds	r3, #1
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0212      	lsls	r2, r2, #8
 8002de2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	210f      	movs	r1, #15
 8002dec:	400b      	ands	r3, r1
 8002dee:	4928      	ldr	r1, [pc, #160]	; (8002e90 <HAL_RCC_OscConfig+0x364>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_RCC_OscConfig+0x368>)
 8002df6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_OscConfig+0x36c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2513      	movs	r5, #19
 8002dfe:	197c      	adds	r4, r7, r5
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe fb9b 	bl	800153c <HAL_InitTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d060      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002e12:	197b      	adds	r3, r7, r5
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	e242      	b.n	800329e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d03f      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	0049      	lsls	r1, r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fbcb 	bl	80015c8 <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e38:	f7fe fbc6 	bl	80015c8 <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e229      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_RCC_OscConfig+0x370>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	0a19      	lsrs	r1, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	061a      	lsls	r2, r3, #24
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0x354>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e029      	b.n	8002ed4 <HAL_RCC_OscConfig+0x3a8>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	fffeffff 	.word	0xfffeffff
 8002e88:	fffbffff 	.word	0xfffbffff
 8002e8c:	ffffe0ff 	.word	0xffffe0ff
 8002e90:	0800a0a8 	.word	0x0800a0a8
 8002e94:	20000004 	.word	0x20000004
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ea0:	4bbd      	ldr	r3, [pc, #756]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4bbc      	ldr	r3, [pc, #752]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002ea6:	49bd      	ldr	r1, [pc, #756]	; (800319c <HAL_RCC_OscConfig+0x670>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fb8c 	bl	80015c8 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fb87 	bl	80015c8 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1ea      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ec8:	4bb3      	ldr	r3, [pc, #716]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	4013      	ands	r3, r2
 8002edc:	d036      	beq.n	8002f4c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4bac      	ldr	r3, [pc, #688]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eea:	4bab      	ldr	r3, [pc, #684]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fb69 	bl	80015c8 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe fb64 	bl	80015c8 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1c7      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f0e:	4ba2      	ldr	r3, [pc, #648]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0f1      	beq.n	8002efc <HAL_RCC_OscConfig+0x3d0>
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b9f      	ldr	r3, [pc, #636]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f1e:	4b9e      	ldr	r3, [pc, #632]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fb4f 	bl	80015c8 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fb4a 	bl	80015c8 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1ad      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f42:	4b95      	ldr	r3, [pc, #596]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	2202      	movs	r2, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d1f1      	bne.n	8002f30 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2204      	movs	r2, #4
 8002f52:	4013      	ands	r3, r2
 8002f54:	d100      	bne.n	8002f58 <HAL_RCC_OscConfig+0x42c>
 8002f56:	e0ae      	b.n	80030b6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f58:	2027      	movs	r0, #39	; 0x27
 8002f5a:	183b      	adds	r3, r7, r0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f60:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	055b      	lsls	r3, r3, #21
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b8a      	ldr	r3, [pc, #552]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f70:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	0549      	lsls	r1, r1, #21
 8002f76:	430a      	orrs	r2, r1
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f7a:	183b      	adds	r3, r7, r0
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b87      	ldr	r3, [pc, #540]	; (80031a0 <HAL_RCC_OscConfig+0x674>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d11a      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8c:	4b84      	ldr	r3, [pc, #528]	; (80031a0 <HAL_RCC_OscConfig+0x674>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <HAL_RCC_OscConfig+0x674>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0049      	lsls	r1, r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fb15 	bl	80015c8 <HAL_GetTick>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fb10 	bl	80015c8 <HAL_GetTick>
 8002fa8:	0002      	movs	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e173      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	; (80031a0 <HAL_RCC_OscConfig+0x674>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_OscConfig+0x4b2>
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd2:	4b71      	ldr	r3, [pc, #452]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0049      	lsls	r1, r1, #1
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	651a      	str	r2, [r3, #80]	; 0x50
 8002fdc:	e031      	b.n	8003042 <HAL_RCC_OscConfig+0x516>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x4d4>
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002fec:	496b      	ldr	r1, [pc, #428]	; (800319c <HAL_RCC_OscConfig+0x670>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ff2:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff6:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8002ff8:	496a      	ldr	r1, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x678>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ffe:	e020      	b.n	8003042 <HAL_RCC_OscConfig+0x516>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	429a      	cmp	r2, r3
 800300a:	d10e      	bne.n	800302a <HAL_RCC_OscConfig+0x4fe>
 800300c:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800300e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	00c9      	lsls	r1, r1, #3
 8003016:	430a      	orrs	r2, r1
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800301c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	0049      	lsls	r1, r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	651a      	str	r2, [r3, #80]	; 0x50
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x516>
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800302c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003030:	495a      	ldr	r1, [pc, #360]	; (800319c <HAL_RCC_OscConfig+0x670>)
 8003032:	400a      	ands	r2, r1
 8003034:	651a      	str	r2, [r3, #80]	; 0x50
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303a:	4b57      	ldr	r3, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800303c:	4959      	ldr	r1, [pc, #356]	; (80031a4 <HAL_RCC_OscConfig+0x678>)
 800303e:	400a      	ands	r2, r1
 8003040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fabd 	bl	80015c8 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003052:	e009      	b.n	8003068 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fab8 	bl	80015c8 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a52      	ldr	r2, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0x67c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e11a      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800306a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x528>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe faa7 	bl	80015c8 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800307e:	e009      	b.n	8003094 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe faa2 	bl	80015c8 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x67c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e104      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4013      	ands	r3, r2
 800309e:	d1ef      	bne.n	8003080 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a0:	2327      	movs	r3, #39	; 0x27
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030b0:	493e      	ldr	r1, [pc, #248]	; (80031ac <HAL_RCC_OscConfig+0x680>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	4013      	ands	r3, r2
 80030be:	d049      	beq.n	8003154 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d026      	beq.n	8003116 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 80030da:	2101      	movs	r1, #1
 80030dc:	430a      	orrs	r2, r1
 80030de:	635a      	str	r2, [r3, #52]	; 0x34
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_RCC_OscConfig+0x684>)
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x684>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0189      	lsls	r1, r1, #6
 80030ea:	430a      	orrs	r2, r1
 80030ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe fa6b 	bl	80015c8 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f8:	f7fe fa66 	bl	80015c8 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0c9      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2202      	movs	r2, #2
 8003110:	4013      	ands	r3, r2
 8003112:	d0f1      	beq.n	80030f8 <HAL_RCC_OscConfig+0x5cc>
 8003114:	e01e      	b.n	8003154 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800311c:	2101      	movs	r1, #1
 800311e:	438a      	bics	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCC_OscConfig+0x684>)
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x684>)
 8003128:	4922      	ldr	r1, [pc, #136]	; (80031b4 <HAL_RCC_OscConfig+0x688>)
 800312a:	400a      	ands	r2, r1
 800312c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe fa4b 	bl	80015c8 <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003138:	f7fe fa46 	bl	80015c8 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0a9      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2202      	movs	r2, #2
 8003150:	4013      	ands	r3, r2
 8003152:	d1f1      	bne.n	8003138 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d100      	bne.n	800315e <HAL_RCC_OscConfig+0x632>
 800315c:	e09e      	b.n	800329c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d100      	bne.n	8003166 <HAL_RCC_OscConfig+0x63a>
 8003164:	e077      	b.n	8003256 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	2b02      	cmp	r3, #2
 800316c:	d158      	bne.n	8003220 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_OscConfig+0x66c>)
 8003174:	4910      	ldr	r1, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x68c>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fa25 	bl	80015c8 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003182:	e01b      	b.n	80031bc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe fa20 	bl	80015c8 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d914      	bls.n	80031bc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e083      	b.n	800329e <HAL_RCC_OscConfig+0x772>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40021000 	.word	0x40021000
 800319c:	fffffeff 	.word	0xfffffeff
 80031a0:	40007000 	.word	0x40007000
 80031a4:	fffffbff 	.word	0xfffffbff
 80031a8:	00001388 	.word	0x00001388
 80031ac:	efffffff 	.word	0xefffffff
 80031b0:	40010000 	.word	0x40010000
 80031b4:	ffffdfff 	.word	0xffffdfff
 80031b8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	049b      	lsls	r3, r3, #18
 80031c4:	4013      	ands	r3, r2
 80031c6:	d1dd      	bne.n	8003184 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a37      	ldr	r2, [pc, #220]	; (80032ac <HAL_RCC_OscConfig+0x780>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	431a      	orrs	r2, r3
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0449      	lsls	r1, r1, #17
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe f9e7 	bl	80015c8 <HAL_GetTick>
 80031fa:	0003      	movs	r3, r0
 80031fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe f9e2 	bl	80015c8 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e045      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	049b      	lsls	r3, r3, #18
 800321a:	4013      	ands	r3, r2
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x6d4>
 800321e:	e03d      	b.n	800329c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 8003226:	4922      	ldr	r1, [pc, #136]	; (80032b0 <HAL_RCC_OscConfig+0x784>)
 8003228:	400a      	ands	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe f9cc 	bl	80015c8 <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe f9c7 	bl	80015c8 <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e02a      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	049b      	lsls	r3, r3, #18
 8003250:	4013      	ands	r3, r2
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x70a>
 8003254:	e022      	b.n	800329c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e01d      	b.n	800329e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x77c>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	429a      	cmp	r2, r3
 8003276:	d10f      	bne.n	8003298 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	23f0      	movs	r3, #240	; 0xf0
 800327c:	039b      	lsls	r3, r3, #14
 800327e:	401a      	ands	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b00a      	add	sp, #40	; 0x28
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	40021000 	.word	0x40021000
 80032ac:	ff02ffff 	.word	0xff02ffff
 80032b0:	feffffff 	.word	0xfeffffff

080032b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b5b0      	push	{r4, r5, r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e128      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b96      	ldr	r3, [pc, #600]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d91e      	bls.n	8003314 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b93      	ldr	r3, [pc, #588]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	4b90      	ldr	r3, [pc, #576]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e8:	f7fe f96e 	bl	80015c8 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	e009      	b.n	8003306 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f2:	f7fe f969 	bl	80015c8 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	4a8a      	ldr	r2, [pc, #552]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e109      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b87      	ldr	r3, [pc, #540]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331e:	4b83      	ldr	r3, [pc, #524]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	22f0      	movs	r2, #240	; 0xf0
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	4b7f      	ldr	r3, [pc, #508]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 800332e:	430a      	orrs	r2, r1
 8003330:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	4013      	ands	r3, r2
 800333a:	d100      	bne.n	800333e <HAL_RCC_ClockConfig+0x8a>
 800333c:	e089      	b.n	8003452 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003346:	4b79      	ldr	r3, [pc, #484]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	029b      	lsls	r3, r3, #10
 800334e:	4013      	ands	r3, r2
 8003350:	d120      	bne.n	8003394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0e1      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800335e:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	049b      	lsls	r3, r3, #18
 8003366:	4013      	ands	r3, r2
 8003368:	d114      	bne.n	8003394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0d5      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d106      	bne.n	8003384 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003376:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2204      	movs	r2, #4
 800337c:	4013      	ands	r3, r2
 800337e:	d109      	bne.n	8003394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0ca      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003384:	4b69      	ldr	r3, [pc, #420]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0c2      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003394:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2203      	movs	r2, #3
 800339a:	4393      	bics	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe f90e 	bl	80015c8 <HAL_GetTick>
 80033ac:	0003      	movs	r3, r0
 80033ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d111      	bne.n	80033dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b8:	e009      	b.n	80033ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ba:	f7fe f905 	bl	80015c8 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0a5      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ce:	4b57      	ldr	r3, [pc, #348]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	220c      	movs	r2, #12
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d1ef      	bne.n	80033ba <HAL_RCC_ClockConfig+0x106>
 80033da:	e03a      	b.n	8003452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e6:	f7fe f8ef 	bl	80015c8 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e08f      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fa:	4b4c      	ldr	r3, [pc, #304]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	220c      	movs	r2, #12
 8003400:	4013      	ands	r3, r2
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d1ef      	bne.n	80033e6 <HAL_RCC_ClockConfig+0x132>
 8003406:	e024      	b.n	8003452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d11b      	bne.n	8003448 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003410:	e009      	b.n	8003426 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fe f8d9 	bl	80015c8 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e079      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	220c      	movs	r2, #12
 800342c:	4013      	ands	r3, r2
 800342e:	2b04      	cmp	r3, #4
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_ClockConfig+0x15e>
 8003432:	e00e      	b.n	8003452 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe f8c8 	bl	80015c8 <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	4a3a      	ldr	r2, [pc, #232]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e068      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003448:	4b38      	ldr	r3, [pc, #224]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	220c      	movs	r2, #12
 800344e:	4013      	ands	r3, r2
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d21e      	bcs.n	800349e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4393      	bics	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003472:	f7fe f8a9 	bl	80015c8 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	e009      	b.n	8003490 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fe f8a4 	bl	80015c8 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_RCC_ClockConfig+0x274>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e044      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_ClockConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d1ee      	bne.n	800347c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_RCC_ClockConfig+0x27c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	4013      	ands	r3, r2
 80034c4:	d00a      	beq.n	80034dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_RCC_ClockConfig+0x280>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00da      	lsls	r2, r3, #3
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034dc:	f000 f832 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 80034e0:	0001      	movs	r1, r0
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x278>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	220f      	movs	r2, #15
 80034ea:	4013      	ands	r3, r2
 80034ec:	4a12      	ldr	r2, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x284>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	000a      	movs	r2, r1
 80034f2:	40da      	lsrs	r2, r3
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCC_ClockConfig+0x288>)
 80034f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_ClockConfig+0x28c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	250b      	movs	r5, #11
 80034fe:	197c      	adds	r4, r7, r5
 8003500:	0018      	movs	r0, r3
 8003502:	f7fe f81b 	bl	800153c <HAL_InitTick>
 8003506:	0003      	movs	r3, r0
 8003508:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800350a:	197b      	adds	r3, r7, r5
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003512:	197b      	adds	r3, r7, r5
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	e000      	b.n	800351a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40022000 	.word	0x40022000
 8003528:	00001388 	.word	0x00001388
 800352c:	40021000 	.word	0x40021000
 8003530:	fffff8ff 	.word	0xfffff8ff
 8003534:	ffffc7ff 	.word	0xffffc7ff
 8003538:	0800a0a8 	.word	0x0800a0a8
 800353c:	20000004 	.word	0x20000004
 8003540:	2000000c 	.word	0x2000000c

08003544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b08e      	sub	sp, #56	; 0x38
 8003548:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800354a:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCC_GetSysClockFreq+0x138>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003552:	230c      	movs	r3, #12
 8003554:	4013      	ands	r3, r2
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d014      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x40>
 800355a:	d900      	bls.n	800355e <HAL_RCC_GetSysClockFreq+0x1a>
 800355c:	e07b      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x112>
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x24>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d00b      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x3a>
 8003566:	e076      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003568:	4b44      	ldr	r3, [pc, #272]	; (800367c <HAL_RCC_GetSysClockFreq+0x138>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003572:	4b43      	ldr	r3, [pc, #268]	; (8003680 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003576:	e07c      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCC_GetSysClockFreq+0x140>)
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800357c:	e079      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800357e:	4b42      	ldr	r3, [pc, #264]	; (8003688 <HAL_RCC_GetSysClockFreq+0x144>)
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003582:	e076      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	0c9a      	lsrs	r2, r3, #18
 8003588:	230f      	movs	r3, #15
 800358a:	401a      	ands	r2, r3
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCC_GetSysClockFreq+0x148>)
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	0d9a      	lsrs	r2, r3, #22
 8003596:	2303      	movs	r3, #3
 8003598:	4013      	ands	r3, r2
 800359a:	3301      	adds	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_GetSysClockFreq+0x138>)
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	025b      	lsls	r3, r3, #9
 80035a6:	4013      	ands	r3, r2
 80035a8:	d01a      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	4a35      	ldr	r2, [pc, #212]	; (8003688 <HAL_RCC_GetSysClockFreq+0x144>)
 80035b4:	2300      	movs	r3, #0
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	f7fc fe63 	bl	8000284 <__aeabi_lmul>
 80035be:	0002      	movs	r2, r0
 80035c0:	000b      	movs	r3, r1
 80035c2:	0010      	movs	r0, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f7fc fe37 	bl	8000244 <__aeabi_uldivmod>
 80035d6:	0002      	movs	r2, r0
 80035d8:	000b      	movs	r3, r1
 80035da:	0013      	movs	r3, r2
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	e037      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_RCC_GetSysClockFreq+0x138>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	d01a      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_RCC_GetSysClockFreq+0x13c>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	68b8      	ldr	r0, [r7, #8]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	f7fc fe43 	bl	8000284 <__aeabi_lmul>
 80035fe:	0002      	movs	r2, r0
 8003600:	000b      	movs	r3, r1
 8003602:	0010      	movs	r0, r2
 8003604:	0019      	movs	r1, r3
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f7fc fe17 	bl	8000244 <__aeabi_uldivmod>
 8003616:	0002      	movs	r2, r0
 8003618:	000b      	movs	r3, r1
 800361a:	0013      	movs	r3, r2
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
 800361e:	e017      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	0018      	movs	r0, r3
 8003624:	2300      	movs	r3, #0
 8003626:	0019      	movs	r1, r3
 8003628:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_RCC_GetSysClockFreq+0x140>)
 800362a:	2300      	movs	r3, #0
 800362c:	f7fc fe2a 	bl	8000284 <__aeabi_lmul>
 8003630:	0002      	movs	r2, r0
 8003632:	000b      	movs	r3, r1
 8003634:	0010      	movs	r0, r2
 8003636:	0019      	movs	r1, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	001c      	movs	r4, r3
 800363c:	2300      	movs	r3, #0
 800363e:	001d      	movs	r5, r3
 8003640:	0022      	movs	r2, r4
 8003642:	002b      	movs	r3, r5
 8003644:	f7fc fdfe 	bl	8000244 <__aeabi_uldivmod>
 8003648:	0002      	movs	r2, r0
 800364a:	000b      	movs	r3, r1
 800364c:	0013      	movs	r3, r2
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003654:	e00d      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_GetSysClockFreq+0x138>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	0b5b      	lsrs	r3, r3, #13
 800365c:	2207      	movs	r2, #7
 800365e:	4013      	ands	r3, r2
 8003660:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	3301      	adds	r3, #1
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	0212      	lsls	r2, r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003670:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b00e      	add	sp, #56	; 0x38
 800367a:	bdb0      	pop	{r4, r5, r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	003d0900 	.word	0x003d0900
 8003684:	00f42400 	.word	0x00f42400
 8003688:	007a1200 	.word	0x007a1200
 800368c:	0800a0c0 	.word	0x0800a0c0

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	0001      	movs	r1, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	40d9      	lsrs	r1, r3
 80036be:	000b      	movs	r3, r1
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000
 80036cc:	0800a0b8 	.word	0x0800a0b8

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d4:	f7ff ffdc 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d8:	0001      	movs	r1, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	0adb      	lsrs	r3, r3, #11
 80036e0:	2207      	movs	r2, #7
 80036e2:	4013      	ands	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	40d9      	lsrs	r1, r3
 80036ea:	000b      	movs	r3, r1
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40021000 	.word	0x40021000
 80036f8:	0800a0b8 	.word	0x0800a0b8

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003704:	2317      	movs	r3, #23
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	4013      	ands	r3, r2
 8003714:	d106      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003722:	e104      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003724:	4bb1      	ldr	r3, [pc, #708]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	055b      	lsls	r3, r3, #21
 800372c:	4013      	ands	r3, r2
 800372e:	d10a      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	4bae      	ldr	r3, [pc, #696]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003734:	4bad      	ldr	r3, [pc, #692]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0549      	lsls	r1, r1, #21
 800373a:	430a      	orrs	r2, r1
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800373e:	2317      	movs	r3, #23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4baa      	ldr	r3, [pc, #680]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4013      	ands	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4ba7      	ldr	r3, [pc, #668]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba6      	ldr	r3, [pc, #664]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0049      	lsls	r1, r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003760:	f7fd ff32 	bl	80015c8 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fd ff2d 	bl	80015c8 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e133      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b9c      	ldr	r3, [pc, #624]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d0f0      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003788:	4b98      	ldr	r3, [pc, #608]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	039b      	lsls	r3, r3, #14
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	23c0      	movs	r3, #192	; 0xc0
 800379a:	039b      	lsls	r3, r3, #14
 800379c:	4013      	ands	r3, r2
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d107      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	23c0      	movs	r3, #192	; 0xc0
 80037aa:	039b      	lsls	r3, r3, #14
 80037ac:	4013      	ands	r3, r2
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d013      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	23c0      	movs	r3, #192	; 0xc0
 80037ba:	029b      	lsls	r3, r3, #10
 80037bc:	401a      	ands	r2, r3
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	029b      	lsls	r3, r3, #10
 80037ce:	401a      	ands	r2, r3
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d101      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e103      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80037dc:	4b83      	ldr	r3, [pc, #524]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d049      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	23c0      	movs	r3, #192	; 0xc0
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	4013      	ands	r3, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d004      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	d10d      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	23c0      	movs	r3, #192	; 0xc0
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	4013      	ands	r3, r2
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d034      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4013      	ands	r3, r2
 8003822:	d02e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003824:	4b71      	ldr	r3, [pc, #452]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003832:	4b6e      	ldr	r3, [pc, #440]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	0309      	lsls	r1, r1, #12
 8003838:	430a      	orrs	r2, r1
 800383a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383c:	4b6b      	ldr	r3, [pc, #428]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003840:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003842:	496d      	ldr	r1, [pc, #436]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003844:	400a      	ands	r2, r1
 8003846:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003848:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d014      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd feb6 	bl	80015c8 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003860:	e009      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd feb1 	bl	80015c8 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0b6      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003876:	4b5d      	ldr	r3, [pc, #372]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d0ef      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4013      	ands	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	23c0      	movs	r3, #192	; 0xc0
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	401a      	ands	r2, r3
 8003898:	23c0      	movs	r3, #192	; 0xc0
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	429a      	cmp	r2, r3
 800389e:	d10c      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80038a0:	4b52      	ldr	r3, [pc, #328]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a56      	ldr	r2, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	039b      	lsls	r3, r3, #14
 80038b2:	401a      	ands	r2, r3
 80038b4:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4b4c      	ldr	r3, [pc, #304]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	23c0      	movs	r3, #192	; 0xc0
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	401a      	ands	r2, r3
 80038c8:	4b48      	ldr	r3, [pc, #288]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	4013      	ands	r3, r2
 80038d6:	d01f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	23c0      	movs	r3, #192	; 0xc0
 80038de:	029b      	lsls	r3, r3, #10
 80038e0:	401a      	ands	r2, r3
 80038e2:	23c0      	movs	r3, #192	; 0xc0
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80038ea:	4b40      	ldr	r3, [pc, #256]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a44      	ldr	r2, [pc, #272]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	23c0      	movs	r3, #192	; 0xc0
 80038fa:	039b      	lsls	r3, r3, #14
 80038fc:	401a      	ands	r2, r3
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003906:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	23c0      	movs	r3, #192	; 0xc0
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	401a      	ands	r2, r3
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003914:	430a      	orrs	r2, r1
 8003916:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003918:	2317      	movs	r3, #23
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b32      	ldr	r3, [pc, #200]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003928:	4936      	ldr	r1, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800392a:	400a      	ands	r2, r1
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	2203      	movs	r2, #3
 800393e:	4393      	bics	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003948:	430a      	orrs	r2, r1
 800394a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	220c      	movs	r2, #12
 800395c:	4393      	bics	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003966:	430a      	orrs	r2, r1
 8003968:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003984:	430a      	orrs	r2, r1
 8003986:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	4013      	ands	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003998:	4013      	ands	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	4013      	ands	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	4013      	ands	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b006      	add	sp, #24
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	fffcffff 	.word	0xfffcffff
 80039f8:	fff7ffff 	.word	0xfff7ffff
 80039fc:	00001388 	.word	0x00001388
 8003a00:	ffcfffff 	.word	0xffcfffff
 8003a04:	efffffff 	.word	0xefffffff
 8003a08:	fffff3ff 	.word	0xfffff3ff
 8003a0c:	ffffcfff 	.word	0xffffcfff
 8003a10:	fbffffff 	.word	0xfbffffff
 8003a14:	fff3ffff 	.word	0xfff3ffff

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e083      	b.n	8003b32 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	2382      	movs	r3, #130	; 0x82
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d009      	beq.n	8003a52 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	61da      	str	r2, [r3, #28]
 8003a44:	e005      	b.n	8003a52 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2251      	movs	r2, #81	; 0x51
 8003a5c:	5c9b      	ldrb	r3, [r3, r2]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2250      	movs	r2, #80	; 0x50
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fd f8e2 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2251      	movs	r2, #81	; 0x51
 8003a78:	2102      	movs	r1, #2
 8003a7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	438a      	bics	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	2382      	movs	r3, #130	; 0x82
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	401a      	ands	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	2384      	movs	r3, #132	; 0x84
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68d9      	ldr	r1, [r3, #12]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	400b      	ands	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	2101      	movs	r1, #1
 8003abe:	400b      	ands	r3, r1
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	400b      	ands	r3, r1
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2138      	movs	r1, #56	; 0x38
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	019b      	lsls	r3, r3, #6
 8003aec:	401a      	ands	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	2204      	movs	r2, #4
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2210      	movs	r2, #16
 8003b08:	401a      	ands	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <HAL_SPI_Init+0x124>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2251      	movs	r2, #81	; 0x51
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b002      	add	sp, #8
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	fffff7ff 	.word	0xfffff7ff

08003b40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	1dbb      	adds	r3, r7, #6
 8003b4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b50:	231f      	movs	r3, #31
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2250      	movs	r2, #80	; 0x50
 8003b5c:	5c9b      	ldrb	r3, [r3, r2]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Transmit+0x26>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e145      	b.n	8003df2 <HAL_SPI_Transmit+0x2b2>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2250      	movs	r2, #80	; 0x50
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fd fd2b 	bl	80015c8 <HAL_GetTick>
 8003b72:	0003      	movs	r3, r0
 8003b74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b76:	2316      	movs	r3, #22
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	1dba      	adds	r2, r7, #6
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2251      	movs	r2, #81	; 0x51
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d004      	beq.n	8003b96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003b8c:	231f      	movs	r3, #31
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2202      	movs	r2, #2
 8003b92:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b94:	e126      	b.n	8003de4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_SPI_Transmit+0x64>
 8003b9c:	1dbb      	adds	r3, r7, #6
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003ba4:	231f      	movs	r3, #31
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bac:	e11a      	b.n	8003de4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2251      	movs	r2, #81	; 0x51
 8003bb2:	2103      	movs	r1, #3
 8003bb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1dba      	adds	r2, r7, #6
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1dba      	adds	r2, r7, #6
 8003bce:	8812      	ldrh	r2, [r2, #0]
 8003bd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d110      	bne.n	8003c1e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	438a      	bics	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	01c9      	lsls	r1, r1, #7
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d007      	beq.n	8003c3c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d152      	bne.n	8003cee <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_SPI_Transmit+0x11a>
 8003c50:	2316      	movs	r3, #22
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d143      	bne.n	8003ce2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c7e:	e030      	b.n	8003ce2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2202      	movs	r2, #2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d112      	bne.n	8003cb4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cb2:	e016      	b.n	8003ce2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fd fc88 	bl	80015c8 <HAL_GetTick>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d802      	bhi.n	8003cca <HAL_SPI_Transmit+0x18a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_SPI_Transmit+0x190>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2251      	movs	r2, #81	; 0x51
 8003cdc:	2101      	movs	r1, #1
 8003cde:	5499      	strb	r1, [r3, r2]
          goto error;
 8003ce0:	e080      	b.n	8003de4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1c9      	bne.n	8003c80 <HAL_SPI_Transmit+0x140>
 8003cec:	e053      	b.n	8003d96 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_SPI_Transmit+0x1c0>
 8003cf6:	2316      	movs	r3, #22
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d145      	bne.n	8003d8c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d26:	e031      	b.n	8003d8c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d113      	bne.n	8003d5e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d5c:	e016      	b.n	8003d8c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5e:	f7fd fc33 	bl	80015c8 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d802      	bhi.n	8003d74 <HAL_SPI_Transmit+0x234>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_SPI_Transmit+0x23a>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003d7a:	231f      	movs	r3, #31
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2203      	movs	r2, #3
 8003d80:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2251      	movs	r2, #81	; 0x51
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d8a:	e02b      	b.n	8003de4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1c8      	bne.n	8003d28 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f001 f805 	bl	8004dac <SPI_EndRxTxTransaction>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d002      	beq.n	8003dac <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003dd2:	231f      	movs	r3, #31
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e003      	b.n	8003de4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2251      	movs	r2, #81	; 0x51
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2250      	movs	r2, #80	; 0x50
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dec:	231f      	movs	r3, #31
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	781b      	ldrb	r3, [r3, #0]
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b008      	add	sp, #32
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	1dbb      	adds	r3, r7, #6
 8003e0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e0c:	2117      	movs	r1, #23
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2251      	movs	r2, #81	; 0x51
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d003      	beq.n	8003e28 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2202      	movs	r2, #2
 8003e24:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e26:	e109      	b.n	800403c <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	2382      	movs	r3, #130	; 0x82
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d113      	bne.n	8003e5c <HAL_SPI_Receive+0x60>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2251      	movs	r2, #81	; 0x51
 8003e40:	2104      	movs	r1, #4
 8003e42:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e44:	1dbb      	adds	r3, r7, #6
 8003e46:	881c      	ldrh	r4, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	0023      	movs	r3, r4
 8003e54:	f000 f900 	bl	8004058 <HAL_SPI_TransmitReceive>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	e0f6      	b.n	800404a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2250      	movs	r2, #80	; 0x50
 8003e60:	5c9b      	ldrb	r3, [r3, r2]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_Receive+0x6e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0ef      	b.n	800404a <HAL_SPI_Receive+0x24e>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2250      	movs	r2, #80	; 0x50
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e72:	f7fd fba9 	bl	80015c8 <HAL_GetTick>
 8003e76:	0003      	movs	r3, r0
 8003e78:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_SPI_Receive+0x8c>
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003e88:	2317      	movs	r3, #23
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e90:	e0d4      	b.n	800403c <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2251      	movs	r2, #81	; 0x51
 8003e96:	2104      	movs	r1, #4
 8003e98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1dba      	adds	r2, r7, #6
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1dba      	adds	r2, r7, #6
 8003eb2:	8812      	ldrh	r2, [r2, #0]
 8003eb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10f      	bne.n	8003f00 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2140      	movs	r1, #64	; 0x40
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4956      	ldr	r1, [pc, #344]	; (8004054 <HAL_SPI_Receive+0x258>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d007      	beq.n	8003f1e <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d000      	beq.n	8003f28 <HAL_SPI_Receive+0x12c>
 8003f26:	e06c      	b.n	8004002 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f28:	e033      	b.n	8003f92 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2201      	movs	r2, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d115      	bne.n	8003f64 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	001a      	movs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f62:	e016      	b.n	8003f92 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f64:	f7fd fb30 	bl	80015c8 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d802      	bhi.n	8003f7a <HAL_SPI_Receive+0x17e>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_SPI_Receive+0x184>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003f80:	2317      	movs	r3, #23
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	2203      	movs	r2, #3
 8003f86:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2251      	movs	r2, #81	; 0x51
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f90:	e054      	b.n	800403c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1c6      	bne.n	8003f2a <HAL_SPI_Receive+0x12e>
 8003f9c:	e036      	b.n	800400c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d113      	bne.n	8003fd4 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd2:	e016      	b.n	8004002 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd4:	f7fd faf8 	bl	80015c8 <HAL_GetTick>
 8003fd8:	0002      	movs	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d802      	bhi.n	8003fea <HAL_SPI_Receive+0x1ee>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_Receive+0x1f4>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003ff0:	2317      	movs	r3, #23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2251      	movs	r2, #81	; 0x51
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	5499      	strb	r1, [r3, r2]
          goto error;
 8004000:	e01c      	b.n	800403c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1c8      	bne.n	8003f9e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fe60 	bl	8004cd8 <SPI_EndRxTransaction>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 800402a:	2317      	movs	r3, #23
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e003      	b.n	800403c <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2251      	movs	r2, #81	; 0x51
 8004038:	2101      	movs	r1, #1
 800403a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2250      	movs	r2, #80	; 0x50
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004044:	2317      	movs	r3, #23
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	781b      	ldrb	r3, [r3, #0]
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b007      	add	sp, #28
 8004050:	bd90      	pop	{r4, r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	ffffbfff 	.word	0xffffbfff

08004058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	001a      	movs	r2, r3
 8004066:	1cbb      	adds	r3, r7, #2
 8004068:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800406a:	2301      	movs	r3, #1
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800406e:	232b      	movs	r3, #43	; 0x2b
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2250      	movs	r2, #80	; 0x50
 800407a:	5c9b      	ldrb	r3, [r3, r2]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x2c>
 8004080:	2302      	movs	r3, #2
 8004082:	e1b0      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x38e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2250      	movs	r2, #80	; 0x50
 8004088:	2101      	movs	r1, #1
 800408a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800408c:	f7fd fa9c 	bl	80015c8 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004094:	2023      	movs	r0, #35	; 0x23
 8004096:	183b      	adds	r3, r7, r0
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	2151      	movs	r1, #81	; 0x51
 800409c:	5c52      	ldrb	r2, [r2, r1]
 800409e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040a6:	231a      	movs	r3, #26
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	1cba      	adds	r2, r7, #2
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d011      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x84>
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	2382      	movs	r3, #130	; 0x82
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	429a      	cmp	r2, r3
 80040c0:	d107      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x7a>
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d004      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80040d2:	232b      	movs	r3, #43	; 0x2b
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2202      	movs	r2, #2
 80040d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80040da:	e17d      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x98>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x98>
 80040e8:	1cbb      	adds	r3, r7, #2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80040f0:	232b      	movs	r3, #43	; 0x2b
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80040f8:	e16e      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2251      	movs	r2, #81	; 0x51
 80040fe:	5c9b      	ldrb	r3, [r3, r2]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b04      	cmp	r3, #4
 8004104:	d003      	beq.n	800410e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2251      	movs	r2, #81	; 0x51
 800410a:	2105      	movs	r1, #5
 800410c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1cba      	adds	r2, r7, #2
 800411e:	8812      	ldrh	r2, [r2, #0]
 8004120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1cba      	adds	r2, r7, #2
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1cba      	adds	r2, r7, #2
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1cba      	adds	r2, r7, #2
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	4013      	ands	r3, r2
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d007      	beq.n	800416a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2140      	movs	r1, #64	; 0x40
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	429a      	cmp	r2, r3
 8004174:	d000      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x120>
 8004176:	e07f      	b.n	8004278 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_SPI_TransmitReceive+0x134>
 8004180:	231a      	movs	r3, #26
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d000      	beq.n	800418c <HAL_SPI_TransmitReceive+0x134>
 800418a:	e06a      	b.n	8004262 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	e057      	b.n	8004262 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11b      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1a0>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x1a0>
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d113      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	2b01      	cmp	r3, #1
 8004204:	d119      	bne.n	800423a <HAL_SPI_TransmitReceive+0x1e2>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d014      	beq.n	800423a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	b292      	uxth	r2, r2
 800421c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800423a:	f7fd f9c5 	bl	80015c8 <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004246:	429a      	cmp	r2, r3
 8004248:	d80b      	bhi.n	8004262 <HAL_SPI_TransmitReceive+0x20a>
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	3301      	adds	r3, #1
 800424e:	d008      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8004250:	232b      	movs	r3, #43	; 0x2b
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2203      	movs	r2, #3
 8004256:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2251      	movs	r2, #81	; 0x51
 800425c:	2101      	movs	r1, #1
 800425e:	5499      	strb	r1, [r3, r2]
        goto error;
 8004260:	e0ba      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1a2      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x15a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d19d      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x15a>
 8004276:	e083      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_SPI_TransmitReceive+0x234>
 8004280:	231a      	movs	r3, #26
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d000      	beq.n	800428c <HAL_SPI_TransmitReceive+0x234>
 800428a:	e06f      	b.n	800436c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b2:	e05b      	b.n	800436c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d11c      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x2a4>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x2a4>
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d114      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2201      	movs	r2, #1
 8004304:	4013      	ands	r3, r2
 8004306:	2b01      	cmp	r3, #1
 8004308:	d119      	bne.n	800433e <HAL_SPI_TransmitReceive+0x2e6>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d014      	beq.n	800433e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800433a:	2301      	movs	r3, #1
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800433e:	f7fd f943 	bl	80015c8 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434a:	429a      	cmp	r2, r3
 800434c:	d802      	bhi.n	8004354 <HAL_SPI_TransmitReceive+0x2fc>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	3301      	adds	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_SPI_TransmitReceive+0x302>
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800435a:	232b      	movs	r3, #43	; 0x2b
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2203      	movs	r2, #3
 8004360:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2251      	movs	r2, #81	; 0x51
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]
        goto error;
 800436a:	e035      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d19e      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x25c>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d199      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fd10 	bl	8004dac <SPI_EndRxTxTransaction>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d007      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8004390:	232b      	movs	r3, #43	; 0x2b
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800439e:	e01b      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80043c6:	232b      	movs	r3, #43	; 0x2b
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2251      	movs	r2, #81	; 0x51
 80043d4:	2101      	movs	r1, #1
 80043d6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2250      	movs	r2, #80	; 0x50
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80043e0:	232b      	movs	r3, #43	; 0x2b
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	781b      	ldrb	r3, [r3, #0]
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b00c      	add	sp, #48	; 0x30
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	1dbb      	adds	r3, r7, #6
 80043fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fe:	2117      	movs	r1, #23
 8004400:	187b      	adds	r3, r7, r1
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2251      	movs	r2, #81	; 0x51
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d003      	beq.n	800441a <HAL_SPI_Receive_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
 8004412:	187b      	adds	r3, r7, r1
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
    goto error;
 8004418:	e0ab      	b.n	8004572 <HAL_SPI_Receive_DMA+0x182>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d112      	bne.n	8004448 <HAL_SPI_Receive_DMA+0x58>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	2382      	movs	r3, #130	; 0x82
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	429a      	cmp	r2, r3
 800442c:	d10c      	bne.n	8004448 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2251      	movs	r2, #81	; 0x51
 8004432:	2104      	movs	r1, #4
 8004434:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004436:	1dbb      	adds	r3, r7, #6
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f8aa 	bl	8004598 <HAL_SPI_TransmitReceive_DMA>
 8004444:	0003      	movs	r3, r0
 8004446:	e09b      	b.n	8004580 <HAL_SPI_Receive_DMA+0x190>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2250      	movs	r2, #80	; 0x50
 800444c:	5c9b      	ldrb	r3, [r3, r2]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_SPI_Receive_DMA+0x66>
 8004452:	2302      	movs	r3, #2
 8004454:	e094      	b.n	8004580 <HAL_SPI_Receive_DMA+0x190>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2250      	movs	r2, #80	; 0x50
 800445a:	2101      	movs	r1, #1
 800445c:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_SPI_Receive_DMA+0x7c>
 8004464:	1dbb      	adds	r3, r7, #6
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_SPI_Receive_DMA+0x86>
  {
    errorcode = HAL_ERROR;
 800446c:	2317      	movs	r3, #23
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
    goto error;
 8004474:	e07d      	b.n	8004572 <HAL_SPI_Receive_DMA+0x182>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2251      	movs	r2, #81	; 0x51
 800447a:	2104      	movs	r1, #4
 800447c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1dba      	adds	r2, r7, #6
 800448e:	8812      	ldrh	r2, [r2, #0]
 8004490:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1dba      	adds	r2, r7, #6
 8004496:	8812      	ldrh	r2, [r2, #0]
 8004498:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10f      	bne.n	80044de <HAL_SPI_Receive_DMA+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	438a      	bics	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	492b      	ldr	r1, [pc, #172]	; (8004588 <HAL_SPI_Receive_DMA+0x198>)
 80044da:	400a      	ands	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a2a      	ldr	r2, [pc, #168]	; (800458c <HAL_SPI_Receive_DMA+0x19c>)
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	4a29      	ldr	r2, [pc, #164]	; (8004590 <HAL_SPI_Receive_DMA+0x1a0>)
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	4a28      	ldr	r2, [pc, #160]	; (8004594 <HAL_SPI_Receive_DMA+0x1a4>)
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	2200      	movs	r2, #0
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	0019      	movs	r1, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004514:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004516:	f7fd f9db 	bl	80018d0 <HAL_DMA_Start_IT>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d00a      	beq.n	8004534 <HAL_SPI_Receive_DMA+0x144>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	2210      	movs	r2, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800452a:	2317      	movs	r3, #23
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]

    goto error;
 8004532:	e01e      	b.n	8004572 <HAL_SPI_Receive_DMA+0x182>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	4013      	ands	r3, r2
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d007      	beq.n	8004552 <HAL_SPI_Receive_DMA+0x162>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2120      	movs	r1, #32
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2250      	movs	r2, #80	; 0x50
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800457a:	2317      	movs	r3, #23
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	781b      	ldrb	r3, [r3, #0]
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b006      	add	sp, #24
 8004586:	bd80      	pop	{r7, pc}
 8004588:	ffffbfff 	.word	0xffffbfff
 800458c:	08004b13 	.word	0x08004b13
 8004590:	080049d1 	.word	0x080049d1
 8004594:	08004b4f 	.word	0x08004b4f

08004598 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	001a      	movs	r2, r3
 80045a6:	1cbb      	adds	r3, r7, #2
 80045a8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045aa:	2317      	movs	r3, #23
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2250      	movs	r2, #80	; 0x50
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_TransmitReceive_DMA+0x28>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0ee      	b.n	800479e <HAL_SPI_TransmitReceive_DMA+0x206>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2250      	movs	r2, #80	; 0x50
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045c8:	2016      	movs	r0, #22
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	2151      	movs	r1, #81	; 0x51
 80045d0:	5c52      	ldrb	r2, [r2, r1]
 80045d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80045da:	0001      	movs	r1, r0
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d011      	beq.n	8004608 <HAL_SPI_TransmitReceive_DMA+0x70>
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	2382      	movs	r3, #130	; 0x82
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d107      	bne.n	80045fe <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_SPI_TransmitReceive_DMA+0x66>
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d004      	beq.n	8004608 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80045fe:	2317      	movs	r3, #23
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	2202      	movs	r2, #2
 8004604:	701a      	strb	r2, [r3, #0]
    goto error;
 8004606:	e0c3      	b.n	8004790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_SPI_TransmitReceive_DMA+0x84>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_SPI_TransmitReceive_DMA+0x84>
 8004614:	1cbb      	adds	r3, r7, #2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800461c:	2317      	movs	r3, #23
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
    goto error;
 8004624:	e0b4      	b.n	8004790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2251      	movs	r2, #81	; 0x51
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2251      	movs	r2, #81	; 0x51
 8004636:	2105      	movs	r1, #5
 8004638:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1cba      	adds	r2, r7, #2
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1cba      	adds	r2, r7, #2
 8004652:	8812      	ldrh	r2, [r2, #0]
 8004654:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1cba      	adds	r2, r7, #2
 8004660:	8812      	ldrh	r2, [r2, #0]
 8004662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1cba      	adds	r2, r7, #2
 8004668:	8812      	ldrh	r2, [r2, #0]
 800466a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2251      	movs	r2, #81	; 0x51
 800467c:	5c9b      	ldrb	r3, [r3, r2]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b04      	cmp	r3, #4
 8004682:	d108      	bne.n	8004696 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	4a47      	ldr	r2, [pc, #284]	; (80047a8 <HAL_SPI_TransmitReceive_DMA+0x210>)
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	4a46      	ldr	r2, [pc, #280]	; (80047ac <HAL_SPI_TransmitReceive_DMA+0x214>)
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
 8004694:	e007      	b.n	80046a6 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a45      	ldr	r2, [pc, #276]	; (80047b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	4a44      	ldr	r2, [pc, #272]	; (80047b4 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	4a43      	ldr	r2, [pc, #268]	; (80047b8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	2200      	movs	r2, #0
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	0019      	movs	r1, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046ce:	f7fd f8ff 	bl	80018d0 <HAL_DMA_Start_IT>
 80046d2:	1e03      	subs	r3, r0, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_SPI_TransmitReceive_DMA+0x154>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	2210      	movs	r2, #16
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80046e2:	2317      	movs	r3, #23
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]

    goto error;
 80046ea:	e051      	b.n	8004790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2101      	movs	r1, #1
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004708:	2200      	movs	r2, #0
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	2200      	movs	r2, #0
 800471a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	0019      	movs	r1, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004732:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004734:	f7fd f8cc 	bl	80018d0 <HAL_DMA_Start_IT>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d00a      	beq.n	8004752 <HAL_SPI_TransmitReceive_DMA+0x1ba>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	2210      	movs	r2, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004748:	2317      	movs	r3, #23
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]

    goto error;
 8004750:	e01e      	b.n	8004790 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2240      	movs	r2, #64	; 0x40
 800475a:	4013      	ands	r3, r2
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d007      	beq.n	8004770 <HAL_SPI_TransmitReceive_DMA+0x1d8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2140      	movs	r1, #64	; 0x40
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2120      	movs	r1, #32
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2102      	movs	r1, #2
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2250      	movs	r2, #80	; 0x50
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004798:	2317      	movs	r3, #23
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b006      	add	sp, #24
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	08004b13 	.word	0x08004b13
 80047ac:	080049d1 	.word	0x080049d1
 80047b0:	08004b31 	.word	0x08004b31
 80047b4:	08004a7f 	.word	0x08004a7f
 80047b8:	08004b4f 	.word	0x08004b4f

080047bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	4013      	ands	r3, r2
 80047da:	d10d      	bne.n	80047f8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2201      	movs	r2, #1
 80047e0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047e2:	d009      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	4013      	ands	r3, r2
 80047ea:	d005      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	0010      	movs	r0, r2
 80047f4:	4798      	blx	r3
    return;
 80047f6:	e0c5      	b.n	8004984 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2202      	movs	r2, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_SPI_IRQHandler+0x58>
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	4013      	ands	r3, r2
 8004806:	d005      	beq.n	8004814 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	0010      	movs	r0, r2
 8004810:	4798      	blx	r3
    return;
 8004812:	e0b7      	b.n	8004984 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2220      	movs	r2, #32
 8004818:	4013      	ands	r3, r2
 800481a:	d109      	bne.n	8004830 <HAL_SPI_IRQHandler+0x74>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	4013      	ands	r3, r2
 8004822:	d105      	bne.n	8004830 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4013      	ands	r3, r2
 800482c:	d100      	bne.n	8004830 <HAL_SPI_IRQHandler+0x74>
 800482e:	e0a9      	b.n	8004984 <HAL_SPI_IRQHandler+0x1c8>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2220      	movs	r2, #32
 8004834:	4013      	ands	r3, r2
 8004836:	d100      	bne.n	800483a <HAL_SPI_IRQHandler+0x7e>
 8004838:	e0a4      	b.n	8004984 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	4013      	ands	r3, r2
 8004840:	d023      	beq.n	800488a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2251      	movs	r2, #81	; 0x51
 8004846:	5c9b      	ldrb	r3, [r3, r2]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b03      	cmp	r3, #3
 800484c:	d011      	beq.n	8004872 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	2204      	movs	r2, #4
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e00b      	b.n	800488a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	693b      	ldr	r3, [r7, #16]
        return;
 8004888:	e07c      	b.n	8004984 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2220      	movs	r2, #32
 800488e:	4013      	ands	r3, r2
 8004890:	d014      	beq.n	80048bc <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	2201      	movs	r2, #1
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	438a      	bics	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00c      	beq.n	80048e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	2208      	movs	r2, #8
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d04c      	beq.n	8004982 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	21e0      	movs	r1, #224	; 0xe0
 80048f4:	438a      	bics	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2251      	movs	r2, #81	; 0x51
 80048fc:	2101      	movs	r1, #1
 80048fe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d103      	bne.n	8004910 <HAL_SPI_IRQHandler+0x154>
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d032      	beq.n	8004976 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2103      	movs	r1, #3
 800491c:	438a      	bics	r2, r1
 800491e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_SPI_IRQHandler+0x1d0>)
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	0018      	movs	r0, r3
 8004936:	f7fd f831 	bl	800199c <HAL_DMA_Abort_IT>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	d005      	beq.n	800494a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	4a0d      	ldr	r2, [pc, #52]	; (800498c <HAL_SPI_IRQHandler+0x1d0>)
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	0018      	movs	r0, r3
 8004960:	f7fd f81c 	bl	800199c <HAL_DMA_Abort_IT>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d00b      	beq.n	8004980 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004974:	e004      	b.n	8004980 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 f821 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800497e:	e000      	b.n	8004982 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8004980:	46c0      	nop			; (mov r8, r8)
    return;
 8004982:	46c0      	nop			; (mov r8, r8)
  }
}
 8004984:	46bd      	mov	sp, r7
 8004986:	b008      	add	sp, #32
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	08004b91 	.word	0x08004b91

08004990 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049de:	f7fc fdf3 	bl	80015c8 <HAL_GetTick>
 80049e2:	0003      	movs	r3, r0
 80049e4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2220      	movs	r2, #32
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d03d      	beq.n	8004a70 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2120      	movs	r1, #32
 8004a00:	438a      	bics	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10e      	bne.n	8004a2a <SPI_DMAReceiveCplt+0x5a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	2382      	movs	r3, #130	; 0x82
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d108      	bne.n	8004a2a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2103      	movs	r1, #3
 8004a24:	438a      	bics	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	e007      	b.n	8004a3a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	438a      	bics	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	0018      	movs	r0, r3
 8004a42:	f000 f949 	bl	8004cd8 <SPI_EndRxTransaction>
 8004a46:	1e03      	subs	r3, r0, #0
 8004a48:	d002      	beq.n	8004a50 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2251      	movs	r2, #81	; 0x51
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7ff ffa9 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a6e:	e003      	b.n	8004a78 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7fc f86c 	bl	8000b50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a8c:	f7fc fd9c 	bl	80015c8 <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d030      	beq.n	8004b04 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2120      	movs	r1, #32
 8004aae:	438a      	bics	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2164      	movs	r1, #100	; 0x64
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f977 	bl	8004dac <SPI_EndRxTxTransaction>
 8004abe:	1e03      	subs	r3, r0, #0
 8004ac0:	d005      	beq.n	8004ace <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2103      	movs	r1, #3
 8004ada:	438a      	bics	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2251      	movs	r2, #81	; 0x51
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff ff5f 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b02:	e003      	b.n	8004b0c <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f7ff ff42 	bl	8004990 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f7ff ff3c 	bl	80049a0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b004      	add	sp, #16
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7ff ff35 	bl	80049b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b004      	add	sp, #16
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2103      	movs	r1, #3
 8004b68:	438a      	bics	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	2210      	movs	r2, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2251      	movs	r2, #81	; 0x51
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff ff1c 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7ff ff07 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bcc:	f7fc fcfc 	bl	80015c8 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	18d3      	adds	r3, r2, r3
 8004bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bdc:	f7fc fcf4 	bl	80015c8 <HAL_GetTick>
 8004be0:	0003      	movs	r3, r0
 8004be2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004be4:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	015b      	lsls	r3, r3, #5
 8004bea:	0d1b      	lsrs	r3, r3, #20
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	4353      	muls	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf2:	e058      	b.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d055      	beq.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bfa:	f7fc fce5 	bl	80015c8 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d902      	bls.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d142      	bne.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	21e0      	movs	r1, #224	; 0xe0
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	2382      	movs	r3, #130	; 0x82
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d113      	bne.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d005      	beq.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2140      	movs	r1, #64	; 0x40
 8004c50:	438a      	bics	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	019b      	lsls	r3, r3, #6
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d110      	bne.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	491a      	ldr	r1, [pc, #104]	; (8004cd4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	0189      	lsls	r1, r1, #6
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2251      	movs	r2, #81	; 0x51
 8004c86:	2101      	movs	r1, #1
 8004c88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2250      	movs	r2, #80	; 0x50
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e017      	b.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	425a      	negs	r2, r3
 8004cb6:	4153      	adcs	r3, r2
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	001a      	movs	r2, r3
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d197      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b008      	add	sp, #32
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	20000004 	.word	0x20000004
 8004cd4:	ffffdfff 	.word	0xffffdfff

08004cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	2382      	movs	r3, #130	; 0x82
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d113      	bne.n	8004d18 <SPI_EndRxTransaction+0x40>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2140      	movs	r1, #64	; 0x40
 8004d14:	438a      	bics	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	2382      	movs	r3, #130	; 0x82
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d12b      	bne.n	8004d7c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d012      	beq.n	8004d56 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	0013      	movs	r3, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	f7ff ff3d 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d02d      	beq.n	8004da2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e026      	b.n	8004da4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	0013      	movs	r3, r2
 8004d60:	2200      	movs	r2, #0
 8004d62:	2101      	movs	r1, #1
 8004d64:	f7ff ff2a 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d01a      	beq.n	8004da2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	2220      	movs	r2, #32
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e013      	b.n	8004da4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	0013      	movs	r3, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	2101      	movs	r1, #1
 8004d8a:	f7ff ff17 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004d8e:	1e03      	subs	r3, r0, #0
 8004d90:	d007      	beq.n	8004da2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2220      	movs	r2, #32
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e000      	b.n	8004da4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b004      	add	sp, #16
 8004daa:	bd80      	pop	{r7, pc}

08004dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <SPI_EndRxTxTransaction+0x84>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	491d      	ldr	r1, [pc, #116]	; (8004e34 <SPI_EndRxTxTransaction+0x88>)
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fb f9b4 	bl	800012c <__udivsi3>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	0013      	movs	r3, r2
 8004dca:	015b      	lsls	r3, r3, #5
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	2382      	movs	r3, #130	; 0x82
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d112      	bne.n	8004e08 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	0013      	movs	r3, r2
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	f7ff fee4 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d016      	beq.n	8004e26 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e00f      	b.n	8004e28 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d0f2      	beq.n	8004e08 <SPI_EndRxTxTransaction+0x5c>
 8004e22:	e000      	b.n	8004e26 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004e24:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b006      	add	sp, #24
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000004 	.word	0x20000004
 8004e34:	016e3600 	.word	0x016e3600

08004e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e044      	b.n	8004ed4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d107      	bne.n	8004e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2278      	movs	r2, #120	; 0x78
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fb ffb5 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2224      	movs	r2, #36	; 0x24
 8004e66:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2101      	movs	r1, #1
 8004e74:	438a      	bics	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 f8d0 	bl	8005020 <UART_SetConfig>
 8004e80:	0003      	movs	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e024      	b.n	8004ed4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 fb47 	bl	8005528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	490d      	ldr	r1, [pc, #52]	; (8004edc <HAL_UART_Init+0xa4>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	212a      	movs	r1, #42	; 0x2a
 8004eb6:	438a      	bics	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f000 fbdf 	bl	8005690 <UART_CheckIdleState>
 8004ed2:	0003      	movs	r3, r0
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	ffffb7ff 	.word	0xffffb7ff

08004ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	; 0x28
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d000      	beq.n	8004efa <HAL_UART_Transmit+0x1a>
 8004ef8:	e08c      	b.n	8005014 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_UART_Transmit+0x28>
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e084      	b.n	8005016 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d109      	bne.n	8004f2c <HAL_UART_Transmit+0x4c>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2201      	movs	r2, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	d001      	beq.n	8004f2c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e074      	b.n	8005016 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2284      	movs	r2, #132	; 0x84
 8004f30:	2100      	movs	r1, #0
 8004f32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2221      	movs	r2, #33	; 0x21
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fb45 	bl	80015c8 <HAL_GetTick>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1dba      	adds	r2, r7, #6
 8004f46:	2150      	movs	r1, #80	; 0x50
 8004f48:	8812      	ldrh	r2, [r2, #0]
 8004f4a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1dba      	adds	r2, r7, #6
 8004f50:	2152      	movs	r1, #82	; 0x52
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	015b      	lsls	r3, r3, #5
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d108      	bne.n	8004f74 <HAL_UART_Transmit+0x94>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e003      	b.n	8004f7c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f7c:	e02f      	b.n	8004fde <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	0013      	movs	r3, r2
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	f000 fc28 	bl	80057e0 <UART_WaitOnFlagUntilTimeout>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d004      	beq.n	8004f9e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e03b      	b.n	8005016 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	001a      	movs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	05d2      	lsls	r2, r2, #23
 8004fb0:	0dd2      	lsrs	r2, r2, #23
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	3302      	adds	r3, #2
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e007      	b.n	8004fcc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2252      	movs	r2, #82	; 0x52
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2252      	movs	r2, #82	; 0x52
 8004fdc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2252      	movs	r2, #82	; 0x52
 8004fe2:	5a9b      	ldrh	r3, [r3, r2]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1c9      	bne.n	8004f7e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	0013      	movs	r3, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	f000 fbf2 	bl	80057e0 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	1e03      	subs	r3, r0, #0
 8004ffe:	d004      	beq.n	800500a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e005      	b.n	8005016 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	b008      	add	sp, #32
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	b5b0      	push	{r4, r5, r7, lr}
 8005022:	b08e      	sub	sp, #56	; 0x38
 8005024:	af00      	add	r7, sp, #0
 8005026:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005028:	231a      	movs	r3, #26
 800502a:	2218      	movs	r2, #24
 800502c:	189b      	adds	r3, r3, r2
 800502e:	19db      	adds	r3, r3, r7
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	431a      	orrs	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	4313      	orrs	r3, r2
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4ac6      	ldr	r2, [pc, #792]	; (800536c <UART_SetConfig+0x34c>)
 8005054:	4013      	ands	r3, r2
 8005056:	0019      	movs	r1, r3
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4ac1      	ldr	r2, [pc, #772]	; (8005370 <UART_SetConfig+0x350>)
 800506a:	4013      	ands	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4abb      	ldr	r2, [pc, #748]	; (8005374 <UART_SetConfig+0x354>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005090:	4313      	orrs	r3, r2
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4ab7      	ldr	r2, [pc, #732]	; (8005378 <UART_SetConfig+0x358>)
 800509c:	4013      	ands	r3, r2
 800509e:	0019      	movs	r1, r3
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4ab3      	ldr	r2, [pc, #716]	; (800537c <UART_SetConfig+0x35c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d131      	bne.n	8005118 <UART_SetConfig+0xf8>
 80050b4:	4bb2      	ldr	r3, [pc, #712]	; (8005380 <UART_SetConfig+0x360>)
 80050b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b8:	2203      	movs	r2, #3
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d01d      	beq.n	80050fc <UART_SetConfig+0xdc>
 80050c0:	d823      	bhi.n	800510a <UART_SetConfig+0xea>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d00c      	beq.n	80050e0 <UART_SetConfig+0xc0>
 80050c6:	d820      	bhi.n	800510a <UART_SetConfig+0xea>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <UART_SetConfig+0xb2>
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d00e      	beq.n	80050ee <UART_SetConfig+0xce>
 80050d0:	e01b      	b.n	800510a <UART_SetConfig+0xea>
 80050d2:	231b      	movs	r3, #27
 80050d4:	2218      	movs	r2, #24
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	19db      	adds	r3, r3, r7
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e09c      	b.n	800521a <UART_SetConfig+0x1fa>
 80050e0:	231b      	movs	r3, #27
 80050e2:	2218      	movs	r2, #24
 80050e4:	189b      	adds	r3, r3, r2
 80050e6:	19db      	adds	r3, r3, r7
 80050e8:	2202      	movs	r2, #2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e095      	b.n	800521a <UART_SetConfig+0x1fa>
 80050ee:	231b      	movs	r3, #27
 80050f0:	2218      	movs	r2, #24
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	19db      	adds	r3, r3, r7
 80050f6:	2204      	movs	r2, #4
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e08e      	b.n	800521a <UART_SetConfig+0x1fa>
 80050fc:	231b      	movs	r3, #27
 80050fe:	2218      	movs	r2, #24
 8005100:	189b      	adds	r3, r3, r2
 8005102:	19db      	adds	r3, r3, r7
 8005104:	2208      	movs	r2, #8
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	e087      	b.n	800521a <UART_SetConfig+0x1fa>
 800510a:	231b      	movs	r3, #27
 800510c:	2218      	movs	r2, #24
 800510e:	189b      	adds	r3, r3, r2
 8005110:	19db      	adds	r3, r3, r7
 8005112:	2210      	movs	r2, #16
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	e080      	b.n	800521a <UART_SetConfig+0x1fa>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a99      	ldr	r2, [pc, #612]	; (8005384 <UART_SetConfig+0x364>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d131      	bne.n	8005186 <UART_SetConfig+0x166>
 8005122:	4b97      	ldr	r3, [pc, #604]	; (8005380 <UART_SetConfig+0x360>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	220c      	movs	r2, #12
 8005128:	4013      	ands	r3, r2
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d01d      	beq.n	800516a <UART_SetConfig+0x14a>
 800512e:	d823      	bhi.n	8005178 <UART_SetConfig+0x158>
 8005130:	2b08      	cmp	r3, #8
 8005132:	d00c      	beq.n	800514e <UART_SetConfig+0x12e>
 8005134:	d820      	bhi.n	8005178 <UART_SetConfig+0x158>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <UART_SetConfig+0x120>
 800513a:	2b04      	cmp	r3, #4
 800513c:	d00e      	beq.n	800515c <UART_SetConfig+0x13c>
 800513e:	e01b      	b.n	8005178 <UART_SetConfig+0x158>
 8005140:	231b      	movs	r3, #27
 8005142:	2218      	movs	r2, #24
 8005144:	189b      	adds	r3, r3, r2
 8005146:	19db      	adds	r3, r3, r7
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	e065      	b.n	800521a <UART_SetConfig+0x1fa>
 800514e:	231b      	movs	r3, #27
 8005150:	2218      	movs	r2, #24
 8005152:	189b      	adds	r3, r3, r2
 8005154:	19db      	adds	r3, r3, r7
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e05e      	b.n	800521a <UART_SetConfig+0x1fa>
 800515c:	231b      	movs	r3, #27
 800515e:	2218      	movs	r2, #24
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2204      	movs	r2, #4
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e057      	b.n	800521a <UART_SetConfig+0x1fa>
 800516a:	231b      	movs	r3, #27
 800516c:	2218      	movs	r2, #24
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	2208      	movs	r2, #8
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e050      	b.n	800521a <UART_SetConfig+0x1fa>
 8005178:	231b      	movs	r3, #27
 800517a:	2218      	movs	r2, #24
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2210      	movs	r2, #16
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e049      	b.n	800521a <UART_SetConfig+0x1fa>
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7a      	ldr	r2, [pc, #488]	; (8005374 <UART_SetConfig+0x354>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d13e      	bne.n	800520e <UART_SetConfig+0x1ee>
 8005190:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <UART_SetConfig+0x360>)
 8005192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005194:	23c0      	movs	r3, #192	; 0xc0
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4013      	ands	r3, r2
 800519a:	22c0      	movs	r2, #192	; 0xc0
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	4293      	cmp	r3, r2
 80051a0:	d027      	beq.n	80051f2 <UART_SetConfig+0x1d2>
 80051a2:	22c0      	movs	r2, #192	; 0xc0
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d82a      	bhi.n	8005200 <UART_SetConfig+0x1e0>
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	0112      	lsls	r2, r2, #4
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d011      	beq.n	80051d6 <UART_SetConfig+0x1b6>
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	0112      	lsls	r2, r2, #4
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d822      	bhi.n	8005200 <UART_SetConfig+0x1e0>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <UART_SetConfig+0x1a8>
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	00d2      	lsls	r2, r2, #3
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <UART_SetConfig+0x1c4>
 80051c6:	e01b      	b.n	8005200 <UART_SetConfig+0x1e0>
 80051c8:	231b      	movs	r3, #27
 80051ca:	2218      	movs	r2, #24
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e021      	b.n	800521a <UART_SetConfig+0x1fa>
 80051d6:	231b      	movs	r3, #27
 80051d8:	2218      	movs	r2, #24
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	19db      	adds	r3, r3, r7
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e01a      	b.n	800521a <UART_SetConfig+0x1fa>
 80051e4:	231b      	movs	r3, #27
 80051e6:	2218      	movs	r2, #24
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2204      	movs	r2, #4
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e013      	b.n	800521a <UART_SetConfig+0x1fa>
 80051f2:	231b      	movs	r3, #27
 80051f4:	2218      	movs	r2, #24
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	19db      	adds	r3, r3, r7
 80051fa:	2208      	movs	r2, #8
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e00c      	b.n	800521a <UART_SetConfig+0x1fa>
 8005200:	231b      	movs	r3, #27
 8005202:	2218      	movs	r2, #24
 8005204:	189b      	adds	r3, r3, r2
 8005206:	19db      	adds	r3, r3, r7
 8005208:	2210      	movs	r2, #16
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x1fa>
 800520e:	231b      	movs	r3, #27
 8005210:	2218      	movs	r2, #24
 8005212:	189b      	adds	r3, r3, r2
 8005214:	19db      	adds	r3, r3, r7
 8005216:	2210      	movs	r2, #16
 8005218:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a55      	ldr	r2, [pc, #340]	; (8005374 <UART_SetConfig+0x354>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d000      	beq.n	8005226 <UART_SetConfig+0x206>
 8005224:	e084      	b.n	8005330 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005226:	231b      	movs	r3, #27
 8005228:	2218      	movs	r2, #24
 800522a:	189b      	adds	r3, r3, r2
 800522c:	19db      	adds	r3, r3, r7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d01d      	beq.n	8005270 <UART_SetConfig+0x250>
 8005234:	dc20      	bgt.n	8005278 <UART_SetConfig+0x258>
 8005236:	2b04      	cmp	r3, #4
 8005238:	d015      	beq.n	8005266 <UART_SetConfig+0x246>
 800523a:	dc1d      	bgt.n	8005278 <UART_SetConfig+0x258>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <UART_SetConfig+0x226>
 8005240:	2b02      	cmp	r3, #2
 8005242:	d005      	beq.n	8005250 <UART_SetConfig+0x230>
 8005244:	e018      	b.n	8005278 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fe fa2d 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 800524a:	0003      	movs	r3, r0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800524e:	e01c      	b.n	800528a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005250:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <UART_SetConfig+0x360>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d002      	beq.n	8005260 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <UART_SetConfig+0x368>)
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800525e:	e014      	b.n	800528a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005260:	4b4a      	ldr	r3, [pc, #296]	; (800538c <UART_SetConfig+0x36c>)
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005264:	e011      	b.n	800528a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005266:	f7fe f96d 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 800526a:	0003      	movs	r3, r0
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800526e:	e00c      	b.n	800528a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005276:	e008      	b.n	800528a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800527c:	231a      	movs	r3, #26
 800527e:	2218      	movs	r2, #24
 8005280:	189b      	adds	r3, r3, r2
 8005282:	19db      	adds	r3, r3, r7
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
        break;
 8005288:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d100      	bne.n	8005292 <UART_SetConfig+0x272>
 8005290:	e132      	b.n	80054f8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	0013      	movs	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	189b      	adds	r3, r3, r2
 800529c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529e:	429a      	cmp	r2, r3
 80052a0:	d305      	bcc.n	80052ae <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d906      	bls.n	80052bc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80052ae:	231a      	movs	r3, #26
 80052b0:	2218      	movs	r2, #24
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e11d      	b.n	80054f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	6939      	ldr	r1, [r7, #16]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	000b      	movs	r3, r1
 80052ca:	0e1b      	lsrs	r3, r3, #24
 80052cc:	0010      	movs	r0, r2
 80052ce:	0205      	lsls	r5, r0, #8
 80052d0:	431d      	orrs	r5, r3
 80052d2:	000b      	movs	r3, r1
 80052d4:	021c      	lsls	r4, r3, #8
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	68b8      	ldr	r0, [r7, #8]
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	1900      	adds	r0, r0, r4
 80052e8:	4169      	adcs	r1, r5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f7fa ffa4 	bl	8000244 <__aeabi_uldivmod>
 80052fc:	0002      	movs	r2, r0
 80052fe:	000b      	movs	r3, r1
 8005300:	0013      	movs	r3, r2
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	23c0      	movs	r3, #192	; 0xc0
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	429a      	cmp	r2, r3
 800530c:	d309      	bcc.n	8005322 <UART_SetConfig+0x302>
 800530e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	035b      	lsls	r3, r3, #13
 8005314:	429a      	cmp	r2, r3
 8005316:	d204      	bcs.n	8005322 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e0ea      	b.n	80054f8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005322:	231a      	movs	r3, #26
 8005324:	2218      	movs	r2, #24
 8005326:	189b      	adds	r3, r3, r2
 8005328:	19db      	adds	r3, r3, r7
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e0e3      	b.n	80054f8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	429a      	cmp	r2, r3
 800533a:	d000      	beq.n	800533e <UART_SetConfig+0x31e>
 800533c:	e085      	b.n	800544a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800533e:	231b      	movs	r3, #27
 8005340:	2218      	movs	r2, #24
 8005342:	189b      	adds	r3, r3, r2
 8005344:	19db      	adds	r3, r3, r7
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d837      	bhi.n	80053bc <UART_SetConfig+0x39c>
 800534c:	009a      	lsls	r2, r3, #2
 800534e:	4b10      	ldr	r3, [pc, #64]	; (8005390 <UART_SetConfig+0x370>)
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005356:	f7fe f9a5 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 800535a:	0003      	movs	r3, r0
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800535e:	e036      	b.n	80053ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe f9b6 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005364:	0003      	movs	r3, r0
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005368:	e031      	b.n	80053ce <UART_SetConfig+0x3ae>
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	efff69f3 	.word	0xefff69f3
 8005370:	ffffcfff 	.word	0xffffcfff
 8005374:	40004800 	.word	0x40004800
 8005378:	fffff4ff 	.word	0xfffff4ff
 800537c:	40013800 	.word	0x40013800
 8005380:	40021000 	.word	0x40021000
 8005384:	40004400 	.word	0x40004400
 8005388:	003d0900 	.word	0x003d0900
 800538c:	00f42400 	.word	0x00f42400
 8005390:	0800a7bc 	.word	0x0800a7bc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005394:	4b60      	ldr	r3, [pc, #384]	; (8005518 <UART_SetConfig+0x4f8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2210      	movs	r2, #16
 800539a:	4013      	ands	r3, r2
 800539c:	d002      	beq.n	80053a4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800539e:	4b5f      	ldr	r3, [pc, #380]	; (800551c <UART_SetConfig+0x4fc>)
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a2:	e014      	b.n	80053ce <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b5e      	ldr	r3, [pc, #376]	; (8005520 <UART_SetConfig+0x500>)
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053a8:	e011      	b.n	80053ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fe f8cb 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 80053ae:	0003      	movs	r3, r0
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053b2:	e00c      	b.n	80053ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053ba:	e008      	b.n	80053ce <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053c0:	231a      	movs	r3, #26
 80053c2:	2218      	movs	r2, #24
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	19db      	adds	r3, r3, r7
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
        break;
 80053cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d100      	bne.n	80053d6 <UART_SetConfig+0x3b6>
 80053d4:	e090      	b.n	80054f8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	005a      	lsls	r2, r3, #1
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	18d2      	adds	r2, r2, r3
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	0019      	movs	r1, r3
 80053e8:	0010      	movs	r0, r2
 80053ea:	f7fa fe9f 	bl	800012c <__udivsi3>
 80053ee:	0003      	movs	r3, r0
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	d921      	bls.n	800543c <UART_SetConfig+0x41c>
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	025b      	lsls	r3, r3, #9
 80053fe:	429a      	cmp	r2, r3
 8005400:	d21c      	bcs.n	800543c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	b29a      	uxth	r2, r3
 8005406:	200e      	movs	r0, #14
 8005408:	2418      	movs	r4, #24
 800540a:	1903      	adds	r3, r0, r4
 800540c:	19db      	adds	r3, r3, r7
 800540e:	210f      	movs	r1, #15
 8005410:	438a      	bics	r2, r1
 8005412:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	2207      	movs	r2, #7
 800541c:	4013      	ands	r3, r2
 800541e:	b299      	uxth	r1, r3
 8005420:	1903      	adds	r3, r0, r4
 8005422:	19db      	adds	r3, r3, r7
 8005424:	1902      	adds	r2, r0, r4
 8005426:	19d2      	adds	r2, r2, r7
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1902      	adds	r2, r0, r4
 8005434:	19d2      	adds	r2, r2, r7
 8005436:	8812      	ldrh	r2, [r2, #0]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	e05d      	b.n	80054f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800543c:	231a      	movs	r3, #26
 800543e:	2218      	movs	r2, #24
 8005440:	189b      	adds	r3, r3, r2
 8005442:	19db      	adds	r3, r3, r7
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e056      	b.n	80054f8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800544a:	231b      	movs	r3, #27
 800544c:	2218      	movs	r2, #24
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d822      	bhi.n	800549e <UART_SetConfig+0x47e>
 8005458:	009a      	lsls	r2, r3, #2
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <UART_SetConfig+0x504>)
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005462:	f7fe f91f 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8005466:	0003      	movs	r3, r0
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800546a:	e021      	b.n	80054b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe f930 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005470:	0003      	movs	r3, r0
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005474:	e01c      	b.n	80054b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005476:	4b28      	ldr	r3, [pc, #160]	; (8005518 <UART_SetConfig+0x4f8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	4013      	ands	r3, r2
 800547e:	d002      	beq.n	8005486 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005480:	4b26      	ldr	r3, [pc, #152]	; (800551c <UART_SetConfig+0x4fc>)
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005484:	e014      	b.n	80054b0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <UART_SetConfig+0x500>)
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800548a:	e011      	b.n	80054b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548c:	f7fe f85a 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8005490:	0003      	movs	r3, r0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005494:	e00c      	b.n	80054b0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549c:	e008      	b.n	80054b0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054a2:	231a      	movs	r3, #26
 80054a4:	2218      	movs	r2, #24
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	19db      	adds	r3, r3, r7
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
        break;
 80054ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d020      	beq.n	80054f8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085a      	lsrs	r2, r3, #1
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	18d2      	adds	r2, r2, r3
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	0019      	movs	r1, r3
 80054c6:	0010      	movs	r0, r2
 80054c8:	f7fa fe30 	bl	800012c <__udivsi3>
 80054cc:	0003      	movs	r3, r0
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	d90a      	bls.n	80054ec <UART_SetConfig+0x4cc>
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	429a      	cmp	r2, r3
 80054de:	d205      	bcs.n	80054ec <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e005      	b.n	80054f8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80054ec:	231a      	movs	r3, #26
 80054ee:	2218      	movs	r2, #24
 80054f0:	189b      	adds	r3, r3, r2
 80054f2:	19db      	adds	r3, r3, r7
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2200      	movs	r2, #0
 80054fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2200      	movs	r2, #0
 8005502:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005504:	231a      	movs	r3, #26
 8005506:	2218      	movs	r2, #24
 8005508:	189b      	adds	r3, r3, r2
 800550a:	19db      	adds	r3, r3, r7
 800550c:	781b      	ldrb	r3, [r3, #0]
}
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b00e      	add	sp, #56	; 0x38
 8005514:	bdb0      	pop	{r4, r5, r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	40021000 	.word	0x40021000
 800551c:	003d0900 	.word	0x003d0900
 8005520:	00f42400 	.word	0x00f42400
 8005524:	0800a7e0 	.word	0x0800a7e0

08005528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	2201      	movs	r2, #1
 8005536:	4013      	ands	r3, r2
 8005538:	d00b      	beq.n	8005552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a4a      	ldr	r2, [pc, #296]	; (800566c <UART_AdvFeatureConfig+0x144>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2202      	movs	r2, #2
 8005558:	4013      	ands	r3, r2
 800555a:	d00b      	beq.n	8005574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4a43      	ldr	r2, [pc, #268]	; (8005670 <UART_AdvFeatureConfig+0x148>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2204      	movs	r2, #4
 800557a:	4013      	ands	r3, r2
 800557c:	d00b      	beq.n	8005596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <UART_AdvFeatureConfig+0x14c>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2208      	movs	r2, #8
 800559c:	4013      	ands	r3, r2
 800559e:	d00b      	beq.n	80055b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a34      	ldr	r2, [pc, #208]	; (8005678 <UART_AdvFeatureConfig+0x150>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	0019      	movs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2210      	movs	r2, #16
 80055be:	4013      	ands	r3, r2
 80055c0:	d00b      	beq.n	80055da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	; (800567c <UART_AdvFeatureConfig+0x154>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2220      	movs	r2, #32
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <UART_AdvFeatureConfig+0x158>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	4013      	ands	r3, r2
 8005604:	d01d      	beq.n	8005642 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <UART_AdvFeatureConfig+0x15c>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	035b      	lsls	r3, r3, #13
 8005626:	429a      	cmp	r2, r3
 8005628:	d10b      	bne.n	8005642 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <UART_AdvFeatureConfig+0x160>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a0e      	ldr	r2, [pc, #56]	; (800568c <UART_AdvFeatureConfig+0x164>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}
 800566c:	fffdffff 	.word	0xfffdffff
 8005670:	fffeffff 	.word	0xfffeffff
 8005674:	fffbffff 	.word	0xfffbffff
 8005678:	ffff7fff 	.word	0xffff7fff
 800567c:	ffffefff 	.word	0xffffefff
 8005680:	ffffdfff 	.word	0xffffdfff
 8005684:	ffefffff 	.word	0xffefffff
 8005688:	ff9fffff 	.word	0xff9fffff
 800568c:	fff7ffff 	.word	0xfff7ffff

08005690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b092      	sub	sp, #72	; 0x48
 8005694:	af02      	add	r7, sp, #8
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2284      	movs	r2, #132	; 0x84
 800569c:	2100      	movs	r1, #0
 800569e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a0:	f7fb ff92 	bl	80015c8 <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2208      	movs	r2, #8
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d12c      	bne.n	8005710 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	0391      	lsls	r1, r2, #14
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4a46      	ldr	r2, [pc, #280]	; (80057d8 <UART_CheckIdleState+0x148>)
 80056c0:	9200      	str	r2, [sp, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f000 f88c 	bl	80057e0 <UART_WaitOnFlagUntilTimeout>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d021      	beq.n	8005710 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056cc:	f3ef 8310 	mrs	r3, PRIMASK
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d6:	2301      	movs	r3, #1
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	438a      	bics	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2278      	movs	r2, #120	; 0x78
 8005708:	2100      	movs	r1, #0
 800570a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e05f      	b.n	80057d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2204      	movs	r2, #4
 8005718:	4013      	ands	r3, r2
 800571a:	2b04      	cmp	r3, #4
 800571c:	d146      	bne.n	80057ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	03d1      	lsls	r1, r2, #15
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <UART_CheckIdleState+0x148>)
 8005728:	9200      	str	r2, [sp, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	f000 f858 	bl	80057e0 <UART_WaitOnFlagUntilTimeout>
 8005730:	1e03      	subs	r3, r0, #0
 8005732:	d03b      	beq.n	80057ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	60fb      	str	r3, [r7, #12]
  return(result);
 800573a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	2301      	movs	r3, #1
 8005740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4921      	ldr	r1, [pc, #132]	; (80057dc <UART_CheckIdleState+0x14c>)
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	61bb      	str	r3, [r7, #24]
  return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
 8005770:	2301      	movs	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2101      	movs	r1, #1
 8005788:	438a      	bics	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	2120      	movs	r1, #32
 800579e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2278      	movs	r2, #120	; 0x78
 80057a4:	2100      	movs	r1, #0
 80057a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e011      	b.n	80057d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	2120      	movs	r1, #32
 80057b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2278      	movs	r2, #120	; 0x78
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b010      	add	sp, #64	; 0x40
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	01ffffff 	.word	0x01ffffff
 80057dc:	fffffedf 	.word	0xfffffedf

080057e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	1dfb      	adds	r3, r7, #7
 80057ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f0:	e04b      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d048      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f8:	f7fb fee6 	bl	80015c8 <HAL_GetTick>
 80057fc:	0002      	movs	r2, r0
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e04b      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2204      	movs	r2, #4
 800581a:	4013      	ands	r3, r2
 800581c:	d035      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2208      	movs	r2, #8
 8005826:	4013      	ands	r3, r2
 8005828:	2b08      	cmp	r3, #8
 800582a:	d111      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2208      	movs	r2, #8
 8005832:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	0018      	movs	r0, r3
 8005838:	f000 f83c 	bl	80058b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2284      	movs	r2, #132	; 0x84
 8005840:	2108      	movs	r1, #8
 8005842:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2278      	movs	r2, #120	; 0x78
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e02c      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	401a      	ands	r2, r3
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	429a      	cmp	r2, r3
 8005862:	d112      	bne.n	800588a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	0112      	lsls	r2, r2, #4
 800586c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f81f 	bl	80058b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2284      	movs	r2, #132	; 0x84
 800587a:	2120      	movs	r1, #32
 800587c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2278      	movs	r2, #120	; 0x78
 8005882:	2100      	movs	r1, #0
 8005884:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e00f      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	425a      	negs	r2, r3
 800589a:	4153      	adcs	r3, r2
 800589c:	b2db      	uxtb	r3, r3
 800589e:	001a      	movs	r2, r3
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d0a4      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058bc:	f3ef 8310 	mrs	r3, PRIMASK
 80058c0:	617b      	str	r3, [r7, #20]
  return(result);
 80058c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	2301      	movs	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f383 8810 	msr	PRIMASK, r3
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4926      	ldr	r1, [pc, #152]	; (8005978 <UART_EndRxTransfer+0xc4>)
 80058de:	400a      	ands	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	623b      	str	r3, [r7, #32]
  return(result);
 80058f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
 80058f8:	2301      	movs	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f383 8810 	msr	PRIMASK, r3
}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2101      	movs	r1, #1
 8005910:	438a      	bics	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005924:	2b01      	cmp	r3, #1
 8005926:	d118      	bne.n	800595a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	60bb      	str	r3, [r7, #8]
  return(result);
 800592e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005932:	2301      	movs	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2110      	movs	r1, #16
 800594a:	438a      	bics	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	2120      	movs	r1, #32
 8005960:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b00e      	add	sp, #56	; 0x38
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	fffffedf 	.word	0xfffffedf

0800597c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005980:	4a06      	ldr	r2, [pc, #24]	; (800599c <MX_FATFS_Init+0x20>)
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <MX_FATFS_Init+0x24>)
 8005984:	0011      	movs	r1, r2
 8005986:	0018      	movs	r0, r3
 8005988:	f003 fd5e 	bl	8009448 <FATFS_LinkDriver>
 800598c:	0003      	movs	r3, r0
 800598e:	001a      	movs	r2, r3
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <MX_FATFS_Init+0x28>)
 8005992:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	200006dc 	.word	0x200006dc
 80059a0:	20000014 	.word	0x20000014
 80059a4:	200006d8 	.word	0x200006d8

080059a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059ae:	0018      	movs	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	0002      	movs	r2, r0
 80059bc:	1dfb      	adds	r3, r7, #7
 80059be:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); // User Modification
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fa19 	bl	8005dfc <USER_SPI_initialize>
 80059ca:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	0002      	movs	r2, r0
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //User Modification
 80059e0:	1dfb      	adds	r3, r7, #7
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	0018      	movs	r0, r3
 80059e6:	f000 fb21 	bl	800602c <USER_SPI_status>
 80059ea:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	250f      	movs	r5, #15
 8005a02:	197b      	adds	r3, r7, r5
 8005a04:	1c02      	adds	r2, r0, #0
 8005a06:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005a08:	683c      	ldr	r4, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	197b      	adds	r3, r7, r5
 8005a10:	7818      	ldrb	r0, [r3, #0]
 8005a12:	0023      	movs	r3, r4
 8005a14:	f000 fb20 	bl	8006058 <USER_SPI_read>
 8005a18:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bdb0      	pop	{r4, r5, r7, pc}

08005a22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005a22:	b5b0      	push	{r4, r5, r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	250f      	movs	r5, #15
 8005a30:	197b      	adds	r3, r7, r5
 8005a32:	1c02      	adds	r2, r0, #0
 8005a34:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005a36:	683c      	ldr	r4, [r7, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	197b      	adds	r3, r7, r5
 8005a3e:	7818      	ldrb	r0, [r3, #0]
 8005a40:	0023      	movs	r3, r4
 8005a42:	f000 fb75 	bl	8006130 <USER_SPI_write>
 8005a46:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b004      	add	sp, #16
 8005a4e:	bdb0      	pop	{r4, r5, r7, pc}

08005a50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	603a      	str	r2, [r7, #0]
 8005a58:	1dfb      	adds	r3, r7, #7
 8005a5a:	1c02      	adds	r2, r0, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	1dbb      	adds	r3, r7, #6
 8005a60:	1c0a      	adds	r2, r1, #0
 8005a62:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	7819      	ldrb	r1, [r3, #0]
 8005a6a:	1dfb      	adds	r3, r7, #7
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 fbde 	bl	8006230 <USER_SPI_ioctl>
 8005a74:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005a88:	f7fb fd9e 	bl	80015c8 <HAL_GetTick>
 8005a8c:	0002      	movs	r2, r0
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <SPI_Timer_On+0x20>)
 8005a90:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <SPI_Timer_On+0x24>)
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	200006e4 	.word	0x200006e4
 8005aa4:	200006e8 	.word	0x200006e8

08005aa8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005aac:	f7fb fd8c 	bl	80015c8 <HAL_GetTick>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <SPI_Timer_Status+0x24>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <SPI_Timer_Status+0x28>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	419b      	sbcs	r3, r3
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	200006e4 	.word	0x200006e4
 8005ad0:	200006e8 	.word	0x200006e8

08005ad4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	0002      	movs	r2, r0
 8005adc:	1dfb      	adds	r3, r7, #7
 8005ade:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005ae0:	240f      	movs	r4, #15
 8005ae2:	193a      	adds	r2, r7, r4
 8005ae4:	1df9      	adds	r1, r7, #7
 8005ae6:	4806      	ldr	r0, [pc, #24]	; (8005b00 <xchg_spi+0x2c>)
 8005ae8:	2332      	movs	r3, #50	; 0x32
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2301      	movs	r3, #1
 8005aee:	f7fe fab3 	bl	8004058 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	781b      	ldrb	r3, [r3, #0]
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b005      	add	sp, #20
 8005afc:	bd90      	pop	{r4, r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	200000ec 	.word	0x200000ec

08005b04 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e00a      	b.n	8005b2a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	18d4      	adds	r4, r2, r3
 8005b1a:	20ff      	movs	r0, #255	; 0xff
 8005b1c:	f7ff ffda 	bl	8005ad4 <xchg_spi>
 8005b20:	0003      	movs	r3, r0
 8005b22:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3f0      	bcc.n	8005b14 <rcvr_spi_multi+0x10>
	}
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b005      	add	sp, #20
 8005b3a:	bd90      	pop	{r4, r7, pc}

08005b3c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4803      	ldr	r0, [pc, #12]	; (8005b60 <xmit_spi_multi+0x24>)
 8005b52:	f7fd fff5 	bl	8003b40 <HAL_SPI_Transmit>
}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	200000ec 	.word	0x200000ec

08005b64 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005b64:	b5b0      	push	{r4, r5, r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005b6c:	f7fb fd2c 	bl	80015c8 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005b78:	250f      	movs	r5, #15
 8005b7a:	197c      	adds	r4, r7, r5
 8005b7c:	20ff      	movs	r0, #255	; 0xff
 8005b7e:	f7ff ffa9 	bl	8005ad4 <xchg_spi>
 8005b82:	0003      	movs	r3, r0
 8005b84:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005b86:	197b      	adds	r3, r7, r5
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2bff      	cmp	r3, #255	; 0xff
 8005b8c:	d007      	beq.n	8005b9e <wait_ready+0x3a>
 8005b8e:	f7fb fd1b 	bl	80015c8 <HAL_GetTick>
 8005b92:	0002      	movs	r2, r0
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d8ec      	bhi.n	8005b78 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8005b9e:	230f      	movs	r3, #15
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	3bff      	subs	r3, #255	; 0xff
 8005ba6:	425a      	negs	r2, r3
 8005ba8:	4153      	adcs	r3, r2
 8005baa:	b2db      	uxtb	r3, r3
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b006      	add	sp, #24
 8005bb2:	bdb0      	pop	{r4, r5, r7, pc}

08005bb4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <despiselect+0x1c>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2180      	movs	r1, #128	; 0x80
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7fc f9a3 	bl	8001f0a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005bc4:	20ff      	movs	r0, #255	; 0xff
 8005bc6:	f7ff ff85 	bl	8005ad4 <xchg_spi>

}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	50000800 	.word	0x50000800

08005bd4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <spiselect+0x34>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7fc f993 	bl	8001f0a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005be4:	20ff      	movs	r0, #255	; 0xff
 8005be6:	f7ff ff75 	bl	8005ad4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005bea:	23fa      	movs	r3, #250	; 0xfa
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7ff ffb8 	bl	8005b64 <wait_ready>
 8005bf4:	1e03      	subs	r3, r0, #0
 8005bf6:	d001      	beq.n	8005bfc <spiselect+0x28>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e002      	b.n	8005c02 <spiselect+0x2e>

	despiselect();
 8005bfc:	f7ff ffda 	bl	8005bb4 <despiselect>
	return 0;	/* Timeout */
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	0018      	movs	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	50000800 	.word	0x50000800

08005c0c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005c0c:	b5b0      	push	{r4, r5, r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005c16:	20c8      	movs	r0, #200	; 0xc8
 8005c18:	f7ff ff32 	bl	8005a80 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005c1c:	250f      	movs	r5, #15
 8005c1e:	197c      	adds	r4, r7, r5
 8005c20:	20ff      	movs	r0, #255	; 0xff
 8005c22:	f7ff ff57 	bl	8005ad4 <xchg_spi>
 8005c26:	0003      	movs	r3, r0
 8005c28:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005c2a:	197b      	adds	r3, r7, r5
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d103      	bne.n	8005c3a <rcvr_datablock+0x2e>
 8005c32:	f7ff ff39 	bl	8005aa8 <SPI_Timer_Status>
 8005c36:	1e03      	subs	r3, r0, #0
 8005c38:	d1f0      	bne.n	8005c1c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005c3a:	230f      	movs	r3, #15
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2bfe      	cmp	r3, #254	; 0xfe
 8005c42:	d001      	beq.n	8005c48 <rcvr_datablock+0x3c>
 8005c44:	2300      	movs	r3, #0
 8005c46:	e00c      	b.n	8005c62 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff ff58 	bl	8005b04 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005c54:	20ff      	movs	r0, #255	; 0xff
 8005c56:	f7ff ff3d 	bl	8005ad4 <xchg_spi>
 8005c5a:	20ff      	movs	r0, #255	; 0xff
 8005c5c:	f7ff ff3a 	bl	8005ad4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005c60:	2301      	movs	r3, #1
}
 8005c62:	0018      	movs	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b004      	add	sp, #16
 8005c68:	bdb0      	pop	{r4, r5, r7, pc}

08005c6a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005c6a:	b5b0      	push	{r4, r5, r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	000a      	movs	r2, r1
 8005c74:	1cfb      	adds	r3, r7, #3
 8005c76:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005c78:	23fa      	movs	r3, #250	; 0xfa
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff ff71 	bl	8005b64 <wait_ready>
 8005c82:	1e03      	subs	r3, r0, #0
 8005c84:	d101      	bne.n	8005c8a <xmit_datablock+0x20>
 8005c86:	2300      	movs	r3, #0
 8005c88:	e025      	b.n	8005cd6 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8005c8a:	1cfb      	adds	r3, r7, #3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7ff ff20 	bl	8005ad4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005c94:	1cfb      	adds	r3, r7, #3
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2bfd      	cmp	r3, #253	; 0xfd
 8005c9a:	d01b      	beq.n	8005cd4 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0011      	movs	r1, r2
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7ff ff49 	bl	8005b3c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005caa:	20ff      	movs	r0, #255	; 0xff
 8005cac:	f7ff ff12 	bl	8005ad4 <xchg_spi>
 8005cb0:	20ff      	movs	r0, #255	; 0xff
 8005cb2:	f7ff ff0f 	bl	8005ad4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005cb6:	250f      	movs	r5, #15
 8005cb8:	197c      	adds	r4, r7, r5
 8005cba:	20ff      	movs	r0, #255	; 0xff
 8005cbc:	f7ff ff0a 	bl	8005ad4 <xchg_spi>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005cc4:	197b      	adds	r3, r7, r5
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	221f      	movs	r2, #31
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	d001      	beq.n	8005cd4 <xmit_datablock+0x6a>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <xmit_datablock+0x6c>
	}
	return 1;
 8005cd4:	2301      	movs	r3, #1
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b004      	add	sp, #16
 8005cdc:	bdb0      	pop	{r4, r5, r7, pc}

08005cde <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005cde:	b5b0      	push	{r4, r5, r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	6039      	str	r1, [r7, #0]
 8005ce8:	1dfb      	adds	r3, r7, #7
 8005cea:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005cec:	1dfb      	adds	r3, r7, #7
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da15      	bge.n	8005d22 <send_cmd+0x44>
		cmd &= 0x7F;
 8005cf6:	1dfb      	adds	r3, r7, #7
 8005cf8:	1dfa      	adds	r2, r7, #7
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	217f      	movs	r1, #127	; 0x7f
 8005cfe:	400a      	ands	r2, r1
 8005d00:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8005d02:	250e      	movs	r5, #14
 8005d04:	197c      	adds	r4, r7, r5
 8005d06:	2100      	movs	r1, #0
 8005d08:	2037      	movs	r0, #55	; 0x37
 8005d0a:	f7ff ffe8 	bl	8005cde <send_cmd>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8005d12:	002a      	movs	r2, r5
 8005d14:	18bb      	adds	r3, r7, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d902      	bls.n	8005d22 <send_cmd+0x44>
 8005d1c:	18bb      	adds	r3, r7, r2
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	e067      	b.n	8005df2 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005d22:	1dfb      	adds	r3, r7, #7
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d007      	beq.n	8005d3a <send_cmd+0x5c>
		despiselect();
 8005d2a:	f7ff ff43 	bl	8005bb4 <despiselect>
		if (!spiselect()) return 0xFF;
 8005d2e:	f7ff ff51 	bl	8005bd4 <spiselect>
 8005d32:	1e03      	subs	r3, r0, #0
 8005d34:	d101      	bne.n	8005d3a <send_cmd+0x5c>
 8005d36:	23ff      	movs	r3, #255	; 0xff
 8005d38:	e05b      	b.n	8005df2 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005d3a:	1dfb      	adds	r3, r7, #7
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2240      	movs	r2, #64	; 0x40
 8005d40:	4313      	orrs	r3, r2
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7ff fec5 	bl	8005ad4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff febf 	bl	8005ad4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff feb9 	bl	8005ad4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7ff feb3 	bl	8005ad4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7ff feae 	bl	8005ad4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005d78:	210f      	movs	r1, #15
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005d80:	1dfb      	adds	r3, r7, #7
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <send_cmd+0xb0>
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	2295      	movs	r2, #149	; 0x95
 8005d8c:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005d8e:	1dfb      	adds	r3, r7, #7
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d103      	bne.n	8005d9e <send_cmd+0xc0>
 8005d96:	230f      	movs	r3, #15
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	2287      	movs	r2, #135	; 0x87
 8005d9c:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8005d9e:	230f      	movs	r3, #15
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7ff fe95 	bl	8005ad4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005daa:	1dfb      	adds	r3, r7, #7
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d102      	bne.n	8005db8 <send_cmd+0xda>
 8005db2:	20ff      	movs	r0, #255	; 0xff
 8005db4:	f7ff fe8e 	bl	8005ad4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005db8:	230f      	movs	r3, #15
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8005dc0:	250e      	movs	r5, #14
 8005dc2:	197c      	adds	r4, r7, r5
 8005dc4:	20ff      	movs	r0, #255	; 0xff
 8005dc6:	f7ff fe85 	bl	8005ad4 <xchg_spi>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8005dce:	197b      	adds	r3, r7, r5
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da09      	bge.n	8005dec <send_cmd+0x10e>
 8005dd8:	210f      	movs	r1, #15
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	187a      	adds	r2, r7, r1
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	3a01      	subs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e9      	bne.n	8005dc0 <send_cmd+0xe2>

	return res;							/* Return received response */
 8005dec:	230e      	movs	r3, #14
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	781b      	ldrb	r3, [r3, #0]
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b004      	add	sp, #16
 8005df8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005dfc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	0002      	movs	r2, r0
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005e08:	1dfb      	adds	r3, r7, #7
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <USER_SPI_initialize+0x18>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e100      	b.n	8006016 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005e14:	4b82      	ldr	r3, [pc, #520]	; (8006020 <USER_SPI_initialize+0x224>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d003      	beq.n	8005e2a <USER_SPI_initialize+0x2e>
 8005e22:	4b7f      	ldr	r3, [pc, #508]	; (8006020 <USER_SPI_initialize+0x224>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e0f5      	b.n	8006016 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8005e2a:	4b7e      	ldr	r3, [pc, #504]	; (8006024 <USER_SPI_initialize+0x228>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2238      	movs	r2, #56	; 0x38
 8005e32:	4393      	bics	r3, r2
 8005e34:	001a      	movs	r2, r3
 8005e36:	4b7b      	ldr	r3, [pc, #492]	; (8006024 <USER_SPI_initialize+0x228>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2130      	movs	r1, #48	; 0x30
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005e40:	230f      	movs	r3, #15
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	220a      	movs	r2, #10
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e008      	b.n	8005e5c <USER_SPI_initialize+0x60>
 8005e4a:	20ff      	movs	r0, #255	; 0xff
 8005e4c:	f7ff fe42 	bl	8005ad4 <xchg_spi>
 8005e50:	210f      	movs	r1, #15
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	240f      	movs	r4, #15
 8005e5e:	193b      	adds	r3, r7, r4
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f1      	bne.n	8005e4a <USER_SPI_initialize+0x4e>

	ty = 0;
 8005e66:	230d      	movs	r3, #13
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005e6e:	2100      	movs	r1, #0
 8005e70:	2000      	movs	r0, #0
 8005e72:	f7ff ff34 	bl	8005cde <send_cmd>
 8005e76:	0003      	movs	r3, r0
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d000      	beq.n	8005e7e <USER_SPI_initialize+0x82>
 8005e7c:	e0a6      	b.n	8005fcc <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005e7e:	23fa      	movs	r3, #250	; 0xfa
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff fdfc 	bl	8005a80 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005e88:	23d5      	movs	r3, #213	; 0xd5
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	2008      	movs	r0, #8
 8005e90:	f7ff ff25 	bl	8005cde <send_cmd>
 8005e94:	0003      	movs	r3, r0
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d162      	bne.n	8005f60 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e00f      	b.n	8005ec2 <USER_SPI_initialize+0xc6>
 8005ea2:	250f      	movs	r5, #15
 8005ea4:	197b      	adds	r3, r7, r5
 8005ea6:	781c      	ldrb	r4, [r3, #0]
 8005ea8:	20ff      	movs	r0, #255	; 0xff
 8005eaa:	f7ff fe13 	bl	8005ad4 <xchg_spi>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	551a      	strb	r2, [r3, r4]
 8005eb8:	197b      	adds	r3, r7, r5
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	197b      	adds	r3, r7, r5
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	230f      	movs	r3, #15
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d9ea      	bls.n	8005ea2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005ecc:	2208      	movs	r2, #8
 8005ece:	18bb      	adds	r3, r7, r2
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d000      	beq.n	8005ed8 <USER_SPI_initialize+0xdc>
 8005ed6:	e079      	b.n	8005fcc <USER_SPI_initialize+0x1d0>
 8005ed8:	18bb      	adds	r3, r7, r2
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2baa      	cmp	r3, #170	; 0xaa
 8005ede:	d000      	beq.n	8005ee2 <USER_SPI_initialize+0xe6>
 8005ee0:	e074      	b.n	8005fcc <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	f7ff fde0 	bl	8005aa8 <SPI_Timer_Status>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d007      	beq.n	8005efc <USER_SPI_initialize+0x100>
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	05db      	lsls	r3, r3, #23
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	20a9      	movs	r0, #169	; 0xa9
 8005ef4:	f7ff fef3 	bl	8005cde <send_cmd>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d1f3      	bne.n	8005ee4 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005efc:	f7ff fdd4 	bl	8005aa8 <SPI_Timer_Status>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d063      	beq.n	8005fcc <USER_SPI_initialize+0x1d0>
 8005f04:	2100      	movs	r1, #0
 8005f06:	203a      	movs	r0, #58	; 0x3a
 8005f08:	f7ff fee9 	bl	8005cde <send_cmd>
 8005f0c:	1e03      	subs	r3, r0, #0
 8005f0e:	d15d      	bne.n	8005fcc <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005f10:	230f      	movs	r3, #15
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e00f      	b.n	8005f3a <USER_SPI_initialize+0x13e>
 8005f1a:	250f      	movs	r5, #15
 8005f1c:	197b      	adds	r3, r7, r5
 8005f1e:	781c      	ldrb	r4, [r3, #0]
 8005f20:	20ff      	movs	r0, #255	; 0xff
 8005f22:	f7ff fdd7 	bl	8005ad4 <xchg_spi>
 8005f26:	0003      	movs	r3, r0
 8005f28:	001a      	movs	r2, r3
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	551a      	strb	r2, [r3, r4]
 8005f30:	197b      	adds	r3, r7, r5
 8005f32:	781a      	ldrb	r2, [r3, #0]
 8005f34:	197b      	adds	r3, r7, r5
 8005f36:	3201      	adds	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	230f      	movs	r3, #15
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d9ea      	bls.n	8005f1a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005f44:	2308      	movs	r3, #8
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d001      	beq.n	8005f56 <USER_SPI_initialize+0x15a>
 8005f52:	220c      	movs	r2, #12
 8005f54:	e000      	b.n	8005f58 <USER_SPI_initialize+0x15c>
 8005f56:	2204      	movs	r2, #4
 8005f58:	230d      	movs	r3, #13
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e035      	b.n	8005fcc <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005f60:	2100      	movs	r1, #0
 8005f62:	20a9      	movs	r0, #169	; 0xa9
 8005f64:	f7ff febb 	bl	8005cde <send_cmd>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d808      	bhi.n	8005f80 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005f6e:	230d      	movs	r3, #13
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	2202      	movs	r2, #2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	230e      	movs	r3, #14
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	22a9      	movs	r2, #169	; 0xa9
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	e007      	b.n	8005f90 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005f80:	230d      	movs	r3, #13
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	230e      	movs	r3, #14
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	f7ff fd89 	bl	8005aa8 <SPI_Timer_Status>
 8005f96:	1e03      	subs	r3, r0, #0
 8005f98:	d008      	beq.n	8005fac <USER_SPI_initialize+0x1b0>
 8005f9a:	230e      	movs	r3, #14
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff fe9b 	bl	8005cde <send_cmd>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d1f2      	bne.n	8005f92 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005fac:	f7ff fd7c 	bl	8005aa8 <SPI_Timer_Status>
 8005fb0:	1e03      	subs	r3, r0, #0
 8005fb2:	d007      	beq.n	8005fc4 <USER_SPI_initialize+0x1c8>
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	0019      	movs	r1, r3
 8005fba:	2010      	movs	r0, #16
 8005fbc:	f7ff fe8f 	bl	8005cde <send_cmd>
 8005fc0:	1e03      	subs	r3, r0, #0
 8005fc2:	d003      	beq.n	8005fcc <USER_SPI_initialize+0x1d0>
				ty = 0;
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8005fcc:	4b16      	ldr	r3, [pc, #88]	; (8006028 <USER_SPI_initialize+0x22c>)
 8005fce:	240d      	movs	r4, #13
 8005fd0:	193a      	adds	r2, r7, r4
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
	despiselect();
 8005fd6:	f7ff fded 	bl	8005bb4 <despiselect>

	if (ty) {			/* OK */
 8005fda:	193b      	adds	r3, r7, r4
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <USER_SPI_initialize+0x228>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2238      	movs	r2, #56	; 0x38
 8005fea:	4393      	bics	r3, r2
 8005fec:	001a      	movs	r2, r3
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <USER_SPI_initialize+0x228>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2110      	movs	r1, #16
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005ff8:	4b09      	ldr	r3, [pc, #36]	; (8006020 <USER_SPI_initialize+0x224>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2201      	movs	r2, #1
 8006000:	4393      	bics	r3, r2
 8006002:	b2da      	uxtb	r2, r3
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <USER_SPI_initialize+0x224>)
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e002      	b.n	8006010 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <USER_SPI_initialize+0x224>)
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006010:	4b03      	ldr	r3, [pc, #12]	; (8006020 <USER_SPI_initialize+0x224>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	b2db      	uxtb	r3, r3
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b004      	add	sp, #16
 800601c:	bdb0      	pop	{r4, r5, r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20000028 	.word	0x20000028
 8006024:	200000ec 	.word	0x200000ec
 8006028:	200006e0 	.word	0x200006e0

0800602c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	0002      	movs	r2, r0
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USER_SPI_status+0x18>
 8006040:	2301      	movs	r3, #1
 8006042:	e002      	b.n	800604a <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <USER_SPI_status+0x28>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b2db      	uxtb	r3, r3
}
 800604a:	0018      	movs	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	b002      	add	sp, #8
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	20000028 	.word	0x20000028

08006058 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	210f      	movs	r1, #15
 8006066:	187b      	adds	r3, r7, r1
 8006068:	1c02      	adds	r2, r0, #0
 800606a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800606c:	187b      	adds	r3, r7, r1
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <USER_SPI_read+0x22>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <USER_SPI_read+0x26>
 800607a:	2304      	movs	r3, #4
 800607c:	e04f      	b.n	800611e <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800607e:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <USER_SPI_read+0xd0>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	001a      	movs	r2, r3
 8006086:	2301      	movs	r3, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d001      	beq.n	8006090 <USER_SPI_read+0x38>
 800608c:	2303      	movs	r3, #3
 800608e:	e046      	b.n	800611e <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006090:	4b26      	ldr	r3, [pc, #152]	; (800612c <USER_SPI_read+0xd4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	001a      	movs	r2, r3
 8006096:	2308      	movs	r3, #8
 8006098:	4013      	ands	r3, r2
 800609a:	d102      	bne.n	80060a2 <USER_SPI_read+0x4a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	025b      	lsls	r3, r3, #9
 80060a0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d112      	bne.n	80060ce <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	0019      	movs	r1, r3
 80060ac:	2011      	movs	r0, #17
 80060ae:	f7ff fe16 	bl	8005cde <send_cmd>
 80060b2:	1e03      	subs	r3, r0, #0
 80060b4:	d12d      	bne.n	8006112 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 80060b6:	2380      	movs	r3, #128	; 0x80
 80060b8:	009a      	lsls	r2, r3, #2
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	0011      	movs	r1, r2
 80060be:	0018      	movs	r0, r3
 80060c0:	f7ff fda4 	bl	8005c0c <rcvr_datablock>
 80060c4:	1e03      	subs	r3, r0, #0
 80060c6:	d024      	beq.n	8006112 <USER_SPI_read+0xba>
			count = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	e021      	b.n	8006112 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0019      	movs	r1, r3
 80060d2:	2012      	movs	r0, #18
 80060d4:	f7ff fe03 	bl	8005cde <send_cmd>
 80060d8:	1e03      	subs	r3, r0, #0
 80060da:	d11a      	bne.n	8006112 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	009a      	lsls	r2, r3, #2
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	0011      	movs	r1, r2
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7ff fd91 	bl	8005c0c <rcvr_datablock>
 80060ea:	1e03      	subs	r3, r0, #0
 80060ec:	d00c      	beq.n	8006108 <USER_SPI_read+0xb0>
				buff += 512;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	4694      	mov	ip, r2
 80060f6:	4463      	add	r3, ip
 80060f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ea      	bne.n	80060dc <USER_SPI_read+0x84>
 8006106:	e000      	b.n	800610a <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8006108:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800610a:	2100      	movs	r1, #0
 800610c:	200c      	movs	r0, #12
 800610e:	f7ff fde6 	bl	8005cde <send_cmd>
		}
	}
	despiselect();
 8006112:	f7ff fd4f 	bl	8005bb4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	1e5a      	subs	r2, r3, #1
 800611a:	4193      	sbcs	r3, r2
 800611c:	b2db      	uxtb	r3, r3
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b004      	add	sp, #16
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	20000028 	.word	0x20000028
 800612c:	200006e0 	.word	0x200006e0

08006130 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	210f      	movs	r1, #15
 800613e:	187b      	adds	r3, r7, r1
 8006140:	1c02      	adds	r2, r0, #0
 8006142:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006144:	187b      	adds	r3, r7, r1
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <USER_SPI_write+0x22>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <USER_SPI_write+0x26>
 8006152:	2304      	movs	r3, #4
 8006154:	e063      	b.n	800621e <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006156:	4b34      	ldr	r3, [pc, #208]	; (8006228 <USER_SPI_write+0xf8>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	001a      	movs	r2, r3
 800615e:	2301      	movs	r3, #1
 8006160:	4013      	ands	r3, r2
 8006162:	d001      	beq.n	8006168 <USER_SPI_write+0x38>
 8006164:	2303      	movs	r3, #3
 8006166:	e05a      	b.n	800621e <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006168:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <USER_SPI_write+0xf8>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	001a      	movs	r2, r3
 8006170:	2304      	movs	r3, #4
 8006172:	4013      	ands	r3, r2
 8006174:	d001      	beq.n	800617a <USER_SPI_write+0x4a>
 8006176:	2302      	movs	r3, #2
 8006178:	e051      	b.n	800621e <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <USER_SPI_write+0xfc>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	001a      	movs	r2, r3
 8006180:	2308      	movs	r3, #8
 8006182:	4013      	ands	r3, r2
 8006184:	d102      	bne.n	800618c <USER_SPI_write+0x5c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	025b      	lsls	r3, r3, #9
 800618a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d110      	bne.n	80061b4 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0019      	movs	r1, r3
 8006196:	2018      	movs	r0, #24
 8006198:	f7ff fda1 	bl	8005cde <send_cmd>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d138      	bne.n	8006212 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	21fe      	movs	r1, #254	; 0xfe
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7ff fd60 	bl	8005c6a <xmit_datablock>
 80061aa:	1e03      	subs	r3, r0, #0
 80061ac:	d031      	beq.n	8006212 <USER_SPI_write+0xe2>
			count = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	e02e      	b.n	8006212 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80061b4:	4b1d      	ldr	r3, [pc, #116]	; (800622c <USER_SPI_write+0xfc>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	001a      	movs	r2, r3
 80061ba:	2306      	movs	r3, #6
 80061bc:	4013      	ands	r3, r2
 80061be:	d004      	beq.n	80061ca <USER_SPI_write+0x9a>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	0019      	movs	r1, r3
 80061c4:	2097      	movs	r0, #151	; 0x97
 80061c6:	f7ff fd8a 	bl	8005cde <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0019      	movs	r1, r3
 80061ce:	2019      	movs	r0, #25
 80061d0:	f7ff fd85 	bl	8005cde <send_cmd>
 80061d4:	1e03      	subs	r3, r0, #0
 80061d6:	d11c      	bne.n	8006212 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	21fc      	movs	r1, #252	; 0xfc
 80061dc:	0018      	movs	r0, r3
 80061de:	f7ff fd44 	bl	8005c6a <xmit_datablock>
 80061e2:	1e03      	subs	r3, r0, #0
 80061e4:	d00c      	beq.n	8006200 <USER_SPI_write+0xd0>
				buff += 512;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	4694      	mov	ip, r2
 80061ee:	4463      	add	r3, ip
 80061f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1ec      	bne.n	80061d8 <USER_SPI_write+0xa8>
 80061fe:	e000      	b.n	8006202 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006200:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006202:	21fd      	movs	r1, #253	; 0xfd
 8006204:	2000      	movs	r0, #0
 8006206:	f7ff fd30 	bl	8005c6a <xmit_datablock>
 800620a:	1e03      	subs	r3, r0, #0
 800620c:	d101      	bne.n	8006212 <USER_SPI_write+0xe2>
 800620e:	2301      	movs	r3, #1
 8006210:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006212:	f7ff fccf 	bl	8005bb4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	4193      	sbcs	r3, r2
 800621c:	b2db      	uxtb	r3, r3
}
 800621e:	0018      	movs	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	b004      	add	sp, #16
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	20000028 	.word	0x20000028
 800622c:	200006e0 	.word	0x200006e0

08006230 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b08d      	sub	sp, #52	; 0x34
 8006234:	af00      	add	r7, sp, #0
 8006236:	603a      	str	r2, [r7, #0]
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	1c02      	adds	r2, r0, #0
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	1dbb      	adds	r3, r7, #6
 8006240:	1c0a      	adds	r2, r1, #0
 8006242:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006244:	1dfb      	adds	r3, r7, #7
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <USER_SPI_ioctl+0x20>
 800624c:	2304      	movs	r3, #4
 800624e:	e178      	b.n	8006542 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006250:	4bbe      	ldr	r3, [pc, #760]	; (800654c <USER_SPI_ioctl+0x31c>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	001a      	movs	r2, r3
 8006258:	2301      	movs	r3, #1
 800625a:	4013      	ands	r3, r2
 800625c:	d001      	beq.n	8006262 <USER_SPI_ioctl+0x32>
 800625e:	2303      	movs	r3, #3
 8006260:	e16f      	b.n	8006542 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8006262:	232f      	movs	r3, #47	; 0x2f
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800626a:	1dbb      	adds	r3, r7, #6
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d100      	bne.n	8006274 <USER_SPI_ioctl+0x44>
 8006272:	e100      	b.n	8006476 <USER_SPI_ioctl+0x246>
 8006274:	dd00      	ble.n	8006278 <USER_SPI_ioctl+0x48>
 8006276:	e14d      	b.n	8006514 <USER_SPI_ioctl+0x2e4>
 8006278:	2b03      	cmp	r3, #3
 800627a:	d100      	bne.n	800627e <USER_SPI_ioctl+0x4e>
 800627c:	e074      	b.n	8006368 <USER_SPI_ioctl+0x138>
 800627e:	dd00      	ble.n	8006282 <USER_SPI_ioctl+0x52>
 8006280:	e148      	b.n	8006514 <USER_SPI_ioctl+0x2e4>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <USER_SPI_ioctl+0x5c>
 8006286:	2b01      	cmp	r3, #1
 8006288:	d00a      	beq.n	80062a0 <USER_SPI_ioctl+0x70>
 800628a:	e143      	b.n	8006514 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800628c:	f7ff fca2 	bl	8005bd4 <spiselect>
 8006290:	1e03      	subs	r3, r0, #0
 8006292:	d100      	bne.n	8006296 <USER_SPI_ioctl+0x66>
 8006294:	e143      	b.n	800651e <USER_SPI_ioctl+0x2ee>
 8006296:	232f      	movs	r3, #47	; 0x2f
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
		break;
 800629e:	e13e      	b.n	800651e <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80062a0:	2100      	movs	r1, #0
 80062a2:	2009      	movs	r0, #9
 80062a4:	f7ff fd1b 	bl	8005cde <send_cmd>
 80062a8:	1e03      	subs	r3, r0, #0
 80062aa:	d000      	beq.n	80062ae <USER_SPI_ioctl+0x7e>
 80062ac:	e139      	b.n	8006522 <USER_SPI_ioctl+0x2f2>
 80062ae:	240c      	movs	r4, #12
 80062b0:	193b      	adds	r3, r7, r4
 80062b2:	2110      	movs	r1, #16
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7ff fca9 	bl	8005c0c <rcvr_datablock>
 80062ba:	1e03      	subs	r3, r0, #0
 80062bc:	d100      	bne.n	80062c0 <USER_SPI_ioctl+0x90>
 80062be:	e130      	b.n	8006522 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80062c0:	0020      	movs	r0, r4
 80062c2:	183b      	adds	r3, r7, r0
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	099b      	lsrs	r3, r3, #6
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d115      	bne.n	80062fa <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	7a5b      	ldrb	r3, [r3, #9]
 80062d2:	001a      	movs	r2, r3
 80062d4:	183b      	adds	r3, r7, r0
 80062d6:	7a1b      	ldrb	r3, [r3, #8]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	0019      	movs	r1, r3
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	79db      	ldrb	r3, [r3, #7]
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	23fc      	movs	r3, #252	; 0xfc
 80062e6:	039b      	lsls	r3, r3, #14
 80062e8:	4013      	ands	r3, r2
 80062ea:	18cb      	adds	r3, r1, r3
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	029a      	lsls	r2, r3, #10
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e031      	b.n	800635e <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80062fa:	200c      	movs	r0, #12
 80062fc:	183b      	adds	r3, r7, r0
 80062fe:	795b      	ldrb	r3, [r3, #5]
 8006300:	220f      	movs	r2, #15
 8006302:	4013      	ands	r3, r2
 8006304:	b2da      	uxtb	r2, r3
 8006306:	183b      	adds	r3, r7, r0
 8006308:	7a9b      	ldrb	r3, [r3, #10]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	18d3      	adds	r3, r2, r3
 8006310:	b2da      	uxtb	r2, r3
 8006312:	183b      	adds	r3, r7, r0
 8006314:	7a5b      	ldrb	r3, [r3, #9]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2106      	movs	r1, #6
 800631c:	400b      	ands	r3, r1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	18d3      	adds	r3, r2, r3
 8006322:	b2da      	uxtb	r2, r3
 8006324:	242e      	movs	r4, #46	; 0x2e
 8006326:	193b      	adds	r3, r7, r4
 8006328:	3202      	adds	r2, #2
 800632a:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800632c:	183b      	adds	r3, r7, r0
 800632e:	7a1b      	ldrb	r3, [r3, #8]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	b2db      	uxtb	r3, r3
 8006334:	001a      	movs	r2, r3
 8006336:	183b      	adds	r3, r7, r0
 8006338:	79db      	ldrb	r3, [r3, #7]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	18d2      	adds	r2, r2, r3
 800633e:	183b      	adds	r3, r7, r0
 8006340:	799b      	ldrb	r3, [r3, #6]
 8006342:	0299      	lsls	r1, r3, #10
 8006344:	23c0      	movs	r3, #192	; 0xc0
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	400b      	ands	r3, r1
 800634a:	18d3      	adds	r3, r2, r3
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006350:	193b      	adds	r3, r7, r4
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	3b09      	subs	r3, #9
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	409a      	lsls	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800635e:	232f      	movs	r3, #47	; 0x2f
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006366:	e0dc      	b.n	8006522 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006368:	4b79      	ldr	r3, [pc, #484]	; (8006550 <USER_SPI_ioctl+0x320>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	001a      	movs	r2, r3
 800636e:	2304      	movs	r3, #4
 8006370:	4013      	ands	r3, r2
 8006372:	d035      	beq.n	80063e0 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006374:	2100      	movs	r1, #0
 8006376:	208d      	movs	r0, #141	; 0x8d
 8006378:	f7ff fcb1 	bl	8005cde <send_cmd>
 800637c:	1e03      	subs	r3, r0, #0
 800637e:	d000      	beq.n	8006382 <USER_SPI_ioctl+0x152>
 8006380:	e0d1      	b.n	8006526 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8006382:	20ff      	movs	r0, #255	; 0xff
 8006384:	f7ff fba6 	bl	8005ad4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006388:	230c      	movs	r3, #12
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	2110      	movs	r1, #16
 800638e:	0018      	movs	r0, r3
 8006390:	f7ff fc3c 	bl	8005c0c <rcvr_datablock>
 8006394:	1e03      	subs	r3, r0, #0
 8006396:	d100      	bne.n	800639a <USER_SPI_ioctl+0x16a>
 8006398:	e0c5      	b.n	8006526 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800639a:	232e      	movs	r3, #46	; 0x2e
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	2230      	movs	r2, #48	; 0x30
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e008      	b.n	80063b6 <USER_SPI_ioctl+0x186>
 80063a4:	20ff      	movs	r0, #255	; 0xff
 80063a6:	f7ff fb95 	bl	8005ad4 <xchg_spi>
 80063aa:	212e      	movs	r1, #46	; 0x2e
 80063ac:	187b      	adds	r3, r7, r1
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	187b      	adds	r3, r7, r1
 80063b2:	3a01      	subs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	232e      	movs	r3, #46	; 0x2e
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f1      	bne.n	80063a4 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80063c0:	230c      	movs	r3, #12
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	7a9b      	ldrb	r3, [r3, #10]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	001a      	movs	r2, r3
 80063cc:	2310      	movs	r3, #16
 80063ce:	4093      	lsls	r3, r2
 80063d0:	001a      	movs	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80063d6:	232f      	movs	r3, #47	; 0x2f
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80063de:	e0a2      	b.n	8006526 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80063e0:	2100      	movs	r1, #0
 80063e2:	2009      	movs	r0, #9
 80063e4:	f7ff fc7b 	bl	8005cde <send_cmd>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d000      	beq.n	80063ee <USER_SPI_ioctl+0x1be>
 80063ec:	e09b      	b.n	8006526 <USER_SPI_ioctl+0x2f6>
 80063ee:	240c      	movs	r4, #12
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	2110      	movs	r1, #16
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7ff fc09 	bl	8005c0c <rcvr_datablock>
 80063fa:	1e03      	subs	r3, r0, #0
 80063fc:	d100      	bne.n	8006400 <USER_SPI_ioctl+0x1d0>
 80063fe:	e092      	b.n	8006526 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <USER_SPI_ioctl+0x320>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	001a      	movs	r2, r3
 8006406:	2302      	movs	r3, #2
 8006408:	4013      	ands	r3, r2
 800640a:	d016      	beq.n	800643a <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800640c:	0021      	movs	r1, r4
 800640e:	187b      	adds	r3, r7, r1
 8006410:	7a9b      	ldrb	r3, [r3, #10]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	227e      	movs	r2, #126	; 0x7e
 8006416:	4013      	ands	r3, r2
 8006418:	187a      	adds	r2, r7, r1
 800641a:	7ad2      	ldrb	r2, [r2, #11]
 800641c:	09d2      	lsrs	r2, r2, #7
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	189b      	adds	r3, r3, r2
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	187b      	adds	r3, r7, r1
 8006426:	7b5b      	ldrb	r3, [r3, #13]
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	b2db      	uxtb	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	0013      	movs	r3, r2
 8006432:	001a      	movs	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e018      	b.n	800646c <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800643a:	210c      	movs	r1, #12
 800643c:	187b      	adds	r3, r7, r1
 800643e:	7a9b      	ldrb	r3, [r3, #10]
 8006440:	109b      	asrs	r3, r3, #2
 8006442:	b29b      	uxth	r3, r3
 8006444:	001a      	movs	r2, r3
 8006446:	231f      	movs	r3, #31
 8006448:	4013      	ands	r3, r2
 800644a:	3301      	adds	r3, #1
 800644c:	0008      	movs	r0, r1
 800644e:	187a      	adds	r2, r7, r1
 8006450:	7ad2      	ldrb	r2, [r2, #11]
 8006452:	00d2      	lsls	r2, r2, #3
 8006454:	2118      	movs	r1, #24
 8006456:	400a      	ands	r2, r1
 8006458:	1839      	adds	r1, r7, r0
 800645a:	7ac9      	ldrb	r1, [r1, #11]
 800645c:	0949      	lsrs	r1, r1, #5
 800645e:	b2c9      	uxtb	r1, r1
 8006460:	1852      	adds	r2, r2, r1
 8006462:	3201      	adds	r2, #1
 8006464:	4353      	muls	r3, r2
 8006466:	001a      	movs	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800646c:	232f      	movs	r3, #47	; 0x2f
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
		break;
 8006474:	e057      	b.n	8006526 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <USER_SPI_ioctl+0x320>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	001a      	movs	r2, r3
 800647c:	2306      	movs	r3, #6
 800647e:	4013      	ands	r3, r2
 8006480:	d053      	beq.n	800652a <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006482:	240c      	movs	r4, #12
 8006484:	193a      	adds	r2, r7, r4
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	210b      	movs	r1, #11
 800648c:	0018      	movs	r0, r3
 800648e:	f7ff fecf 	bl	8006230 <USER_SPI_ioctl>
 8006492:	1e03      	subs	r3, r0, #0
 8006494:	d14b      	bne.n	800652e <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006496:	193b      	adds	r3, r7, r4
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <USER_SPI_ioctl+0x27e>
 80064a2:	193b      	adds	r3, r7, r4
 80064a4:	7a9b      	ldrb	r3, [r3, #10]
 80064a6:	001a      	movs	r2, r3
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	4013      	ands	r3, r2
 80064ac:	d041      	beq.n	8006532 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80064be:	4b24      	ldr	r3, [pc, #144]	; (8006550 <USER_SPI_ioctl+0x320>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	001a      	movs	r2, r3
 80064c4:	2308      	movs	r3, #8
 80064c6:	4013      	ands	r3, r2
 80064c8:	d105      	bne.n	80064d6 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	025b      	lsls	r3, r3, #9
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	025b      	lsls	r3, r3, #9
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	0019      	movs	r1, r3
 80064da:	2020      	movs	r0, #32
 80064dc:	f7ff fbff 	bl	8005cde <send_cmd>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d128      	bne.n	8006536 <USER_SPI_ioctl+0x306>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	0019      	movs	r1, r3
 80064e8:	2021      	movs	r0, #33	; 0x21
 80064ea:	f7ff fbf8 	bl	8005cde <send_cmd>
 80064ee:	1e03      	subs	r3, r0, #0
 80064f0:	d121      	bne.n	8006536 <USER_SPI_ioctl+0x306>
 80064f2:	2100      	movs	r1, #0
 80064f4:	2026      	movs	r0, #38	; 0x26
 80064f6:	f7ff fbf2 	bl	8005cde <send_cmd>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d11b      	bne.n	8006536 <USER_SPI_ioctl+0x306>
 80064fe:	4b15      	ldr	r3, [pc, #84]	; (8006554 <USER_SPI_ioctl+0x324>)
 8006500:	0018      	movs	r0, r3
 8006502:	f7ff fb2f 	bl	8005b64 <wait_ready>
 8006506:	1e03      	subs	r3, r0, #0
 8006508:	d015      	beq.n	8006536 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800650a:	232f      	movs	r3, #47	; 0x2f
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006512:	e010      	b.n	8006536 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8006514:	232f      	movs	r3, #47	; 0x2f
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2204      	movs	r2, #4
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e00c      	b.n	8006538 <USER_SPI_ioctl+0x308>
		break;
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	e00a      	b.n	8006538 <USER_SPI_ioctl+0x308>
		break;
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	e008      	b.n	8006538 <USER_SPI_ioctl+0x308>
		break;
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	e006      	b.n	8006538 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	e004      	b.n	8006538 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	e002      	b.n	8006538 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	e000      	b.n	8006538 <USER_SPI_ioctl+0x308>
		break;
 8006536:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8006538:	f7ff fb3c 	bl	8005bb4 <despiselect>

	return res;
 800653c:	232f      	movs	r3, #47	; 0x2f
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	781b      	ldrb	r3, [r3, #0]
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b00d      	add	sp, #52	; 0x34
 8006548:	bd90      	pop	{r4, r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	20000028 	.word	0x20000028
 8006550:	200006e0 	.word	0x200006e0
 8006554:	00007530 	.word	0x00007530

08006558 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	0002      	movs	r2, r0
 8006560:	1dfb      	adds	r3, r7, #7
 8006562:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006564:	1dfb      	adds	r3, r7, #7
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <disk_status+0x40>)
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	18d3      	adds	r3, r2, r3
 800656e:	3304      	adds	r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	1dfa      	adds	r2, r7, #7
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	4907      	ldr	r1, [pc, #28]	; (8006598 <disk_status+0x40>)
 800657a:	188a      	adds	r2, r1, r2
 800657c:	7a12      	ldrb	r2, [r2, #8]
 800657e:	250f      	movs	r5, #15
 8006580:	197c      	adds	r4, r7, r5
 8006582:	0010      	movs	r0, r2
 8006584:	4798      	blx	r3
 8006586:	0003      	movs	r3, r0
 8006588:	7023      	strb	r3, [r4, #0]
  return stat;
 800658a:	197b      	adds	r3, r7, r5
 800658c:	781b      	ldrb	r3, [r3, #0]
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b004      	add	sp, #16
 8006594:	bdb0      	pop	{r4, r5, r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	20000914 	.word	0x20000914

0800659c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800659c:	b590      	push	{r4, r7, lr}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	0002      	movs	r2, r0
 80065a4:	1dfb      	adds	r3, r7, #7
 80065a6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80065a8:	200f      	movs	r0, #15
 80065aa:	183b      	adds	r3, r7, r0
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80065b0:	1dfb      	adds	r3, r7, #7
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <disk_initialize+0x5c>)
 80065b6:	5cd3      	ldrb	r3, [r2, r3]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d116      	bne.n	80065ea <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80065bc:	1dfb      	adds	r3, r7, #7
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4a0d      	ldr	r2, [pc, #52]	; (80065f8 <disk_initialize+0x5c>)
 80065c2:	2101      	movs	r1, #1
 80065c4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80065c6:	1dfb      	adds	r3, r7, #7
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <disk_initialize+0x5c>)
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	3304      	adds	r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1dfa      	adds	r2, r7, #7
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	4907      	ldr	r1, [pc, #28]	; (80065f8 <disk_initialize+0x5c>)
 80065dc:	188a      	adds	r2, r1, r2
 80065de:	7a12      	ldrb	r2, [r2, #8]
 80065e0:	183c      	adds	r4, r7, r0
 80065e2:	0010      	movs	r0, r2
 80065e4:	4798      	blx	r3
 80065e6:	0003      	movs	r3, r0
 80065e8:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80065ea:	230f      	movs	r3, #15
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	781b      	ldrb	r3, [r3, #0]
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b005      	add	sp, #20
 80065f6:	bd90      	pop	{r4, r7, pc}
 80065f8:	20000914 	.word	0x20000914

080065fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80065fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	210f      	movs	r1, #15
 800660a:	187b      	adds	r3, r7, r1
 800660c:	1c02      	adds	r2, r0, #0
 800660e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006610:	187b      	adds	r3, r7, r1
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <disk_read+0x4c>)
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	18d3      	adds	r3, r2, r3
 800661a:	3304      	adds	r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689d      	ldr	r5, [r3, #8]
 8006620:	187b      	adds	r3, r7, r1
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4a08      	ldr	r2, [pc, #32]	; (8006648 <disk_read+0x4c>)
 8006626:	18d3      	adds	r3, r2, r3
 8006628:	7a18      	ldrb	r0, [r3, #8]
 800662a:	2617      	movs	r6, #23
 800662c:	19bc      	adds	r4, r7, r6
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	47a8      	blx	r5
 8006636:	0003      	movs	r3, r0
 8006638:	7023      	strb	r3, [r4, #0]
  return res;
 800663a:	19bb      	adds	r3, r7, r6
 800663c:	781b      	ldrb	r3, [r3, #0]
}
 800663e:	0018      	movs	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	b007      	add	sp, #28
 8006644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	20000914 	.word	0x20000914

0800664c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	210f      	movs	r1, #15
 800665a:	187b      	adds	r3, r7, r1
 800665c:	1c02      	adds	r2, r0, #0
 800665e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006660:	187b      	adds	r3, r7, r1
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4a0c      	ldr	r2, [pc, #48]	; (8006698 <disk_write+0x4c>)
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	18d3      	adds	r3, r2, r3
 800666a:	3304      	adds	r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68dd      	ldr	r5, [r3, #12]
 8006670:	187b      	adds	r3, r7, r1
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4a08      	ldr	r2, [pc, #32]	; (8006698 <disk_write+0x4c>)
 8006676:	18d3      	adds	r3, r2, r3
 8006678:	7a18      	ldrb	r0, [r3, #8]
 800667a:	2617      	movs	r6, #23
 800667c:	19bc      	adds	r4, r7, r6
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	47a8      	blx	r5
 8006686:	0003      	movs	r3, r0
 8006688:	7023      	strb	r3, [r4, #0]
  return res;
 800668a:	19bb      	adds	r3, r7, r6
 800668c:	781b      	ldrb	r3, [r3, #0]
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b007      	add	sp, #28
 8006694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	20000914 	.word	0x20000914

0800669c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800669c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	603a      	str	r2, [r7, #0]
 80066a4:	1dfb      	adds	r3, r7, #7
 80066a6:	1c02      	adds	r2, r0, #0
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	1dbb      	adds	r3, r7, #6
 80066ac:	1c0a      	adds	r2, r1, #0
 80066ae:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <disk_ioctl+0x4c>)
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	18d3      	adds	r3, r2, r3
 80066ba:	3304      	adds	r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	1dfa      	adds	r2, r7, #7
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	4908      	ldr	r1, [pc, #32]	; (80066e8 <disk_ioctl+0x4c>)
 80066c6:	188a      	adds	r2, r1, r2
 80066c8:	7a10      	ldrb	r0, [r2, #8]
 80066ca:	260f      	movs	r6, #15
 80066cc:	19bc      	adds	r4, r7, r6
 80066ce:	683d      	ldr	r5, [r7, #0]
 80066d0:	1dba      	adds	r2, r7, #6
 80066d2:	7811      	ldrb	r1, [r2, #0]
 80066d4:	002a      	movs	r2, r5
 80066d6:	4798      	blx	r3
 80066d8:	0003      	movs	r3, r0
 80066da:	7023      	strb	r3, [r4, #0]
  return res;
 80066dc:	19bb      	adds	r3, r7, r6
 80066de:	781b      	ldrb	r3, [r3, #0]
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b005      	add	sp, #20
 80066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e8:	20000914 	.word	0x20000914

080066ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3301      	adds	r3, #1
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	210e      	movs	r1, #14
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006700:	187b      	adds	r3, r7, r1
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	b21a      	sxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b21b      	sxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b21a      	sxth	r2, r3
 8006712:	187b      	adds	r3, r7, r1
 8006714:	801a      	strh	r2, [r3, #0]
	return rv;
 8006716:	187b      	adds	r3, r7, r1
 8006718:	881b      	ldrh	r3, [r3, #0]
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b004      	add	sp, #16
 8006720:	bd80      	pop	{r7, pc}

08006722 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3303      	adds	r3, #3
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	3202      	adds	r2, #2
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	3201      	adds	r2, #1
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	7812      	ldrb	r2, [r2, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
	return rv;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bd80      	pop	{r7, pc}

08006764 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	000a      	movs	r2, r1
 800676e:	1cbb      	adds	r3, r7, #2
 8006770:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	1cba      	adds	r2, r7, #2
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	1cbb      	adds	r3, r7, #2
 8006782:	1cba      	adds	r2, r7, #2
 8006784:	8812      	ldrh	r2, [r2, #0]
 8006786:	0a12      	lsrs	r2, r2, #8
 8006788:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	1cba      	adds	r2, r7, #2
 8006792:	8812      	ldrh	r2, [r2, #0]
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
}
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b002      	add	sp, #8
 800679e:	bd80      	pop	{r7, pc}

080067a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	1c53      	adds	r3, r2, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	6179      	str	r1, [r7, #20]
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3b01      	subs	r3, #1
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f1      	bne.n	800680e <mem_cpy+0x1a>
	}
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b006      	add	sp, #24
 8006830:	bd80      	pop	{r7, pc}

08006832 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006832:	b580      	push	{r7, lr}
 8006834:	b086      	sub	sp, #24
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	617a      	str	r2, [r7, #20]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3b01      	subs	r3, #1
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f3      	bne.n	8006842 <mem_set+0x10>
}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	46c0      	nop			; (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	b006      	add	sp, #24
 8006862:	bd80      	pop	{r7, pc}

08006864 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	61fa      	str	r2, [r7, #28]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	0019      	movs	r1, r3
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	61ba      	str	r2, [r7, #24]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	1acb      	subs	r3, r1, r3
 8006890:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3b01      	subs	r3, #1
 8006896:	607b      	str	r3, [r7, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <mem_cmp+0x40>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0eb      	beq.n	800687c <mem_cmp+0x18>

	return r;
 80068a4:	697b      	ldr	r3, [r7, #20]
}
 80068a6:	0018      	movs	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b008      	add	sp, #32
 80068ac:	bd80      	pop	{r7, pc}

080068ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80068b8:	e002      	b.n	80068c0 <chk_chr+0x12>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3301      	adds	r3, #1
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <chk_chr+0x26>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	001a      	movs	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d1f2      	bne.n	80068ba <chk_chr+0xc>
	return *str;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	781b      	ldrb	r3, [r3, #0]
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b002      	add	sp, #8
 80068de:	bd80      	pop	{r7, pc}

080068e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e027      	b.n	8006944 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <chk_lock+0xac>)
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	0112      	lsls	r2, r2, #4
 80068fa:	58d3      	ldr	r3, [r2, r3]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01c      	beq.n	800693a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006900:	4b22      	ldr	r3, [pc, #136]	; (800698c <chk_lock+0xac>)
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	0112      	lsls	r2, r2, #4
 8006906:	58d2      	ldr	r2, [r2, r3]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d116      	bne.n	800693e <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <chk_lock+0xac>)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	3304      	adds	r3, #4
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006920:	429a      	cmp	r2, r3
 8006922:	d10c      	bne.n	800693e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006924:	4a19      	ldr	r2, [pc, #100]	; (800698c <chk_lock+0xac>)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	3308      	adds	r3, #8
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006934:	429a      	cmp	r2, r3
 8006936:	d102      	bne.n	800693e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006938:	e007      	b.n	800694a <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d9d4      	bls.n	80068f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d109      	bne.n	8006964 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <chk_lock+0x7c>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d101      	bne.n	8006960 <chk_lock+0x80>
 800695c:	2300      	movs	r3, #0
 800695e:	e011      	b.n	8006984 <chk_lock+0xa4>
 8006960:	2312      	movs	r3, #18
 8006962:	e00f      	b.n	8006984 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <chk_lock+0x9e>
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <chk_lock+0xac>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	330c      	adds	r3, #12
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	429a      	cmp	r2, r3
 800697c:	d101      	bne.n	8006982 <chk_lock+0xa2>
 800697e:	2310      	movs	r3, #16
 8006980:	e000      	b.n	8006984 <chk_lock+0xa4>
 8006982:	2300      	movs	r3, #0
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b004      	add	sp, #16
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200006f4 	.word	0x200006f4

08006990 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	e002      	b.n	80069a2 <enq_lock+0x12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3301      	adds	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d805      	bhi.n	80069b4 <enq_lock+0x24>
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <enq_lock+0x38>)
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	0112      	lsls	r2, r2, #4
 80069ae:	58d3      	ldr	r3, [r2, r3]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f3      	bne.n	800699c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3b02      	subs	r3, #2
 80069b8:	1e5a      	subs	r2, r3, #1
 80069ba:	4193      	sbcs	r3, r2
 80069bc:	b2db      	uxtb	r3, r3
}
 80069be:	0018      	movs	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	b002      	add	sp, #8
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	200006f4 	.word	0x200006f4

080069cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e01e      	b.n	8006a1a <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <inc_lock+0x110>)
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	0112      	lsls	r2, r2, #4
 80069e2:	58d2      	ldr	r2, [r2, r3]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d113      	bne.n	8006a14 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 80069ec:	4a3b      	ldr	r2, [pc, #236]	; (8006adc <inc_lock+0x110>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	18d3      	adds	r3, r2, r3
 80069f4:	3304      	adds	r3, #4
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d109      	bne.n	8006a14 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8006a00:	4a36      	ldr	r2, [pc, #216]	; (8006adc <inc_lock+0x110>)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	18d3      	adds	r3, r2, r3
 8006a08:	3308      	adds	r3, #8
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d006      	beq.n	8006a22 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d9dd      	bls.n	80069dc <inc_lock+0x10>
 8006a20:	e000      	b.n	8006a24 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8006a22:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d130      	bne.n	8006a8c <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e002      	b.n	8006a36 <inc_lock+0x6a>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d805      	bhi.n	8006a48 <inc_lock+0x7c>
 8006a3c:	4b27      	ldr	r3, [pc, #156]	; (8006adc <inc_lock+0x110>)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	0112      	lsls	r2, r2, #4
 8006a42:	58d3      	ldr	r3, [r2, r3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f3      	bne.n	8006a30 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d101      	bne.n	8006a52 <inc_lock+0x86>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e03f      	b.n	8006ad2 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6819      	ldr	r1, [r3, #0]
 8006a56:	4b21      	ldr	r3, [pc, #132]	; (8006adc <inc_lock+0x110>)
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	0112      	lsls	r2, r2, #4
 8006a5c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	491e      	ldr	r1, [pc, #120]	; (8006adc <inc_lock+0x110>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	18cb      	adds	r3, r1, r3
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695a      	ldr	r2, [r3, #20]
 8006a72:	491a      	ldr	r1, [pc, #104]	; (8006adc <inc_lock+0x110>)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	18cb      	adds	r3, r1, r3
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a7e:	4a17      	ldr	r2, [pc, #92]	; (8006adc <inc_lock+0x110>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	18d3      	adds	r3, r2, r3
 8006a86:	330c      	adds	r3, #12
 8006a88:	2200      	movs	r2, #0
 8006a8a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <inc_lock+0xda>
 8006a92:	4a12      	ldr	r2, [pc, #72]	; (8006adc <inc_lock+0x110>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	18d3      	adds	r3, r2, r3
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <inc_lock+0xda>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e015      	b.n	8006ad2 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <inc_lock+0xf2>
 8006aac:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <inc_lock+0x110>)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	e001      	b.n	8006ac2 <inc_lock+0xf6>
 8006abe:	2380      	movs	r3, #128	; 0x80
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4906      	ldr	r1, [pc, #24]	; (8006adc <inc_lock+0x110>)
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	188a      	adds	r2, r1, r2
 8006aca:	320c      	adds	r2, #12
 8006acc:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b004      	add	sp, #16
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	200006f4 	.word	0x200006f4

08006ae0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d832      	bhi.n	8006b5a <dec_lock+0x7a>
		n = Files[i].ctr;
 8006af4:	200e      	movs	r0, #14
 8006af6:	183b      	adds	r3, r7, r0
 8006af8:	491d      	ldr	r1, [pc, #116]	; (8006b70 <dec_lock+0x90>)
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	0112      	lsls	r2, r2, #4
 8006afe:	188a      	adds	r2, r1, r2
 8006b00:	320c      	adds	r2, #12
 8006b02:	8812      	ldrh	r2, [r2, #0]
 8006b04:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d102      	bne.n	8006b18 <dec_lock+0x38>
 8006b12:	183b      	adds	r3, r7, r0
 8006b14:	2200      	movs	r2, #0
 8006b16:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006b18:	210e      	movs	r1, #14
 8006b1a:	187b      	adds	r3, r7, r1
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <dec_lock+0x4c>
 8006b22:	187b      	adds	r3, r7, r1
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	187b      	adds	r3, r7, r1
 8006b28:	3a01      	subs	r2, #1
 8006b2a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006b2c:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <dec_lock+0x90>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	18d3      	adds	r3, r2, r3
 8006b34:	330c      	adds	r3, #12
 8006b36:	210e      	movs	r1, #14
 8006b38:	187a      	adds	r2, r7, r1
 8006b3a:	8812      	ldrh	r2, [r2, #0]
 8006b3c:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006b3e:	187b      	adds	r3, r7, r1
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <dec_lock+0x70>
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <dec_lock+0x90>)
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006b50:	230d      	movs	r3, #13
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e003      	b.n	8006b62 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006b5a:	230d      	movs	r3, #13
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2202      	movs	r2, #2
 8006b60:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006b62:	230d      	movs	r3, #13
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	781b      	ldrb	r3, [r3, #0]
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b004      	add	sp, #16
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200006f4 	.word	0x200006f4

08006b74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e00e      	b.n	8006ba0 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <clear_lock+0x3c>)
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	0112      	lsls	r2, r2, #4
 8006b88:	58d3      	ldr	r3, [r2, r3]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d104      	bne.n	8006b9a <clear_lock+0x26>
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <clear_lock+0x3c>)
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	0112      	lsls	r2, r2, #4
 8006b96:	2100      	movs	r1, #0
 8006b98:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d9ed      	bls.n	8006b82 <clear_lock+0xe>
	}
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b004      	add	sp, #16
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200006f4 	.word	0x200006f4

08006bb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006bbc:	240f      	movs	r4, #15
 8006bbe:	193b      	adds	r3, r7, r4
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	78db      	ldrb	r3, [r3, #3]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d034      	beq.n	8006c36 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7858      	ldrb	r0, [r3, #1]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3334      	adds	r3, #52	; 0x34
 8006bda:	0019      	movs	r1, r3
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	2301      	movs	r3, #1
 8006be0:	f7ff fd34 	bl	800664c <disk_write>
 8006be4:	1e03      	subs	r3, r0, #0
 8006be6:	d003      	beq.n	8006bf0 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006be8:	193b      	adds	r3, r7, r4
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e022      	b.n	8006c36 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d217      	bcs.n	8006c36 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	789b      	ldrb	r3, [r3, #2]
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	e010      	b.n	8006c30 <sync_window+0x7c>
					wsect += fs->fsize;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	18d3      	adds	r3, r2, r3
 8006c16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	7858      	ldrb	r0, [r3, #1]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3334      	adds	r3, #52	; 0x34
 8006c20:	0019      	movs	r1, r3
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	2301      	movs	r3, #1
 8006c26:	f7ff fd11 	bl	800664c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d8eb      	bhi.n	8006c0e <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8006c36:	230f      	movs	r3, #15
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	781b      	ldrb	r3, [r3, #0]
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b007      	add	sp, #28
 8006c42:	bd90      	pop	{r4, r7, pc}

08006c44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006c44:	b5b0      	push	{r4, r5, r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006c4e:	250f      	movs	r5, #15
 8006c50:	197b      	adds	r3, r7, r5
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d01f      	beq.n	8006ca0 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006c60:	197c      	adds	r4, r7, r5
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7ff ffa5 	bl	8006bb4 <sync_window>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006c6e:	002c      	movs	r4, r5
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d113      	bne.n	8006ca0 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7858      	ldrb	r0, [r3, #1]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3334      	adds	r3, #52	; 0x34
 8006c80:	0019      	movs	r1, r3
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	2301      	movs	r3, #1
 8006c86:	f7ff fcb9 	bl	80065fc <disk_read>
 8006c8a:	1e03      	subs	r3, r0, #0
 8006c8c:	d005      	beq.n	8006c9a <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006c8e:	2301      	movs	r3, #1
 8006c90:	425b      	negs	r3, r3
 8006c92:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006ca0:	230f      	movs	r3, #15
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	781b      	ldrb	r3, [r3, #0]
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006cb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006cb0:	b5b0      	push	{r4, r5, r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006cb8:	250f      	movs	r5, #15
 8006cba:	197c      	adds	r4, r7, r5
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7ff ff78 	bl	8006bb4 <sync_window>
 8006cc4:	0003      	movs	r3, r0
 8006cc6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006cc8:	197b      	adds	r3, r7, r5
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d15d      	bne.n	8006d8c <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d14c      	bne.n	8006d72 <sync_fs+0xc2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	791b      	ldrb	r3, [r3, #4]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d148      	bne.n	8006d72 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3334      	adds	r3, #52	; 0x34
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	2100      	movs	r1, #0
 8006cea:	0018      	movs	r0, r3
 8006cec:	f7ff fda1 	bl	8006832 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3334      	adds	r3, #52	; 0x34
 8006cf4:	33ff      	adds	r3, #255	; 0xff
 8006cf6:	33ff      	adds	r3, #255	; 0xff
 8006cf8:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <sync_fs+0xec>)
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7ff fd31 	bl	8006764 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3334      	adds	r3, #52	; 0x34
 8006d06:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <sync_fs+0xf0>)
 8006d08:	0011      	movs	r1, r2
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7ff fd48 	bl	80067a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3334      	adds	r3, #52	; 0x34
 8006d14:	33e5      	adds	r3, #229	; 0xe5
 8006d16:	33ff      	adds	r3, #255	; 0xff
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <sync_fs+0xf4>)
 8006d1a:	0011      	movs	r1, r2
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7ff fd3f 	bl	80067a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3334      	adds	r3, #52	; 0x34
 8006d26:	33e9      	adds	r3, #233	; 0xe9
 8006d28:	33ff      	adds	r3, #255	; 0xff
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	0019      	movs	r1, r3
 8006d32:	0010      	movs	r0, r2
 8006d34:	f7ff fd34 	bl	80067a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3334      	adds	r3, #52	; 0x34
 8006d3c:	33ed      	adds	r3, #237	; 0xed
 8006d3e:	33ff      	adds	r3, #255	; 0xff
 8006d40:	001a      	movs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	0019      	movs	r1, r3
 8006d48:	0010      	movs	r0, r2
 8006d4a:	f7ff fd29 	bl	80067a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7858      	ldrb	r0, [r3, #1]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3334      	adds	r3, #52	; 0x34
 8006d60:	0019      	movs	r1, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d66:	2301      	movs	r3, #1
 8006d68:	f7ff fc70 	bl	800664c <disk_write>
			fs->fsi_flag = 0;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2200      	movs	r2, #0
 8006d78:	2100      	movs	r1, #0
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f7ff fc8e 	bl	800669c <disk_ioctl>
 8006d80:	1e03      	subs	r3, r0, #0
 8006d82:	d003      	beq.n	8006d8c <sync_fs+0xdc>
 8006d84:	230f      	movs	r3, #15
 8006d86:	18fb      	adds	r3, r7, r3
 8006d88:	2201      	movs	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8006d8c:	230f      	movs	r3, #15
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	781b      	ldrb	r3, [r3, #0]
}
 8006d92:	0018      	movs	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b004      	add	sp, #16
 8006d98:	bdb0      	pop	{r4, r5, r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	0000aa55 	.word	0x0000aa55
 8006da0:	41615252 	.word	0x41615252
 8006da4:	61417272 	.word	0x61417272

08006da8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	3b02      	subs	r3, #2
 8006db6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	3b02      	subs	r3, #2
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d301      	bcc.n	8006dc8 <clust2sect+0x20>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e007      	b.n	8006dd8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	895b      	ldrh	r3, [r3, #10]
 8006dcc:	001a      	movs	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	435a      	muls	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	18d3      	adds	r3, r2, r3
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d904      	bls.n	8006e00 <get_fat+0x20>
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d302      	bcc.n	8006e06 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e092      	b.n	8006f2c <get_fat+0x14c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e06:	2301      	movs	r3, #1
 8006e08:	425b      	negs	r3, r3
 8006e0a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d064      	beq.n	8006ede <get_fat+0xfe>
 8006e14:	dd00      	ble.n	8006e18 <get_fat+0x38>
 8006e16:	e07f      	b.n	8006f18 <get_fat+0x138>
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d002      	beq.n	8006e22 <get_fat+0x42>
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d043      	beq.n	8006ea8 <get_fat+0xc8>
 8006e20:	e07a      	b.n	8006f18 <get_fat+0x138>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	18d3      	adds	r3, r2, r3
 8006e2e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	0a5b      	lsrs	r3, r3, #9
 8006e38:	18d2      	adds	r2, r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7ff ff00 	bl	8006c44 <move_window>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d16a      	bne.n	8006f1e <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	60fa      	str	r2, [r7, #12]
 8006e4e:	05db      	lsls	r3, r3, #23
 8006e50:	0ddb      	lsrs	r3, r3, #23
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	2134      	movs	r1, #52	; 0x34
 8006e56:	18d3      	adds	r3, r2, r3
 8006e58:	185b      	adds	r3, r3, r1
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	0a5b      	lsrs	r3, r3, #9
 8006e66:	18d2      	adds	r2, r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff fee9 	bl	8006c44 <move_window>
 8006e72:	1e03      	subs	r3, r0, #0
 8006e74:	d155      	bne.n	8006f22 <get_fat+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	05db      	lsls	r3, r3, #23
 8006e7a:	0ddb      	lsrs	r3, r3, #23
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	2134      	movs	r1, #52	; 0x34
 8006e80:	18d3      	adds	r3, r2, r3
 8006e82:	185b      	adds	r3, r3, r1
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	001a      	movs	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2201      	movs	r2, #1
 8006e94:	4013      	ands	r3, r2
 8006e96:	d002      	beq.n	8006e9e <get_fat+0xbe>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	e002      	b.n	8006ea4 <get_fat+0xc4>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	051b      	lsls	r3, r3, #20
 8006ea2:	0d1b      	lsrs	r3, r3, #20
 8006ea4:	617b      	str	r3, [r7, #20]
			break;
 8006ea6:	e041      	b.n	8006f2c <get_fat+0x14c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	18d2      	adds	r2, r2, r3
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	0011      	movs	r1, r2
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f7ff fec4 	bl	8006c44 <move_window>
 8006ebc:	1e03      	subs	r3, r0, #0
 8006ebe:	d132      	bne.n	8006f26 <get_fat+0x146>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	3334      	adds	r3, #52	; 0x34
 8006ec4:	001a      	movs	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	0059      	lsls	r1, r3, #1
 8006eca:	23ff      	movs	r3, #255	; 0xff
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	400b      	ands	r3, r1
 8006ed0:	18d3      	adds	r3, r2, r3
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7ff fc0a 	bl	80066ec <ld_word>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	617b      	str	r3, [r7, #20]
			break;
 8006edc:	e026      	b.n	8006f2c <get_fat+0x14c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	09db      	lsrs	r3, r3, #7
 8006ee6:	18d2      	adds	r2, r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	0011      	movs	r1, r2
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7ff fea9 	bl	8006c44 <move_window>
 8006ef2:	1e03      	subs	r3, r0, #0
 8006ef4:	d119      	bne.n	8006f2a <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3334      	adds	r3, #52	; 0x34
 8006efa:	001a      	movs	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	0099      	lsls	r1, r3, #2
 8006f00:	23fe      	movs	r3, #254	; 0xfe
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	400b      	ands	r3, r1
 8006f06:	18d3      	adds	r3, r2, r3
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7ff fc0a 	bl	8006722 <ld_dword>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	617b      	str	r3, [r7, #20]
			break;
 8006f16:	e009      	b.n	8006f2c <get_fat+0x14c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e006      	b.n	8006f2c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	e004      	b.n	8006f2c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	e002      	b.n	8006f2c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	e000      	b.n	8006f2c <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f2a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006f2c:	697b      	ldr	r3, [r7, #20]
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b006      	add	sp, #24
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006f36:	b5b0      	push	{r4, r5, r7, lr}
 8006f38:	b088      	sub	sp, #32
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006f42:	231f      	movs	r3, #31
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d800      	bhi.n	8006f52 <put_fat+0x1c>
 8006f50:	e0eb      	b.n	800712a <put_fat+0x1f4>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d300      	bcc.n	8006f5e <put_fat+0x28>
 8006f5c:	e0e5      	b.n	800712a <put_fat+0x1f4>
		switch (fs->fs_type) {
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d100      	bne.n	8006f68 <put_fat+0x32>
 8006f66:	e0a1      	b.n	80070ac <put_fat+0x176>
 8006f68:	dd00      	ble.n	8006f6c <put_fat+0x36>
 8006f6a:	e0de      	b.n	800712a <put_fat+0x1f4>
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d003      	beq.n	8006f78 <put_fat+0x42>
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d100      	bne.n	8006f76 <put_fat+0x40>
 8006f74:	e075      	b.n	8007062 <put_fat+0x12c>
 8006f76:	e0d8      	b.n	800712a <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	18d3      	adds	r3, r2, r3
 8006f84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	0a5b      	lsrs	r3, r3, #9
 8006f8e:	18d2      	adds	r2, r2, r3
 8006f90:	251f      	movs	r5, #31
 8006f92:	197c      	adds	r4, r7, r5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	0011      	movs	r1, r2
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7ff fe53 	bl	8006c44 <move_window>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006fa2:	197b      	adds	r3, r7, r5
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d000      	beq.n	8006fac <put_fat+0x76>
 8006faa:	e0b7      	b.n	800711c <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3334      	adds	r3, #52	; 0x34
 8006fb0:	001a      	movs	r2, r3
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	61b9      	str	r1, [r7, #24]
 8006fb8:	05db      	lsls	r3, r3, #23
 8006fba:	0ddb      	lsrs	r3, r3, #23
 8006fbc:	18d3      	adds	r3, r2, r3
 8006fbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d00d      	beq.n	8006fe4 <put_fat+0xae>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	220f      	movs	r2, #15
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	b25a      	sxtb	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	b25b      	sxtb	r3, r3
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e001      	b.n	8006fe8 <put_fat+0xb2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	0a5b      	lsrs	r3, r3, #9
 8006ffa:	18d2      	adds	r2, r2, r3
 8006ffc:	251f      	movs	r5, #31
 8006ffe:	197c      	adds	r4, r7, r5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	0011      	movs	r1, r2
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fe1d 	bl	8006c44 <move_window>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800700e:	197b      	adds	r3, r7, r5
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d000      	beq.n	8007018 <put_fat+0xe2>
 8007016:	e083      	b.n	8007120 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3334      	adds	r3, #52	; 0x34
 800701c:	001a      	movs	r2, r3
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	05db      	lsls	r3, r3, #23
 8007022:	0ddb      	lsrs	r3, r3, #23
 8007024:	18d3      	adds	r3, r2, r3
 8007026:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2201      	movs	r2, #1
 800702c:	4013      	ands	r3, r2
 800702e:	d003      	beq.n	8007038 <put_fat+0x102>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	091b      	lsrs	r3, r3, #4
 8007034:	b2db      	uxtb	r3, r3
 8007036:	e00e      	b.n	8007056 <put_fat+0x120>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b25b      	sxtb	r3, r3
 800703e:	220f      	movs	r2, #15
 8007040:	4393      	bics	r3, r2
 8007042:	b25a      	sxtb	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b25b      	sxtb	r3, r3
 800704a:	210f      	movs	r1, #15
 800704c:	400b      	ands	r3, r1
 800704e:	b25b      	sxtb	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	b25b      	sxtb	r3, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	70da      	strb	r2, [r3, #3]
			break;
 8007060:	e063      	b.n	800712a <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	18d2      	adds	r2, r2, r3
 800706c:	251f      	movs	r5, #31
 800706e:	197c      	adds	r4, r7, r5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	0011      	movs	r1, r2
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff fde5 	bl	8006c44 <move_window>
 800707a:	0003      	movs	r3, r0
 800707c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800707e:	197b      	adds	r3, r7, r5
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d14e      	bne.n	8007124 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3334      	adds	r3, #52	; 0x34
 800708a:	001a      	movs	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	0059      	lsls	r1, r3, #1
 8007090:	23ff      	movs	r3, #255	; 0xff
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	400b      	ands	r3, r1
 8007096:	18d3      	adds	r3, r2, r3
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	b292      	uxth	r2, r2
 800709c:	0011      	movs	r1, r2
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff fb60 	bl	8006764 <st_word>
			fs->wflag = 1;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	70da      	strb	r2, [r3, #3]
			break;
 80070aa:	e03e      	b.n	800712a <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	09db      	lsrs	r3, r3, #7
 80070b4:	18d2      	adds	r2, r2, r3
 80070b6:	251f      	movs	r5, #31
 80070b8:	197c      	adds	r4, r7, r5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	0011      	movs	r1, r2
 80070be:	0018      	movs	r0, r3
 80070c0:	f7ff fdc0 	bl	8006c44 <move_window>
 80070c4:	0003      	movs	r3, r0
 80070c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80070c8:	197b      	adds	r3, r7, r5
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d12b      	bne.n	8007128 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	091c      	lsrs	r4, r3, #4
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3334      	adds	r3, #52	; 0x34
 80070da:	001a      	movs	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	0099      	lsls	r1, r3, #2
 80070e0:	23fe      	movs	r3, #254	; 0xfe
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	400b      	ands	r3, r1
 80070e6:	18d3      	adds	r3, r2, r3
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7ff fb1a 	bl	8006722 <ld_dword>
 80070ee:	0003      	movs	r3, r0
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	071b      	lsls	r3, r3, #28
 80070f4:	4323      	orrs	r3, r4
 80070f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3334      	adds	r3, #52	; 0x34
 80070fc:	001a      	movs	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0099      	lsls	r1, r3, #2
 8007102:	23fe      	movs	r3, #254	; 0xfe
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	400b      	ands	r3, r1
 8007108:	18d3      	adds	r3, r2, r3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	0011      	movs	r1, r2
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff fb46 	bl	80067a0 <st_dword>
			fs->wflag = 1;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	70da      	strb	r2, [r3, #3]
			break;
 800711a:	e006      	b.n	800712a <put_fat+0x1f4>
			if (res != FR_OK) break;
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	e004      	b.n	800712a <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	e002      	b.n	800712a <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007124:	46c0      	nop			; (mov r8, r8)
 8007126:	e000      	b.n	800712a <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007128:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 800712a:	231f      	movs	r3, #31
 800712c:	18fb      	adds	r3, r7, r3
 800712e:	781b      	ldrb	r3, [r3, #0]
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b008      	add	sp, #32
 8007136:	bdb0      	pop	{r4, r5, r7, pc}

08007138 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007138:	b5b0      	push	{r4, r5, r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007144:	231f      	movs	r3, #31
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d904      	bls.n	8007162 <remove_chain+0x2a>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	429a      	cmp	r2, r3
 8007160:	d301      	bcc.n	8007166 <remove_chain+0x2e>
 8007162:	2302      	movs	r3, #2
 8007164:	e057      	b.n	8007216 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800716c:	251f      	movs	r5, #31
 800716e:	197c      	adds	r4, r7, r5
 8007170:	2301      	movs	r3, #1
 8007172:	425a      	negs	r2, r3
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	0018      	movs	r0, r3
 800717a:	f7ff fedc 	bl	8006f36 <put_fat>
 800717e:	0003      	movs	r3, r0
 8007180:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8007182:	197b      	adds	r3, r7, r5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <remove_chain+0x58>
 800718a:	197b      	adds	r3, r7, r5
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	e042      	b.n	8007216 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0011      	movs	r1, r2
 8007196:	0018      	movs	r0, r3
 8007198:	f7ff fe22 	bl	8006de0 <get_fat>
 800719c:	0003      	movs	r3, r0
 800719e:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d035      	beq.n	8007212 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <remove_chain+0x78>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e032      	b.n	8007216 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	d101      	bne.n	80071ba <remove_chain+0x82>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e02d      	b.n	8007216 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80071ba:	251f      	movs	r5, #31
 80071bc:	197c      	adds	r4, r7, r5
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2200      	movs	r2, #0
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7ff feb6 	bl	8006f36 <put_fat>
 80071ca:	0003      	movs	r3, r0
 80071cc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80071ce:	197b      	adds	r3, r7, r5
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <remove_chain+0xa4>
 80071d6:	197b      	adds	r3, r7, r5
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	e01c      	b.n	8007216 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	3b02      	subs	r3, #2
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d20b      	bcs.n	8007202 <remove_chain+0xca>
			fs->free_clst++;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d3bf      	bcc.n	8007190 <remove_chain+0x58>
 8007210:	e000      	b.n	8007214 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8007212:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	0018      	movs	r0, r3
 8007218:	46bd      	mov	sp, r7
 800721a:	b008      	add	sp, #32
 800721c:	bdb0      	pop	{r4, r5, r7, pc}

0800721e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800721e:	b5b0      	push	{r4, r5, r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <create_chain+0x2c>
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d31d      	bcc.n	8007286 <create_chain+0x68>
 800724a:	2301      	movs	r3, #1
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e01a      	b.n	8007286 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0011      	movs	r1, r2
 8007256:	0018      	movs	r0, r3
 8007258:	f7ff fdc2 	bl	8006de0 <get_fat>
 800725c:	0003      	movs	r3, r0
 800725e:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d801      	bhi.n	800726a <create_chain+0x4c>
 8007266:	2301      	movs	r3, #1
 8007268:	e07b      	b.n	8007362 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	d101      	bne.n	8007274 <create_chain+0x56>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e076      	b.n	8007362 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d201      	bcs.n	8007282 <create_chain+0x64>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	e06f      	b.n	8007362 <create_chain+0x144>
		scl = clst;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	3301      	adds	r3, #1
 800728e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	429a      	cmp	r2, r3
 8007298:	d307      	bcc.n	80072aa <create_chain+0x8c>
				ncl = 2;
 800729a:	2302      	movs	r3, #2
 800729c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d901      	bls.n	80072aa <create_chain+0x8c>
 80072a6:	2300      	movs	r3, #0
 80072a8:	e05b      	b.n	8007362 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0011      	movs	r1, r2
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7ff fd95 	bl	8006de0 <get_fat>
 80072b6:	0003      	movs	r3, r0
 80072b8:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d002      	beq.n	80072cc <create_chain+0xae>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	d101      	bne.n	80072d0 <create_chain+0xb2>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e048      	b.n	8007362 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1d8      	bne.n	800728a <create_chain+0x6c>
 80072d8:	2300      	movs	r3, #0
 80072da:	e042      	b.n	8007362 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80072dc:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80072de:	2517      	movs	r5, #23
 80072e0:	197c      	adds	r4, r7, r5
 80072e2:	2301      	movs	r3, #1
 80072e4:	425a      	negs	r2, r3
 80072e6:	69f9      	ldr	r1, [r7, #28]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f7ff fe23 	bl	8006f36 <put_fat>
 80072f0:	0003      	movs	r3, r0
 80072f2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80072f4:	197b      	adds	r3, r7, r5
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <create_chain+0xf6>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007302:	197c      	adds	r4, r7, r5
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff fe13 	bl	8006f36 <put_fat>
 8007310:	0003      	movs	r3, r0
 8007312:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007314:	2317      	movs	r3, #23
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d116      	bne.n	800734c <create_chain+0x12e>
		fs->last_clst = ncl;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	3b02      	subs	r3, #2
 800732e:	429a      	cmp	r2, r3
 8007330:	d804      	bhi.n	800733c <create_chain+0x11e>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	791b      	ldrb	r3, [r3, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	4313      	orrs	r3, r2
 8007344:	b2da      	uxtb	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	711a      	strb	r2, [r3, #4]
 800734a:	e009      	b.n	8007360 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800734c:	2317      	movs	r3, #23
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d102      	bne.n	800735c <create_chain+0x13e>
 8007356:	2301      	movs	r3, #1
 8007358:	425b      	negs	r3, r3
 800735a:	e000      	b.n	800735e <create_chain+0x140>
 800735c:	2301      	movs	r3, #1
 800735e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007360:	69fb      	ldr	r3, [r7, #28]
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b008      	add	sp, #32
 8007368:	bdb0      	pop	{r4, r5, r7, pc}

0800736a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	3304      	adds	r3, #4
 8007380:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	0a5a      	lsrs	r2, r3, #9
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	895b      	ldrh	r3, [r3, #10]
 800738a:	0019      	movs	r1, r3
 800738c:	0010      	movs	r0, r2
 800738e:	f7f8 fecd 	bl	800012c <__udivsi3>
 8007392:	0003      	movs	r3, r0
 8007394:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	613a      	str	r2, [r7, #16]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <clmt_clust+0x40>
 80073a6:	2300      	movs	r3, #0
 80073a8:	e010      	b.n	80073cc <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d307      	bcc.n	80073c2 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3304      	adds	r3, #4
 80073be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073c0:	e7e9      	b.n	8007396 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80073c2:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	18d3      	adds	r3, r2, r3
}
 80073cc:	0018      	movs	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b006      	add	sp, #24
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	2380      	movs	r3, #128	; 0x80
 80073e8:	039b      	lsls	r3, r3, #14
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d203      	bcs.n	80073f6 <dir_sdi+0x22>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	221f      	movs	r2, #31
 80073f2:	4013      	ands	r3, r2
 80073f4:	d001      	beq.n	80073fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80073f6:	2302      	movs	r3, #2
 80073f8:	e066      	b.n	80074c8 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <dir_sdi+0x46>
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d902      	bls.n	800741a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10c      	bne.n	800743a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	8912      	ldrh	r2, [r2, #8]
 8007428:	4293      	cmp	r3, r2
 800742a:	d301      	bcc.n	8007430 <dir_sdi+0x5c>
 800742c:	2302      	movs	r3, #2
 800742e:	e04b      	b.n	80074c8 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	61da      	str	r2, [r3, #28]
 8007438:	e02c      	b.n	8007494 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	895b      	ldrh	r3, [r3, #10]
 800743e:	025b      	lsls	r3, r3, #9
 8007440:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007442:	e01a      	b.n	800747a <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	0011      	movs	r1, r2
 800744a:	0018      	movs	r0, r3
 800744c:	f7ff fcc8 	bl	8006de0 <get_fat>
 8007450:	0003      	movs	r3, r0
 8007452:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3301      	adds	r3, #1
 8007458:	d101      	bne.n	800745e <dir_sdi+0x8a>
 800745a:	2301      	movs	r3, #1
 800745c:	e034      	b.n	80074c8 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d904      	bls.n	800746e <dir_sdi+0x9a>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	429a      	cmp	r2, r3
 800746c:	d301      	bcc.n	8007472 <dir_sdi+0x9e>
 800746e:	2302      	movs	r3, #2
 8007470:	e02a      	b.n	80074c8 <dir_sdi+0xf4>
			ofs -= csz;
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	429a      	cmp	r2, r3
 8007480:	d2e0      	bcs.n	8007444 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	0011      	movs	r1, r2
 8007488:	0018      	movs	r0, r3
 800748a:	f7ff fc8d 	bl	8006da8 <clust2sect>
 800748e:	0002      	movs	r2, r0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <dir_sdi+0xd2>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e010      	b.n	80074c8 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69da      	ldr	r2, [r3, #28]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	0a5b      	lsrs	r3, r3, #9
 80074ae:	18d2      	adds	r2, r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	3334      	adds	r3, #52	; 0x34
 80074b8:	001a      	movs	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	05db      	lsls	r3, r3, #23
 80074be:	0ddb      	lsrs	r3, r3, #23
 80074c0:	18d2      	adds	r2, r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b006      	add	sp, #24
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	3320      	adds	r3, #32
 80074e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <dir_next+0x2a>
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	039b      	lsls	r3, r3, #14
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d301      	bcc.n	80074fe <dir_next+0x2e>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e0ad      	b.n	800765a <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	05db      	lsls	r3, r3, #23
 8007502:	0ddb      	lsrs	r3, r3, #23
 8007504:	d000      	beq.n	8007508 <dir_next+0x38>
 8007506:	e09b      	b.n	8007640 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	8912      	ldrh	r2, [r2, #8]
 8007522:	4293      	cmp	r3, r2
 8007524:	d200      	bcs.n	8007528 <dir_next+0x58>
 8007526:	e08b      	b.n	8007640 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	61da      	str	r2, [r3, #28]
 800752e:	2304      	movs	r3, #4
 8007530:	e093      	b.n	800765a <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	0a5b      	lsrs	r3, r3, #9
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	8952      	ldrh	r2, [r2, #10]
 800753a:	3a01      	subs	r2, #1
 800753c:	4013      	ands	r3, r2
 800753e:	d000      	beq.n	8007542 <dir_next+0x72>
 8007540:	e07e      	b.n	8007640 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	0019      	movs	r1, r3
 800754a:	0010      	movs	r0, r2
 800754c:	f7ff fc48 	bl	8006de0 <get_fat>
 8007550:	0003      	movs	r3, r0
 8007552:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d801      	bhi.n	800755e <dir_next+0x8e>
 800755a:	2302      	movs	r3, #2
 800755c:	e07d      	b.n	800765a <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	3301      	adds	r3, #1
 8007562:	d101      	bne.n	8007568 <dir_next+0x98>
 8007564:	2301      	movs	r3, #1
 8007566:	e078      	b.n	800765a <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	429a      	cmp	r2, r3
 8007570:	d35a      	bcc.n	8007628 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	61da      	str	r2, [r3, #28]
 800757e:	2304      	movs	r3, #4
 8007580:	e06b      	b.n	800765a <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	0019      	movs	r1, r3
 800758a:	0010      	movs	r0, r2
 800758c:	f7ff fe47 	bl	800721e <create_chain>
 8007590:	0003      	movs	r3, r0
 8007592:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <dir_next+0xce>
 800759a:	2307      	movs	r3, #7
 800759c:	e05d      	b.n	800765a <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <dir_next+0xd8>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e058      	b.n	800765a <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	3301      	adds	r3, #1
 80075ac:	d101      	bne.n	80075b2 <dir_next+0xe2>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e053      	b.n	800765a <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff fafd 	bl	8006bb4 <sync_window>
 80075ba:	1e03      	subs	r3, r0, #0
 80075bc:	d001      	beq.n	80075c2 <dir_next+0xf2>
 80075be:	2301      	movs	r3, #1
 80075c0:	e04b      	b.n	800765a <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3334      	adds	r3, #52	; 0x34
 80075c6:	2280      	movs	r2, #128	; 0x80
 80075c8:	0092      	lsls	r2, r2, #2
 80075ca:	2100      	movs	r1, #0
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7ff f930 	bl	8006832 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	0011      	movs	r1, r2
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff fbe3 	bl	8006da8 <clust2sect>
 80075e2:	0002      	movs	r2, r0
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
 80075e8:	e012      	b.n	8007610 <dir_next+0x140>
						fs->wflag = 1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7ff fade 	bl	8006bb4 <sync_window>
 80075f8:	1e03      	subs	r3, r0, #0
 80075fa:	d001      	beq.n	8007600 <dir_next+0x130>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e02c      	b.n	800765a <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3301      	adds	r3, #1
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	895b      	ldrh	r3, [r3, #10]
 8007614:	001a      	movs	r2, r3
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	4293      	cmp	r3, r2
 800761a:	d3e6      	bcc.n	80075ea <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	0011      	movs	r1, r2
 8007634:	0018      	movs	r0, r3
 8007636:	f7ff fbb7 	bl	8006da8 <clust2sect>
 800763a:	0002      	movs	r2, r0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3334      	adds	r3, #52	; 0x34
 800764a:	001a      	movs	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	05db      	lsls	r3, r3, #23
 8007650:	0ddb      	lsrs	r3, r3, #23
 8007652:	18d2      	adds	r2, r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b006      	add	sp, #24
 8007660:	bd80      	pop	{r7, pc}

08007662 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007662:	b5b0      	push	{r4, r5, r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007672:	2517      	movs	r5, #23
 8007674:	197c      	adds	r4, r7, r5
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2100      	movs	r1, #0
 800767a:	0018      	movs	r0, r3
 800767c:	f7ff feaa 	bl	80073d4 <dir_sdi>
 8007680:	0003      	movs	r3, r0
 8007682:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007684:	197b      	adds	r3, r7, r5
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d133      	bne.n	80076f4 <dir_alloc+0x92>
		n = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	2517      	movs	r5, #23
 8007696:	197c      	adds	r4, r7, r5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	0011      	movs	r1, r2
 800769c:	0018      	movs	r0, r3
 800769e:	f7ff fad1 	bl	8006c44 <move_window>
 80076a2:	0003      	movs	r3, r0
 80076a4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80076a6:	197b      	adds	r3, r7, r5
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d121      	bne.n	80076f2 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2be5      	cmp	r3, #229	; 0xe5
 80076b6:	d004      	beq.n	80076c2 <dir_alloc+0x60>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	3301      	adds	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d102      	bne.n	80076d6 <dir_alloc+0x74>
 80076d0:	e010      	b.n	80076f4 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80076d2:	2300      	movs	r3, #0
 80076d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80076d6:	2517      	movs	r5, #23
 80076d8:	197c      	adds	r4, r7, r5
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2101      	movs	r1, #1
 80076de:	0018      	movs	r0, r3
 80076e0:	f7ff fef6 	bl	80074d0 <dir_next>
 80076e4:	0003      	movs	r3, r0
 80076e6:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80076e8:	197b      	adds	r3, r7, r5
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0cf      	beq.n	8007690 <dir_alloc+0x2e>
 80076f0:	e000      	b.n	80076f4 <dir_alloc+0x92>
			if (res != FR_OK) break;
 80076f2:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80076f4:	2217      	movs	r2, #23
 80076f6:	18bb      	adds	r3, r7, r2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d102      	bne.n	8007704 <dir_alloc+0xa2>
 80076fe:	18bb      	adds	r3, r7, r2
 8007700:	2207      	movs	r2, #7
 8007702:	701a      	strb	r2, [r3, #0]
	return res;
 8007704:	2317      	movs	r3, #23
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	781b      	ldrb	r3, [r3, #0]
}
 800770a:	0018      	movs	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	b006      	add	sp, #24
 8007710:	bdb0      	pop	{r4, r5, r7, pc}

08007712 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	331a      	adds	r3, #26
 8007720:	0018      	movs	r0, r3
 8007722:	f7fe ffe3 	bl	80066ec <ld_word>
 8007726:	0003      	movs	r3, r0
 8007728:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d109      	bne.n	8007746 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	0018      	movs	r0, r3
 8007738:	f7fe ffd8 	bl	80066ec <ld_word>
 800773c:	0003      	movs	r3, r0
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	b004      	add	sp, #16
 800774e:	bd80      	pop	{r7, pc}

08007750 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	331a      	adds	r3, #26
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	b292      	uxth	r2, r2
 8007764:	0011      	movs	r1, r2
 8007766:	0018      	movs	r0, r3
 8007768:	f7fe fffc 	bl	8006764 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d109      	bne.n	8007788 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3314      	adds	r3, #20
 8007778:	001a      	movs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0c1b      	lsrs	r3, r3, #16
 800777e:	b29b      	uxth	r3, r3
 8007780:	0019      	movs	r1, r3
 8007782:	0010      	movs	r0, r2
 8007784:	f7fe ffee 	bl	8006764 <st_word>
	}
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b004      	add	sp, #16
 800778e:	bd80      	pop	{r7, pc}

08007790 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007790:	b5b0      	push	{r4, r5, r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	331a      	adds	r3, #26
 800779e:	0018      	movs	r0, r3
 80077a0:	f7fe ffa4 	bl	80066ec <ld_word>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d001      	beq.n	80077ac <cmp_lfn+0x1c>
 80077a8:	2300      	movs	r3, #0
 80077aa:	e068      	b.n	800787e <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	001a      	movs	r2, r3
 80077b2:	233f      	movs	r3, #63	; 0x3f
 80077b4:	4013      	ands	r3, r2
 80077b6:	1e5a      	subs	r2, r3, #1
 80077b8:	0013      	movs	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	189b      	adds	r3, r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80077c4:	230e      	movs	r3, #14
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2201      	movs	r2, #1
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e03d      	b.n	800784e <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80077d2:	4a2d      	ldr	r2, [pc, #180]	; (8007888 <cmp_lfn+0xf8>)
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	18d3      	adds	r3, r2, r3
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	001a      	movs	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	250c      	movs	r5, #12
 80077e2:	197c      	adds	r4, r7, r5
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7fe ff81 	bl	80066ec <ld_word>
 80077ea:	0003      	movs	r3, r0
 80077ec:	8023      	strh	r3, [r4, #0]
		if (wc) {
 80077ee:	230e      	movs	r3, #14
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01f      	beq.n	8007838 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2bfe      	cmp	r3, #254	; 0xfe
 80077fc:	d813      	bhi.n	8007826 <cmp_lfn+0x96>
 80077fe:	197b      	adds	r3, r7, r5
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	0018      	movs	r0, r3
 8007804:	f001 fe82 	bl	800950c <ff_wtoupper>
 8007808:	0003      	movs	r3, r0
 800780a:	001c      	movs	r4, r3
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	617a      	str	r2, [r7, #20]
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	18d3      	adds	r3, r2, r3
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	0018      	movs	r0, r3
 800781c:	f001 fe76 	bl	800950c <ff_wtoupper>
 8007820:	0003      	movs	r3, r0
 8007822:	429c      	cmp	r4, r3
 8007824:	d001      	beq.n	800782a <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007826:	2300      	movs	r3, #0
 8007828:	e029      	b.n	800787e <cmp_lfn+0xee>
			}
			wc = uc;
 800782a:	230e      	movs	r3, #14
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	220c      	movs	r2, #12
 8007830:	18ba      	adds	r2, r7, r2
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	e007      	b.n	8007848 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007838:	230c      	movs	r3, #12
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	4a13      	ldr	r2, [pc, #76]	; (800788c <cmp_lfn+0xfc>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d001      	beq.n	8007848 <cmp_lfn+0xb8>
 8007844:	2300      	movs	r3, #0
 8007846:	e01a      	b.n	800787e <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	3301      	adds	r3, #1
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b0c      	cmp	r3, #12
 8007852:	d9be      	bls.n	80077d2 <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	001a      	movs	r2, r3
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	4013      	ands	r3, r2
 800785e:	d00d      	beq.n	800787c <cmp_lfn+0xec>
 8007860:	230e      	movs	r3, #14
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <cmp_lfn+0xec>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	18d3      	adds	r3, r2, r3
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <cmp_lfn+0xec>
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 800787c:	2301      	movs	r3, #1
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b006      	add	sp, #24
 8007884:	bdb0      	pop	{r4, r5, r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	0800a884 	.word	0x0800a884
 800788c:	0000ffff 	.word	0x0000ffff

08007890 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b089      	sub	sp, #36	; 0x24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	0019      	movs	r1, r3
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	1dbb      	adds	r3, r7, #6
 80078a2:	1c0a      	adds	r2, r1, #0
 80078a4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	330d      	adds	r3, #13
 80078aa:	1dba      	adds	r2, r7, #6
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	330b      	adds	r3, #11
 80078b4:	220f      	movs	r2, #15
 80078b6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	330c      	adds	r3, #12
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	331a      	adds	r3, #26
 80078c4:	2100      	movs	r1, #0
 80078c6:	0018      	movs	r0, r3
 80078c8:	f7fe ff4c 	bl	8006764 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	0013      	movs	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	189b      	adds	r3, r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80078de:	2316      	movs	r3, #22
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	2200      	movs	r2, #0
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80078ea:	2116      	movs	r1, #22
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	4a21      	ldr	r2, [pc, #132]	; (8007978 <put_lfn+0xe8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d008      	beq.n	8007908 <put_lfn+0x78>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	61fa      	str	r2, [r7, #28]
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	18d2      	adds	r2, r2, r3
 8007902:	187b      	adds	r3, r7, r1
 8007904:	8812      	ldrh	r2, [r2, #0]
 8007906:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007908:	4a1c      	ldr	r2, [pc, #112]	; (800797c <put_lfn+0xec>)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	18d3      	adds	r3, r2, r3
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	001a      	movs	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	189a      	adds	r2, r3, r2
 8007916:	2416      	movs	r4, #22
 8007918:	193b      	adds	r3, r7, r4
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	0019      	movs	r1, r3
 800791e:	0010      	movs	r0, r2
 8007920:	f7fe ff20 	bl	8006764 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007924:	0022      	movs	r2, r4
 8007926:	18bb      	adds	r3, r7, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <put_lfn+0xa6>
 800792e:	18bb      	adds	r3, r7, r2
 8007930:	2201      	movs	r2, #1
 8007932:	4252      	negs	r2, r2
 8007934:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	3301      	adds	r3, #1
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2b0c      	cmp	r3, #12
 8007940:	d9d3      	bls.n	80078ea <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007942:	2316      	movs	r3, #22
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	4a0b      	ldr	r2, [pc, #44]	; (8007978 <put_lfn+0xe8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d006      	beq.n	800795c <put_lfn+0xcc>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	18d3      	adds	r3, r2, r3
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <put_lfn+0xd8>
 800795c:	1dfb      	adds	r3, r7, #7
 800795e:	1dfa      	adds	r2, r7, #7
 8007960:	7812      	ldrb	r2, [r2, #0]
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	430a      	orrs	r2, r1
 8007966:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	1dfa      	adds	r2, r7, #7
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	701a      	strb	r2, [r3, #0]
}
 8007970:	46c0      	nop			; (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b009      	add	sp, #36	; 0x24
 8007976:	bd90      	pop	{r4, r7, pc}
 8007978:	0000ffff 	.word	0x0000ffff
 800797c:	0800a884 	.word	0x0800a884

08007980 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	; 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	220b      	movs	r2, #11
 8007994:	0018      	movs	r0, r3
 8007996:	f7fe ff2d 	bl	80067f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b05      	cmp	r3, #5
 800799e:	d92f      	bls.n	8007a00 <gen_numname+0x80>
		sr = seq;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80079a4:	e026      	b.n	80079f4 <gen_numname+0x74>
			wc = *lfn++;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	2222      	movs	r2, #34	; 0x22
 80079ae:	18ba      	adds	r2, r7, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80079b4:	2300      	movs	r3, #0
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b8:	e019      	b.n	80079ee <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	005a      	lsls	r2, r3, #1
 80079be:	2022      	movs	r0, #34	; 0x22
 80079c0:	183b      	adds	r3, r7, r0
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	2101      	movs	r1, #1
 80079c6:	400b      	ands	r3, r1
 80079c8:	18d3      	adds	r3, r2, r3
 80079ca:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80079cc:	183b      	adds	r3, r7, r0
 80079ce:	183a      	adds	r2, r7, r0
 80079d0:	8812      	ldrh	r2, [r2, #0]
 80079d2:	0852      	lsrs	r2, r2, #1
 80079d4:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	025b      	lsls	r3, r3, #9
 80079dc:	4013      	ands	r3, r2
 80079de:	d003      	beq.n	80079e8 <gen_numname+0x68>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4a30      	ldr	r2, [pc, #192]	; (8007aa4 <gen_numname+0x124>)
 80079e4:	4053      	eors	r3, r2
 80079e6:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	3301      	adds	r3, #1
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d9e2      	bls.n	80079ba <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1d4      	bne.n	80079a6 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007a00:	2307      	movs	r3, #7
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	220f      	movs	r2, #15
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	212f      	movs	r1, #47	; 0x2f
 8007a10:	187b      	adds	r3, r7, r1
 8007a12:	3230      	adds	r2, #48	; 0x30
 8007a14:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8007a16:	187b      	adds	r3, r7, r1
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b39      	cmp	r3, #57	; 0x39
 8007a1c:	d904      	bls.n	8007a28 <gen_numname+0xa8>
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	187a      	adds	r2, r7, r1
 8007a22:	7812      	ldrb	r2, [r2, #0]
 8007a24:	3207      	adds	r2, #7
 8007a26:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	1e5a      	subs	r2, r3, #1
 8007a2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a2e:	2014      	movs	r0, #20
 8007a30:	183a      	adds	r2, r7, r0
 8007a32:	212f      	movs	r1, #47	; 0x2f
 8007a34:	1879      	adds	r1, r7, r1
 8007a36:	7809      	ldrb	r1, [r1, #0]
 8007a38:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1de      	bne.n	8007a04 <gen_numname+0x84>
	ns[i] = '~';
 8007a46:	183a      	adds	r2, r7, r0
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	18d3      	adds	r3, r2, r3
 8007a4c:	227e      	movs	r2, #126	; 0x7e
 8007a4e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007a50:	2300      	movs	r3, #0
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
 8007a54:	e002      	b.n	8007a5c <gen_numname+0xdc>
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	3301      	adds	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d205      	bcs.n	8007a70 <gen_numname+0xf0>
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	18d3      	adds	r3, r2, r3
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d1f2      	bne.n	8007a56 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	d806      	bhi.n	8007a84 <gen_numname+0x104>
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a7c:	2214      	movs	r2, #20
 8007a7e:	18ba      	adds	r2, r7, r2
 8007a80:	5cd1      	ldrb	r1, [r2, r3]
 8007a82:	e000      	b.n	8007a86 <gen_numname+0x106>
 8007a84:	2120      	movs	r1, #32
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	18d3      	adds	r3, r2, r3
 8007a90:	1c0a      	adds	r2, r1, #0
 8007a92:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	2b07      	cmp	r3, #7
 8007a98:	d9ea      	bls.n	8007a70 <gen_numname+0xf0>
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b00c      	add	sp, #48	; 0x30
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	00011021 	.word	0x00011021

08007aa8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007ab0:	230f      	movs	r3, #15
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8007ab8:	230b      	movs	r3, #11
 8007aba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007abc:	200f      	movs	r0, #15
 8007abe:	183b      	adds	r3, r7, r0
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	0852      	lsrs	r2, r2, #1
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	b2d9      	uxtb	r1, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	183b      	adds	r3, r7, r0
 8007ad6:	188a      	adds	r2, r1, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1ea      	bne.n	8007abc <sum_sfn+0x14>
	return sum;
 8007ae6:	183b      	adds	r3, r7, r0
 8007ae8:	781b      	ldrb	r3, [r3, #0]
}
 8007aea:	0018      	movs	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b004      	add	sp, #16
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007af2:	b5b0      	push	{r4, r5, r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b00:	2517      	movs	r5, #23
 8007b02:	197c      	adds	r4, r7, r5
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2100      	movs	r1, #0
 8007b08:	0018      	movs	r0, r3
 8007b0a:	f7ff fc63 	bl	80073d4 <dir_sdi>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8007b12:	197b      	adds	r3, r7, r5
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <dir_find+0x2e>
 8007b1a:	197b      	adds	r3, r7, r5
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	e0df      	b.n	8007ce0 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b20:	2114      	movs	r1, #20
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	22ff      	movs	r2, #255	; 0xff
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	2315      	movs	r3, #21
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	187a      	adds	r2, r7, r1
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	4252      	negs	r2, r2
 8007b38:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69da      	ldr	r2, [r3, #28]
 8007b3e:	2517      	movs	r5, #23
 8007b40:	197c      	adds	r4, r7, r5
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	0011      	movs	r1, r2
 8007b46:	0018      	movs	r0, r3
 8007b48:	f7ff f87c 	bl	8006c44 <move_window>
 8007b4c:	0003      	movs	r3, r0
 8007b4e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8007b50:	0029      	movs	r1, r5
 8007b52:	187b      	adds	r3, r7, r1
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d000      	beq.n	8007b5c <dir_find+0x6a>
 8007b5a:	e0b9      	b.n	8007cd0 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	2016      	movs	r0, #22
 8007b62:	183b      	adds	r3, r7, r0
 8007b64:	7812      	ldrb	r2, [r2, #0]
 8007b66:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <dir_find+0x86>
 8007b70:	187b      	adds	r3, r7, r1
 8007b72:	2204      	movs	r2, #4
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e0b0      	b.n	8007cda <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	330b      	adds	r3, #11
 8007b7e:	781a      	ldrb	r2, [r3, #0]
 8007b80:	200f      	movs	r0, #15
 8007b82:	183b      	adds	r3, r7, r0
 8007b84:	213f      	movs	r1, #63	; 0x3f
 8007b86:	400a      	ands	r2, r1
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0001      	movs	r1, r0
 8007b8e:	187a      	adds	r2, r7, r1
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007b94:	2316      	movs	r3, #22
 8007b96:	18fb      	adds	r3, r7, r3
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2be5      	cmp	r3, #229	; 0xe5
 8007b9c:	d008      	beq.n	8007bb0 <dir_find+0xbe>
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d00c      	beq.n	8007bc2 <dir_find+0xd0>
 8007ba8:	187b      	adds	r3, r7, r1
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b0f      	cmp	r3, #15
 8007bae:	d008      	beq.n	8007bc2 <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007bb0:	2315      	movs	r3, #21
 8007bb2:	18fb      	adds	r3, r7, r3
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4252      	negs	r2, r2
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8007bc0:	e077      	b.n	8007cb2 <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007bc2:	230f      	movs	r3, #15
 8007bc4:	18fb      	adds	r3, r7, r3
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b0f      	cmp	r3, #15
 8007bca:	d148      	bne.n	8007c5e <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	222f      	movs	r2, #47	; 0x2f
 8007bd0:	5c9b      	ldrb	r3, [r3, r2]
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d000      	beq.n	8007bdc <dir_find+0xea>
 8007bda:	e06a      	b.n	8007cb2 <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007bdc:	2116      	movs	r1, #22
 8007bde:	187b      	adds	r3, r7, r1
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2240      	movs	r2, #64	; 0x40
 8007be4:	4013      	ands	r3, r2
 8007be6:	d015      	beq.n	8007c14 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	2314      	movs	r3, #20
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	7b52      	ldrb	r2, [r2, #13]
 8007bf2:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007bf4:	187b      	adds	r3, r7, r1
 8007bf6:	0008      	movs	r0, r1
 8007bf8:	187a      	adds	r2, r7, r1
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	2140      	movs	r1, #64	; 0x40
 8007bfe:	438a      	bics	r2, r1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	2315      	movs	r3, #21
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	183a      	adds	r2, r7, r0
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007c14:	2316      	movs	r3, #22
 8007c16:	18fa      	adds	r2, r7, r3
 8007c18:	2415      	movs	r4, #21
 8007c1a:	193b      	adds	r3, r7, r4
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d117      	bne.n	8007c54 <dir_find+0x162>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	330d      	adds	r3, #13
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2214      	movs	r2, #20
 8007c2e:	18ba      	adds	r2, r7, r2
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d10e      	bne.n	8007c54 <dir_find+0x162>
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	0019      	movs	r1, r3
 8007c40:	0010      	movs	r0, r2
 8007c42:	f7ff fda5 	bl	8007790 <cmp_lfn>
 8007c46:	1e03      	subs	r3, r0, #0
 8007c48:	d004      	beq.n	8007c54 <dir_find+0x162>
 8007c4a:	193b      	adds	r3, r7, r4
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	e000      	b.n	8007c56 <dir_find+0x164>
 8007c54:	22ff      	movs	r2, #255	; 0xff
 8007c56:	2315      	movs	r3, #21
 8007c58:	18fb      	adds	r3, r7, r3
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	e029      	b.n	8007cb2 <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007c5e:	2315      	movs	r3, #21
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <dir_find+0x18e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f7ff ff1b 	bl	8007aa8 <sum_sfn>
 8007c72:	0003      	movs	r3, r0
 8007c74:	001a      	movs	r2, r3
 8007c76:	2314      	movs	r3, #20
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d029      	beq.n	8007cd4 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	222f      	movs	r2, #47	; 0x2f
 8007c84:	5c9b      	ldrb	r3, [r3, r2]
 8007c86:	001a      	movs	r2, r3
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	d109      	bne.n	8007ca2 <dir_find+0x1b0>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a18      	ldr	r0, [r3, #32]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3324      	adds	r3, #36	; 0x24
 8007c96:	220b      	movs	r2, #11
 8007c98:	0019      	movs	r1, r3
 8007c9a:	f7fe fde3 	bl	8006864 <mem_cmp>
 8007c9e:	1e03      	subs	r3, r0, #0
 8007ca0:	d01a      	beq.n	8007cd8 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007ca2:	2315      	movs	r3, #21
 8007ca4:	18fb      	adds	r3, r7, r3
 8007ca6:	22ff      	movs	r2, #255	; 0xff
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	4252      	negs	r2, r2
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007cb2:	2517      	movs	r5, #23
 8007cb4:	197c      	adds	r4, r7, r5
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f7ff fc08 	bl	80074d0 <dir_next>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8007cc4:	197b      	adds	r3, r7, r5
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d100      	bne.n	8007cce <dir_find+0x1dc>
 8007ccc:	e735      	b.n	8007b3a <dir_find+0x48>
 8007cce:	e004      	b.n	8007cda <dir_find+0x1e8>
		if (res != FR_OK) break;
 8007cd0:	46c0      	nop			; (mov r8, r8)
 8007cd2:	e002      	b.n	8007cda <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	e000      	b.n	8007cda <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007cd8:	46c0      	nop			; (mov r8, r8)

	return res;
 8007cda:	2317      	movs	r3, #23
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	781b      	ldrb	r3, [r3, #0]
}
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b006      	add	sp, #24
 8007ce6:	bdb0      	pop	{r4, r5, r7, pc}

08007ce8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	222f      	movs	r2, #47	; 0x2f
 8007cfa:	5c9b      	ldrb	r3, [r3, r2]
 8007cfc:	001a      	movs	r2, r3
 8007cfe:	23a0      	movs	r3, #160	; 0xa0
 8007d00:	4013      	ands	r3, r2
 8007d02:	d001      	beq.n	8007d08 <dir_register+0x20>
 8007d04:	2306      	movs	r3, #6
 8007d06:	e0fb      	b.n	8007f00 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007d08:	2300      	movs	r3, #0
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0c:	e002      	b.n	8007d14 <dir_register+0x2c>
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	3301      	adds	r3, #1
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	18d3      	adds	r3, r2, r3
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f4      	bne.n	8007d0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3324      	adds	r3, #36	; 0x24
 8007d28:	0019      	movs	r1, r3
 8007d2a:	240c      	movs	r4, #12
 8007d2c:	193b      	adds	r3, r7, r4
 8007d2e:	220c      	movs	r2, #12
 8007d30:	0018      	movs	r0, r3
 8007d32:	f7fe fd5f 	bl	80067f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007d36:	193b      	adds	r3, r7, r4
 8007d38:	7adb      	ldrb	r3, [r3, #11]
 8007d3a:	001a      	movs	r2, r3
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d037      	beq.n	8007db2 <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	222f      	movs	r2, #47	; 0x2f
 8007d46:	2140      	movs	r1, #64	; 0x40
 8007d48:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d4e:	e018      	b.n	8007d82 <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3324      	adds	r3, #36	; 0x24
 8007d54:	0018      	movs	r0, r3
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	210c      	movs	r1, #12
 8007d5e:	1879      	adds	r1, r7, r1
 8007d60:	f7ff fe0e 	bl	8007980 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007d64:	252f      	movs	r5, #47	; 0x2f
 8007d66:	197c      	adds	r4, r7, r5
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7ff fec1 	bl	8007af2 <dir_find>
 8007d70:	0003      	movs	r3, r0
 8007d72:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007d74:	197b      	adds	r3, r7, r5
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	3301      	adds	r3, #1
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2b63      	cmp	r3, #99	; 0x63
 8007d86:	d9e3      	bls.n	8007d50 <dir_register+0x68>
 8007d88:	e000      	b.n	8007d8c <dir_register+0xa4>
			if (res != FR_OK) break;
 8007d8a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	2b64      	cmp	r3, #100	; 0x64
 8007d90:	d101      	bne.n	8007d96 <dir_register+0xae>
 8007d92:	2307      	movs	r3, #7
 8007d94:	e0b4      	b.n	8007f00 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007d96:	222f      	movs	r2, #47	; 0x2f
 8007d98:	18bb      	adds	r3, r7, r2
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d002      	beq.n	8007da6 <dir_register+0xbe>
 8007da0:	18bb      	adds	r3, r7, r2
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	e0ac      	b.n	8007f00 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007da6:	230c      	movs	r3, #12
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	7ad9      	ldrb	r1, [r3, #11]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	222f      	movs	r2, #47	; 0x2f
 8007db0:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007db2:	230c      	movs	r3, #12
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	7adb      	ldrb	r3, [r3, #11]
 8007db8:	001a      	movs	r2, r3
 8007dba:	2302      	movs	r3, #2
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d008      	beq.n	8007dd2 <dir_register+0xea>
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	210d      	movs	r1, #13
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f7f8 f9b0 	bl	800012c <__udivsi3>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	3301      	adds	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <dir_register+0xec>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007dd6:	252f      	movs	r5, #47	; 0x2f
 8007dd8:	197c      	adds	r4, r7, r5
 8007dda:	6a3a      	ldr	r2, [r7, #32]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0011      	movs	r1, r2
 8007de0:	0018      	movs	r0, r3
 8007de2:	f7ff fc3e 	bl	8007662 <dir_alloc>
 8007de6:	0003      	movs	r3, r0
 8007de8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007dea:	0029      	movs	r1, r5
 8007dec:	187b      	adds	r3, r7, r1
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d153      	bne.n	8007e9c <dir_register+0x1b4>
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	623b      	str	r3, [r7, #32]
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d04d      	beq.n	8007e9c <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	015b      	lsls	r3, r3, #5
 8007e08:	1ad2      	subs	r2, r2, r3
 8007e0a:	000d      	movs	r5, r1
 8007e0c:	187c      	adds	r4, r7, r1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7ff fade 	bl	80073d4 <dir_sdi>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007e1c:	197b      	adds	r3, r7, r5
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d13b      	bne.n	8007e9c <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3324      	adds	r3, #36	; 0x24
 8007e28:	221b      	movs	r2, #27
 8007e2a:	18bc      	adds	r4, r7, r2
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f7ff fe3b 	bl	8007aa8 <sum_sfn>
 8007e32:	0003      	movs	r3, r0
 8007e34:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	252f      	movs	r5, #47	; 0x2f
 8007e3c:	197c      	adds	r4, r7, r5
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	0011      	movs	r1, r2
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7fe fefe 	bl	8006c44 <move_window>
 8007e48:	0003      	movs	r3, r0
 8007e4a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8007e4c:	002c      	movs	r4, r5
 8007e4e:	193b      	adds	r3, r7, r4
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d121      	bne.n	8007e9a <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a19      	ldr	r1, [r3, #32]
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	231b      	movs	r3, #27
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f7ff fd12 	bl	8007890 <put_lfn>
				fs->wflag = 1;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007e72:	0025      	movs	r5, r4
 8007e74:	193c      	adds	r4, r7, r4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7ff fb28 	bl	80074d0 <dir_next>
 8007e80:	0003      	movs	r3, r0
 8007e82:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8007e84:	197b      	adds	r3, r7, r5
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d107      	bne.n	8007e9c <dir_register+0x1b4>
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1ce      	bne.n	8007e36 <dir_register+0x14e>
 8007e98:	e000      	b.n	8007e9c <dir_register+0x1b4>
				if (res != FR_OK) break;
 8007e9a:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e9c:	252f      	movs	r5, #47	; 0x2f
 8007e9e:	197b      	adds	r3, r7, r5
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d129      	bne.n	8007efa <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	197c      	adds	r4, r7, r5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	0011      	movs	r1, r2
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f7fe fec7 	bl	8006c44 <move_window>
 8007eb6:	0003      	movs	r3, r0
 8007eb8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007eba:	197b      	adds	r3, r7, r5
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11b      	bne.n	8007efa <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	2100      	movs	r1, #0
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f7fe fcb1 	bl	8006832 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a18      	ldr	r0, [r3, #32]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3324      	adds	r3, #36	; 0x24
 8007ed8:	220b      	movs	r2, #11
 8007eda:	0019      	movs	r1, r3
 8007edc:	f7fe fc8a 	bl	80067f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	222f      	movs	r2, #47	; 0x2f
 8007ee4:	5c9a      	ldrb	r2, [r3, r2]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	330c      	adds	r3, #12
 8007eec:	2118      	movs	r1, #24
 8007eee:	400a      	ands	r2, r1
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007efa:	232f      	movs	r3, #47	; 0x2f
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	781b      	ldrb	r3, [r3, #0]
}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b00c      	add	sp, #48	; 0x30
 8007f06:	bdb0      	pop	{r4, r5, r7, pc}

08007f08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007f08:	b5b0      	push	{r4, r5, r7, lr}
 8007f0a:	b08a      	sub	sp, #40	; 0x28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	61ba      	str	r2, [r7, #24]
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	18d3      	adds	r3, r2, r3
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	2124      	movs	r1, #36	; 0x24
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8007f3a:	000a      	movs	r2, r1
 8007f3c:	18bb      	adds	r3, r7, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	2b1f      	cmp	r3, #31
 8007f42:	d94e      	bls.n	8007fe2 <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007f44:	18bb      	adds	r3, r7, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b2f      	cmp	r3, #47	; 0x2f
 8007f4a:	d007      	beq.n	8007f5c <create_name+0x54>
 8007f4c:	18bb      	adds	r3, r7, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	2b5c      	cmp	r3, #92	; 0x5c
 8007f52:	d110      	bne.n	8007f76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f54:	e002      	b.n	8007f5c <create_name+0x54>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	61bb      	str	r3, [r7, #24]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	18d3      	adds	r3, r2, r3
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b2f      	cmp	r3, #47	; 0x2f
 8007f66:	d0f6      	beq.n	8007f56 <create_name+0x4e>
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	18d3      	adds	r3, r2, r3
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b5c      	cmp	r3, #92	; 0x5c
 8007f72:	d0f0      	beq.n	8007f56 <create_name+0x4e>
			break;
 8007f74:	e036      	b.n	8007fe4 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2bfe      	cmp	r3, #254	; 0xfe
 8007f7a:	d901      	bls.n	8007f80 <create_name+0x78>
 8007f7c:	2306      	movs	r3, #6
 8007f7e:	e1c2      	b.n	8008306 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007f80:	2524      	movs	r5, #36	; 0x24
 8007f82:	197b      	adds	r3, r7, r5
 8007f84:	197a      	adds	r2, r7, r5
 8007f86:	8812      	ldrh	r2, [r2, #0]
 8007f88:	21ff      	movs	r1, #255	; 0xff
 8007f8a:	400a      	ands	r2, r1
 8007f8c:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007f8e:	197c      	adds	r4, r7, r5
 8007f90:	197b      	adds	r3, r7, r5
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	2101      	movs	r1, #1
 8007f96:	0018      	movs	r0, r3
 8007f98:	f001 fa66 	bl	8009468 <ff_convert>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007fa0:	197b      	adds	r3, r7, r5
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <create_name+0xa4>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	e1ac      	b.n	8008306 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007fac:	2224      	movs	r2, #36	; 0x24
 8007fae:	18bb      	adds	r3, r7, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fb4:	d80a      	bhi.n	8007fcc <create_name+0xc4>
 8007fb6:	18bb      	adds	r3, r7, r2
 8007fb8:	881a      	ldrh	r2, [r3, #0]
 8007fba:	4ba7      	ldr	r3, [pc, #668]	; (8008258 <create_name+0x350>)
 8007fbc:	0011      	movs	r1, r2
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7fe fc75 	bl	80068ae <chk_chr>
 8007fc4:	1e03      	subs	r3, r0, #0
 8007fc6:	d001      	beq.n	8007fcc <create_name+0xc4>
 8007fc8:	2306      	movs	r3, #6
 8007fca:	e19c      	b.n	8008306 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	617a      	str	r2, [r7, #20]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	18d3      	adds	r3, r2, r3
 8007fd8:	2224      	movs	r2, #36	; 0x24
 8007fda:	18ba      	adds	r2, r7, r2
 8007fdc:	8812      	ldrh	r2, [r2, #0]
 8007fde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007fe0:	e7a2      	b.n	8007f28 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007fe2:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	18d2      	adds	r2, r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007fee:	2324      	movs	r3, #36	; 0x24
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	2b1f      	cmp	r3, #31
 8007ff6:	d801      	bhi.n	8007ffc <create_name+0xf4>
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	e000      	b.n	8007ffe <create_name+0xf6>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2327      	movs	r3, #39	; 0x27
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008004:	e016      	b.n	8008034 <create_name+0x12c>
		w = lfn[di - 1];
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	4a94      	ldr	r2, [pc, #592]	; (800825c <create_name+0x354>)
 800800a:	4694      	mov	ip, r2
 800800c:	4463      	add	r3, ip
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	18d2      	adds	r2, r2, r3
 8008014:	2124      	movs	r1, #36	; 0x24
 8008016:	187b      	adds	r3, r7, r1
 8008018:	8812      	ldrh	r2, [r2, #0]
 800801a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800801c:	000a      	movs	r2, r1
 800801e:	18bb      	adds	r3, r7, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	2b20      	cmp	r3, #32
 8008024:	d003      	beq.n	800802e <create_name+0x126>
 8008026:	18bb      	adds	r3, r7, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	2b2e      	cmp	r3, #46	; 0x2e
 800802c:	d106      	bne.n	800803c <create_name+0x134>
		di--;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	3b01      	subs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e5      	bne.n	8008006 <create_name+0xfe>
 800803a:	e000      	b.n	800803e <create_name+0x136>
		if (w != ' ' && w != '.') break;
 800803c:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	18d3      	adds	r3, r2, r3
 8008046:	2200      	movs	r2, #0
 8008048:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <create_name+0x14c>
 8008050:	2306      	movs	r3, #6
 8008052:	e158      	b.n	8008306 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	220b      	movs	r2, #11
 800805a:	2120      	movs	r1, #32
 800805c:	0018      	movs	r0, r3
 800805e:	f7fe fbe8 	bl	8006832 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008062:	2300      	movs	r3, #0
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e002      	b.n	800806e <create_name+0x166>
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	3301      	adds	r3, #1
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	18d3      	adds	r3, r2, r3
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	2b20      	cmp	r3, #32
 800807a:	d0f5      	beq.n	8008068 <create_name+0x160>
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	18d3      	adds	r3, r2, r3
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	2b2e      	cmp	r3, #46	; 0x2e
 8008088:	d0ee      	beq.n	8008068 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <create_name+0x19e>
 8008090:	2227      	movs	r2, #39	; 0x27
 8008092:	18bb      	adds	r3, r7, r2
 8008094:	18ba      	adds	r2, r7, r2
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	2103      	movs	r1, #3
 800809a:	430a      	orrs	r2, r1
 800809c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800809e:	e002      	b.n	80080a6 <create_name+0x19e>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d009      	beq.n	80080c0 <create_name+0x1b8>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	4a6b      	ldr	r2, [pc, #428]	; (800825c <create_name+0x354>)
 80080b0:	4694      	mov	ip, r2
 80080b2:	4463      	add	r3, ip
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	18d3      	adds	r3, r2, r3
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	2b2e      	cmp	r3, #46	; 0x2e
 80080be:	d1ef      	bne.n	80080a0 <create_name+0x198>

	i = b = 0; ni = 8;
 80080c0:	2326      	movs	r3, #38	; 0x26
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	2300      	movs	r3, #0
 80080ca:	623b      	str	r3, [r7, #32]
 80080cc:	2308      	movs	r3, #8
 80080ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	61ba      	str	r2, [r7, #24]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	18d2      	adds	r2, r2, r3
 80080dc:	2124      	movs	r1, #36	; 0x24
 80080de:	187b      	adds	r3, r7, r1
 80080e0:	8812      	ldrh	r2, [r2, #0]
 80080e2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 80080e4:	000a      	movs	r2, r1
 80080e6:	18bb      	adds	r3, r7, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d100      	bne.n	80080f0 <create_name+0x1e8>
 80080ee:	e0b1      	b.n	8008254 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80080f0:	18bb      	adds	r3, r7, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d007      	beq.n	8008108 <create_name+0x200>
 80080f8:	18bb      	adds	r3, r7, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10b      	bne.n	8008118 <create_name+0x210>
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d007      	beq.n	8008118 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8008108:	2227      	movs	r2, #39	; 0x27
 800810a:	18bb      	adds	r3, r7, r2
 800810c:	18ba      	adds	r2, r7, r2
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	2103      	movs	r1, #3
 8008112:	430a      	orrs	r2, r1
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e09c      	b.n	8008252 <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008118:	6a3a      	ldr	r2, [r7, #32]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	429a      	cmp	r2, r3
 800811e:	d203      	bcs.n	8008128 <create_name+0x220>
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	429a      	cmp	r2, r3
 8008126:	d127      	bne.n	8008178 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b0b      	cmp	r3, #11
 800812c:	d107      	bne.n	800813e <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 800812e:	2227      	movs	r2, #39	; 0x27
 8008130:	18bb      	adds	r3, r7, r2
 8008132:	18ba      	adds	r2, r7, r2
 8008134:	7812      	ldrb	r2, [r2, #0]
 8008136:	2103      	movs	r1, #3
 8008138:	430a      	orrs	r2, r1
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e095      	b.n	800826a <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	429a      	cmp	r2, r3
 8008144:	d006      	beq.n	8008154 <create_name+0x24c>
 8008146:	2227      	movs	r2, #39	; 0x27
 8008148:	18bb      	adds	r3, r7, r2
 800814a:	18ba      	adds	r2, r7, r2
 800814c:	7812      	ldrb	r2, [r2, #0]
 800814e:	2103      	movs	r1, #3
 8008150:	430a      	orrs	r2, r1
 8008152:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	429a      	cmp	r2, r3
 800815a:	d900      	bls.n	800815e <create_name+0x256>
 800815c:	e084      	b.n	8008268 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	2308      	movs	r3, #8
 8008164:	623b      	str	r3, [r7, #32]
 8008166:	230b      	movs	r3, #11
 8008168:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800816a:	2226      	movs	r2, #38	; 0x26
 800816c:	18bb      	adds	r3, r7, r2
 800816e:	18ba      	adds	r2, r7, r2
 8008170:	7812      	ldrb	r2, [r2, #0]
 8008172:	0092      	lsls	r2, r2, #2
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e06c      	b.n	8008252 <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008178:	2524      	movs	r5, #36	; 0x24
 800817a:	197b      	adds	r3, r7, r5
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	2b7f      	cmp	r3, #127	; 0x7f
 8008180:	d91a      	bls.n	80081b8 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008182:	197c      	adds	r4, r7, r5
 8008184:	197b      	adds	r3, r7, r5
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	0018      	movs	r0, r3
 800818c:	f001 f96c 	bl	8009468 <ff_convert>
 8008190:	0003      	movs	r3, r0
 8008192:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008194:	197b      	adds	r3, r7, r5
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <create_name+0x2a2>
 800819c:	197b      	adds	r3, r7, r5
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	3b80      	subs	r3, #128	; 0x80
 80081a2:	4a2f      	ldr	r2, [pc, #188]	; (8008260 <create_name+0x358>)
 80081a4:	5cd2      	ldrb	r2, [r2, r3]
 80081a6:	197b      	adds	r3, r7, r5
 80081a8:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80081aa:	2227      	movs	r2, #39	; 0x27
 80081ac:	18bb      	adds	r3, r7, r2
 80081ae:	18ba      	adds	r2, r7, r2
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	2102      	movs	r1, #2
 80081b4:	430a      	orrs	r2, r1
 80081b6:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80081b8:	2224      	movs	r2, #36	; 0x24
 80081ba:	18bb      	adds	r3, r7, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <create_name+0x2cc>
 80081c2:	18bb      	adds	r3, r7, r2
 80081c4:	881a      	ldrh	r2, [r3, #0]
 80081c6:	4b27      	ldr	r3, [pc, #156]	; (8008264 <create_name+0x35c>)
 80081c8:	0011      	movs	r1, r2
 80081ca:	0018      	movs	r0, r3
 80081cc:	f7fe fb6f 	bl	80068ae <chk_chr>
 80081d0:	1e03      	subs	r3, r0, #0
 80081d2:	d00b      	beq.n	80081ec <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80081d4:	2324      	movs	r3, #36	; 0x24
 80081d6:	18fb      	adds	r3, r7, r3
 80081d8:	225f      	movs	r2, #95	; 0x5f
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	2227      	movs	r2, #39	; 0x27
 80081de:	18bb      	adds	r3, r7, r2
 80081e0:	18ba      	adds	r2, r7, r2
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	2103      	movs	r1, #3
 80081e6:	430a      	orrs	r2, r1
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	e025      	b.n	8008238 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80081ec:	2224      	movs	r2, #36	; 0x24
 80081ee:	18bb      	adds	r3, r7, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d90b      	bls.n	800820e <create_name+0x306>
 80081f6:	18bb      	adds	r3, r7, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	2b5a      	cmp	r3, #90	; 0x5a
 80081fc:	d807      	bhi.n	800820e <create_name+0x306>
					b |= 2;
 80081fe:	2226      	movs	r2, #38	; 0x26
 8008200:	18bb      	adds	r3, r7, r2
 8008202:	18ba      	adds	r2, r7, r2
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	2102      	movs	r1, #2
 8008208:	430a      	orrs	r2, r1
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e014      	b.n	8008238 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800820e:	2024      	movs	r0, #36	; 0x24
 8008210:	183b      	adds	r3, r7, r0
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	2b60      	cmp	r3, #96	; 0x60
 8008216:	d90f      	bls.n	8008238 <create_name+0x330>
 8008218:	183b      	adds	r3, r7, r0
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	2b7a      	cmp	r3, #122	; 0x7a
 800821e:	d80b      	bhi.n	8008238 <create_name+0x330>
						b |= 1; w -= 0x20;
 8008220:	2226      	movs	r2, #38	; 0x26
 8008222:	18bb      	adds	r3, r7, r2
 8008224:	18ba      	adds	r2, r7, r2
 8008226:	7812      	ldrb	r2, [r2, #0]
 8008228:	2101      	movs	r1, #1
 800822a:	430a      	orrs	r2, r1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	183b      	adds	r3, r7, r0
 8008230:	183a      	adds	r2, r7, r0
 8008232:	8812      	ldrh	r2, [r2, #0]
 8008234:	3a20      	subs	r2, #32
 8008236:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	623a      	str	r2, [r7, #32]
 800823e:	2224      	movs	r2, #36	; 0x24
 8008240:	18ba      	adds	r2, r7, r2
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	b2d0      	uxtb	r0, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	2124      	movs	r1, #36	; 0x24
 800824a:	18d3      	adds	r3, r2, r3
 800824c:	185b      	adds	r3, r3, r1
 800824e:	1c02      	adds	r2, r0, #0
 8008250:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008252:	e73d      	b.n	80080d0 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	e008      	b.n	800826a <create_name+0x362>
 8008258:	0800a060 	.word	0x0800a060
 800825c:	7fffffff 	.word	0x7fffffff
 8008260:	0800a804 	.word	0x0800a804
 8008264:	0800a06c 	.word	0x0800a06c
			if (si > di) break;			/* No extension */
 8008268:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	5c9b      	ldrb	r3, [r3, r2]
 8008270:	2be5      	cmp	r3, #229	; 0xe5
 8008272:	d103      	bne.n	800827c <create_name+0x374>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	2105      	movs	r1, #5
 800827a:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	2b08      	cmp	r3, #8
 8008280:	d105      	bne.n	800828e <create_name+0x386>
 8008282:	2226      	movs	r2, #38	; 0x26
 8008284:	18bb      	adds	r3, r7, r2
 8008286:	18ba      	adds	r2, r7, r2
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800828e:	2126      	movs	r1, #38	; 0x26
 8008290:	187b      	adds	r3, r7, r1
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	220c      	movs	r2, #12
 8008296:	4013      	ands	r3, r2
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d005      	beq.n	80082a8 <create_name+0x3a0>
 800829c:	187b      	adds	r3, r7, r1
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2203      	movs	r2, #3
 80082a2:	4013      	ands	r3, r2
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d106      	bne.n	80082b6 <create_name+0x3ae>
 80082a8:	2227      	movs	r2, #39	; 0x27
 80082aa:	18bb      	adds	r3, r7, r2
 80082ac:	18ba      	adds	r2, r7, r2
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	2102      	movs	r1, #2
 80082b2:	430a      	orrs	r2, r1
 80082b4:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80082b6:	2127      	movs	r1, #39	; 0x27
 80082b8:	187b      	adds	r3, r7, r1
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2202      	movs	r2, #2
 80082be:	4013      	ands	r3, r2
 80082c0:	d11a      	bne.n	80082f8 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80082c2:	2326      	movs	r3, #38	; 0x26
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2203      	movs	r2, #3
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d105      	bne.n	80082dc <create_name+0x3d4>
 80082d0:	187b      	adds	r3, r7, r1
 80082d2:	187a      	adds	r2, r7, r1
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	2110      	movs	r1, #16
 80082d8:	430a      	orrs	r2, r1
 80082da:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80082dc:	2326      	movs	r3, #38	; 0x26
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	220c      	movs	r2, #12
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d106      	bne.n	80082f8 <create_name+0x3f0>
 80082ea:	2227      	movs	r2, #39	; 0x27
 80082ec:	18bb      	adds	r3, r7, r2
 80082ee:	18ba      	adds	r2, r7, r2
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	2108      	movs	r1, #8
 80082f4:	430a      	orrs	r2, r1
 80082f6:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2227      	movs	r2, #39	; 0x27
 80082fc:	18ba      	adds	r2, r7, r2
 80082fe:	212f      	movs	r1, #47	; 0x2f
 8008300:	7812      	ldrb	r2, [r2, #0]
 8008302:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8008304:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008306:	0018      	movs	r0, r3
 8008308:	46bd      	mov	sp, r7
 800830a:	b00a      	add	sp, #40	; 0x28
 800830c:	bdb0      	pop	{r4, r5, r7, pc}
 800830e:	46c0      	nop			; (mov r8, r8)

08008310 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008324:	e002      	b.n	800832c <follow_path+0x1c>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	3301      	adds	r3, #1
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b2f      	cmp	r3, #47	; 0x2f
 8008332:	d0f8      	beq.n	8008326 <follow_path+0x16>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b5c      	cmp	r3, #92	; 0x5c
 800833a:	d0f4      	beq.n	8008326 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b1f      	cmp	r3, #31
 8008348:	d80d      	bhi.n	8008366 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	222f      	movs	r2, #47	; 0x2f
 800834e:	2180      	movs	r1, #128	; 0x80
 8008350:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8008352:	2317      	movs	r3, #23
 8008354:	18fc      	adds	r4, r7, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2100      	movs	r1, #0
 800835a:	0018      	movs	r0, r3
 800835c:	f7ff f83a 	bl	80073d4 <dir_sdi>
 8008360:	0003      	movs	r3, r0
 8008362:	7023      	strb	r3, [r4, #0]
 8008364:	e052      	b.n	800840c <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008366:	2517      	movs	r5, #23
 8008368:	197c      	adds	r4, r7, r5
 800836a:	003a      	movs	r2, r7
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	0011      	movs	r1, r2
 8008370:	0018      	movs	r0, r3
 8008372:	f7ff fdc9 	bl	8007f08 <create_name>
 8008376:	0003      	movs	r3, r0
 8008378:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800837a:	197b      	adds	r3, r7, r5
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d13f      	bne.n	8008402 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008382:	197c      	adds	r4, r7, r5
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	0018      	movs	r0, r3
 8008388:	f7ff fbb3 	bl	8007af2 <dir_find>
 800838c:	0003      	movs	r3, r0
 800838e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8008390:	200b      	movs	r0, #11
 8008392:	183b      	adds	r3, r7, r0
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	212f      	movs	r1, #47	; 0x2f
 8008398:	5c52      	ldrb	r2, [r2, r1]
 800839a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800839c:	197b      	adds	r3, r7, r5
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083a4:	197b      	adds	r3, r7, r5
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d12c      	bne.n	8008406 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083ac:	183b      	adds	r3, r7, r0
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2204      	movs	r2, #4
 80083b2:	4013      	ands	r3, r2
 80083b4:	d127      	bne.n	8008406 <follow_path+0xf6>
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	2205      	movs	r2, #5
 80083ba:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80083bc:	e023      	b.n	8008406 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083be:	230b      	movs	r3, #11
 80083c0:	18fb      	adds	r3, r7, r3
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2204      	movs	r2, #4
 80083c6:	4013      	ands	r3, r2
 80083c8:	d11f      	bne.n	800840a <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	799b      	ldrb	r3, [r3, #6]
 80083ce:	001a      	movs	r2, r3
 80083d0:	2310      	movs	r3, #16
 80083d2:	4013      	ands	r3, r2
 80083d4:	d104      	bne.n	80083e0 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 80083d6:	2317      	movs	r3, #23
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	2205      	movs	r2, #5
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e015      	b.n	800840c <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3334      	adds	r3, #52	; 0x34
 80083e4:	001a      	movs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	05db      	lsls	r3, r3, #23
 80083ec:	0ddb      	lsrs	r3, r3, #23
 80083ee:	18d2      	adds	r2, r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0011      	movs	r1, r2
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7ff f98c 	bl	8007712 <ld_clust>
 80083fa:	0002      	movs	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008400:	e7b1      	b.n	8008366 <follow_path+0x56>
			if (res != FR_OK) break;
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	e002      	b.n	800840c <follow_path+0xfc>
				break;
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	e000      	b.n	800840c <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800840a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800840c:	2317      	movs	r3, #23
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	781b      	ldrb	r3, [r3, #0]
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b006      	add	sp, #24
 8008418:	bdb0      	pop	{r4, r5, r7, pc}

0800841a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008422:	2301      	movs	r3, #1
 8008424:	425b      	negs	r3, r3
 8008426:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d031      	beq.n	8008494 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e002      	b.n	800843e <get_ldnumber+0x24>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b1f      	cmp	r3, #31
 8008444:	d903      	bls.n	800844e <get_ldnumber+0x34>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b3a      	cmp	r3, #58	; 0x3a
 800844c:	d1f4      	bne.n	8008438 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b3a      	cmp	r3, #58	; 0x3a
 8008454:	d11c      	bne.n	8008490 <get_ldnumber+0x76>
			tp = *path;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	60fa      	str	r2, [r7, #12]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	3b30      	subs	r3, #48	; 0x30
 8008466:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b09      	cmp	r3, #9
 800846c:	d80e      	bhi.n	800848c <get_ldnumber+0x72>
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	429a      	cmp	r2, r3
 8008474:	d10a      	bne.n	800848c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <get_ldnumber+0x72>
					vol = (int)i;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3301      	adds	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	e002      	b.n	8008496 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008494:	693b      	ldr	r3, [r7, #16]
}
 8008496:	0018      	movs	r0, r3
 8008498:	46bd      	mov	sp, r7
 800849a:	b006      	add	sp, #24
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	70da      	strb	r2, [r3, #3]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	4252      	negs	r2, r2
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	0011      	movs	r1, r2
 80084be:	0018      	movs	r0, r3
 80084c0:	f7fe fbc0 	bl	8006c44 <move_window>
 80084c4:	1e03      	subs	r3, r0, #0
 80084c6:	d001      	beq.n	80084cc <check_fs+0x2c>
 80084c8:	2304      	movs	r3, #4
 80084ca:	e037      	b.n	800853c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3334      	adds	r3, #52	; 0x34
 80084d0:	33ff      	adds	r3, #255	; 0xff
 80084d2:	33ff      	adds	r3, #255	; 0xff
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7fe f909 	bl	80066ec <ld_word>
 80084da:	0003      	movs	r3, r0
 80084dc:	001a      	movs	r2, r3
 80084de:	4b19      	ldr	r3, [pc, #100]	; (8008544 <check_fs+0xa4>)
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d001      	beq.n	80084e8 <check_fs+0x48>
 80084e4:	2303      	movs	r3, #3
 80084e6:	e029      	b.n	800853c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2234      	movs	r2, #52	; 0x34
 80084ec:	5c9b      	ldrb	r3, [r3, r2]
 80084ee:	2be9      	cmp	r3, #233	; 0xe9
 80084f0:	d009      	beq.n	8008506 <check_fs+0x66>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2234      	movs	r2, #52	; 0x34
 80084f6:	5c9b      	ldrb	r3, [r3, r2]
 80084f8:	2beb      	cmp	r3, #235	; 0xeb
 80084fa:	d11e      	bne.n	800853a <check_fs+0x9a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2236      	movs	r2, #54	; 0x36
 8008500:	5c9b      	ldrb	r3, [r3, r2]
 8008502:	2b90      	cmp	r3, #144	; 0x90
 8008504:	d119      	bne.n	800853a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3334      	adds	r3, #52	; 0x34
 800850a:	3336      	adds	r3, #54	; 0x36
 800850c:	0018      	movs	r0, r3
 800850e:	f7fe f908 	bl	8006722 <ld_dword>
 8008512:	0003      	movs	r3, r0
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <check_fs+0xa8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d101      	bne.n	8008522 <check_fs+0x82>
 800851e:	2300      	movs	r3, #0
 8008520:	e00c      	b.n	800853c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3334      	adds	r3, #52	; 0x34
 8008526:	3352      	adds	r3, #82	; 0x52
 8008528:	0018      	movs	r0, r3
 800852a:	f7fe f8fa 	bl	8006722 <ld_dword>
 800852e:	0003      	movs	r3, r0
 8008530:	4a06      	ldr	r2, [pc, #24]	; (800854c <check_fs+0xac>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d101      	bne.n	800853a <check_fs+0x9a>
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800853a:	2302      	movs	r3, #2
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b002      	add	sp, #8
 8008542:	bd80      	pop	{r7, pc}
 8008544:	0000aa55 	.word	0x0000aa55
 8008548:	00544146 	.word	0x00544146
 800854c:	33544146 	.word	0x33544146

08008550 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008550:	b5b0      	push	{r4, r5, r7, lr}
 8008552:	b096      	sub	sp, #88	; 0x58
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	1dfb      	adds	r3, r7, #7
 800855c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff ff57 	bl	800841a <get_ldnumber>
 800856c:	0003      	movs	r3, r0
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	da01      	bge.n	800857a <find_volume+0x2a>
 8008576:	230b      	movs	r3, #11
 8008578:	e24e      	b.n	8008a18 <find_volume+0x4c8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800857a:	4bcc      	ldr	r3, [pc, #816]	; (80088ac <find_volume+0x35c>)
 800857c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800857e:	0092      	lsls	r2, r2, #2
 8008580:	58d3      	ldr	r3, [r2, r3]
 8008582:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <find_volume+0x3e>
 800858a:	230c      	movs	r3, #12
 800858c:	e244      	b.n	8008a18 <find_volume+0x4c8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008594:	1dfb      	adds	r3, r7, #7
 8008596:	1dfa      	adds	r2, r7, #7
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	2101      	movs	r1, #1
 800859c:	438a      	bics	r2, r1
 800859e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01b      	beq.n	80085e0 <find_volume+0x90>
		stat = disk_status(fs->drv);
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2537      	movs	r5, #55	; 0x37
 80085ae:	197c      	adds	r4, r7, r5
 80085b0:	0018      	movs	r0, r3
 80085b2:	f7fd ffd1 	bl	8006558 <disk_status>
 80085b6:	0003      	movs	r3, r0
 80085b8:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085ba:	0029      	movs	r1, r5
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	4013      	ands	r3, r2
 80085c4:	d10c      	bne.n	80085e0 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80085c6:	1dfb      	adds	r3, r7, #7
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d006      	beq.n	80085dc <find_volume+0x8c>
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2204      	movs	r2, #4
 80085d4:	4013      	ands	r3, r2
 80085d6:	d001      	beq.n	80085dc <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 80085d8:	230a      	movs	r3, #10
 80085da:	e21d      	b.n	8008a18 <find_volume+0x4c8>
			}
			return FR_OK;				/* The file system object is valid */
 80085dc:	2300      	movs	r3, #0
 80085de:	e21b      	b.n	8008a18 <find_volume+0x4c8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2537      	movs	r5, #55	; 0x37
 80085f4:	197c      	adds	r4, r7, r5
 80085f6:	0018      	movs	r0, r3
 80085f8:	f7fd ffd0 	bl	800659c <disk_initialize>
 80085fc:	0003      	movs	r3, r0
 80085fe:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008600:	197b      	adds	r3, r7, r5
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	4013      	ands	r3, r2
 8008608:	d001      	beq.n	800860e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800860a:	2303      	movs	r3, #3
 800860c:	e204      	b.n	8008a18 <find_volume+0x4c8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800860e:	1dfb      	adds	r3, r7, #7
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <find_volume+0xd6>
 8008616:	2337      	movs	r3, #55	; 0x37
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2204      	movs	r2, #4
 800861e:	4013      	ands	r3, r2
 8008620:	d001      	beq.n	8008626 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008622:	230a      	movs	r3, #10
 8008624:	e1f8      	b.n	8008a18 <find_volume+0x4c8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800862a:	2557      	movs	r5, #87	; 0x57
 800862c:	197c      	adds	r4, r7, r5
 800862e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	0011      	movs	r1, r2
 8008634:	0018      	movs	r0, r3
 8008636:	f7ff ff33 	bl	80084a0 <check_fs>
 800863a:	0003      	movs	r3, r0
 800863c:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800863e:	197b      	adds	r3, r7, r5
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d14b      	bne.n	80086de <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008646:	2300      	movs	r3, #0
 8008648:	643b      	str	r3, [r7, #64]	; 0x40
 800864a:	e01d      	b.n	8008688 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	3334      	adds	r3, #52	; 0x34
 8008650:	001a      	movs	r2, r3
 8008652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	33bf      	adds	r3, #191	; 0xbf
 8008658:	33ff      	adds	r3, #255	; 0xff
 800865a:	18d3      	adds	r3, r2, r3
 800865c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	3304      	adds	r3, #4
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d006      	beq.n	8008676 <find_volume+0x126>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	3308      	adds	r3, #8
 800866c:	0018      	movs	r0, r3
 800866e:	f7fe f858 	bl	8006722 <ld_dword>
 8008672:	0003      	movs	r3, r0
 8008674:	e000      	b.n	8008678 <find_volume+0x128>
 8008676:	2300      	movs	r3, #0
 8008678:	2214      	movs	r2, #20
 800867a:	18ba      	adds	r2, r7, r2
 800867c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800867e:	0089      	lsls	r1, r1, #2
 8008680:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008684:	3301      	adds	r3, #1
 8008686:	643b      	str	r3, [r7, #64]	; 0x40
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	2b03      	cmp	r3, #3
 800868c:	d9de      	bls.n	800864c <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800868e:	2300      	movs	r3, #0
 8008690:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <find_volume+0x14e>
 8008698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869a:	3b01      	subs	r3, #1
 800869c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800869e:	2314      	movs	r3, #20
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	58d3      	ldr	r3, [r2, r3]
 80086a8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <find_volume+0x172>
 80086b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	0011      	movs	r1, r2
 80086b6:	0018      	movs	r0, r3
 80086b8:	f7ff fef2 	bl	80084a0 <check_fs>
 80086bc:	0003      	movs	r3, r0
 80086be:	001a      	movs	r2, r3
 80086c0:	e000      	b.n	80086c4 <find_volume+0x174>
 80086c2:	2203      	movs	r2, #3
 80086c4:	2157      	movs	r1, #87	; 0x57
 80086c6:	187b      	adds	r3, r7, r1
 80086c8:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086ca:	187b      	adds	r3, r7, r1
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d905      	bls.n	80086de <find_volume+0x18e>
 80086d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d4:	3301      	adds	r3, #1
 80086d6:	643b      	str	r3, [r7, #64]	; 0x40
 80086d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d9df      	bls.n	800869e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086de:	2357      	movs	r3, #87	; 0x57
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d101      	bne.n	80086ec <find_volume+0x19c>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e195      	b.n	8008a18 <find_volume+0x4c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086ec:	2357      	movs	r3, #87	; 0x57
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d901      	bls.n	80086fa <find_volume+0x1aa>
 80086f6:	230d      	movs	r3, #13
 80086f8:	e18e      	b.n	8008a18 <find_volume+0x4c8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	3334      	adds	r3, #52	; 0x34
 80086fe:	330b      	adds	r3, #11
 8008700:	0018      	movs	r0, r3
 8008702:	f7fd fff3 	bl	80066ec <ld_word>
 8008706:	0003      	movs	r3, r0
 8008708:	001a      	movs	r2, r3
 800870a:	2380      	movs	r3, #128	; 0x80
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	429a      	cmp	r2, r3
 8008710:	d001      	beq.n	8008716 <find_volume+0x1c6>
 8008712:	230d      	movs	r3, #13
 8008714:	e180      	b.n	8008a18 <find_volume+0x4c8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	3334      	adds	r3, #52	; 0x34
 800871a:	3316      	adds	r3, #22
 800871c:	0018      	movs	r0, r3
 800871e:	f7fd ffe5 	bl	80066ec <ld_word>
 8008722:	0003      	movs	r3, r0
 8008724:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d107      	bne.n	800873c <find_volume+0x1ec>
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	3334      	adds	r3, #52	; 0x34
 8008730:	3324      	adds	r3, #36	; 0x24
 8008732:	0018      	movs	r0, r3
 8008734:	f7fd fff5 	bl	8006722 <ld_dword>
 8008738:	0003      	movs	r3, r0
 800873a:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008740:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	2244      	movs	r2, #68	; 0x44
 8008746:	5c9a      	ldrb	r2, [r3, r2]
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	789b      	ldrb	r3, [r3, #2]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d005      	beq.n	8008760 <find_volume+0x210>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	789b      	ldrb	r3, [r3, #2]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d001      	beq.n	8008760 <find_volume+0x210>
 800875c:	230d      	movs	r3, #13
 800875e:	e15b      	b.n	8008a18 <find_volume+0x4c8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	001a      	movs	r2, r3
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	4353      	muls	r3, r2
 800876a:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	2241      	movs	r2, #65	; 0x41
 8008770:	5c9b      	ldrb	r3, [r3, r2]
 8008772:	b29a      	uxth	r2, r3
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	895b      	ldrh	r3, [r3, #10]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <find_volume+0x240>
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	895b      	ldrh	r3, [r3, #10]
 8008784:	001a      	movs	r2, r3
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	895b      	ldrh	r3, [r3, #10]
 800878a:	3b01      	subs	r3, #1
 800878c:	4013      	ands	r3, r2
 800878e:	d001      	beq.n	8008794 <find_volume+0x244>
 8008790:	230d      	movs	r3, #13
 8008792:	e141      	b.n	8008a18 <find_volume+0x4c8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	3334      	adds	r3, #52	; 0x34
 8008798:	3311      	adds	r3, #17
 800879a:	0018      	movs	r0, r3
 800879c:	f7fd ffa6 	bl	80066ec <ld_word>
 80087a0:	0003      	movs	r3, r0
 80087a2:	001a      	movs	r2, r3
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	891b      	ldrh	r3, [r3, #8]
 80087ac:	220f      	movs	r2, #15
 80087ae:	4013      	ands	r3, r2
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <find_volume+0x26a>
 80087b6:	230d      	movs	r3, #13
 80087b8:	e12e      	b.n	8008a18 <find_volume+0x4c8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	3334      	adds	r3, #52	; 0x34
 80087be:	3313      	adds	r3, #19
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7fd ff93 	bl	80066ec <ld_word>
 80087c6:	0003      	movs	r3, r0
 80087c8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <find_volume+0x290>
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	3334      	adds	r3, #52	; 0x34
 80087d4:	3320      	adds	r3, #32
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7fd ffa3 	bl	8006722 <ld_dword>
 80087dc:	0003      	movs	r3, r0
 80087de:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	3334      	adds	r3, #52	; 0x34
 80087e4:	330e      	adds	r3, #14
 80087e6:	252e      	movs	r5, #46	; 0x2e
 80087e8:	197c      	adds	r4, r7, r5
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7fd ff7e 	bl	80066ec <ld_word>
 80087f0:	0003      	movs	r3, r0
 80087f2:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087f4:	197b      	adds	r3, r7, r5
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <find_volume+0x2b0>
 80087fc:	230d      	movs	r3, #13
 80087fe:	e10b      	b.n	8008a18 <find_volume+0x4c8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008800:	232e      	movs	r3, #46	; 0x2e
 8008802:	18fb      	adds	r3, r7, r3
 8008804:	881a      	ldrh	r2, [r3, #0]
 8008806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008808:	18d3      	adds	r3, r2, r3
 800880a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800880c:	8912      	ldrh	r2, [r2, #8]
 800880e:	0912      	lsrs	r2, r2, #4
 8008810:	b292      	uxth	r2, r2
 8008812:	189b      	adds	r3, r3, r2
 8008814:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	429a      	cmp	r2, r3
 800881c:	d201      	bcs.n	8008822 <find_volume+0x2d2>
 800881e:	230d      	movs	r3, #13
 8008820:	e0fa      	b.n	8008a18 <find_volume+0x4c8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	895b      	ldrh	r3, [r3, #10]
 800882c:	0019      	movs	r1, r3
 800882e:	0010      	movs	r0, r2
 8008830:	f7f7 fc7c 	bl	800012c <__udivsi3>
 8008834:	0003      	movs	r3, r0
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <find_volume+0x2f2>
 800883e:	230d      	movs	r3, #13
 8008840:	e0ea      	b.n	8008a18 <find_volume+0x4c8>
		fmt = FS_FAT32;
 8008842:	2157      	movs	r1, #87	; 0x57
 8008844:	187b      	adds	r3, r7, r1
 8008846:	2203      	movs	r2, #3
 8008848:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <find_volume+0x360>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d802      	bhi.n	8008858 <find_volume+0x308>
 8008852:	187b      	adds	r3, r7, r1
 8008854:	2202      	movs	r2, #2
 8008856:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	4a16      	ldr	r2, [pc, #88]	; (80088b4 <find_volume+0x364>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d803      	bhi.n	8008868 <find_volume+0x318>
 8008860:	2357      	movs	r3, #87	; 0x57
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	2201      	movs	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	1c9a      	adds	r2, r3, #2
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008874:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008876:	232e      	movs	r3, #46	; 0x2e
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	881a      	ldrh	r2, [r3, #0]
 800887c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800887e:	18d2      	adds	r2, r2, r3
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	18d2      	adds	r2, r2, r3
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800888e:	2357      	movs	r3, #87	; 0x57
 8008890:	18fb      	adds	r3, r7, r3
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b03      	cmp	r3, #3
 8008896:	d123      	bne.n	80088e0 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	3334      	adds	r3, #52	; 0x34
 800889c:	332a      	adds	r3, #42	; 0x2a
 800889e:	0018      	movs	r0, r3
 80088a0:	f7fd ff24 	bl	80066ec <ld_word>
 80088a4:	1e03      	subs	r3, r0, #0
 80088a6:	d007      	beq.n	80088b8 <find_volume+0x368>
 80088a8:	230d      	movs	r3, #13
 80088aa:	e0b5      	b.n	8008a18 <find_volume+0x4c8>
 80088ac:	200006ec 	.word	0x200006ec
 80088b0:	0000fff5 	.word	0x0000fff5
 80088b4:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	891b      	ldrh	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <find_volume+0x374>
 80088c0:	230d      	movs	r3, #13
 80088c2:	e0a9      	b.n	8008a18 <find_volume+0x4c8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	3334      	adds	r3, #52	; 0x34
 80088c8:	332c      	adds	r3, #44	; 0x2c
 80088ca:	0018      	movs	r0, r3
 80088cc:	f7fd ff29 	bl	8006722 <ld_dword>
 80088d0:	0002      	movs	r2, r0
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	647b      	str	r3, [r7, #68]	; 0x44
 80088de:	e020      	b.n	8008922 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	891b      	ldrh	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <find_volume+0x39c>
 80088e8:	230d      	movs	r3, #13
 80088ea:	e095      	b.n	8008a18 <find_volume+0x4c8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	18d2      	adds	r2, r2, r3
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088f8:	2357      	movs	r3, #87	; 0x57
 80088fa:	18fb      	adds	r3, r7, r3
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d103      	bne.n	800890a <find_volume+0x3ba>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	e00a      	b.n	8008920 <find_volume+0x3d0>
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	0013      	movs	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	189b      	adds	r3, r3, r2
 8008914:	085a      	lsrs	r2, r3, #1
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	2101      	movs	r1, #1
 800891c:	400b      	ands	r3, r1
 800891e:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	69da      	ldr	r2, [r3, #28]
 8008926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008928:	493d      	ldr	r1, [pc, #244]	; (8008a20 <find_volume+0x4d0>)
 800892a:	468c      	mov	ip, r1
 800892c:	4463      	add	r3, ip
 800892e:	0a5b      	lsrs	r3, r3, #9
 8008930:	429a      	cmp	r2, r3
 8008932:	d201      	bcs.n	8008938 <find_volume+0x3e8>
 8008934:	230d      	movs	r3, #13
 8008936:	e06f      	b.n	8008a18 <find_volume+0x4c8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	2201      	movs	r2, #1
 800893c:	4252      	negs	r2, r2
 800893e:	615a      	str	r2, [r3, #20]
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	695a      	ldr	r2, [r3, #20]
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	2280      	movs	r2, #128	; 0x80
 800894c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800894e:	2357      	movs	r3, #87	; 0x57
 8008950:	18fb      	adds	r3, r7, r3
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b03      	cmp	r3, #3
 8008956:	d148      	bne.n	80089ea <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	3334      	adds	r3, #52	; 0x34
 800895c:	3330      	adds	r3, #48	; 0x30
 800895e:	0018      	movs	r0, r3
 8008960:	f7fd fec4 	bl	80066ec <ld_word>
 8008964:	0003      	movs	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d13f      	bne.n	80089ea <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	0011      	movs	r1, r2
 8008972:	0018      	movs	r0, r3
 8008974:	f7fe f966 	bl	8006c44 <move_window>
 8008978:	1e03      	subs	r3, r0, #0
 800897a:	d136      	bne.n	80089ea <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	2200      	movs	r2, #0
 8008980:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	3334      	adds	r3, #52	; 0x34
 8008986:	33ff      	adds	r3, #255	; 0xff
 8008988:	33ff      	adds	r3, #255	; 0xff
 800898a:	0018      	movs	r0, r3
 800898c:	f7fd feae 	bl	80066ec <ld_word>
 8008990:	0003      	movs	r3, r0
 8008992:	001a      	movs	r2, r3
 8008994:	4b23      	ldr	r3, [pc, #140]	; (8008a24 <find_volume+0x4d4>)
 8008996:	429a      	cmp	r2, r3
 8008998:	d127      	bne.n	80089ea <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	3334      	adds	r3, #52	; 0x34
 800899e:	0018      	movs	r0, r3
 80089a0:	f7fd febf 	bl	8006722 <ld_dword>
 80089a4:	0003      	movs	r3, r0
 80089a6:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <find_volume+0x4d8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d11e      	bne.n	80089ea <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	3334      	adds	r3, #52	; 0x34
 80089b0:	33e5      	adds	r3, #229	; 0xe5
 80089b2:	33ff      	adds	r3, #255	; 0xff
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7fd feb4 	bl	8006722 <ld_dword>
 80089ba:	0003      	movs	r3, r0
 80089bc:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <find_volume+0x4dc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d113      	bne.n	80089ea <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	3334      	adds	r3, #52	; 0x34
 80089c6:	33e9      	adds	r3, #233	; 0xe9
 80089c8:	33ff      	adds	r3, #255	; 0xff
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7fd fea9 	bl	8006722 <ld_dword>
 80089d0:	0002      	movs	r2, r0
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	3334      	adds	r3, #52	; 0x34
 80089da:	33ed      	adds	r3, #237	; 0xed
 80089dc:	33ff      	adds	r3, #255	; 0xff
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fd fe9f 	bl	8006722 <ld_dword>
 80089e4:	0002      	movs	r2, r0
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	2257      	movs	r2, #87	; 0x57
 80089ee:	18ba      	adds	r2, r7, r2
 80089f0:	7812      	ldrb	r2, [r2, #0]
 80089f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80089f4:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <find_volume+0x4e0>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <find_volume+0x4e0>)
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <find_volume+0x4e0>)
 8008a02:	881a      	ldrh	r2, [r3, #0]
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	4a0a      	ldr	r2, [pc, #40]	; (8008a34 <find_volume+0x4e4>)
 8008a0c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	0018      	movs	r0, r3
 8008a12:	f7fe f8af 	bl	8006b74 <clear_lock>
#endif
	return FR_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	0018      	movs	r0, r3
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b016      	add	sp, #88	; 0x58
 8008a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a20:	000001ff 	.word	0x000001ff
 8008a24:	0000aa55 	.word	0x0000aa55
 8008a28:	41615252 	.word	0x41615252
 8008a2c:	61417272 	.word	0x61417272
 8008a30:	200006f0 	.word	0x200006f0
 8008a34:	20000714 	.word	0x20000714

08008a38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008a42:	240f      	movs	r4, #15
 8008a44:	193b      	adds	r3, r7, r4
 8008a46:	2209      	movs	r2, #9
 8008a48:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01d      	beq.n	8008a8c <validate+0x54>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d019      	beq.n	8008a8c <validate+0x54>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d014      	beq.n	8008a8c <validate+0x54>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	889a      	ldrh	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	88db      	ldrh	r3, [r3, #6]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d10d      	bne.n	8008a8c <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	0018      	movs	r0, r3
 8008a78:	f7fd fd6e 	bl	8006558 <disk_status>
 8008a7c:	0003      	movs	r3, r0
 8008a7e:	001a      	movs	r2, r3
 8008a80:	2301      	movs	r3, #1
 8008a82:	4013      	ands	r3, r2
 8008a84:	d102      	bne.n	8008a8c <validate+0x54>
			res = FR_OK;
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	2200      	movs	r2, #0
 8008a8a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a8c:	230f      	movs	r3, #15
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d102      	bne.n	8008a9c <validate+0x64>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	e000      	b.n	8008a9e <validate+0x66>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
	return res;
 8008aa2:	230f      	movs	r3, #15
 8008aa4:	18fb      	adds	r3, r7, r3
 8008aa6:	781b      	ldrb	r3, [r3, #0]
}
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b005      	add	sp, #20
 8008aae:	bd90      	pop	{r4, r7, pc}

08008ab0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ab0:	b5b0      	push	{r4, r5, r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	1dfb      	adds	r3, r7, #7
 8008abc:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f7ff fca7 	bl	800841a <get_ldnumber>
 8008acc:	0003      	movs	r3, r0
 8008ace:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	da01      	bge.n	8008ada <f_mount+0x2a>
 8008ad6:	230b      	movs	r3, #11
 8008ad8:	e030      	b.n	8008b3c <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ada:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <f_mount+0x94>)
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	0092      	lsls	r2, r2, #2
 8008ae0:	58d3      	ldr	r3, [r2, r3]
 8008ae2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7fe f841 	bl	8006b74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2200      	movs	r2, #0
 8008af6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <f_mount+0x94>)
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <f_mount+0x6c>
 8008b14:	1dfb      	adds	r3, r7, #7
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d001      	beq.n	8008b20 <f_mount+0x70>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e00d      	b.n	8008b3c <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008b20:	2517      	movs	r5, #23
 8008b22:	197c      	adds	r4, r7, r5
 8008b24:	230c      	movs	r3, #12
 8008b26:	18f9      	adds	r1, r7, r3
 8008b28:	2308      	movs	r3, #8
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7ff fd0e 	bl	8008550 <find_volume>
 8008b34:	0003      	movs	r3, r0
 8008b36:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8008b38:	197b      	adds	r3, r7, r5
 8008b3a:	781b      	ldrb	r3, [r3, #0]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b008      	add	sp, #32
 8008b42:	bdb0      	pop	{r4, r5, r7, pc}
 8008b44:	200006ec 	.word	0x200006ec

08008b48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4a:	b09b      	sub	sp, #108	; 0x6c
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	1dfb      	adds	r3, r7, #7
 8008b54:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <f_open+0x18>
 8008b5c:	2309      	movs	r3, #9
 8008b5e:	e1e3      	b.n	8008f28 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b60:	1dfb      	adds	r3, r7, #7
 8008b62:	1dfa      	adds	r2, r7, #7
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	213f      	movs	r1, #63	; 0x3f
 8008b68:	400a      	ands	r2, r1
 8008b6a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008b6c:	2567      	movs	r5, #103	; 0x67
 8008b6e:	197c      	adds	r4, r7, r5
 8008b70:	1dfb      	adds	r3, r7, #7
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	2314      	movs	r3, #20
 8008b76:	18f9      	adds	r1, r7, r3
 8008b78:	2308      	movs	r3, #8
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	f7ff fce7 	bl	8008550 <find_volume>
 8008b82:	0003      	movs	r3, r0
 8008b84:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008b86:	197b      	adds	r3, r7, r5
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d000      	beq.n	8008b90 <f_open+0x48>
 8008b8e:	e1c0      	b.n	8008f12 <f_open+0x3ca>
		dj.obj.fs = fs;
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	2618      	movs	r6, #24
 8008b94:	19bb      	adds	r3, r7, r6
 8008b96:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	197c      	adds	r4, r7, r5
 8008b9c:	19bb      	adds	r3, r7, r6
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff fbb5 	bl	8008310 <follow_path>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008baa:	0029      	movs	r1, r5
 8008bac:	197b      	adds	r3, r7, r5
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11b      	bne.n	8008bec <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008bb4:	19bb      	adds	r3, r7, r6
 8008bb6:	222f      	movs	r2, #47	; 0x2f
 8008bb8:	5c9b      	ldrb	r3, [r3, r2]
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	da03      	bge.n	8008bc8 <f_open+0x80>
				res = FR_INVALID_NAME;
 8008bc0:	187b      	adds	r3, r7, r1
 8008bc2:	2206      	movs	r2, #6
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	e011      	b.n	8008bec <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bc8:	1dfb      	adds	r3, r7, #7
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4393      	bics	r3, r2
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	4193      	sbcs	r3, r2
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	001a      	movs	r2, r3
 8008bd8:	2367      	movs	r3, #103	; 0x67
 8008bda:	18fc      	adds	r4, r7, r3
 8008bdc:	2318      	movs	r3, #24
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	0011      	movs	r1, r2
 8008be2:	0018      	movs	r0, r3
 8008be4:	f7fd fe7c 	bl	80068e0 <chk_lock>
 8008be8:	0003      	movs	r3, r0
 8008bea:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008bec:	1dfb      	adds	r3, r7, #7
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	221c      	movs	r2, #28
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d100      	bne.n	8008bf8 <f_open+0xb0>
 8008bf6:	e096      	b.n	8008d26 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8008bf8:	2267      	movs	r2, #103	; 0x67
 8008bfa:	18bb      	adds	r3, r7, r2
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008c02:	18bb      	adds	r3, r7, r2
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d10f      	bne.n	8008c2a <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008c0a:	f7fd fec1 	bl	8006990 <enq_lock>
 8008c0e:	1e03      	subs	r3, r0, #0
 8008c10:	d007      	beq.n	8008c22 <f_open+0xda>
 8008c12:	2318      	movs	r3, #24
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7ff f866 	bl	8007ce8 <dir_register>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	001a      	movs	r2, r3
 8008c20:	e000      	b.n	8008c24 <f_open+0xdc>
 8008c22:	2212      	movs	r2, #18
 8008c24:	2367      	movs	r3, #103	; 0x67
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008c2a:	1dfb      	adds	r3, r7, #7
 8008c2c:	1dfa      	adds	r2, r7, #7
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	2108      	movs	r1, #8
 8008c32:	430a      	orrs	r2, r1
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e014      	b.n	8008c62 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008c38:	2318      	movs	r3, #24
 8008c3a:	18fb      	adds	r3, r7, r3
 8008c3c:	799b      	ldrb	r3, [r3, #6]
 8008c3e:	001a      	movs	r2, r3
 8008c40:	2311      	movs	r3, #17
 8008c42:	4013      	ands	r3, r2
 8008c44:	d004      	beq.n	8008c50 <f_open+0x108>
					res = FR_DENIED;
 8008c46:	2367      	movs	r3, #103	; 0x67
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	2207      	movs	r2, #7
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	e008      	b.n	8008c62 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008c50:	1dfb      	adds	r3, r7, #7
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2204      	movs	r2, #4
 8008c56:	4013      	ands	r3, r2
 8008c58:	d003      	beq.n	8008c62 <f_open+0x11a>
 8008c5a:	2367      	movs	r3, #103	; 0x67
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	2208      	movs	r2, #8
 8008c60:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c62:	2467      	movs	r4, #103	; 0x67
 8008c64:	193b      	adds	r3, r7, r4
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d000      	beq.n	8008c6e <f_open+0x126>
 8008c6c:	e07b      	b.n	8008d66 <f_open+0x21e>
 8008c6e:	1dfb      	adds	r3, r7, #7
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2208      	movs	r2, #8
 8008c74:	4013      	ands	r3, r2
 8008c76:	d100      	bne.n	8008c7a <f_open+0x132>
 8008c78:	e075      	b.n	8008d66 <f_open+0x21e>
				dw = GET_FATTIME();
 8008c7a:	f7fc fe95 	bl	80059a8 <get_fattime>
 8008c7e:	0003      	movs	r3, r0
 8008c80:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c82:	2518      	movs	r5, #24
 8008c84:	197b      	adds	r3, r7, r5
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	330e      	adds	r3, #14
 8008c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c8c:	0011      	movs	r1, r2
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7fd fd86 	bl	80067a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c94:	197b      	adds	r3, r7, r5
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	3316      	adds	r3, #22
 8008c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f7fd fd7e 	bl	80067a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008ca4:	197b      	adds	r3, r7, r5
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	330b      	adds	r3, #11
 8008caa:	2220      	movs	r2, #32
 8008cac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	197b      	adds	r3, r7, r5
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	0019      	movs	r1, r3
 8008cb6:	0010      	movs	r0, r2
 8008cb8:	f7fe fd2b 	bl	8007712 <ld_clust>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	197b      	adds	r3, r7, r5
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	0019      	movs	r1, r3
 8008cca:	f7fe fd41 	bl	8007750 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008cce:	197b      	adds	r3, r7, r5
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	331c      	adds	r3, #28
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7fd fd62 	bl	80067a0 <st_dword>
					fs->wflag = 1;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d03e      	beq.n	8008d66 <f_open+0x21e>
						dw = fs->winsect;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008cee:	0026      	movs	r6, r4
 8008cf0:	193c      	adds	r4, r7, r4
 8008cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cf4:	197b      	adds	r3, r7, r5
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7fe fa1d 	bl	8007138 <remove_chain>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8008d02:	19bb      	adds	r3, r7, r6
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d12d      	bne.n	8008d66 <f_open+0x21e>
							res = move_window(fs, dw);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	19bc      	adds	r4, r7, r6
 8008d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d10:	0011      	movs	r1, r2
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7fd ff96 	bl	8006c44 <move_window>
 8008d18:	0003      	movs	r3, r0
 8008d1a:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d20:	3a01      	subs	r2, #1
 8008d22:	611a      	str	r2, [r3, #16]
 8008d24:	e01f      	b.n	8008d66 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008d26:	2167      	movs	r1, #103	; 0x67
 8008d28:	187b      	adds	r3, r7, r1
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11a      	bne.n	8008d66 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008d30:	2318      	movs	r3, #24
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	799b      	ldrb	r3, [r3, #6]
 8008d36:	001a      	movs	r2, r3
 8008d38:	2310      	movs	r3, #16
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d003      	beq.n	8008d46 <f_open+0x1fe>
					res = FR_NO_FILE;
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	2204      	movs	r2, #4
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	e00f      	b.n	8008d66 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008d46:	1dfb      	adds	r3, r7, #7
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d00a      	beq.n	8008d66 <f_open+0x21e>
 8008d50:	2318      	movs	r3, #24
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	799b      	ldrb	r3, [r3, #6]
 8008d56:	001a      	movs	r2, r3
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <f_open+0x21e>
						res = FR_DENIED;
 8008d5e:	2367      	movs	r3, #103	; 0x67
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	2207      	movs	r2, #7
 8008d64:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8008d66:	2367      	movs	r3, #103	; 0x67
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d12b      	bne.n	8008dc8 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008d70:	1dfb      	adds	r3, r7, #7
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2208      	movs	r2, #8
 8008d76:	4013      	ands	r3, r2
 8008d78:	d005      	beq.n	8008d86 <f_open+0x23e>
				mode |= FA_MODIFIED;
 8008d7a:	1dfb      	adds	r3, r7, #7
 8008d7c:	1dfa      	adds	r2, r7, #7
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	2140      	movs	r1, #64	; 0x40
 8008d82:	430a      	orrs	r2, r1
 8008d84:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008d8e:	2118      	movs	r1, #24
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d98:	1dfb      	adds	r3, r7, #7
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4393      	bics	r3, r2
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	4193      	sbcs	r3, r2
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	001a      	movs	r2, r3
 8008da8:	187b      	adds	r3, r7, r1
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7fd fe0d 	bl	80069cc <inc_lock>
 8008db2:	0002      	movs	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <f_open+0x280>
 8008dc0:	2367      	movs	r3, #103	; 0x67
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008dc8:	2367      	movs	r3, #103	; 0x67
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d000      	beq.n	8008dd4 <f_open+0x28c>
 8008dd2:	e09e      	b.n	8008f12 <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	2418      	movs	r4, #24
 8008dd8:	193b      	adds	r3, r7, r4
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	0019      	movs	r1, r3
 8008dde:	0010      	movs	r0, r2
 8008de0:	f7fe fc97 	bl	8007712 <ld_clust>
 8008de4:	0002      	movs	r2, r0
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008dea:	193b      	adds	r3, r7, r4
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	331c      	adds	r3, #28
 8008df0:	0018      	movs	r0, r3
 8008df2:	f7fd fc96 	bl	8006722 <ld_dword>
 8008df6:	0002      	movs	r2, r0
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	88da      	ldrh	r2, [r3, #6]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	1dfa      	adds	r2, r7, #7
 8008e14:	7812      	ldrb	r2, [r2, #0]
 8008e16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3330      	adds	r3, #48	; 0x30
 8008e2e:	2280      	movs	r2, #128	; 0x80
 8008e30:	0092      	lsls	r2, r2, #2
 8008e32:	2100      	movs	r1, #0
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7fd fcfc 	bl	8006832 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008e3a:	1dfb      	adds	r3, r7, #7
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	4013      	ands	r3, r2
 8008e42:	d066      	beq.n	8008f12 <f_open+0x3ca>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d062      	beq.n	8008f12 <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	895b      	ldrh	r3, [r3, #10]
 8008e58:	025b      	lsls	r3, r3, #9
 8008e5a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e68:	e019      	b.n	8008e9e <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e6e:	0011      	movs	r1, r2
 8008e70:	0018      	movs	r0, r3
 8008e72:	f7fd ffb5 	bl	8006de0 <get_fat>
 8008e76:	0003      	movs	r3, r0
 8008e78:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d803      	bhi.n	8008e88 <f_open+0x340>
 8008e80:	2367      	movs	r3, #103	; 0x67
 8008e82:	18fb      	adds	r3, r7, r3
 8008e84:	2202      	movs	r2, #2
 8008e86:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	d103      	bne.n	8008e96 <f_open+0x34e>
 8008e8e:	2367      	movs	r3, #103	; 0x67
 8008e90:	18fb      	adds	r3, r7, r3
 8008e92:	2201      	movs	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e9e:	2367      	movs	r3, #103	; 0x67
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <f_open+0x368>
 8008ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d8dc      	bhi.n	8008e6a <f_open+0x322>
				}
				fp->clust = clst;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008eb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008eb6:	2467      	movs	r4, #103	; 0x67
 8008eb8:	193b      	adds	r3, r7, r4
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d128      	bne.n	8008f12 <f_open+0x3ca>
 8008ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec2:	05db      	lsls	r3, r3, #23
 8008ec4:	0ddb      	lsrs	r3, r3, #23
 8008ec6:	d024      	beq.n	8008f12 <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ecc:	0011      	movs	r1, r2
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f7fd ff6a 	bl	8006da8 <clust2sect>
 8008ed4:	0003      	movs	r3, r0
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <f_open+0x39e>
						res = FR_INT_ERR;
 8008ede:	193b      	adds	r3, r7, r4
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	e015      	b.n	8008f12 <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee8:	0a5a      	lsrs	r2, r3, #9
 8008eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eec:	18d2      	adds	r2, r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	7858      	ldrb	r0, [r3, #1]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3330      	adds	r3, #48	; 0x30
 8008efa:	0019      	movs	r1, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	2301      	movs	r3, #1
 8008f02:	f7fd fb7b 	bl	80065fc <disk_read>
 8008f06:	1e03      	subs	r3, r0, #0
 8008f08:	d003      	beq.n	8008f12 <f_open+0x3ca>
 8008f0a:	2367      	movs	r3, #103	; 0x67
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	2201      	movs	r2, #1
 8008f10:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008f12:	2367      	movs	r3, #103	; 0x67
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <f_open+0x3da>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008f22:	2367      	movs	r3, #103	; 0x67
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	781b      	ldrb	r3, [r3, #0]
}
 8008f28:	0018      	movs	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b01b      	add	sp, #108	; 0x6c
 8008f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008f30:	b5b0      	push	{r4, r5, r7, lr}
 8008f32:	b08c      	sub	sp, #48	; 0x30
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	252f      	movs	r5, #47	; 0x2f
 8008f4c:	197c      	adds	r4, r7, r5
 8008f4e:	2210      	movs	r2, #16
 8008f50:	18ba      	adds	r2, r7, r2
 8008f52:	0011      	movs	r1, r2
 8008f54:	0018      	movs	r0, r3
 8008f56:	f7ff fd6f 	bl	8008a38 <validate>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008f5e:	197b      	adds	r3, r7, r5
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d107      	bne.n	8008f76 <f_write+0x46>
 8008f66:	197b      	adds	r3, r7, r5
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	7d52      	ldrb	r2, [r2, #21]
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	197b      	adds	r3, r7, r5
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <f_write+0x4e>
 8008f76:	232f      	movs	r3, #47	; 0x2f
 8008f78:	18fb      	adds	r3, r7, r3
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	e14e      	b.n	800921c <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	7d1b      	ldrb	r3, [r3, #20]
 8008f82:	001a      	movs	r2, r3
 8008f84:	2302      	movs	r3, #2
 8008f86:	4013      	ands	r3, r2
 8008f88:	d101      	bne.n	8008f8e <f_write+0x5e>
 8008f8a:	2307      	movs	r3, #7
 8008f8c:	e146      	b.n	800921c <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	18d2      	adds	r2, r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d300      	bcc.n	8008fa0 <f_write+0x70>
 8008f9e:	e12f      	b.n	8009200 <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008fa8:	e12a      	b.n	8009200 <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	05db      	lsls	r3, r3, #23
 8008fb0:	0ddb      	lsrs	r3, r3, #23
 8008fb2:	d000      	beq.n	8008fb6 <f_write+0x86>
 8008fb4:	e0e3      	b.n	800917e <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	0a5b      	lsrs	r3, r3, #9
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	8952      	ldrh	r2, [r2, #10]
 8008fc0:	3a01      	subs	r2, #1
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d146      	bne.n	800905a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10d      	bne.n	8008ff0 <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11e      	bne.n	800901e <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7fe f91a 	bl	800721e <create_chain>
 8008fea:	0003      	movs	r3, r0
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fee:	e016      	b.n	800901e <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0011      	movs	r1, r2
 8009000:	0018      	movs	r0, r3
 8009002:	f7fe f9b2 	bl	800736a <clmt_clust>
 8009006:	0003      	movs	r3, r0
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
 800900a:	e008      	b.n	800901e <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	0019      	movs	r1, r3
 8009014:	0010      	movs	r0, r2
 8009016:	f7fe f902 	bl	800721e <create_chain>
 800901a:	0003      	movs	r3, r0
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	d100      	bne.n	8009026 <f_write+0xf6>
 8009024:	e0f1      	b.n	800920a <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	2b01      	cmp	r3, #1
 800902a:	d104      	bne.n	8009036 <f_write+0x106>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2202      	movs	r2, #2
 8009030:	755a      	strb	r2, [r3, #21]
 8009032:	2302      	movs	r3, #2
 8009034:	e0f2      	b.n	800921c <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	3301      	adds	r3, #1
 800903a:	d104      	bne.n	8009046 <f_write+0x116>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	755a      	strb	r2, [r3, #21]
 8009042:	2301      	movs	r3, #1
 8009044:	e0ea      	b.n	800921c <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800904a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <f_write+0x12a>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009058:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	7d1b      	ldrb	r3, [r3, #20]
 800905e:	b25b      	sxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	da17      	bge.n	8009094 <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	7858      	ldrb	r0, [r3, #1]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3330      	adds	r3, #48	; 0x30
 800906c:	0019      	movs	r1, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a1a      	ldr	r2, [r3, #32]
 8009072:	2301      	movs	r3, #1
 8009074:	f7fd faea 	bl	800664c <disk_write>
 8009078:	1e03      	subs	r3, r0, #0
 800907a:	d004      	beq.n	8009086 <f_write+0x156>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	755a      	strb	r2, [r3, #21]
 8009082:	2301      	movs	r3, #1
 8009084:	e0ca      	b.n	800921c <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	7d1b      	ldrb	r3, [r3, #20]
 800908a:	227f      	movs	r2, #127	; 0x7f
 800908c:	4013      	ands	r3, r2
 800908e:	b2da      	uxtb	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	0019      	movs	r1, r3
 800909c:	0010      	movs	r0, r2
 800909e:	f7fd fe83 	bl	8006da8 <clust2sect>
 80090a2:	0003      	movs	r3, r0
 80090a4:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <f_write+0x186>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2202      	movs	r2, #2
 80090b0:	755a      	strb	r2, [r3, #21]
 80090b2:	2302      	movs	r3, #2
 80090b4:	e0b2      	b.n	800921c <f_write+0x2ec>
			sect += csect;
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	18d3      	adds	r3, r2, r3
 80090bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	0a5b      	lsrs	r3, r3, #9
 80090c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d03b      	beq.n	8009142 <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	18d3      	adds	r3, r2, r3
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	8952      	ldrh	r2, [r2, #10]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d905      	bls.n	80090e4 <f_write+0x1b4>
					cc = fs->csize - csect;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	895b      	ldrh	r3, [r3, #10]
 80090dc:	001a      	movs	r2, r3
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	7858      	ldrb	r0, [r3, #1]
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	69f9      	ldr	r1, [r7, #28]
 80090ee:	f7fd faad 	bl	800664c <disk_write>
 80090f2:	1e03      	subs	r3, r0, #0
 80090f4:	d004      	beq.n	8009100 <f_write+0x1d0>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	755a      	strb	r2, [r3, #21]
 80090fc:	2301      	movs	r3, #1
 80090fe:	e08d      	b.n	800921c <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a1a      	ldr	r2, [r3, #32]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	6a3a      	ldr	r2, [r7, #32]
 800910a:	429a      	cmp	r2, r3
 800910c:	d915      	bls.n	800913a <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3330      	adds	r3, #48	; 0x30
 8009112:	0018      	movs	r0, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a1a      	ldr	r2, [r3, #32]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	025b      	lsls	r3, r3, #9
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	18d3      	adds	r3, r2, r3
 8009122:	2280      	movs	r2, #128	; 0x80
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	0019      	movs	r1, r3
 8009128:	f7fd fb64 	bl	80067f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	227f      	movs	r2, #127	; 0x7f
 8009132:	4013      	ands	r3, r2
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	025b      	lsls	r3, r3, #9
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009140:	e040      	b.n	80091c4 <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	429a      	cmp	r2, r3
 800914a:	d015      	beq.n	8009178 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009154:	429a      	cmp	r2, r3
 8009156:	d20f      	bcs.n	8009178 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	7858      	ldrb	r0, [r3, #1]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3330      	adds	r3, #48	; 0x30
 8009160:	0019      	movs	r1, r3
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	2301      	movs	r3, #1
 8009166:	f7fd fa49 	bl	80065fc <disk_read>
 800916a:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800916c:	d004      	beq.n	8009178 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	755a      	strb	r2, [r3, #21]
 8009174:	2301      	movs	r3, #1
 8009176:	e051      	b.n	800921c <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	05db      	lsls	r3, r3, #23
 8009184:	0ddb      	lsrs	r3, r3, #23
 8009186:	2280      	movs	r2, #128	; 0x80
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800918e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d901      	bls.n	800919a <f_write+0x26a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3330      	adds	r3, #48	; 0x30
 800919e:	001a      	movs	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	05db      	lsls	r3, r3, #23
 80091a6:	0ddb      	lsrs	r3, r3, #23
 80091a8:	18d3      	adds	r3, r2, r3
 80091aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ac:	69f9      	ldr	r1, [r7, #28]
 80091ae:	0018      	movs	r0, r3
 80091b0:	f7fd fb20 	bl	80067f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2280      	movs	r2, #128	; 0x80
 80091ba:	4252      	negs	r2, r2
 80091bc:	4313      	orrs	r3, r2
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	18d3      	adds	r3, r2, r3
 80091ca:	61fb      	str	r3, [r7, #28]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	18d2      	adds	r2, r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	619a      	str	r2, [r3, #24]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	699a      	ldr	r2, [r3, #24]
 80091e0:	000b      	movs	r3, r1
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d200      	bcs.n	80091e8 <f_write+0x2b8>
 80091e6:	0013      	movs	r3, r2
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	60d3      	str	r3, [r2, #12]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	18d2      	adds	r2, r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d000      	beq.n	8009208 <f_write+0x2d8>
 8009206:	e6d0      	b.n	8008faa <f_write+0x7a>
 8009208:	e000      	b.n	800920c <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800920a:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	7d1b      	ldrb	r3, [r3, #20]
 8009210:	2240      	movs	r2, #64	; 0x40
 8009212:	4313      	orrs	r3, r2
 8009214:	b2da      	uxtb	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800921a:	2300      	movs	r3, #0
}
 800921c:	0018      	movs	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	b00c      	add	sp, #48	; 0x30
 8009222:	bdb0      	pop	{r4, r5, r7, pc}

08009224 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009224:	b5b0      	push	{r4, r5, r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2517      	movs	r5, #23
 8009230:	197c      	adds	r4, r7, r5
 8009232:	2208      	movs	r2, #8
 8009234:	18ba      	adds	r2, r7, r2
 8009236:	0011      	movs	r1, r2
 8009238:	0018      	movs	r0, r3
 800923a:	f7ff fbfd 	bl	8008a38 <validate>
 800923e:	0003      	movs	r3, r0
 8009240:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009242:	197b      	adds	r3, r7, r5
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d16e      	bne.n	8009328 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7d1b      	ldrb	r3, [r3, #20]
 800924e:	001a      	movs	r2, r3
 8009250:	2340      	movs	r3, #64	; 0x40
 8009252:	4013      	ands	r3, r2
 8009254:	d068      	beq.n	8009328 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7d1b      	ldrb	r3, [r3, #20]
 800925a:	b25b      	sxtb	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	da14      	bge.n	800928a <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	7858      	ldrb	r0, [r3, #1]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3330      	adds	r3, #48	; 0x30
 8009268:	0019      	movs	r1, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	2301      	movs	r3, #1
 8009270:	f7fd f9ec 	bl	800664c <disk_write>
 8009274:	1e03      	subs	r3, r0, #0
 8009276:	d001      	beq.n	800927c <f_sync+0x58>
 8009278:	2301      	movs	r3, #1
 800927a:	e058      	b.n	800932e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7d1b      	ldrb	r3, [r3, #20]
 8009280:	227f      	movs	r2, #127	; 0x7f
 8009282:	4013      	ands	r3, r2
 8009284:	b2da      	uxtb	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800928a:	f7fc fb8d 	bl	80059a8 <get_fattime>
 800928e:	0003      	movs	r3, r0
 8009290:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2517      	movs	r5, #23
 800929a:	197c      	adds	r4, r7, r5
 800929c:	0019      	movs	r1, r3
 800929e:	0010      	movs	r0, r2
 80092a0:	f7fd fcd0 	bl	8006c44 <move_window>
 80092a4:	0003      	movs	r3, r0
 80092a6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80092a8:	002c      	movs	r4, r5
 80092aa:	193b      	adds	r3, r7, r4
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d13a      	bne.n	8009328 <f_sync+0x104>
					dir = fp->dir_ptr;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	330b      	adds	r3, #11
 80092bc:	781a      	ldrb	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	330b      	adds	r3, #11
 80092c2:	2120      	movs	r1, #32
 80092c4:	430a      	orrs	r2, r1
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	0019      	movs	r1, r3
 80092d6:	f7fe fa3b 	bl	8007750 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	331c      	adds	r3, #28
 80092de:	001a      	movs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	0019      	movs	r1, r3
 80092e6:	0010      	movs	r0, r2
 80092e8:	f7fd fa5a 	bl	80067a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3316      	adds	r3, #22
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	0011      	movs	r1, r2
 80092f4:	0018      	movs	r0, r3
 80092f6:	f7fd fa53 	bl	80067a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3312      	adds	r3, #18
 80092fe:	2100      	movs	r1, #0
 8009300:	0018      	movs	r0, r3
 8009302:	f7fd fa2f 	bl	8006764 <st_word>
					fs->wflag = 1;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2201      	movs	r2, #1
 800930a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	193c      	adds	r4, r7, r4
 8009310:	0018      	movs	r0, r3
 8009312:	f7fd fccd 	bl	8006cb0 <sync_fs>
 8009316:	0003      	movs	r3, r0
 8009318:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7d1b      	ldrb	r3, [r3, #20]
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	4393      	bics	r3, r2
 8009322:	b2da      	uxtb	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009328:	2317      	movs	r3, #23
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	781b      	ldrb	r3, [r3, #0]
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	b006      	add	sp, #24
 8009334:	bdb0      	pop	{r4, r5, r7, pc}

08009336 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009336:	b5b0      	push	{r4, r5, r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800933e:	250f      	movs	r5, #15
 8009340:	197c      	adds	r4, r7, r5
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	0018      	movs	r0, r3
 8009346:	f7ff ff6d 	bl	8009224 <f_sync>
 800934a:	0003      	movs	r3, r0
 800934c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800934e:	197b      	adds	r3, r7, r5
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d11c      	bne.n	8009390 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	197c      	adds	r4, r7, r5
 800935a:	2208      	movs	r2, #8
 800935c:	18ba      	adds	r2, r7, r2
 800935e:	0011      	movs	r1, r2
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff fb69 	bl	8008a38 <validate>
 8009366:	0003      	movs	r3, r0
 8009368:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800936a:	197b      	adds	r3, r7, r5
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10e      	bne.n	8009390 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	197c      	adds	r4, r7, r5
 8009378:	0018      	movs	r0, r3
 800937a:	f7fd fbb1 	bl	8006ae0 <dec_lock>
 800937e:	0003      	movs	r3, r0
 8009380:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8009382:	197b      	adds	r3, r7, r5
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009390:	230f      	movs	r3, #15
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	781b      	ldrb	r3, [r3, #0]
}
 8009396:	0018      	movs	r0, r3
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080093a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093a0:	b590      	push	{r4, r7, lr}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	1dfb      	adds	r3, r7, #7
 80093ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80093ae:	2417      	movs	r4, #23
 80093b0:	193b      	adds	r3, r7, r4
 80093b2:	2201      	movs	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80093b6:	2016      	movs	r0, #22
 80093b8:	183b      	adds	r3, r7, r0
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 80093be:	4b21      	ldr	r3, [pc, #132]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093c0:	7a5b      	ldrb	r3, [r3, #9]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d136      	bne.n	8009436 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093c8:	4b1e      	ldr	r3, [pc, #120]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093ca:	7a5b      	ldrb	r3, [r3, #9]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	001a      	movs	r2, r3
 80093d0:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093d2:	2100      	movs	r1, #0
 80093d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093d6:	4b1b      	ldr	r3, [pc, #108]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093d8:	7a5b      	ldrb	r3, [r3, #9]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	4a19      	ldr	r2, [pc, #100]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	18d3      	adds	r3, r2, r3
 80093e2:	3304      	adds	r3, #4
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80093e8:	4b16      	ldr	r3, [pc, #88]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093ea:	7a5b      	ldrb	r3, [r3, #9]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	001a      	movs	r2, r3
 80093f0:	4b14      	ldr	r3, [pc, #80]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093f2:	189b      	adds	r3, r3, r2
 80093f4:	1dfa      	adds	r2, r7, #7
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 80093fc:	7a5b      	ldrb	r3, [r3, #9]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	b2d1      	uxtb	r1, r2
 8009404:	4a0f      	ldr	r2, [pc, #60]	; (8009444 <FATFS_LinkDriverEx+0xa4>)
 8009406:	7251      	strb	r1, [r2, #9]
 8009408:	183a      	adds	r2, r7, r0
 800940a:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800940c:	183b      	adds	r3, r7, r0
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	3330      	adds	r3, #48	; 0x30
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	3301      	adds	r3, #1
 800941c:	223a      	movs	r2, #58	; 0x3a
 800941e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3302      	adds	r3, #2
 8009424:	222f      	movs	r2, #47	; 0x2f
 8009426:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3303      	adds	r3, #3
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009430:	193b      	adds	r3, r7, r4
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009436:	2317      	movs	r3, #23
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	781b      	ldrb	r3, [r3, #0]
}
 800943c:	0018      	movs	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	b007      	add	sp, #28
 8009442:	bd90      	pop	{r4, r7, pc}
 8009444:	20000914 	.word	0x20000914

08009448 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	0018      	movs	r0, r3
 800945a:	f7ff ffa1 	bl	80093a0 <FATFS_LinkDriverEx>
 800945e:	0003      	movs	r3, r0
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b002      	add	sp, #8
 8009466:	bd80      	pop	{r7, pc}

08009468 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	0002      	movs	r2, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	1dbb      	adds	r3, r7, #6
 8009474:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009476:	1dbb      	adds	r3, r7, #6
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	2b7f      	cmp	r3, #127	; 0x7f
 800947c:	d805      	bhi.n	800948a <ff_convert+0x22>
		c = chr;
 800947e:	230e      	movs	r3, #14
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	1dba      	adds	r2, r7, #6
 8009484:	8812      	ldrh	r2, [r2, #0]
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	e037      	b.n	80094fa <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d010      	beq.n	80094b2 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009490:	1dbb      	adds	r3, r7, #6
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	2bff      	cmp	r3, #255	; 0xff
 8009496:	d807      	bhi.n	80094a8 <ff_convert+0x40>
 8009498:	1dbb      	adds	r3, r7, #6
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	3b80      	subs	r3, #128	; 0x80
 800949e:	001a      	movs	r2, r3
 80094a0:	4b19      	ldr	r3, [pc, #100]	; (8009508 <ff_convert+0xa0>)
 80094a2:	0052      	lsls	r2, r2, #1
 80094a4:	5ad2      	ldrh	r2, [r2, r3]
 80094a6:	e000      	b.n	80094aa <ff_convert+0x42>
 80094a8:	2200      	movs	r2, #0
 80094aa:	230e      	movs	r3, #14
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	e023      	b.n	80094fa <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80094b2:	230e      	movs	r3, #14
 80094b4:	18fb      	adds	r3, r7, r3
 80094b6:	2200      	movs	r2, #0
 80094b8:	801a      	strh	r2, [r3, #0]
 80094ba:	e00e      	b.n	80094da <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 80094bc:	210e      	movs	r1, #14
 80094be:	187b      	adds	r3, r7, r1
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	4b11      	ldr	r3, [pc, #68]	; (8009508 <ff_convert+0xa0>)
 80094c4:	0052      	lsls	r2, r2, #1
 80094c6:	5ad3      	ldrh	r3, [r2, r3]
 80094c8:	1dba      	adds	r2, r7, #6
 80094ca:	8812      	ldrh	r2, [r2, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d00a      	beq.n	80094e6 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	881a      	ldrh	r2, [r3, #0]
 80094d4:	187b      	adds	r3, r7, r1
 80094d6:	3201      	adds	r2, #1
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	230e      	movs	r3, #14
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	2b7f      	cmp	r3, #127	; 0x7f
 80094e2:	d9eb      	bls.n	80094bc <ff_convert+0x54>
 80094e4:	e000      	b.n	80094e8 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 80094e6:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 80094e8:	210e      	movs	r1, #14
 80094ea:	187b      	adds	r3, r7, r1
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	3380      	adds	r3, #128	; 0x80
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	21ff      	movs	r1, #255	; 0xff
 80094f6:	400a      	ands	r2, r1
 80094f8:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 80094fa:	230e      	movs	r3, #14
 80094fc:	18fb      	adds	r3, r7, r3
 80094fe:	881b      	ldrh	r3, [r3, #0]
}
 8009500:	0018      	movs	r0, r3
 8009502:	46bd      	mov	sp, r7
 8009504:	b004      	add	sp, #16
 8009506:	bd80      	pop	{r7, pc}
 8009508:	0800a894 	.word	0x0800a894

0800950c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800950c:	b5b0      	push	{r4, r5, r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	0002      	movs	r2, r0
 8009514:	1dbb      	adds	r3, r7, #6
 8009516:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009518:	1dbb      	adds	r3, r7, #6
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	2380      	movs	r3, #128	; 0x80
 800951e:	015b      	lsls	r3, r3, #5
 8009520:	429a      	cmp	r2, r3
 8009522:	d201      	bcs.n	8009528 <ff_wtoupper+0x1c>
 8009524:	4b4d      	ldr	r3, [pc, #308]	; (800965c <ff_wtoupper+0x150>)
 8009526:	e000      	b.n	800952a <ff_wtoupper+0x1e>
 8009528:	4b4d      	ldr	r3, [pc, #308]	; (8009660 <ff_wtoupper+0x154>)
 800952a:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	1c9a      	adds	r2, r3, #2
 8009530:	617a      	str	r2, [r7, #20]
 8009532:	2412      	movs	r4, #18
 8009534:	193a      	adds	r2, r7, r4
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800953a:	193b      	adds	r3, r7, r4
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d100      	bne.n	8009544 <ff_wtoupper+0x38>
 8009542:	e084      	b.n	800964e <ff_wtoupper+0x142>
 8009544:	1dba      	adds	r2, r7, #6
 8009546:	193b      	adds	r3, r7, r4
 8009548:	8812      	ldrh	r2, [r2, #0]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d200      	bcs.n	8009552 <ff_wtoupper+0x46>
 8009550:	e07d      	b.n	800964e <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	617a      	str	r2, [r7, #20]
 8009558:	2010      	movs	r0, #16
 800955a:	183a      	adds	r2, r7, r0
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	8013      	strh	r3, [r2, #0]
 8009560:	250e      	movs	r5, #14
 8009562:	197b      	adds	r3, r7, r5
 8009564:	183a      	adds	r2, r7, r0
 8009566:	8812      	ldrh	r2, [r2, #0]
 8009568:	0a12      	lsrs	r2, r2, #8
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	183b      	adds	r3, r7, r0
 800956e:	183a      	adds	r2, r7, r0
 8009570:	8812      	ldrh	r2, [r2, #0]
 8009572:	21ff      	movs	r1, #255	; 0xff
 8009574:	400a      	ands	r2, r1
 8009576:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8009578:	1dbb      	adds	r3, r7, #6
 800957a:	881a      	ldrh	r2, [r3, #0]
 800957c:	193b      	adds	r3, r7, r4
 800957e:	8819      	ldrh	r1, [r3, #0]
 8009580:	183b      	adds	r3, r7, r0
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	18cb      	adds	r3, r1, r3
 8009586:	429a      	cmp	r2, r3
 8009588:	da52      	bge.n	8009630 <ff_wtoupper+0x124>
			switch (cmd) {
 800958a:	197b      	adds	r3, r7, r5
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	2b08      	cmp	r3, #8
 8009590:	d85c      	bhi.n	800964c <ff_wtoupper+0x140>
 8009592:	009a      	lsls	r2, r3, #2
 8009594:	4b33      	ldr	r3, [pc, #204]	; (8009664 <ff_wtoupper+0x158>)
 8009596:	18d3      	adds	r3, r2, r3
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800959c:	1dbb      	adds	r3, r7, #6
 800959e:	881a      	ldrh	r2, [r3, #0]
 80095a0:	2312      	movs	r3, #18
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	18d2      	adds	r2, r2, r3
 80095ae:	1dbb      	adds	r3, r7, #6
 80095b0:	8812      	ldrh	r2, [r2, #0]
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e03b      	b.n	800962e <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80095b6:	1dba      	adds	r2, r7, #6
 80095b8:	2312      	movs	r3, #18
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	8812      	ldrh	r2, [r2, #0]
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2201      	movs	r2, #1
 80095c6:	4013      	ands	r3, r2
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	1dbb      	adds	r3, r7, #6
 80095cc:	1db9      	adds	r1, r7, #6
 80095ce:	8809      	ldrh	r1, [r1, #0]
 80095d0:	1a8a      	subs	r2, r1, r2
 80095d2:	801a      	strh	r2, [r3, #0]
 80095d4:	e02b      	b.n	800962e <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 80095d6:	1dbb      	adds	r3, r7, #6
 80095d8:	1dba      	adds	r2, r7, #6
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	3a10      	subs	r2, #16
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e025      	b.n	800962e <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80095e2:	1dbb      	adds	r3, r7, #6
 80095e4:	1dba      	adds	r2, r7, #6
 80095e6:	8812      	ldrh	r2, [r2, #0]
 80095e8:	3a20      	subs	r2, #32
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	e01f      	b.n	800962e <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80095ee:	1dbb      	adds	r3, r7, #6
 80095f0:	1dba      	adds	r2, r7, #6
 80095f2:	8812      	ldrh	r2, [r2, #0]
 80095f4:	3a30      	subs	r2, #48	; 0x30
 80095f6:	801a      	strh	r2, [r3, #0]
 80095f8:	e019      	b.n	800962e <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80095fa:	1dbb      	adds	r3, r7, #6
 80095fc:	1dba      	adds	r2, r7, #6
 80095fe:	8812      	ldrh	r2, [r2, #0]
 8009600:	3a1a      	subs	r2, #26
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e013      	b.n	800962e <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009606:	1dbb      	adds	r3, r7, #6
 8009608:	1dba      	adds	r2, r7, #6
 800960a:	8812      	ldrh	r2, [r2, #0]
 800960c:	3208      	adds	r2, #8
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	e00d      	b.n	800962e <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009612:	1dbb      	adds	r3, r7, #6
 8009614:	1dba      	adds	r2, r7, #6
 8009616:	8812      	ldrh	r2, [r2, #0]
 8009618:	3a50      	subs	r2, #80	; 0x50
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e007      	b.n	800962e <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800961e:	1dbb      	adds	r3, r7, #6
 8009620:	1dba      	adds	r2, r7, #6
 8009622:	8812      	ldrh	r2, [r2, #0]
 8009624:	4910      	ldr	r1, [pc, #64]	; (8009668 <ff_wtoupper+0x15c>)
 8009626:	468c      	mov	ip, r1
 8009628:	4462      	add	r2, ip
 800962a:	801a      	strh	r2, [r3, #0]
 800962c:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800962e:	e00d      	b.n	800964c <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 8009630:	230e      	movs	r3, #14
 8009632:	18fb      	adds	r3, r7, r3
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d000      	beq.n	800963c <ff_wtoupper+0x130>
 800963a:	e777      	b.n	800952c <ff_wtoupper+0x20>
 800963c:	2310      	movs	r3, #16
 800963e:	18fb      	adds	r3, r7, r3
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	005b      	lsls	r3, r3, #1
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	18d3      	adds	r3, r2, r3
 8009648:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800964a:	e76f      	b.n	800952c <ff_wtoupper+0x20>
			break;
 800964c:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800964e:	1dbb      	adds	r3, r7, #6
 8009650:	881b      	ldrh	r3, [r3, #0]
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b006      	add	sp, #24
 8009658:	bdb0      	pop	{r4, r5, r7, pc}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	0800a9b8 	.word	0x0800a9b8
 8009660:	0800abac 	.word	0x0800abac
 8009664:	0800a994 	.word	0x0800a994
 8009668:	ffffe3a0 	.word	0xffffe3a0

0800966c <siprintf>:
 800966c:	b40e      	push	{r1, r2, r3}
 800966e:	b500      	push	{lr}
 8009670:	490b      	ldr	r1, [pc, #44]	; (80096a0 <siprintf+0x34>)
 8009672:	b09c      	sub	sp, #112	; 0x70
 8009674:	ab1d      	add	r3, sp, #116	; 0x74
 8009676:	9002      	str	r0, [sp, #8]
 8009678:	9006      	str	r0, [sp, #24]
 800967a:	9107      	str	r1, [sp, #28]
 800967c:	9104      	str	r1, [sp, #16]
 800967e:	4809      	ldr	r0, [pc, #36]	; (80096a4 <siprintf+0x38>)
 8009680:	4909      	ldr	r1, [pc, #36]	; (80096a8 <siprintf+0x3c>)
 8009682:	cb04      	ldmia	r3!, {r2}
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	a902      	add	r1, sp, #8
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f000 f9a2 	bl	80099d4 <_svfiprintf_r>
 8009690:	2200      	movs	r2, #0
 8009692:	9b02      	ldr	r3, [sp, #8]
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	b01c      	add	sp, #112	; 0x70
 8009698:	bc08      	pop	{r3}
 800969a:	b003      	add	sp, #12
 800969c:	4718      	bx	r3
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	7fffffff 	.word	0x7fffffff
 80096a4:	20000078 	.word	0x20000078
 80096a8:	ffff0208 	.word	0xffff0208

080096ac <memset>:
 80096ac:	0003      	movs	r3, r0
 80096ae:	1882      	adds	r2, r0, r2
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d100      	bne.n	80096b6 <memset+0xa>
 80096b4:	4770      	bx	lr
 80096b6:	7019      	strb	r1, [r3, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	e7f9      	b.n	80096b0 <memset+0x4>

080096bc <__errno>:
 80096bc:	4b01      	ldr	r3, [pc, #4]	; (80096c4 <__errno+0x8>)
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	4770      	bx	lr
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	20000078 	.word	0x20000078

080096c8 <__libc_init_array>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	2600      	movs	r6, #0
 80096cc:	4c0c      	ldr	r4, [pc, #48]	; (8009700 <__libc_init_array+0x38>)
 80096ce:	4d0d      	ldr	r5, [pc, #52]	; (8009704 <__libc_init_array+0x3c>)
 80096d0:	1b64      	subs	r4, r4, r5
 80096d2:	10a4      	asrs	r4, r4, #2
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	d109      	bne.n	80096ec <__libc_init_array+0x24>
 80096d8:	2600      	movs	r6, #0
 80096da:	f000 fc6d 	bl	8009fb8 <_init>
 80096de:	4c0a      	ldr	r4, [pc, #40]	; (8009708 <__libc_init_array+0x40>)
 80096e0:	4d0a      	ldr	r5, [pc, #40]	; (800970c <__libc_init_array+0x44>)
 80096e2:	1b64      	subs	r4, r4, r5
 80096e4:	10a4      	asrs	r4, r4, #2
 80096e6:	42a6      	cmp	r6, r4
 80096e8:	d105      	bne.n	80096f6 <__libc_init_array+0x2e>
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	00b3      	lsls	r3, r6, #2
 80096ee:	58eb      	ldr	r3, [r5, r3]
 80096f0:	4798      	blx	r3
 80096f2:	3601      	adds	r6, #1
 80096f4:	e7ee      	b.n	80096d4 <__libc_init_array+0xc>
 80096f6:	00b3      	lsls	r3, r6, #2
 80096f8:	58eb      	ldr	r3, [r5, r3]
 80096fa:	4798      	blx	r3
 80096fc:	3601      	adds	r6, #1
 80096fe:	e7f2      	b.n	80096e6 <__libc_init_array+0x1e>
 8009700:	0800aca4 	.word	0x0800aca4
 8009704:	0800aca4 	.word	0x0800aca4
 8009708:	0800aca8 	.word	0x0800aca8
 800970c:	0800aca4 	.word	0x0800aca4

08009710 <__retarget_lock_acquire_recursive>:
 8009710:	4770      	bx	lr

08009712 <__retarget_lock_release_recursive>:
 8009712:	4770      	bx	lr

08009714 <_free_r>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	0005      	movs	r5, r0
 8009718:	2900      	cmp	r1, #0
 800971a:	d010      	beq.n	800973e <_free_r+0x2a>
 800971c:	1f0c      	subs	r4, r1, #4
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	da00      	bge.n	8009726 <_free_r+0x12>
 8009724:	18e4      	adds	r4, r4, r3
 8009726:	0028      	movs	r0, r5
 8009728:	f000 f8e2 	bl	80098f0 <__malloc_lock>
 800972c:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <_free_r+0x90>)
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <_free_r+0x2c>
 8009734:	6063      	str	r3, [r4, #4]
 8009736:	6014      	str	r4, [r2, #0]
 8009738:	0028      	movs	r0, r5
 800973a:	f000 f8e1 	bl	8009900 <__malloc_unlock>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	42a3      	cmp	r3, r4
 8009742:	d908      	bls.n	8009756 <_free_r+0x42>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	1821      	adds	r1, r4, r0
 8009748:	428b      	cmp	r3, r1
 800974a:	d1f3      	bne.n	8009734 <_free_r+0x20>
 800974c:	6819      	ldr	r1, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	1809      	adds	r1, r1, r0
 8009752:	6021      	str	r1, [r4, #0]
 8009754:	e7ee      	b.n	8009734 <_free_r+0x20>
 8009756:	001a      	movs	r2, r3
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <_free_r+0x4e>
 800975e:	42a3      	cmp	r3, r4
 8009760:	d9f9      	bls.n	8009756 <_free_r+0x42>
 8009762:	6811      	ldr	r1, [r2, #0]
 8009764:	1850      	adds	r0, r2, r1
 8009766:	42a0      	cmp	r0, r4
 8009768:	d10b      	bne.n	8009782 <_free_r+0x6e>
 800976a:	6820      	ldr	r0, [r4, #0]
 800976c:	1809      	adds	r1, r1, r0
 800976e:	1850      	adds	r0, r2, r1
 8009770:	6011      	str	r1, [r2, #0]
 8009772:	4283      	cmp	r3, r0
 8009774:	d1e0      	bne.n	8009738 <_free_r+0x24>
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	1841      	adds	r1, r0, r1
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	6053      	str	r3, [r2, #4]
 8009780:	e7da      	b.n	8009738 <_free_r+0x24>
 8009782:	42a0      	cmp	r0, r4
 8009784:	d902      	bls.n	800978c <_free_r+0x78>
 8009786:	230c      	movs	r3, #12
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	e7d5      	b.n	8009738 <_free_r+0x24>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	1821      	adds	r1, r4, r0
 8009790:	428b      	cmp	r3, r1
 8009792:	d103      	bne.n	800979c <_free_r+0x88>
 8009794:	6819      	ldr	r1, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1809      	adds	r1, r1, r0
 800979a:	6021      	str	r1, [r4, #0]
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6054      	str	r4, [r2, #4]
 80097a0:	e7ca      	b.n	8009738 <_free_r+0x24>
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	20000a60 	.word	0x20000a60

080097a8 <sbrk_aligned>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	4e0f      	ldr	r6, [pc, #60]	; (80097e8 <sbrk_aligned+0x40>)
 80097ac:	000d      	movs	r5, r1
 80097ae:	6831      	ldr	r1, [r6, #0]
 80097b0:	0004      	movs	r4, r0
 80097b2:	2900      	cmp	r1, #0
 80097b4:	d102      	bne.n	80097bc <sbrk_aligned+0x14>
 80097b6:	f000 fba1 	bl	8009efc <_sbrk_r>
 80097ba:	6030      	str	r0, [r6, #0]
 80097bc:	0029      	movs	r1, r5
 80097be:	0020      	movs	r0, r4
 80097c0:	f000 fb9c 	bl	8009efc <_sbrk_r>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d00a      	beq.n	80097de <sbrk_aligned+0x36>
 80097c8:	2303      	movs	r3, #3
 80097ca:	1cc5      	adds	r5, r0, #3
 80097cc:	439d      	bics	r5, r3
 80097ce:	42a8      	cmp	r0, r5
 80097d0:	d007      	beq.n	80097e2 <sbrk_aligned+0x3a>
 80097d2:	1a29      	subs	r1, r5, r0
 80097d4:	0020      	movs	r0, r4
 80097d6:	f000 fb91 	bl	8009efc <_sbrk_r>
 80097da:	3001      	adds	r0, #1
 80097dc:	d101      	bne.n	80097e2 <sbrk_aligned+0x3a>
 80097de:	2501      	movs	r5, #1
 80097e0:	426d      	negs	r5, r5
 80097e2:	0028      	movs	r0, r5
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	20000a64 	.word	0x20000a64

080097ec <_malloc_r>:
 80097ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ee:	2203      	movs	r2, #3
 80097f0:	1ccb      	adds	r3, r1, #3
 80097f2:	4393      	bics	r3, r2
 80097f4:	3308      	adds	r3, #8
 80097f6:	0006      	movs	r6, r0
 80097f8:	001f      	movs	r7, r3
 80097fa:	2b0c      	cmp	r3, #12
 80097fc:	d238      	bcs.n	8009870 <_malloc_r+0x84>
 80097fe:	270c      	movs	r7, #12
 8009800:	42b9      	cmp	r1, r7
 8009802:	d837      	bhi.n	8009874 <_malloc_r+0x88>
 8009804:	0030      	movs	r0, r6
 8009806:	f000 f873 	bl	80098f0 <__malloc_lock>
 800980a:	4b38      	ldr	r3, [pc, #224]	; (80098ec <_malloc_r+0x100>)
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	001c      	movs	r4, r3
 8009812:	2c00      	cmp	r4, #0
 8009814:	d133      	bne.n	800987e <_malloc_r+0x92>
 8009816:	0039      	movs	r1, r7
 8009818:	0030      	movs	r0, r6
 800981a:	f7ff ffc5 	bl	80097a8 <sbrk_aligned>
 800981e:	0004      	movs	r4, r0
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d15e      	bne.n	80098e2 <_malloc_r+0xf6>
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	681c      	ldr	r4, [r3, #0]
 8009828:	0025      	movs	r5, r4
 800982a:	2d00      	cmp	r5, #0
 800982c:	d14e      	bne.n	80098cc <_malloc_r+0xe0>
 800982e:	2c00      	cmp	r4, #0
 8009830:	d051      	beq.n	80098d6 <_malloc_r+0xea>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	0029      	movs	r1, r5
 8009836:	18e3      	adds	r3, r4, r3
 8009838:	0030      	movs	r0, r6
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	f000 fb5e 	bl	8009efc <_sbrk_r>
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	4283      	cmp	r3, r0
 8009844:	d147      	bne.n	80098d6 <_malloc_r+0xea>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	0030      	movs	r0, r6
 800984a:	1aff      	subs	r7, r7, r3
 800984c:	0039      	movs	r1, r7
 800984e:	f7ff ffab 	bl	80097a8 <sbrk_aligned>
 8009852:	3001      	adds	r0, #1
 8009854:	d03f      	beq.n	80098d6 <_malloc_r+0xea>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	19db      	adds	r3, r3, r7
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	9b00      	ldr	r3, [sp, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d040      	beq.n	80098e6 <_malloc_r+0xfa>
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	42a2      	cmp	r2, r4
 8009868:	d133      	bne.n	80098d2 <_malloc_r+0xe6>
 800986a:	2200      	movs	r2, #0
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	e014      	b.n	800989a <_malloc_r+0xae>
 8009870:	2b00      	cmp	r3, #0
 8009872:	dac5      	bge.n	8009800 <_malloc_r+0x14>
 8009874:	230c      	movs	r3, #12
 8009876:	2500      	movs	r5, #0
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	0028      	movs	r0, r5
 800987c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800987e:	6821      	ldr	r1, [r4, #0]
 8009880:	1bc9      	subs	r1, r1, r7
 8009882:	d420      	bmi.n	80098c6 <_malloc_r+0xda>
 8009884:	290b      	cmp	r1, #11
 8009886:	d918      	bls.n	80098ba <_malloc_r+0xce>
 8009888:	19e2      	adds	r2, r4, r7
 800988a:	6027      	str	r7, [r4, #0]
 800988c:	42a3      	cmp	r3, r4
 800988e:	d112      	bne.n	80098b6 <_malloc_r+0xca>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	6011      	str	r1, [r2, #0]
 8009898:	6053      	str	r3, [r2, #4]
 800989a:	0030      	movs	r0, r6
 800989c:	0025      	movs	r5, r4
 800989e:	f000 f82f 	bl	8009900 <__malloc_unlock>
 80098a2:	2207      	movs	r2, #7
 80098a4:	350b      	adds	r5, #11
 80098a6:	1d23      	adds	r3, r4, #4
 80098a8:	4395      	bics	r5, r2
 80098aa:	1aea      	subs	r2, r5, r3
 80098ac:	429d      	cmp	r5, r3
 80098ae:	d0e4      	beq.n	800987a <_malloc_r+0x8e>
 80098b0:	1b5b      	subs	r3, r3, r5
 80098b2:	50a3      	str	r3, [r4, r2]
 80098b4:	e7e1      	b.n	800987a <_malloc_r+0x8e>
 80098b6:	605a      	str	r2, [r3, #4]
 80098b8:	e7ec      	b.n	8009894 <_malloc_r+0xa8>
 80098ba:	6862      	ldr	r2, [r4, #4]
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d1d5      	bne.n	800986c <_malloc_r+0x80>
 80098c0:	9b00      	ldr	r3, [sp, #0]
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e7e9      	b.n	800989a <_malloc_r+0xae>
 80098c6:	0023      	movs	r3, r4
 80098c8:	6864      	ldr	r4, [r4, #4]
 80098ca:	e7a2      	b.n	8009812 <_malloc_r+0x26>
 80098cc:	002c      	movs	r4, r5
 80098ce:	686d      	ldr	r5, [r5, #4]
 80098d0:	e7ab      	b.n	800982a <_malloc_r+0x3e>
 80098d2:	0013      	movs	r3, r2
 80098d4:	e7c4      	b.n	8009860 <_malloc_r+0x74>
 80098d6:	230c      	movs	r3, #12
 80098d8:	0030      	movs	r0, r6
 80098da:	6033      	str	r3, [r6, #0]
 80098dc:	f000 f810 	bl	8009900 <__malloc_unlock>
 80098e0:	e7cb      	b.n	800987a <_malloc_r+0x8e>
 80098e2:	6027      	str	r7, [r4, #0]
 80098e4:	e7d9      	b.n	800989a <_malloc_r+0xae>
 80098e6:	605b      	str	r3, [r3, #4]
 80098e8:	deff      	udf	#255	; 0xff
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	20000a60 	.word	0x20000a60

080098f0 <__malloc_lock>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4802      	ldr	r0, [pc, #8]	; (80098fc <__malloc_lock+0xc>)
 80098f4:	f7ff ff0c 	bl	8009710 <__retarget_lock_acquire_recursive>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	20000a5c 	.word	0x20000a5c

08009900 <__malloc_unlock>:
 8009900:	b510      	push	{r4, lr}
 8009902:	4802      	ldr	r0, [pc, #8]	; (800990c <__malloc_unlock+0xc>)
 8009904:	f7ff ff05 	bl	8009712 <__retarget_lock_release_recursive>
 8009908:	bd10      	pop	{r4, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	20000a5c 	.word	0x20000a5c

08009910 <__ssputs_r>:
 8009910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009912:	b085      	sub	sp, #20
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	9203      	str	r2, [sp, #12]
 8009918:	688e      	ldr	r6, [r1, #8]
 800991a:	9a01      	ldr	r2, [sp, #4]
 800991c:	0007      	movs	r7, r0
 800991e:	000c      	movs	r4, r1
 8009920:	680b      	ldr	r3, [r1, #0]
 8009922:	4296      	cmp	r6, r2
 8009924:	d831      	bhi.n	800998a <__ssputs_r+0x7a>
 8009926:	898a      	ldrh	r2, [r1, #12]
 8009928:	2190      	movs	r1, #144	; 0x90
 800992a:	00c9      	lsls	r1, r1, #3
 800992c:	420a      	tst	r2, r1
 800992e:	d029      	beq.n	8009984 <__ssputs_r+0x74>
 8009930:	2003      	movs	r0, #3
 8009932:	6921      	ldr	r1, [r4, #16]
 8009934:	1a5b      	subs	r3, r3, r1
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	6963      	ldr	r3, [r4, #20]
 800993a:	4343      	muls	r3, r0
 800993c:	0fdd      	lsrs	r5, r3, #31
 800993e:	18ed      	adds	r5, r5, r3
 8009940:	9b01      	ldr	r3, [sp, #4]
 8009942:	9802      	ldr	r0, [sp, #8]
 8009944:	3301      	adds	r3, #1
 8009946:	181b      	adds	r3, r3, r0
 8009948:	106d      	asrs	r5, r5, #1
 800994a:	42ab      	cmp	r3, r5
 800994c:	d900      	bls.n	8009950 <__ssputs_r+0x40>
 800994e:	001d      	movs	r5, r3
 8009950:	0552      	lsls	r2, r2, #21
 8009952:	d529      	bpl.n	80099a8 <__ssputs_r+0x98>
 8009954:	0029      	movs	r1, r5
 8009956:	0038      	movs	r0, r7
 8009958:	f7ff ff48 	bl	80097ec <_malloc_r>
 800995c:	1e06      	subs	r6, r0, #0
 800995e:	d02d      	beq.n	80099bc <__ssputs_r+0xac>
 8009960:	9a02      	ldr	r2, [sp, #8]
 8009962:	6921      	ldr	r1, [r4, #16]
 8009964:	f000 fae7 	bl	8009f36 <memcpy>
 8009968:	89a2      	ldrh	r2, [r4, #12]
 800996a:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <__ssputs_r+0xc0>)
 800996c:	401a      	ands	r2, r3
 800996e:	2380      	movs	r3, #128	; 0x80
 8009970:	4313      	orrs	r3, r2
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	9b02      	ldr	r3, [sp, #8]
 8009976:	6126      	str	r6, [r4, #16]
 8009978:	18f6      	adds	r6, r6, r3
 800997a:	6026      	str	r6, [r4, #0]
 800997c:	6165      	str	r5, [r4, #20]
 800997e:	9e01      	ldr	r6, [sp, #4]
 8009980:	1aed      	subs	r5, r5, r3
 8009982:	60a5      	str	r5, [r4, #8]
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	429e      	cmp	r6, r3
 8009988:	d900      	bls.n	800998c <__ssputs_r+0x7c>
 800998a:	9e01      	ldr	r6, [sp, #4]
 800998c:	0032      	movs	r2, r6
 800998e:	9903      	ldr	r1, [sp, #12]
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	f000 fa9f 	bl	8009ed4 <memmove>
 8009996:	2000      	movs	r0, #0
 8009998:	68a3      	ldr	r3, [r4, #8]
 800999a:	1b9b      	subs	r3, r3, r6
 800999c:	60a3      	str	r3, [r4, #8]
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	199b      	adds	r3, r3, r6
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	b005      	add	sp, #20
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a8:	002a      	movs	r2, r5
 80099aa:	0038      	movs	r0, r7
 80099ac:	f000 facc 	bl	8009f48 <_realloc_r>
 80099b0:	1e06      	subs	r6, r0, #0
 80099b2:	d1df      	bne.n	8009974 <__ssputs_r+0x64>
 80099b4:	0038      	movs	r0, r7
 80099b6:	6921      	ldr	r1, [r4, #16]
 80099b8:	f7ff feac 	bl	8009714 <_free_r>
 80099bc:	230c      	movs	r3, #12
 80099be:	2001      	movs	r0, #1
 80099c0:	603b      	str	r3, [r7, #0]
 80099c2:	89a2      	ldrh	r2, [r4, #12]
 80099c4:	3334      	adds	r3, #52	; 0x34
 80099c6:	4313      	orrs	r3, r2
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	4240      	negs	r0, r0
 80099cc:	e7ea      	b.n	80099a4 <__ssputs_r+0x94>
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	fffffb7f 	.word	0xfffffb7f

080099d4 <_svfiprintf_r>:
 80099d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d6:	b0a1      	sub	sp, #132	; 0x84
 80099d8:	9003      	str	r0, [sp, #12]
 80099da:	001d      	movs	r5, r3
 80099dc:	898b      	ldrh	r3, [r1, #12]
 80099de:	000f      	movs	r7, r1
 80099e0:	0016      	movs	r6, r2
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	d511      	bpl.n	8009a0a <_svfiprintf_r+0x36>
 80099e6:	690b      	ldr	r3, [r1, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10e      	bne.n	8009a0a <_svfiprintf_r+0x36>
 80099ec:	2140      	movs	r1, #64	; 0x40
 80099ee:	f7ff fefd 	bl	80097ec <_malloc_r>
 80099f2:	6038      	str	r0, [r7, #0]
 80099f4:	6138      	str	r0, [r7, #16]
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d105      	bne.n	8009a06 <_svfiprintf_r+0x32>
 80099fa:	230c      	movs	r3, #12
 80099fc:	9a03      	ldr	r2, [sp, #12]
 80099fe:	3801      	subs	r0, #1
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	b021      	add	sp, #132	; 0x84
 8009a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a06:	2340      	movs	r3, #64	; 0x40
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	ac08      	add	r4, sp, #32
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	3320      	adds	r3, #32
 8009a12:	7663      	strb	r3, [r4, #25]
 8009a14:	3310      	adds	r3, #16
 8009a16:	76a3      	strb	r3, [r4, #26]
 8009a18:	9507      	str	r5, [sp, #28]
 8009a1a:	0035      	movs	r5, r6
 8009a1c:	782b      	ldrb	r3, [r5, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <_svfiprintf_r+0x52>
 8009a22:	2b25      	cmp	r3, #37	; 0x25
 8009a24:	d148      	bne.n	8009ab8 <_svfiprintf_r+0xe4>
 8009a26:	1bab      	subs	r3, r5, r6
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	42b5      	cmp	r5, r6
 8009a2c:	d00b      	beq.n	8009a46 <_svfiprintf_r+0x72>
 8009a2e:	0032      	movs	r2, r6
 8009a30:	0039      	movs	r1, r7
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	f7ff ff6c 	bl	8009910 <__ssputs_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d100      	bne.n	8009a3e <_svfiprintf_r+0x6a>
 8009a3c:	e0af      	b.n	8009b9e <_svfiprintf_r+0x1ca>
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	9a05      	ldr	r2, [sp, #20]
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	6163      	str	r3, [r4, #20]
 8009a46:	782b      	ldrb	r3, [r5, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d100      	bne.n	8009a4e <_svfiprintf_r+0x7a>
 8009a4c:	e0a7      	b.n	8009b9e <_svfiprintf_r+0x1ca>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	2300      	movs	r3, #0
 8009a52:	4252      	negs	r2, r2
 8009a54:	6062      	str	r2, [r4, #4]
 8009a56:	a904      	add	r1, sp, #16
 8009a58:	3254      	adds	r2, #84	; 0x54
 8009a5a:	1852      	adds	r2, r2, r1
 8009a5c:	1c6e      	adds	r6, r5, #1
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	60e3      	str	r3, [r4, #12]
 8009a62:	60a3      	str	r3, [r4, #8]
 8009a64:	7013      	strb	r3, [r2, #0]
 8009a66:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a68:	4b55      	ldr	r3, [pc, #340]	; (8009bc0 <_svfiprintf_r+0x1ec>)
 8009a6a:	2205      	movs	r2, #5
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	7831      	ldrb	r1, [r6, #0]
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	f000 fa55 	bl	8009f20 <memchr>
 8009a76:	1c75      	adds	r5, r6, #1
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d11f      	bne.n	8009abc <_svfiprintf_r+0xe8>
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	06d3      	lsls	r3, r2, #27
 8009a80:	d504      	bpl.n	8009a8c <_svfiprintf_r+0xb8>
 8009a82:	2353      	movs	r3, #83	; 0x53
 8009a84:	a904      	add	r1, sp, #16
 8009a86:	185b      	adds	r3, r3, r1
 8009a88:	2120      	movs	r1, #32
 8009a8a:	7019      	strb	r1, [r3, #0]
 8009a8c:	0713      	lsls	r3, r2, #28
 8009a8e:	d504      	bpl.n	8009a9a <_svfiprintf_r+0xc6>
 8009a90:	2353      	movs	r3, #83	; 0x53
 8009a92:	a904      	add	r1, sp, #16
 8009a94:	185b      	adds	r3, r3, r1
 8009a96:	212b      	movs	r1, #43	; 0x2b
 8009a98:	7019      	strb	r1, [r3, #0]
 8009a9a:	7833      	ldrb	r3, [r6, #0]
 8009a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9e:	d016      	beq.n	8009ace <_svfiprintf_r+0xfa>
 8009aa0:	0035      	movs	r5, r6
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	200a      	movs	r0, #10
 8009aa6:	68e3      	ldr	r3, [r4, #12]
 8009aa8:	782a      	ldrb	r2, [r5, #0]
 8009aaa:	1c6e      	adds	r6, r5, #1
 8009aac:	3a30      	subs	r2, #48	; 0x30
 8009aae:	2a09      	cmp	r2, #9
 8009ab0:	d94e      	bls.n	8009b50 <_svfiprintf_r+0x17c>
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d111      	bne.n	8009ada <_svfiprintf_r+0x106>
 8009ab6:	e017      	b.n	8009ae8 <_svfiprintf_r+0x114>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	e7af      	b.n	8009a1c <_svfiprintf_r+0x48>
 8009abc:	9b05      	ldr	r3, [sp, #20]
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	1ac0      	subs	r0, r0, r3
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4083      	lsls	r3, r0
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	002e      	movs	r6, r5
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	e7cc      	b.n	8009a68 <_svfiprintf_r+0x94>
 8009ace:	9b07      	ldr	r3, [sp, #28]
 8009ad0:	1d19      	adds	r1, r3, #4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	9107      	str	r1, [sp, #28]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	db01      	blt.n	8009ade <_svfiprintf_r+0x10a>
 8009ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8009adc:	e004      	b.n	8009ae8 <_svfiprintf_r+0x114>
 8009ade:	425b      	negs	r3, r3
 8009ae0:	60e3      	str	r3, [r4, #12]
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	782b      	ldrb	r3, [r5, #0]
 8009aea:	2b2e      	cmp	r3, #46	; 0x2e
 8009aec:	d10a      	bne.n	8009b04 <_svfiprintf_r+0x130>
 8009aee:	786b      	ldrb	r3, [r5, #1]
 8009af0:	2b2a      	cmp	r3, #42	; 0x2a
 8009af2:	d135      	bne.n	8009b60 <_svfiprintf_r+0x18c>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	3502      	adds	r5, #2
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	db2b      	blt.n	8009b5a <_svfiprintf_r+0x186>
 8009b02:	9309      	str	r3, [sp, #36]	; 0x24
 8009b04:	4e2f      	ldr	r6, [pc, #188]	; (8009bc4 <_svfiprintf_r+0x1f0>)
 8009b06:	2203      	movs	r2, #3
 8009b08:	0030      	movs	r0, r6
 8009b0a:	7829      	ldrb	r1, [r5, #0]
 8009b0c:	f000 fa08 	bl	8009f20 <memchr>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d006      	beq.n	8009b22 <_svfiprintf_r+0x14e>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	1b80      	subs	r0, r0, r6
 8009b18:	4083      	lsls	r3, r0
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	7829      	ldrb	r1, [r5, #0]
 8009b24:	2206      	movs	r2, #6
 8009b26:	4828      	ldr	r0, [pc, #160]	; (8009bc8 <_svfiprintf_r+0x1f4>)
 8009b28:	1c6e      	adds	r6, r5, #1
 8009b2a:	7621      	strb	r1, [r4, #24]
 8009b2c:	f000 f9f8 	bl	8009f20 <memchr>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d03c      	beq.n	8009bae <_svfiprintf_r+0x1da>
 8009b34:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <_svfiprintf_r+0x1f8>)
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d125      	bne.n	8009b86 <_svfiprintf_r+0x1b2>
 8009b3a:	2207      	movs	r2, #7
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	3307      	adds	r3, #7
 8009b40:	4393      	bics	r3, r2
 8009b42:	3308      	adds	r3, #8
 8009b44:	9307      	str	r3, [sp, #28]
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	189b      	adds	r3, r3, r2
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	e764      	b.n	8009a1a <_svfiprintf_r+0x46>
 8009b50:	4343      	muls	r3, r0
 8009b52:	0035      	movs	r5, r6
 8009b54:	2101      	movs	r1, #1
 8009b56:	189b      	adds	r3, r3, r2
 8009b58:	e7a6      	b.n	8009aa8 <_svfiprintf_r+0xd4>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	425b      	negs	r3, r3
 8009b5e:	e7d0      	b.n	8009b02 <_svfiprintf_r+0x12e>
 8009b60:	2300      	movs	r3, #0
 8009b62:	200a      	movs	r0, #10
 8009b64:	001a      	movs	r2, r3
 8009b66:	3501      	adds	r5, #1
 8009b68:	6063      	str	r3, [r4, #4]
 8009b6a:	7829      	ldrb	r1, [r5, #0]
 8009b6c:	1c6e      	adds	r6, r5, #1
 8009b6e:	3930      	subs	r1, #48	; 0x30
 8009b70:	2909      	cmp	r1, #9
 8009b72:	d903      	bls.n	8009b7c <_svfiprintf_r+0x1a8>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0c5      	beq.n	8009b04 <_svfiprintf_r+0x130>
 8009b78:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7a:	e7c3      	b.n	8009b04 <_svfiprintf_r+0x130>
 8009b7c:	4342      	muls	r2, r0
 8009b7e:	0035      	movs	r5, r6
 8009b80:	2301      	movs	r3, #1
 8009b82:	1852      	adds	r2, r2, r1
 8009b84:	e7f1      	b.n	8009b6a <_svfiprintf_r+0x196>
 8009b86:	aa07      	add	r2, sp, #28
 8009b88:	9200      	str	r2, [sp, #0]
 8009b8a:	0021      	movs	r1, r4
 8009b8c:	003a      	movs	r2, r7
 8009b8e:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <_svfiprintf_r+0x1fc>)
 8009b90:	9803      	ldr	r0, [sp, #12]
 8009b92:	e000      	b.n	8009b96 <_svfiprintf_r+0x1c2>
 8009b94:	bf00      	nop
 8009b96:	9004      	str	r0, [sp, #16]
 8009b98:	9b04      	ldr	r3, [sp, #16]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	d1d3      	bne.n	8009b46 <_svfiprintf_r+0x172>
 8009b9e:	89bb      	ldrh	r3, [r7, #12]
 8009ba0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ba2:	065b      	lsls	r3, r3, #25
 8009ba4:	d400      	bmi.n	8009ba8 <_svfiprintf_r+0x1d4>
 8009ba6:	e72c      	b.n	8009a02 <_svfiprintf_r+0x2e>
 8009ba8:	2001      	movs	r0, #1
 8009baa:	4240      	negs	r0, r0
 8009bac:	e729      	b.n	8009a02 <_svfiprintf_r+0x2e>
 8009bae:	aa07      	add	r2, sp, #28
 8009bb0:	9200      	str	r2, [sp, #0]
 8009bb2:	0021      	movs	r1, r4
 8009bb4:	003a      	movs	r2, r7
 8009bb6:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <_svfiprintf_r+0x1fc>)
 8009bb8:	9803      	ldr	r0, [sp, #12]
 8009bba:	f000 f87b 	bl	8009cb4 <_printf_i>
 8009bbe:	e7ea      	b.n	8009b96 <_svfiprintf_r+0x1c2>
 8009bc0:	0800ac68 	.word	0x0800ac68
 8009bc4:	0800ac6e 	.word	0x0800ac6e
 8009bc8:	0800ac72 	.word	0x0800ac72
 8009bcc:	00000000 	.word	0x00000000
 8009bd0:	08009911 	.word	0x08009911

08009bd4 <_printf_common>:
 8009bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd6:	0016      	movs	r6, r2
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	688a      	ldr	r2, [r1, #8]
 8009bdc:	690b      	ldr	r3, [r1, #16]
 8009bde:	000c      	movs	r4, r1
 8009be0:	9000      	str	r0, [sp, #0]
 8009be2:	4293      	cmp	r3, r2
 8009be4:	da00      	bge.n	8009be8 <_printf_common+0x14>
 8009be6:	0013      	movs	r3, r2
 8009be8:	0022      	movs	r2, r4
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	3243      	adds	r2, #67	; 0x43
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	2a00      	cmp	r2, #0
 8009bf2:	d001      	beq.n	8009bf8 <_printf_common+0x24>
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	069b      	lsls	r3, r3, #26
 8009bfc:	d502      	bpl.n	8009c04 <_printf_common+0x30>
 8009bfe:	6833      	ldr	r3, [r6, #0]
 8009c00:	3302      	adds	r3, #2
 8009c02:	6033      	str	r3, [r6, #0]
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	2306      	movs	r3, #6
 8009c08:	0015      	movs	r5, r2
 8009c0a:	401d      	ands	r5, r3
 8009c0c:	421a      	tst	r2, r3
 8009c0e:	d027      	beq.n	8009c60 <_printf_common+0x8c>
 8009c10:	0023      	movs	r3, r4
 8009c12:	3343      	adds	r3, #67	; 0x43
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	1e5a      	subs	r2, r3, #1
 8009c18:	4193      	sbcs	r3, r2
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	0692      	lsls	r2, r2, #26
 8009c1e:	d430      	bmi.n	8009c82 <_printf_common+0xae>
 8009c20:	0022      	movs	r2, r4
 8009c22:	9901      	ldr	r1, [sp, #4]
 8009c24:	9800      	ldr	r0, [sp, #0]
 8009c26:	9d08      	ldr	r5, [sp, #32]
 8009c28:	3243      	adds	r2, #67	; 0x43
 8009c2a:	47a8      	blx	r5
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	d025      	beq.n	8009c7c <_printf_common+0xa8>
 8009c30:	2206      	movs	r2, #6
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	2500      	movs	r5, #0
 8009c36:	4013      	ands	r3, r2
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d105      	bne.n	8009c48 <_printf_common+0x74>
 8009c3c:	6833      	ldr	r3, [r6, #0]
 8009c3e:	68e5      	ldr	r5, [r4, #12]
 8009c40:	1aed      	subs	r5, r5, r3
 8009c42:	43eb      	mvns	r3, r5
 8009c44:	17db      	asrs	r3, r3, #31
 8009c46:	401d      	ands	r5, r3
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	6922      	ldr	r2, [r4, #16]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	dd01      	ble.n	8009c54 <_printf_common+0x80>
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	18ed      	adds	r5, r5, r3
 8009c54:	2600      	movs	r6, #0
 8009c56:	42b5      	cmp	r5, r6
 8009c58:	d120      	bne.n	8009c9c <_printf_common+0xc8>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e010      	b.n	8009c80 <_printf_common+0xac>
 8009c5e:	3501      	adds	r5, #1
 8009c60:	68e3      	ldr	r3, [r4, #12]
 8009c62:	6832      	ldr	r2, [r6, #0]
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	ddd2      	ble.n	8009c10 <_printf_common+0x3c>
 8009c6a:	0022      	movs	r2, r4
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	9901      	ldr	r1, [sp, #4]
 8009c70:	9800      	ldr	r0, [sp, #0]
 8009c72:	9f08      	ldr	r7, [sp, #32]
 8009c74:	3219      	adds	r2, #25
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d1f0      	bne.n	8009c5e <_printf_common+0x8a>
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	4240      	negs	r0, r0
 8009c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c82:	2030      	movs	r0, #48	; 0x30
 8009c84:	18e1      	adds	r1, r4, r3
 8009c86:	3143      	adds	r1, #67	; 0x43
 8009c88:	7008      	strb	r0, [r1, #0]
 8009c8a:	0021      	movs	r1, r4
 8009c8c:	1c5a      	adds	r2, r3, #1
 8009c8e:	3145      	adds	r1, #69	; 0x45
 8009c90:	7809      	ldrb	r1, [r1, #0]
 8009c92:	18a2      	adds	r2, r4, r2
 8009c94:	3243      	adds	r2, #67	; 0x43
 8009c96:	3302      	adds	r3, #2
 8009c98:	7011      	strb	r1, [r2, #0]
 8009c9a:	e7c1      	b.n	8009c20 <_printf_common+0x4c>
 8009c9c:	0022      	movs	r2, r4
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	9901      	ldr	r1, [sp, #4]
 8009ca2:	9800      	ldr	r0, [sp, #0]
 8009ca4:	9f08      	ldr	r7, [sp, #32]
 8009ca6:	321a      	adds	r2, #26
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d0e6      	beq.n	8009c7c <_printf_common+0xa8>
 8009cae:	3601      	adds	r6, #1
 8009cb0:	e7d1      	b.n	8009c56 <_printf_common+0x82>
	...

08009cb4 <_printf_i>:
 8009cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb6:	b08b      	sub	sp, #44	; 0x2c
 8009cb8:	9206      	str	r2, [sp, #24]
 8009cba:	000a      	movs	r2, r1
 8009cbc:	3243      	adds	r2, #67	; 0x43
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	9005      	str	r0, [sp, #20]
 8009cc2:	9204      	str	r2, [sp, #16]
 8009cc4:	7e0a      	ldrb	r2, [r1, #24]
 8009cc6:	000c      	movs	r4, r1
 8009cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cca:	2a78      	cmp	r2, #120	; 0x78
 8009ccc:	d809      	bhi.n	8009ce2 <_printf_i+0x2e>
 8009cce:	2a62      	cmp	r2, #98	; 0x62
 8009cd0:	d80b      	bhi.n	8009cea <_printf_i+0x36>
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	d100      	bne.n	8009cd8 <_printf_i+0x24>
 8009cd6:	e0be      	b.n	8009e56 <_printf_i+0x1a2>
 8009cd8:	497c      	ldr	r1, [pc, #496]	; (8009ecc <_printf_i+0x218>)
 8009cda:	9103      	str	r1, [sp, #12]
 8009cdc:	2a58      	cmp	r2, #88	; 0x58
 8009cde:	d100      	bne.n	8009ce2 <_printf_i+0x2e>
 8009ce0:	e093      	b.n	8009e0a <_printf_i+0x156>
 8009ce2:	0026      	movs	r6, r4
 8009ce4:	3642      	adds	r6, #66	; 0x42
 8009ce6:	7032      	strb	r2, [r6, #0]
 8009ce8:	e022      	b.n	8009d30 <_printf_i+0x7c>
 8009cea:	0010      	movs	r0, r2
 8009cec:	3863      	subs	r0, #99	; 0x63
 8009cee:	2815      	cmp	r0, #21
 8009cf0:	d8f7      	bhi.n	8009ce2 <_printf_i+0x2e>
 8009cf2:	f7f6 fa11 	bl	8000118 <__gnu_thumb1_case_shi>
 8009cf6:	0016      	.short	0x0016
 8009cf8:	fff6001f 	.word	0xfff6001f
 8009cfc:	fff6fff6 	.word	0xfff6fff6
 8009d00:	001ffff6 	.word	0x001ffff6
 8009d04:	fff6fff6 	.word	0xfff6fff6
 8009d08:	fff6fff6 	.word	0xfff6fff6
 8009d0c:	003600a3 	.word	0x003600a3
 8009d10:	fff60083 	.word	0xfff60083
 8009d14:	00b4fff6 	.word	0x00b4fff6
 8009d18:	0036fff6 	.word	0x0036fff6
 8009d1c:	fff6fff6 	.word	0xfff6fff6
 8009d20:	0087      	.short	0x0087
 8009d22:	0026      	movs	r6, r4
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	3642      	adds	r6, #66	; 0x42
 8009d28:	1d11      	adds	r1, r2, #4
 8009d2a:	6019      	str	r1, [r3, #0]
 8009d2c:	6813      	ldr	r3, [r2, #0]
 8009d2e:	7033      	strb	r3, [r6, #0]
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0a2      	b.n	8009e7a <_printf_i+0x1c6>
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	6809      	ldr	r1, [r1, #0]
 8009d38:	1d02      	adds	r2, r0, #4
 8009d3a:	060d      	lsls	r5, r1, #24
 8009d3c:	d50b      	bpl.n	8009d56 <_printf_i+0xa2>
 8009d3e:	6805      	ldr	r5, [r0, #0]
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	2d00      	cmp	r5, #0
 8009d44:	da03      	bge.n	8009d4e <_printf_i+0x9a>
 8009d46:	232d      	movs	r3, #45	; 0x2d
 8009d48:	9a04      	ldr	r2, [sp, #16]
 8009d4a:	426d      	negs	r5, r5
 8009d4c:	7013      	strb	r3, [r2, #0]
 8009d4e:	4b5f      	ldr	r3, [pc, #380]	; (8009ecc <_printf_i+0x218>)
 8009d50:	270a      	movs	r7, #10
 8009d52:	9303      	str	r3, [sp, #12]
 8009d54:	e01b      	b.n	8009d8e <_printf_i+0xda>
 8009d56:	6805      	ldr	r5, [r0, #0]
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	0649      	lsls	r1, r1, #25
 8009d5c:	d5f1      	bpl.n	8009d42 <_printf_i+0x8e>
 8009d5e:	b22d      	sxth	r5, r5
 8009d60:	e7ef      	b.n	8009d42 <_printf_i+0x8e>
 8009d62:	680d      	ldr	r5, [r1, #0]
 8009d64:	6819      	ldr	r1, [r3, #0]
 8009d66:	1d08      	adds	r0, r1, #4
 8009d68:	6018      	str	r0, [r3, #0]
 8009d6a:	062e      	lsls	r6, r5, #24
 8009d6c:	d501      	bpl.n	8009d72 <_printf_i+0xbe>
 8009d6e:	680d      	ldr	r5, [r1, #0]
 8009d70:	e003      	b.n	8009d7a <_printf_i+0xc6>
 8009d72:	066d      	lsls	r5, r5, #25
 8009d74:	d5fb      	bpl.n	8009d6e <_printf_i+0xba>
 8009d76:	680d      	ldr	r5, [r1, #0]
 8009d78:	b2ad      	uxth	r5, r5
 8009d7a:	4b54      	ldr	r3, [pc, #336]	; (8009ecc <_printf_i+0x218>)
 8009d7c:	2708      	movs	r7, #8
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	2a6f      	cmp	r2, #111	; 0x6f
 8009d82:	d000      	beq.n	8009d86 <_printf_i+0xd2>
 8009d84:	3702      	adds	r7, #2
 8009d86:	0023      	movs	r3, r4
 8009d88:	2200      	movs	r2, #0
 8009d8a:	3343      	adds	r3, #67	; 0x43
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	db03      	blt.n	8009d9e <_printf_i+0xea>
 8009d96:	2104      	movs	r1, #4
 8009d98:	6822      	ldr	r2, [r4, #0]
 8009d9a:	438a      	bics	r2, r1
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	d102      	bne.n	8009da8 <_printf_i+0xf4>
 8009da2:	9e04      	ldr	r6, [sp, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00c      	beq.n	8009dc2 <_printf_i+0x10e>
 8009da8:	9e04      	ldr	r6, [sp, #16]
 8009daa:	0028      	movs	r0, r5
 8009dac:	0039      	movs	r1, r7
 8009dae:	f7f6 fa43 	bl	8000238 <__aeabi_uidivmod>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	3e01      	subs	r6, #1
 8009db6:	5c5b      	ldrb	r3, [r3, r1]
 8009db8:	7033      	strb	r3, [r6, #0]
 8009dba:	002b      	movs	r3, r5
 8009dbc:	0005      	movs	r5, r0
 8009dbe:	429f      	cmp	r7, r3
 8009dc0:	d9f3      	bls.n	8009daa <_printf_i+0xf6>
 8009dc2:	2f08      	cmp	r7, #8
 8009dc4:	d109      	bne.n	8009dda <_printf_i+0x126>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	07db      	lsls	r3, r3, #31
 8009dca:	d506      	bpl.n	8009dda <_printf_i+0x126>
 8009dcc:	6862      	ldr	r2, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	dc02      	bgt.n	8009dda <_printf_i+0x126>
 8009dd4:	2330      	movs	r3, #48	; 0x30
 8009dd6:	3e01      	subs	r6, #1
 8009dd8:	7033      	strb	r3, [r6, #0]
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	1b9b      	subs	r3, r3, r6
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	9b07      	ldr	r3, [sp, #28]
 8009de2:	0021      	movs	r1, r4
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	9805      	ldr	r0, [sp, #20]
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	aa09      	add	r2, sp, #36	; 0x24
 8009dec:	f7ff fef2 	bl	8009bd4 <_printf_common>
 8009df0:	3001      	adds	r0, #1
 8009df2:	d147      	bne.n	8009e84 <_printf_i+0x1d0>
 8009df4:	2001      	movs	r0, #1
 8009df6:	4240      	negs	r0, r0
 8009df8:	b00b      	add	sp, #44	; 0x2c
 8009dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	6809      	ldr	r1, [r1, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	6022      	str	r2, [r4, #0]
 8009e04:	2278      	movs	r2, #120	; 0x78
 8009e06:	4932      	ldr	r1, [pc, #200]	; (8009ed0 <_printf_i+0x21c>)
 8009e08:	9103      	str	r1, [sp, #12]
 8009e0a:	0021      	movs	r1, r4
 8009e0c:	3145      	adds	r1, #69	; 0x45
 8009e0e:	700a      	strb	r2, [r1, #0]
 8009e10:	6819      	ldr	r1, [r3, #0]
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	c920      	ldmia	r1!, {r5}
 8009e16:	0610      	lsls	r0, r2, #24
 8009e18:	d402      	bmi.n	8009e20 <_printf_i+0x16c>
 8009e1a:	0650      	lsls	r0, r2, #25
 8009e1c:	d500      	bpl.n	8009e20 <_printf_i+0x16c>
 8009e1e:	b2ad      	uxth	r5, r5
 8009e20:	6019      	str	r1, [r3, #0]
 8009e22:	07d3      	lsls	r3, r2, #31
 8009e24:	d502      	bpl.n	8009e2c <_printf_i+0x178>
 8009e26:	2320      	movs	r3, #32
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	2710      	movs	r7, #16
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	d1a9      	bne.n	8009d86 <_printf_i+0xd2>
 8009e32:	2220      	movs	r2, #32
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	4393      	bics	r3, r2
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	e7a4      	b.n	8009d86 <_printf_i+0xd2>
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	680d      	ldr	r5, [r1, #0]
 8009e40:	1d10      	adds	r0, r2, #4
 8009e42:	6949      	ldr	r1, [r1, #20]
 8009e44:	6018      	str	r0, [r3, #0]
 8009e46:	6813      	ldr	r3, [r2, #0]
 8009e48:	062e      	lsls	r6, r5, #24
 8009e4a:	d501      	bpl.n	8009e50 <_printf_i+0x19c>
 8009e4c:	6019      	str	r1, [r3, #0]
 8009e4e:	e002      	b.n	8009e56 <_printf_i+0x1a2>
 8009e50:	066d      	lsls	r5, r5, #25
 8009e52:	d5fb      	bpl.n	8009e4c <_printf_i+0x198>
 8009e54:	8019      	strh	r1, [r3, #0]
 8009e56:	2300      	movs	r3, #0
 8009e58:	9e04      	ldr	r6, [sp, #16]
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	e7c0      	b.n	8009de0 <_printf_i+0x12c>
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	1d11      	adds	r1, r2, #4
 8009e62:	6019      	str	r1, [r3, #0]
 8009e64:	6816      	ldr	r6, [r2, #0]
 8009e66:	2100      	movs	r1, #0
 8009e68:	0030      	movs	r0, r6
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	f000 f858 	bl	8009f20 <memchr>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d001      	beq.n	8009e78 <_printf_i+0x1c4>
 8009e74:	1b80      	subs	r0, r0, r6
 8009e76:	6060      	str	r0, [r4, #4]
 8009e78:	6863      	ldr	r3, [r4, #4]
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9a04      	ldr	r2, [sp, #16]
 8009e80:	7013      	strb	r3, [r2, #0]
 8009e82:	e7ad      	b.n	8009de0 <_printf_i+0x12c>
 8009e84:	0032      	movs	r2, r6
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	9906      	ldr	r1, [sp, #24]
 8009e8a:	9805      	ldr	r0, [sp, #20]
 8009e8c:	9d07      	ldr	r5, [sp, #28]
 8009e8e:	47a8      	blx	r5
 8009e90:	3001      	adds	r0, #1
 8009e92:	d0af      	beq.n	8009df4 <_printf_i+0x140>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	079b      	lsls	r3, r3, #30
 8009e98:	d415      	bmi.n	8009ec6 <_printf_i+0x212>
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	68e0      	ldr	r0, [r4, #12]
 8009e9e:	4298      	cmp	r0, r3
 8009ea0:	daaa      	bge.n	8009df8 <_printf_i+0x144>
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	e7a8      	b.n	8009df8 <_printf_i+0x144>
 8009ea6:	0022      	movs	r2, r4
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	9906      	ldr	r1, [sp, #24]
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	9e07      	ldr	r6, [sp, #28]
 8009eb0:	3219      	adds	r2, #25
 8009eb2:	47b0      	blx	r6
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d09d      	beq.n	8009df4 <_printf_i+0x140>
 8009eb8:	3501      	adds	r5, #1
 8009eba:	68e3      	ldr	r3, [r4, #12]
 8009ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dcf0      	bgt.n	8009ea6 <_printf_i+0x1f2>
 8009ec4:	e7e9      	b.n	8009e9a <_printf_i+0x1e6>
 8009ec6:	2500      	movs	r5, #0
 8009ec8:	e7f7      	b.n	8009eba <_printf_i+0x206>
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	0800ac79 	.word	0x0800ac79
 8009ed0:	0800ac8a 	.word	0x0800ac8a

08009ed4 <memmove>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4288      	cmp	r0, r1
 8009ed8:	d902      	bls.n	8009ee0 <memmove+0xc>
 8009eda:	188b      	adds	r3, r1, r2
 8009edc:	4298      	cmp	r0, r3
 8009ede:	d303      	bcc.n	8009ee8 <memmove+0x14>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e007      	b.n	8009ef4 <memmove+0x20>
 8009ee4:	5c8b      	ldrb	r3, [r1, r2]
 8009ee6:	5483      	strb	r3, [r0, r2]
 8009ee8:	3a01      	subs	r2, #1
 8009eea:	d2fb      	bcs.n	8009ee4 <memmove+0x10>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	5ccc      	ldrb	r4, [r1, r3]
 8009ef0:	54c4      	strb	r4, [r0, r3]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d1fa      	bne.n	8009eee <memmove+0x1a>
 8009ef8:	e7f8      	b.n	8009eec <memmove+0x18>
	...

08009efc <_sbrk_r>:
 8009efc:	2300      	movs	r3, #0
 8009efe:	b570      	push	{r4, r5, r6, lr}
 8009f00:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_sbrk_r+0x20>)
 8009f02:	0004      	movs	r4, r0
 8009f04:	0008      	movs	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f6 ffda 	bl	8000ec0 <_sbrk>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d103      	bne.n	8009f18 <_sbrk_r+0x1c>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d000      	beq.n	8009f18 <_sbrk_r+0x1c>
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	bd70      	pop	{r4, r5, r6, pc}
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	20000a58 	.word	0x20000a58

08009f20 <memchr>:
 8009f20:	b2c9      	uxtb	r1, r1
 8009f22:	1882      	adds	r2, r0, r2
 8009f24:	4290      	cmp	r0, r2
 8009f26:	d101      	bne.n	8009f2c <memchr+0xc>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	4770      	bx	lr
 8009f2c:	7803      	ldrb	r3, [r0, #0]
 8009f2e:	428b      	cmp	r3, r1
 8009f30:	d0fb      	beq.n	8009f2a <memchr+0xa>
 8009f32:	3001      	adds	r0, #1
 8009f34:	e7f6      	b.n	8009f24 <memchr+0x4>

08009f36 <memcpy>:
 8009f36:	2300      	movs	r3, #0
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d100      	bne.n	8009f40 <memcpy+0xa>
 8009f3e:	bd10      	pop	{r4, pc}
 8009f40:	5ccc      	ldrb	r4, [r1, r3]
 8009f42:	54c4      	strb	r4, [r0, r3]
 8009f44:	3301      	adds	r3, #1
 8009f46:	e7f8      	b.n	8009f3a <memcpy+0x4>

08009f48 <_realloc_r>:
 8009f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f4a:	0007      	movs	r7, r0
 8009f4c:	000e      	movs	r6, r1
 8009f4e:	0014      	movs	r4, r2
 8009f50:	2900      	cmp	r1, #0
 8009f52:	d105      	bne.n	8009f60 <_realloc_r+0x18>
 8009f54:	0011      	movs	r1, r2
 8009f56:	f7ff fc49 	bl	80097ec <_malloc_r>
 8009f5a:	0005      	movs	r5, r0
 8009f5c:	0028      	movs	r0, r5
 8009f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d103      	bne.n	8009f6c <_realloc_r+0x24>
 8009f64:	f7ff fbd6 	bl	8009714 <_free_r>
 8009f68:	0025      	movs	r5, r4
 8009f6a:	e7f7      	b.n	8009f5c <_realloc_r+0x14>
 8009f6c:	f000 f81b 	bl	8009fa6 <_malloc_usable_size_r>
 8009f70:	9001      	str	r0, [sp, #4]
 8009f72:	4284      	cmp	r4, r0
 8009f74:	d803      	bhi.n	8009f7e <_realloc_r+0x36>
 8009f76:	0035      	movs	r5, r6
 8009f78:	0843      	lsrs	r3, r0, #1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	d3ee      	bcc.n	8009f5c <_realloc_r+0x14>
 8009f7e:	0021      	movs	r1, r4
 8009f80:	0038      	movs	r0, r7
 8009f82:	f7ff fc33 	bl	80097ec <_malloc_r>
 8009f86:	1e05      	subs	r5, r0, #0
 8009f88:	d0e8      	beq.n	8009f5c <_realloc_r+0x14>
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	0022      	movs	r2, r4
 8009f8e:	429c      	cmp	r4, r3
 8009f90:	d900      	bls.n	8009f94 <_realloc_r+0x4c>
 8009f92:	001a      	movs	r2, r3
 8009f94:	0031      	movs	r1, r6
 8009f96:	0028      	movs	r0, r5
 8009f98:	f7ff ffcd 	bl	8009f36 <memcpy>
 8009f9c:	0031      	movs	r1, r6
 8009f9e:	0038      	movs	r0, r7
 8009fa0:	f7ff fbb8 	bl	8009714 <_free_r>
 8009fa4:	e7da      	b.n	8009f5c <_realloc_r+0x14>

08009fa6 <_malloc_usable_size_r>:
 8009fa6:	1f0b      	subs	r3, r1, #4
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	1f18      	subs	r0, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	da01      	bge.n	8009fb4 <_malloc_usable_size_r+0xe>
 8009fb0:	580b      	ldr	r3, [r1, r0]
 8009fb2:	18c0      	adds	r0, r0, r3
 8009fb4:	4770      	bx	lr
	...

08009fb8 <_init>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr

08009fc4 <_fini>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr
