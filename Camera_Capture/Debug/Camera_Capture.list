
Camera_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000176c  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08006148  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08006148  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd98  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb4  00000000  00000000  0002de13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013823  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f93a  00000000  00000000  00044b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077414  00000000  00000000  00054445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ce0  00000000  00000000  000cb85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ce53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049a4 	.word	0x080049a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080049a4 	.word	0x080049a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fedc 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80e 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f922 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f8f0 	bl	800069c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004bc:	f000 f8b6 	bl	800062c <MX_SPI1_Init>
  MX_I2C1_Init();
 80004c0:	f000 f874 	bl	80005ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ArduCAM_Init(OV2640);
 80004c4:	2005      	movs	r0, #5
 80004c6:	f000 faef 	bl	8000aa8 <ArduCAM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SingleCapTransfer();
 80004ca:	f000 fc29 	bl	8000d20 <SingleCapTransfer>
  {
 80004ce:	e7fc      	b.n	80004ca <main+0x22>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b09d      	sub	sp, #116	; 0x74
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2438      	movs	r4, #56	; 0x38
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2338      	movs	r3, #56	; 0x38
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f004 fa33 	bl	800494c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2324      	movs	r3, #36	; 0x24
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f004 fa2b 	bl	800494c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2324      	movs	r3, #36	; 0x24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f004 fa24 	bl	800494c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <SystemClock_Config+0xd4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xd8>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <SystemClock_Config+0xd4>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	22a0      	movs	r2, #160	; 0xa0
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f001 ff64 	bl	8002408 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000544:	f000 f962 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2124      	movs	r1, #36	; 0x24
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f002 fb0f 	bl	8002b90 <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f000 f949 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800057a:	003b      	movs	r3, r7
 800057c:	220a      	movs	r2, #10
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000586:	003b      	movs	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	003b      	movs	r3, r7
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fd22 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000598:	f000 f938 	bl	800080c <Error_Handler>
  }
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b01d      	add	sp, #116	; 0x74
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_I2C1_Init+0x78>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <MX_I2C1_Init+0x7c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_I2C1_Init+0x78>)
 80005b8:	22e1      	movs	r2, #225	; 0xe1
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_I2C1_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_I2C1_Init+0x78>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_I2C1_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_I2C1_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_I2C1_Init+0x78>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_I2C1_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x78>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f918 	bl	8001820 <HAL_I2C_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f90a 	bl	800080c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x78>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fe6b 	bl	80022d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000606:	f000 f901 	bl	800080c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x78>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f001 feae 	bl	8002370 <HAL_I2CEx_ConfigDigitalFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 f8f8 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	2000002c 	.word	0x2000002c
 8000628:	40005400 	.word	0x40005400

0800062c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_SPI1_Init+0x68>)
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <MX_SPI1_Init+0x6c>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_SPI1_Init+0x68>)
 8000638:	2282      	movs	r2, #130	; 0x82
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_SPI1_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_SPI1_Init+0x68>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_SPI1_Init+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_SPI1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_SPI1_Init+0x68>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_SPI1_Init+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_SPI1_Init+0x68>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_SPI1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_SPI1_Init+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_SPI1_Init+0x68>)
 8000678:	2207      	movs	r2, #7
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_SPI1_Init+0x68>)
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fe38 	bl	80032f4 <HAL_SPI_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 f8c0 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000080 	.word	0x20000080
 8000698:	40013000 	.word	0x40013000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	22e1      	movs	r2, #225	; 0xe1
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 fc31 	bl	8003f48 <HAL_UART_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f88f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	; 0x2c
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	2414      	movs	r4, #20
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f004 f91d 	bl	800494c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <MX_GPIO_Init+0x108>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x108>)
 8000718:	2104      	movs	r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <MX_GPIO_Init+0x108>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2204      	movs	r2, #4
 8000724:	4013      	ands	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <MX_GPIO_Init+0x108>)
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <MX_GPIO_Init+0x108>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <MX_GPIO_Init+0x108>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b30      	ldr	r3, [pc, #192]	; (8000804 <MX_GPIO_Init+0x108>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0x108>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0x108>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0x108>)
 800075c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0x108>)
 8000760:	2102      	movs	r1, #2
 8000762:	430a      	orrs	r2, r1
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_GPIO_Init+0x108>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	2202      	movs	r2, #2
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f832 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_GPIO_Init+0x10c>)
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	0018      	movs	r0, r3
 8000788:	f001 f82c 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0192      	lsls	r2, r2, #6
 8000792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2284      	movs	r2, #132	; 0x84
 8000798:	0392      	lsls	r2, r2, #14
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0x10c>)
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f000 fea5 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2220      	movs	r2, #32
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c6:	193a      	adds	r2, r7, r4
 80007c8:	23a0      	movs	r3, #160	; 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fe92 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2220      	movs	r2, #32
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <MX_GPIO_Init+0x10c>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f000 fe7f 	bl	80014f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	; 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	50000800 	.word	0x50000800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <HAL_MspInit+0x24>)
 800081e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x24>)
 8000822:	2101      	movs	r1, #1
 8000824:	430a      	orrs	r2, r1
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_MspInit+0x24>)
 800082a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_MspInit+0x24>)
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	0549      	lsls	r1, r1, #21
 8000832:	430a      	orrs	r2, r1
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	240c      	movs	r4, #12
 800084a:	193b      	adds	r3, r7, r4
 800084c:	0018      	movs	r0, r3
 800084e:	2314      	movs	r3, #20
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f004 f87a 	bl	800494c <memset>
  if(hi2c->Instance==I2C1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_I2C_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_I2C_MspInit+0x80>)
 8000864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_I2C_MspInit+0x80>)
 8000868:	2102      	movs	r1, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_I2C_MspInit+0x80>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	2202      	movs	r2, #2
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	22c0      	movs	r2, #192	; 0xc0
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2212      	movs	r2, #18
 8000886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2203      	movs	r2, #3
 8000892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2201      	movs	r2, #1
 8000898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	187b      	adds	r3, r7, r1
 800089c:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <HAL_I2C_MspInit+0x84>)
 800089e:	0019      	movs	r1, r3
 80008a0:	0010      	movs	r0, r2
 80008a2:	f000 fe29 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_I2C_MspInit+0x80>)
 80008a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_I2C_MspInit+0x80>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0389      	lsls	r1, r1, #14
 80008b0:	430a      	orrs	r2, r1
 80008b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	; 0x24
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40021000 	.word	0x40021000
 80008c4:	50000400 	.word	0x50000400

080008c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b08b      	sub	sp, #44	; 0x2c
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	2414      	movs	r4, #20
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2314      	movs	r3, #20
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f004 f836 	bl	800494c <memset>
  if(hspi->Instance==SPI1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <HAL_SPI_MspInit+0xc0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d14a      	bne.n	8000980 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <HAL_SPI_MspInit+0xc4>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <HAL_SPI_MspInit+0xc4>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0149      	lsls	r1, r1, #5
 80008f4:	430a      	orrs	r2, r1
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_SPI_MspInit+0xc4>)
 80008fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_SPI_MspInit+0xc4>)
 80008fe:	2101      	movs	r1, #1
 8000900:	430a      	orrs	r2, r1
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_SPI_MspInit+0xc4>)
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	2201      	movs	r2, #1
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_SPI_MspInit+0xc4>)
 8000912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_SPI_MspInit+0xc4>)
 8000916:	2102      	movs	r1, #2
 8000918:	430a      	orrs	r2, r1
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_SPI_MspInit+0xc4>)
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	2202      	movs	r2, #2
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	22c0      	movs	r2, #192	; 0xc0
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2203      	movs	r2, #3
 800093e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	193a      	adds	r2, r7, r4
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fdd2 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2208      	movs	r2, #8
 800095a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2202      	movs	r2, #2
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_SPI_MspInit+0xc8>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f000 fdbc 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00b      	add	sp, #44	; 0x2c
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40013000 	.word	0x40013000
 800098c:	40021000 	.word	0x40021000
 8000990:	50000400 	.word	0x50000400

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	240c      	movs	r4, #12
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	2314      	movs	r3, #20
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f003 ffd0 	bl	800494c <memset>
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d129      	bne.n	8000a0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0289      	lsls	r1, r1, #10
 80009c0:	430a      	orrs	r2, r1
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d4:	2201      	movs	r2, #1
 80009d6:	4013      	ands	r3, r2
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	220c      	movs	r2, #12
 80009e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2202      	movs	r2, #2
 80009e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2203      	movs	r2, #3
 80009f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2204      	movs	r2, #4
 80009fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	187a      	adds	r2, r7, r1
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fd77 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b009      	add	sp, #36	; 0x24
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 fc66 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a58:	f7ff fff7 	bl	8000a4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	; (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f003 ff6b 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd0f 	bl	80004a8 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a98:	08006138 	.word	0x08006138
  ldr r2, =_sbss
 8000a9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aa0:	2000016c 	.word	0x2000016c

08000aa4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_COMP_IRQHandler>
	...

08000aa8 <ArduCAM_Init>:

uint8_t vid, pid;


void ArduCAM_Init(byte model) 
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	0002      	movs	r2, r0
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	701a      	strb	r2, [r3, #0]
	wrSensorReg8_8(0xff, 0x01);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	20ff      	movs	r0, #255	; 0xff
 8000ab8:	f000 fa5a 	bl	8000f70 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000abc:	4b7e      	ldr	r3, [pc, #504]	; (8000cb8 <ArduCAM_Init+0x210>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fa89 	bl	8000fd8 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000ac6:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <ArduCAM_Init+0x214>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	200b      	movs	r0, #11
 8000acc:	f000 fa84 	bl	8000fd8 <rdSensorReg8_8>
    if ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 ))){
 8000ad0:	4b79      	ldr	r3, [pc, #484]	; (8000cb8 <ArduCAM_Init+0x210>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b26      	cmp	r3, #38	; 0x26
 8000ad6:	d00b      	beq.n	8000af0 <ArduCAM_Init+0x48>
 8000ad8:	4b78      	ldr	r3, [pc, #480]	; (8000cbc <ArduCAM_Init+0x214>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b41      	cmp	r3, #65	; 0x41
 8000ade:	d103      	bne.n	8000ae8 <ArduCAM_Init+0x40>
 8000ae0:	4b76      	ldr	r3, [pc, #472]	; (8000cbc <ArduCAM_Init+0x214>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b42      	cmp	r3, #66	; 0x42
 8000ae6:	d003      	beq.n	8000af0 <ArduCAM_Init+0x48>
      //Serial.println(F("ACK CMD Can't find OV2640 module! END"));
    	HAL_Delay(10000);
 8000ae8:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <ArduCAM_Init+0x218>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fc2c 	bl	8001348 <HAL_Delay>
    }
    else{
      //Serial.println(F("ACK CMD OV2640 detected. END"));break;
    }

	switch (model)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d00d      	beq.n	8000b14 <ArduCAM_Init+0x6c>
 8000af8:	dd00      	ble.n	8000afc <ArduCAM_Init+0x54>
 8000afa:	e0d7      	b.n	8000cac <ArduCAM_Init+0x204>
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d033      	beq.n	8000b68 <ArduCAM_Init+0xc0>
 8000b00:	dd00      	ble.n	8000b04 <ArduCAM_Init+0x5c>
 8000b02:	e0d3      	b.n	8000cac <ArduCAM_Init+0x204>
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d066      	beq.n	8000bd6 <ArduCAM_Init+0x12e>
 8000b08:	da00      	bge.n	8000b0c <ArduCAM_Init+0x64>
 8000b0a:	e0cf      	b.n	8000cac <ArduCAM_Init+0x204>
 8000b0c:	3b05      	subs	r3, #5
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d900      	bls.n	8000b14 <ArduCAM_Init+0x6c>
 8000b12:	e0cb      	b.n	8000cac <ArduCAM_Init+0x204>
  {
    case OV2640:
    case OV9650:
    case OV9655:
	{		
		wrSensorReg8_8(0xff, 0x01);
 8000b14:	2101      	movs	r1, #1
 8000b16:	20ff      	movs	r0, #255	; 0xff
 8000b18:	f000 fa2a 	bl	8000f70 <wrSensorReg8_8>
		wrSensorReg8_8(0x12, 0x80);
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	2012      	movs	r0, #18
 8000b20:	f000 fa26 	bl	8000f70 <wrSensorReg8_8>
		if(m_fmt == JPEG)
 8000b24:	4b67      	ldr	r3, [pc, #412]	; (8000cc4 <ArduCAM_Init+0x21c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d118      	bne.n	8000b5e <ArduCAM_Init+0xb6>
		{
			wrSensorRegs8_8(OV2640_JPEG_INIT);
 8000b2c:	4b66      	ldr	r3, [pc, #408]	; (8000cc8 <ArduCAM_Init+0x220>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fa9e 	bl	8001070 <wrSensorRegs8_8>
			wrSensorRegs8_8(OV2640_YUV422);
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <ArduCAM_Init+0x224>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fa9a 	bl	8001070 <wrSensorRegs8_8>
			wrSensorRegs8_8(OV2640_JPEG);
 8000b3c:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <ArduCAM_Init+0x228>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fa96 	bl	8001070 <wrSensorRegs8_8>
			wrSensorReg8_8(0xff, 0x01);
 8000b44:	2101      	movs	r1, #1
 8000b46:	20ff      	movs	r0, #255	; 0xff
 8000b48:	f000 fa12 	bl	8000f70 <wrSensorReg8_8>
			wrSensorReg8_8(0x15, 0x00);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2015      	movs	r0, #21
 8000b50:	f000 fa0e 	bl	8000f70 <wrSensorReg8_8>
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000b54:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <ArduCAM_Init+0x22c>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fa8a 	bl	8001070 <wrSensorRegs8_8>
		}
		else
		{
			wrSensorRegs8_8(OV2640_QVGA);
		}
		break;
 8000b5c:	e0a7      	b.n	8000cae <ArduCAM_Init+0x206>
			wrSensorRegs8_8(OV2640_QVGA);
 8000b5e:	4b5e      	ldr	r3, [pc, #376]	; (8000cd8 <ArduCAM_Init+0x230>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fa85 	bl	8001070 <wrSensorRegs8_8>
		break;
 8000b66:	e0a2      	b.n	8000cae <ArduCAM_Init+0x206>
	}
		case OV5640:
		{
			if (m_fmt == JPEG)
 8000b68:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <ArduCAM_Init+0x21c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d11b      	bne.n	8000ba8 <ArduCAM_Init+0x100>
			{
				wrSensorReg16_8(0x3103, 0x11);
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <ArduCAM_Init+0x234>)
 8000b72:	2111      	movs	r1, #17
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fabb 	bl	80010f0 <wrSensorReg16_8>
				wrSensorReg16_8(0x3008, 0x82);
 8000b7a:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <ArduCAM_Init+0x238>)
 8000b7c:	2182      	movs	r1, #130	; 0x82
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fab6 	bl	80010f0 <wrSensorReg16_8>
				wrSensorRegs16_8(OV5640YUV_Sensor_Dvp_Init);	
 8000b84:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <ArduCAM_Init+0x23c>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fae0 	bl	800114c <wrSensorRegs16_8>
				wrSensorRegs16_8(OV5640_JPEG_QSXGA);
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <ArduCAM_Init+0x240>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fadc 	bl	800114c <wrSensorRegs16_8>
				wrSensorRegs16_8(OV5640_QSXGA2QVGA);
 8000b94:	4b55      	ldr	r3, [pc, #340]	; (8000cec <ArduCAM_Init+0x244>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fad8 	bl	800114c <wrSensorRegs16_8>
			  wrSensorReg16_8(0x4407, 0x04);
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <ArduCAM_Init+0x248>)
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 faa5 	bl	80010f0 <wrSensorReg16_8>
 8000ba6:	e011      	b.n	8000bcc <ArduCAM_Init+0x124>

			}
			else
			{
				wrSensorReg16_8(0x3103, 0x11);
 8000ba8:	4b4c      	ldr	r3, [pc, #304]	; (8000cdc <ArduCAM_Init+0x234>)
 8000baa:	2111      	movs	r1, #17
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fa9f 	bl	80010f0 <wrSensorReg16_8>
				wrSensorReg16_8(0x3008, 0x82);
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <ArduCAM_Init+0x238>)
 8000bb4:	2182      	movs	r1, #130	; 0x82
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fa9a 	bl	80010f0 <wrSensorReg16_8>
				wrSensorRegs16_8(OV5640YUV_Sensor_Dvp_Init);
 8000bbc:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <ArduCAM_Init+0x23c>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fac4 	bl	800114c <wrSensorRegs16_8>
				wrSensorRegs16_8(OV5640_RGB_QVGA);
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <ArduCAM_Init+0x24c>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fac0 	bl	800114c <wrSensorRegs16_8>
			} 
			write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);   //VSYNC is active HIGH
 8000bcc:	2102      	movs	r1, #2
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f954 	bl	8000e7c <write_reg>
			 break;
 8000bd4:	e06b      	b.n	8000cae <ArduCAM_Init+0x206>
		}
		case OV5642:
      {
        wrSensorReg16_8(0x3008, 0x80);
 8000bd6:	4b42      	ldr	r3, [pc, #264]	; (8000ce0 <ArduCAM_Init+0x238>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 fa88 	bl	80010f0 <wrSensorReg16_8>
        wrSensorRegs16_8(OV5642_QVGA_Preview);
 8000be0:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <ArduCAM_Init+0x250>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fab2 	bl	800114c <wrSensorRegs16_8>
      
        if (m_fmt == JPEG)
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <ArduCAM_Init+0x21c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d11c      	bne.n	8000c2a <ArduCAM_Init+0x182>
        {
          wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA);
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <ArduCAM_Init+0x254>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 faaa 	bl	800114c <wrSensorRegs16_8>
          wrSensorRegs16_8(ov5642_320x240);
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <ArduCAM_Init+0x258>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 faa6 	bl	800114c <wrSensorRegs16_8>
          wrSensorReg16_8(0x3818, 0xa8);
 8000c00:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <ArduCAM_Init+0x25c>)
 8000c02:	21a8      	movs	r1, #168	; 0xa8
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 fa73 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x3621, 0x10);
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <ArduCAM_Init+0x260>)
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fa6e 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x3801, 0xb0);
 8000c14:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <ArduCAM_Init+0x264>)
 8000c16:	21b0      	movs	r1, #176	; 0xb0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fa69 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x4407, 0x04);
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <ArduCAM_Init+0x248>)
 8000c20:	2104      	movs	r1, #4
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fa64 	bl	80010f0 <wrSensorReg16_8>
 8000c28:	e03b      	b.n	8000ca2 <ArduCAM_Init+0x1fa>
        }
        else
        {
        	byte reg_val;
          wrSensorReg16_8(0x4740, 0x21);
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <ArduCAM_Init+0x268>)
 8000c2c:	2121      	movs	r1, #33	; 0x21
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa5e 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x501e, 0x2a);
 8000c34:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <ArduCAM_Init+0x26c>)
 8000c36:	212a      	movs	r1, #42	; 0x2a
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fa59 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x5002, 0xf8);
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <ArduCAM_Init+0x270>)
 8000c40:	21f8      	movs	r1, #248	; 0xf8
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fa54 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x501f, 0x01);
 8000c48:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <ArduCAM_Init+0x274>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f000 fa4f 	bl	80010f0 <wrSensorReg16_8>
          wrSensorReg16_8(0x4300, 0x61);
 8000c52:	2386      	movs	r3, #134	; 0x86
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	2161      	movs	r1, #97	; 0x61
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fa49 	bl	80010f0 <wrSensorReg16_8>
          rdSensorReg16_8(0x3818, &reg_val);
 8000c5e:	240f      	movs	r4, #15
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <ArduCAM_Init+0x25c>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f000 faac 	bl	80011c4 <rdSensorReg16_8>
          wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff);
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2260      	movs	r2, #96	; 0x60
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	001a      	movs	r2, r3
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <ArduCAM_Init+0x25c>)
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fa37 	bl	80010f0 <wrSensorReg16_8>
          rdSensorReg16_8(0x3621, &reg_val);
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <ArduCAM_Init+0x260>)
 8000c86:	0019      	movs	r1, r3
 8000c88:	0010      	movs	r0, r2
 8000c8a:	f000 fa9b 	bl	80011c4 <rdSensorReg16_8>
          wrSensorReg16_8(0x3621, reg_val & 0xdf);
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001a      	movs	r2, r3
 8000c94:	23df      	movs	r3, #223	; 0xdf
 8000c96:	4013      	ands	r3, r2
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <ArduCAM_Init+0x260>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 fa27 	bl	80010f0 <wrSensorReg16_8>
        }
				write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);   //VSYNC is active HIGH					
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8e9 	bl	8000e7c <write_reg>
				
			  break;
 8000caa:	e000      	b.n	8000cae <ArduCAM_Init+0x206>
      }
     default:
     break;
 8000cac:	46c0      	nop			; (mov r8, r8)
  }
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000164 	.word	0x20000164
 8000cbc:	20000165 	.word	0x20000165
 8000cc0:	00002710 	.word	0x00002710
 8000cc4:	20000005 	.word	0x20000005
 8000cc8:	08004ce8 	.word	0x08004ce8
 8000ccc:	08004fe4 	.word	0x08004fe4
 8000cd0:	0800500c 	.word	0x0800500c
 8000cd4:	08005030 	.word	0x08005030
 8000cd8:	080049e0 	.word	0x080049e0
 8000cdc:	00003103 	.word	0x00003103
 8000ce0:	00003008 	.word	0x00003008
 8000ce4:	08005b7c 	.word	0x08005b7c
 8000ce8:	08005fe8 	.word	0x08005fe8
 8000cec:	08006078 	.word	0x08006078
 8000cf0:	00004407 	.word	0x00004407
 8000cf4:	08005fc0 	.word	0x08005fc0
 8000cf8:	0800513c 	.word	0x0800513c
 8000cfc:	08005a5c 	.word	0x08005a5c
 8000d00:	080050d0 	.word	0x080050d0
 8000d04:	00003818 	.word	0x00003818
 8000d08:	00003621 	.word	0x00003621
 8000d0c:	00003801 	.word	0x00003801
 8000d10:	00004740 	.word	0x00004740
 8000d14:	0000501e 	.word	0x0000501e
 8000d18:	00005002 	.word	0x00005002
 8000d1c:	0000501f 	.word	0x0000501f

08000d20 <SingleCapTransfer>:

void SingleCapTransfer(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	flush_fifo();
 8000d24:	f000 f8c3 	bl	8000eae <flush_fifo>
	clear_fifo_flag();
 8000d28:	f000 f8d3 	bl	8000ed2 <clear_fifo_flag>
	start_capture();
 8000d2c:	f000 f8c8 	bl	8000ec0 <start_capture>
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){;}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	2108      	movs	r1, #8
 8000d34:	2041      	movs	r0, #65	; 0x41
 8000d36:	f000 f8fb 	bl	8000f30 <get_bit>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d0f9      	beq.n	8000d32 <SingleCapTransfer+0x12>
	length= read_fifo_length();
 8000d3e:	f000 f8d1 	bl	8000ee4 <read_fifo_length>
 8000d42:	0002      	movs	r2, r0
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <SingleCapTransfer+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000160 	.word	0x20000160

08000d54 <bus_read>:
    m_fmt = JPEG;
}


uint8_t bus_read(uint8_t address)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	701a      	strb	r2, [r3, #0]
    uint8_t txData = address;
 8000d60:	240f      	movs	r4, #15
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	1dfa      	adds	r2, r7, #7
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	701a      	strb	r2, [r3, #0]
    uint8_t rxData = 0x00;
 8000d6a:	230e      	movs	r3, #14
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]

    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <bus_read+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fd33 	bl	80017e4 <HAL_GPIO_WritePin>

    // Envoi de l'adresse via SPI
    if (HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY) != HAL_OK)
 8000d7e:	2301      	movs	r3, #1
 8000d80:	425b      	negs	r3, r3
 8000d82:	1939      	adds	r1, r7, r4
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <bus_read+0x90>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	f002 fb48 	bl	800341c <HAL_SPI_Transmit>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d007      	beq.n	8000da0 <bus_read+0x4c>
    {
        HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET); // Libère le CS en cas d'erreur
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <bus_read+0x8c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	2120      	movs	r1, #32
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fd24 	bl	80017e4 <HAL_GPIO_WritePin>
        return 0xFF;  // Erreur de transmission
 8000d9c:	23ff      	movs	r3, #255	; 0xff
 8000d9e:	e01a      	b.n	8000dd6 <bus_read+0x82>
    }

    //HAL_Delay(1);

    // Lecture de la donnée via SPI
    if (HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY) != HAL_OK)
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	220e      	movs	r2, #14
 8000da6:	18b9      	adds	r1, r7, r2
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <bus_read+0x90>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	f002 fc94 	bl	80036d8 <HAL_SPI_Receive>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d007      	beq.n	8000dc4 <bus_read+0x70>
    {
        HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET); // Libère le CS en cas d'erreur
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <bus_read+0x8c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	2120      	movs	r1, #32
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fd12 	bl	80017e4 <HAL_GPIO_WritePin>
        return 0xFF;  // Erreur de réception
 8000dc0:	23ff      	movs	r3, #255	; 0xff
 8000dc2:	e008      	b.n	8000dd6 <bus_read+0x82>
    }

    //HAL_Delay(1);

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <bus_read+0x8c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fd0a 	bl	80017e4 <HAL_GPIO_WritePin>

    return rxData;
 8000dd0:	230e      	movs	r3, #14
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	50000800 	.word	0x50000800
 8000de4:	20000080 	.word	0x20000080

08000de8 <bus_write>:


uint8_t bus_write(uint8_t address, uint8_t value)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1dbb      	adds	r3, r7, #6
 8000df6:	1c0a      	adds	r2, r1, #0
 8000df8:	701a      	strb	r2, [r3, #0]
    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <bus_write+0x5c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2120      	movs	r1, #32
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 fcef 	bl	80017e4 <HAL_GPIO_WritePin>

    // Attente de 10 millisecondes
    HAL_Delay(10);
 8000e06:	200a      	movs	r0, #10
 8000e08:	f000 fa9e 	bl	8001348 <HAL_Delay>

    // Envoi de l'adresse via SPI
    HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	1df9      	adds	r1, r7, #7
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <bus_write+0x60>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	f002 fb01 	bl	800341c <HAL_SPI_Transmit>

    // Envoi de la valeur via SPI
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	1db9      	adds	r1, r7, #6
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <bus_write+0x60>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	f002 fafa 	bl	800341c <HAL_SPI_Transmit>

    // Attente de 10 millisecondes
    HAL_Delay(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f000 fa8d 	bl	8001348 <HAL_Delay>

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <bus_write+0x5c>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fcd5 	bl	80017e4 <HAL_GPIO_WritePin>

    return 1;  // Indique que l'opération s'est bien déroulée
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	50000800 	.word	0x50000800
 8000e48:	20000080 	.word	0x20000080

08000e4c <read_reg>:


uint8_t read_reg(uint8_t addr)
{
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	0002      	movs	r2, r0
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	227f      	movs	r2, #127	; 0x7f
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	250f      	movs	r5, #15
 8000e64:	197c      	adds	r4, r7, r5
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff74 	bl	8000d54 <bus_read>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	7023      	strb	r3, [r4, #0]
	return data;
 8000e70:	197b      	adds	r3, r7, r5
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}

08000e7c <write_reg>:


void write_reg(uint8_t addr, uint8_t data)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	1c0a      	adds	r2, r1, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	 bus_write(addr | 0x80, data); 
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	4252      	negs	r2, r2
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	0010      	movs	r0, r2
 8000ea2:	f7ff ffa1 	bl	8000de8 <bus_write>
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}

08000eae <flush_fifo>:
	SPI2_ReadWriteByte(BURST_FIFO_READ);
}


void flush_fifo(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff ffe1 	bl	8000e7c <write_reg>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <start_capture>:

void start_capture(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ffd8 	bl	8000e7c <write_reg>
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f7ff ffcf 	bl	8000e7c <write_reg>
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <read_fifo_length>:

uint32_t read_fifo_length(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 8000eee:	2042      	movs	r0, #66	; 0x42
 8000ef0:	f7ff ffac 	bl	8000e4c <read_reg>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8000ef8:	2043      	movs	r0, #67	; 0x43
 8000efa:	f7ff ffa7 	bl	8000e4c <read_reg>
 8000efe:	0003      	movs	r3, r0
 8000f00:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8000f02:	2044      	movs	r0, #68	; 0x44
 8000f04:	f7ff ffa2 	bl	8000e4c <read_reg>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	4013      	ands	r3, r2
 8000f10:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	0a5b      	lsrs	r3, r3, #9
 8000f24:	60fb      	str	r3, [r7, #12]
	return len;	
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <get_bit>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	0002      	movs	r2, r0
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	1c0a      	adds	r2, r1, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  uint8_t temp;
  temp = read_reg(addr);
 8000f42:	250f      	movs	r5, #15
 8000f44:	197c      	adds	r4, r7, r5
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ff7e 	bl	8000e4c <read_reg>
 8000f50:	0003      	movs	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
  temp = temp & bit;
 8000f54:	0028      	movs	r0, r5
 8000f56:	183b      	adds	r3, r7, r0
 8000f58:	183a      	adds	r2, r7, r0
 8000f5a:	1db9      	adds	r1, r7, #6
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	7809      	ldrb	r1, [r1, #0]
 8000f60:	400a      	ands	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
  return temp;
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	781b      	ldrb	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b004      	add	sp, #16
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}

08000f70 <wrSensorReg8_8>:
      break;
  }
}


byte wrSensorReg8_8(uint8_t regID, uint8_t* regDat) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	0002      	movs	r2, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);  // Temporisation en millisecondes pour laisser le temps au capteur
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f000 f9e2 	bl	8001348 <HAL_Delay>

    // Démarre la transmission en envoyant l'adresse du capteur avec HAL I2C
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <wrSensorReg8_8+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <wrSensorReg8_8+0x64>)
 8000f8e:	2301      	movs	r3, #1
 8000f90:	425b      	negs	r3, r3
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	f000 fcd9 	bl	800194c <HAL_I2C_Master_Transmit>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <wrSensorReg8_8+0x32>
        return 1;  // Échec d'écriture de l'adresse du capteur
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e012      	b.n	8000fc8 <wrSensorReg8_8+0x58>
    }

    HAL_Delay(5);  // Temporisation en microsecondes
 8000fa2:	2005      	movs	r0, #5
 8000fa4:	f000 f9d0 	bl	8001348 <HAL_Delay>

    // Envoie la valeur du registre au capteur
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regDat, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <wrSensorReg8_8+0x60>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b299      	uxth	r1, r3
 8000fae:	003a      	movs	r2, r7
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <wrSensorReg8_8+0x64>)
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f000 fcc7 	bl	800194c <HAL_I2C_Master_Transmit>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <wrSensorReg8_8+0x56>
        return 2;  // Échec d'écriture de la valeur dans le registre
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e000      	b.n	8000fc8 <wrSensorReg8_8+0x58>
    }

    return 0;  // Succès
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	2000002c 	.word	0x2000002c

08000fd8 <rdSensorReg8_8>:


byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	0002      	movs	r2, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);  // Petit délai pour la stabilité du bus
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 f9ae 	bl	8001348 <HAL_Delay>

    // Envoi de l'adresse du capteur en mode écriture et ID du registre
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY) != HAL_OK)
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <rdSensorReg8_8+0x90>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <rdSensorReg8_8+0x94>)
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f000 fca5 	bl	800194c <HAL_I2C_Master_Transmit>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <rdSensorReg8_8+0x32>
    {
        return 1;  // Erreur lors de l'écriture de l'adresse
 8001006:	2301      	movs	r3, #1
 8001008:	e02a      	b.n	8001060 <rdSensorReg8_8+0x88>
    }

    HAL_Delay(10);  // Délai pour la synchronisation du bus
 800100a:	200a      	movs	r0, #10
 800100c:	f000 f99c 	bl	8001348 <HAL_Delay>

    // Vérification de l'écriture de l'ID du registre
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY) != HAL_OK)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <rdSensorReg8_8+0x90>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b299      	uxth	r1, r3
 8001016:	1dfa      	adds	r2, r7, #7
 8001018:	4814      	ldr	r0, [pc, #80]	; (800106c <rdSensorReg8_8+0x94>)
 800101a:	2301      	movs	r3, #1
 800101c:	425b      	negs	r3, r3
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	f000 fc93 	bl	800194c <HAL_I2C_Master_Transmit>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <rdSensorReg8_8+0x56>
    {
        return 2;  // Erreur lors de l'écriture de l'ID du registre
 800102a:	2302      	movs	r3, #2
 800102c:	e018      	b.n	8001060 <rdSensorReg8_8+0x88>
    }

    HAL_Delay(10);  // Délai pour la synchronisation du bus
 800102e:	200a      	movs	r0, #10
 8001030:	f000 f98a 	bl	8001348 <HAL_Delay>

    // Relance de l'I2C avec l'adresse du capteur en mode lecture
    if (HAL_I2C_Master_Receive(&hi2c1, sensor_addr | 0x01, regDat, 1, HAL_MAX_DELAY) != HAL_OK)
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <rdSensorReg8_8+0x90>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	4313      	orrs	r3, r2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b299      	uxth	r1, r3
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <rdSensorReg8_8+0x94>)
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	f000 fd86 	bl	8001b5c <HAL_I2C_Master_Receive>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <rdSensorReg8_8+0x80>
    {
        return 3;  // Erreur lors de la lecture
 8001054:	2303      	movs	r3, #3
 8001056:	e003      	b.n	8001060 <rdSensorReg8_8+0x88>
    }

    HAL_Delay(10);  // Délai pour s'assurer de la bonne fin de la transaction
 8001058:	200a      	movs	r0, #10
 800105a:	f000 f975 	bl	8001348 <HAL_Delay>

    return 0;  // Lecture réussie
 800105e:	2300      	movs	r3, #0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	2000002c 	.word	0x2000002c

08001070 <wrSensorRegs8_8>:

// I2C Array Write 8-bit address, 8-bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    int err = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    uint16_t reg_addr = 0;
 800107c:	2312      	movs	r3, #18
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
    uint16_t reg_val = 0;
 8001084:	2310      	movs	r3, #16
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	801a      	strh	r2, [r3, #0]
    const struct sensor_reg *next = reglist;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60fb      	str	r3, [r7, #12]

    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001090:	e01f      	b.n	80010d2 <wrSensorRegs8_8+0x62>
    {
        reg_addr = next->reg;
 8001092:	2112      	movs	r1, #18
 8001094:	187b      	adds	r3, r7, r1
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	801a      	strh	r2, [r3, #0]
        reg_val = next->val;
 800109c:	2010      	movs	r0, #16
 800109e:	183b      	adds	r3, r7, r0
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	8852      	ldrh	r2, [r2, #2]
 80010a4:	801a      	strh	r2, [r3, #0]

        err = wrSensorReg8_8(reg_addr, reg_val); // Écriture dans le registre
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	183b      	adds	r3, r7, r0
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	0019      	movs	r1, r3
 80010b2:	0010      	movs	r0, r2
 80010b4:	f7ff ff5c 	bl	8000f70 <wrSensorReg8_8>
 80010b8:	0003      	movs	r3, r0
 80010ba:	617b      	str	r3, [r7, #20]
        if (err != 0)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <wrSensorRegs8_8+0x56>
        {
            return err; // Retourne l'erreur immédiatement si une écriture échoue
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	e010      	b.n	80010e8 <wrSensorRegs8_8+0x78>
        }

        HAL_Delay(1); // Pause de 1 ms pour garantir la stabilité du bus I2C
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f93e 	bl	8001348 <HAL_Delay>

        next++; // Passe au prochain registre
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3304      	adds	r3, #4
 80010d0:	60fb      	str	r3, [r7, #12]
    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 80010d2:	2312      	movs	r3, #18
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	2bff      	cmp	r3, #255	; 0xff
 80010da:	d1da      	bne.n	8001092 <wrSensorRegs8_8+0x22>
 80010dc:	2310      	movs	r3, #16
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d1d5      	bne.n	8001092 <wrSensorRegs8_8+0x22>
    }

    return err; // Retourne 0 si toutes les écritures sont réussies
 80010e6:	697b      	ldr	r3, [r7, #20]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b006      	add	sp, #24
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <wrSensorReg16_8>:

// Fonction d'écriture sur un registre 16 bits adresse, 8 bits données via HAL I2C
byte wrSensorReg16_8(int regID, int regDat)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    uint8_t data[3];

    // Construire l'adresse du registre et les données
    data[0] = (uint8_t)(regID >> 8);  // Partie haute de l'adresse du registre
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	121b      	asrs	r3, r3, #8
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	200c      	movs	r0, #12
 8001102:	183b      	adds	r3, r7, r0
 8001104:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(regID & 0xFF); // Partie basse de l'adresse du registre
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	183b      	adds	r3, r7, r0
 800110c:	705a      	strb	r2, [r3, #1]
    data[2] = (uint8_t)regDat;         // Données à écrire
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	183b      	adds	r3, r7, r0
 8001114:	709a      	strb	r2, [r3, #2]

    // Transmission des données via I2C
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr << 1, data, 3, 1000) != HAL_OK)
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <wrSensorReg16_8+0x54>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	18db      	adds	r3, r3, r3
 800111e:	b299      	uxth	r1, r3
 8001120:	183a      	adds	r2, r7, r0
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <wrSensorReg16_8+0x58>)
 8001124:	23fa      	movs	r3, #250	; 0xfa
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2303      	movs	r3, #3
 800112c:	f000 fc0e 	bl	800194c <HAL_I2C_Master_Transmit>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <wrSensorReg16_8+0x48>
    {
        // Si l'écriture échoue, retourner 0
        return 0;
 8001134:	2300      	movs	r3, #0
 8001136:	e000      	b.n	800113a <wrSensorReg16_8+0x4a>
    }

    return 1;  // Succès
 8001138:	2301      	movs	r3, #1
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000004 	.word	0x20000004
 8001148:	2000002c 	.word	0x2000002c

0800114c <wrSensorRegs16_8>:

// Fonction d'écriture sur un registre 16 bits adresse, 8 bits données via HAL I2C
int wrSensorRegs16_8(const struct sensor_reg reglist[])
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  int err = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  unsigned int reg_addr;
  unsigned char reg_val;
  const struct sensor_reg *next = reglist;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60bb      	str	r3, [r7, #8]

  while ((reg_addr != 0xffff) | (reg_val != 0xff))
 800115c:	e018      	b.n	8001190 <wrSensorRegs16_8+0x44>
  {
    reg_addr =next->reg;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
    reg_val = next->val;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	885a      	ldrh	r2, [r3, #2]
 8001168:	210f      	movs	r1, #15
 800116a:	187b      	adds	r3, r7, r1
 800116c:	701a      	strb	r2, [r3, #0]
    err = wrSensorReg16_8(reg_addr, reg_val);
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	187b      	adds	r3, r7, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	f7ff ffba 	bl	80010f0 <wrSensorReg16_8>
 800117c:	0003      	movs	r3, r0
 800117e:	617b      	str	r3, [r7, #20]
    HAL_Delay(600);
 8001180:	2396      	movs	r3, #150	; 0x96
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	0018      	movs	r0, r3
 8001186:	f000 f8df 	bl	8001348 <HAL_Delay>
    next++;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3304      	adds	r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
  while ((reg_addr != 0xffff) | (reg_val != 0xff))
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <wrSensorRegs16_8+0x74>)
 8001194:	4694      	mov	ip, r2
 8001196:	4463      	add	r3, ip
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4193      	sbcs	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	230f      	movs	r3, #15
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	3bff      	subs	r3, #255	; 0xff
 80011a6:	1e59      	subs	r1, r3, #1
 80011a8:	418b      	sbcs	r3, r1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1d4      	bne.n	800115e <wrSensorRegs16_8+0x12>
  }
  return err;
 80011b4:	697b      	ldr	r3, [r7, #20]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	ffff0001 	.word	0xffff0001

080011c4 <rdSensorReg16_8>:


// Fonction de lecture sur un registre 16 bits adresse, 8 bits données via HAL I2C
byte rdSensorReg16_8(uint16_t regID, uint8_t* regDat)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	0002      	movs	r2, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	801a      	strh	r2, [r3, #0]
    uint8_t data[2];  // Tableau pour stocker l'adresse du registre (16 bits)
    HAL_StatusTypeDef status;

    // Préparer l'adresse du registre (2 octets)
    data[0] = (uint8_t)(regID >> 8);  // Partie haute de l'adresse
 80011d2:	1dbb      	adds	r3, r7, #6
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	200c      	movs	r0, #12
 80011de:	183b      	adds	r3, r7, r0
 80011e0:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(regID & 0xFF); // Partie basse de l'adresse
 80011e2:	1dbb      	adds	r3, r7, #6
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	705a      	strb	r2, [r3, #1]

    // Envoi de l'adresse du registre
    status = HAL_I2C_Master_Transmit(&hi2c1, sensor_addr << 1, data, 2, 1000);
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <rdSensorReg16_8+0x9c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	18db      	adds	r3, r3, r3
 80011f4:	b299      	uxth	r1, r3
 80011f6:	250f      	movs	r5, #15
 80011f8:	197c      	adds	r4, r7, r5
 80011fa:	183a      	adds	r2, r7, r0
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <rdSensorReg16_8+0xa0>)
 80011fe:	23fa      	movs	r3, #250	; 0xfa
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2302      	movs	r3, #2
 8001206:	f000 fba1 	bl	800194c <HAL_I2C_Master_Transmit>
 800120a:	0003      	movs	r3, r0
 800120c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800120e:	197b      	adds	r3, r7, r5
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <rdSensorReg16_8+0x56>
    {
        // Si l'envoi échoue, retour 0
        return 0;
 8001216:	2300      	movs	r3, #0
 8001218:	e01d      	b.n	8001256 <rdSensorReg16_8+0x92>
    }

    HAL_Delay(20);  // Délai après la transmission
 800121a:	2014      	movs	r0, #20
 800121c:	f000 f894 	bl	8001348 <HAL_Delay>

    // Lecture de la donnée à partir du registre
    status = HAL_I2C_Master_Receive(&hi2c1, (sensor_addr << 1) | 0x01, regDat, 1, 1000);
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <rdSensorReg16_8+0x9c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	b21b      	sxth	r3, r3
 8001228:	2201      	movs	r2, #1
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b299      	uxth	r1, r3
 8001230:	250f      	movs	r5, #15
 8001232:	197c      	adds	r4, r7, r5
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <rdSensorReg16_8+0xa0>)
 8001238:	23fa      	movs	r3, #250	; 0xfa
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	f000 fc8c 	bl	8001b5c <HAL_I2C_Master_Receive>
 8001244:	0003      	movs	r3, r0
 8001246:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8001248:	197b      	adds	r3, r7, r5
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <rdSensorReg16_8+0x90>
    {
        // Si la lecture échoue, retour 0
        return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <rdSensorReg16_8+0x92>
    }

    return 1;  // Succès
 8001254:	2301      	movs	r3, #1
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	20000004 	.word	0x20000004
 8001264:	2000002c 	.word	0x2000002c

08001268 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x3c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Init+0x3c>)
 800127a:	2140      	movs	r1, #64	; 0x40
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f811 	bl	80012a8 <HAL_InitTick>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d003      	beq.n	8001292 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e001      	b.n	8001296 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001292:	f7ff fac1 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_InitTick+0x5c>)
 80012b2:	681c      	ldr	r4, [r3, #0]
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_InitTick+0x60>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	0019      	movs	r1, r3
 80012ba:	23fa      	movs	r3, #250	; 0xfa
 80012bc:	0098      	lsls	r0, r3, #2
 80012be:	f7fe ff23 	bl	8000108 <__udivsi3>
 80012c2:	0003      	movs	r3, r0
 80012c4:	0019      	movs	r1, r3
 80012c6:	0020      	movs	r0, r4
 80012c8:	f7fe ff1e 	bl	8000108 <__udivsi3>
 80012cc:	0003      	movs	r3, r0
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 f905 	bl	80014de <HAL_SYSTICK_Config>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e00f      	b.n	80012fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d80b      	bhi.n	80012fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	2301      	movs	r3, #1
 80012e6:	425b      	negs	r3, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 f8e2 	bl	80014b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_InitTick+0x64>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b003      	add	sp, #12
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x1c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	001a      	movs	r2, r3
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x20>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	18d2      	adds	r2, r2, r3
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_IncTick+0x20>)
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000168 	.word	0x20000168

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <HAL_GetTick+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000168 	.word	0x20000168

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff fff0 	bl	8001334 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	001a      	movs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	189b      	adds	r3, r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	f7ff ffe0 	bl	8001334 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	2000000c 	.word	0x2000000c

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	d828      	bhi.n	80013f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <__NVIC_SetPriority+0xd4>)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	33c0      	adds	r3, #192	; 0xc0
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	589b      	ldr	r3, [r3, r2]
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	0011      	movs	r1, r2
 80013bc:	2203      	movs	r2, #3
 80013be:	400a      	ands	r2, r1
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	401a      	ands	r2, r3
 80013cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	401a      	ands	r2, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	2303      	movs	r3, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <__NVIC_SetPriority+0xd4>)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	430a      	orrs	r2, r1
 80013f0:	33c0      	adds	r3, #192	; 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013f6:	e031      	b.n	800145c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <__NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	0019      	movs	r1, r3
 8001400:	230f      	movs	r3, #15
 8001402:	400b      	ands	r3, r1
 8001404:	3b08      	subs	r3, #8
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3306      	adds	r3, #6
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1dfa      	adds	r2, r7, #7
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	2203      	movs	r2, #3
 800141a:	400a      	ands	r2, r1
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	43d2      	mvns	r2, r2
 8001426:	401a      	ands	r2, r3
 8001428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	22ff      	movs	r2, #255	; 0xff
 8001430:	401a      	ands	r2, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	2303      	movs	r3, #3
 800143a:	4003      	ands	r3, r0
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001c      	movs	r4, r3
 8001448:	230f      	movs	r3, #15
 800144a:	4023      	ands	r3, r4
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	430a      	orrs	r2, r1
 8001452:	3306      	adds	r3, #6
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	18c3      	adds	r3, r0, r3
 8001458:	3304      	adds	r3, #4
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	045b      	lsls	r3, r3, #17
 800147c:	429a      	cmp	r2, r3
 800147e:	d301      	bcc.n	8001484 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001480:	2301      	movs	r3, #1
 8001482:	e010      	b.n	80014a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <SysTick_Config+0x44>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	3a01      	subs	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148c:	2301      	movs	r3, #1
 800148e:	425b      	negs	r3, r3
 8001490:	2103      	movs	r1, #3
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff7c 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x44>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x44>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	210f      	movs	r1, #15
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	1c02      	adds	r2, r0, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ffbf 	bl	800146c <SysTick_Config>
 80014ee:	0003      	movs	r3, r0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800150e:	e14f      	b.n	80017b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d100      	bne.n	8001528 <HAL_GPIO_Init+0x30>
 8001526:	e140      	b.n	80017aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
 8001530:	2b01      	cmp	r3, #1
 8001532:	d005      	beq.n	8001540 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800153c:	2b02      	cmp	r3, #2
 800153e:	d130      	bne.n	80015a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	409a      	lsls	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001576:	2201      	movs	r2, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	2201      	movs	r2, #1
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d123      	bne.n	8001632 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	58d3      	ldr	r3, [r2, r3]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2107      	movs	r1, #7
 8001616:	400b      	ands	r3, r1
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	6939      	ldr	r1, [r7, #16]
 8001630:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	401a      	ands	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	029b      	lsls	r3, r3, #10
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_GPIO_Init+0x17c>
 8001672:	e09a      	b.n	80017aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_GPIO_Init+0x2d4>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	589b      	ldr	r3, [r3, r2]
 800168c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	23a0      	movs	r3, #160	; 0xa0
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x1ea>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <HAL_GPIO_Init+0x2d8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x1e6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a46      	ldr	r2, [pc, #280]	; (80017d4 <HAL_GPIO_Init+0x2dc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x1e2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_GPIO_Init+0x2e0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x1de>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_GPIO_Init+0x2e4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x1da>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016e2:	2300      	movs	r3, #0
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	2103      	movs	r1, #3
 80016e8:	400a      	ands	r2, r1
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4935      	ldr	r1, [pc, #212]	; (80017cc <HAL_GPIO_Init+0x2d4>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	035b      	lsls	r3, r3, #13
 800171a:	4013      	ands	r3, r2
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	039b      	lsls	r3, r3, #14
 8001744:	4013      	ands	r3, r2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	4013      	ands	r3, r2
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	1e13      	subs	r3, r2, #0
 80017ba:	d000      	beq.n	80017be <HAL_GPIO_Init+0x2c6>
 80017bc:	e6a8      	b.n	8001510 <HAL_GPIO_Init+0x18>
  }
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b006      	add	sp, #24
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	50000400 	.word	0x50000400
 80017d4:	50000800 	.word	0x50000800
 80017d8:	50000c00 	.word	0x50000c00
 80017dc:	50001c00 	.word	0x50001c00
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	0008      	movs	r0, r1
 80017ee:	0011      	movs	r1, r2
 80017f0:	1cbb      	adds	r3, r7, #2
 80017f2:	1c02      	adds	r2, r0, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	1c7b      	adds	r3, r7, #1
 80017f8:	1c0a      	adds	r2, r1, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	1c7b      	adds	r3, r7, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001804:	1cbb      	adds	r3, r7, #2
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800180e:	1cbb      	adds	r3, r7, #2
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e082      	b.n	8001938 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2241      	movs	r2, #65	; 0x41
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2240      	movs	r2, #64	; 0x40
 8001842:	2100      	movs	r1, #0
 8001844:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f7fe fff9 	bl	8000840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2241      	movs	r2, #65	; 0x41
 8001852:	2124      	movs	r1, #36	; 0x24
 8001854:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4934      	ldr	r1, [pc, #208]	; (8001940 <HAL_I2C_Init+0x120>)
 8001870:	400a      	ands	r2, r1
 8001872:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4931      	ldr	r1, [pc, #196]	; (8001944 <HAL_I2C_Init+0x124>)
 8001880:	400a      	ands	r2, r1
 8001882:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0209      	lsls	r1, r1, #8
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e007      	b.n	80018ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2184      	movs	r1, #132	; 0x84
 80018a8:	0209      	lsls	r1, r1, #8
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d104      	bne.n	80018c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	491f      	ldr	r1, [pc, #124]	; (8001948 <HAL_I2C_Init+0x128>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	491a      	ldr	r1, [pc, #104]	; (8001944 <HAL_I2C_Init+0x124>)
 80018dc:	400a      	ands	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69d9      	ldr	r1, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2241      	movs	r2, #65	; 0x41
 8001924:	2120      	movs	r1, #32
 8001926:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2242      	movs	r2, #66	; 0x42
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	f0ffffff 	.word	0xf0ffffff
 8001944:	ffff7fff 	.word	0xffff7fff
 8001948:	02008000 	.word	0x02008000

0800194c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	0008      	movs	r0, r1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	0019      	movs	r1, r3
 800195a:	230a      	movs	r3, #10
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	2308      	movs	r3, #8
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	1c0a      	adds	r2, r1, #0
 8001968:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2241      	movs	r2, #65	; 0x41
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b20      	cmp	r3, #32
 8001974:	d000      	beq.n	8001978 <HAL_I2C_Master_Transmit+0x2c>
 8001976:	e0e7      	b.n	8001b48 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_I2C_Master_Transmit+0x3a>
 8001982:	2302      	movs	r3, #2
 8001984:	e0e1      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800198e:	f7ff fcd1 	bl	8001334 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	0219      	lsls	r1, r3, #8
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2319      	movs	r3, #25
 80019a2:	2201      	movs	r2, #1
 80019a4:	f000 fa04 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	1e03      	subs	r3, r0, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cc      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2241      	movs	r2, #65	; 0x41
 80019b4:	2121      	movs	r1, #33	; 0x21
 80019b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2242      	movs	r2, #66	; 0x42
 80019bc:	2110      	movs	r1, #16
 80019be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2208      	movs	r2, #8
 80019d0:	18ba      	adds	r2, r7, r2
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d911      	bls.n	8001a0a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	22ff      	movs	r2, #255	; 0xff
 80019ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	045c      	lsls	r4, r3, #17
 80019f6:	230a      	movs	r3, #10
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	8819      	ldrh	r1, [r3, #0]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_I2C_Master_Transmit+0x208>)
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	0023      	movs	r3, r4
 8001a04:	f000 fc2e 	bl	8002264 <I2C_TransferConfig>
 8001a08:	e075      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049c      	lsls	r4, r3, #18
 8001a1e:	230a      	movs	r3, #10
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	8819      	ldrh	r1, [r3, #0]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_I2C_Master_Transmit+0x208>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	0023      	movs	r3, r4
 8001a2c:	f000 fc1a 	bl	8002264 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a30:	e061      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fa07 	bl	8001e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a3e:	1e03      	subs	r3, r0, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e081      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03a      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0x1aa>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d136      	bne.n	8001af6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	0013      	movs	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	f000 f98b 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e053      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2bff      	cmp	r3, #255	; 0xff
 8001aaa:	d911      	bls.n	8001ad0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	22ff      	movs	r2, #255	; 0xff
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	045c      	lsls	r4, r3, #17
 8001abc:	230a      	movs	r3, #10
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	8819      	ldrh	r1, [r3, #0]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	0023      	movs	r3, r4
 8001aca:	f000 fbcb 	bl	8002264 <I2C_TransferConfig>
 8001ace:	e012      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	049c      	lsls	r4, r3, #18
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	0023      	movs	r3, r4
 8001af2:	f000 fbb7 	bl	8002264 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d198      	bne.n	8001a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 f9e6 	bl	8001ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e01a      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <HAL_I2C_Master_Transmit+0x20c>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2241      	movs	r2, #65	; 0x41
 8001b30:	2120      	movs	r1, #32
 8001b32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2242      	movs	r2, #66	; 0x42
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	2100      	movs	r1, #0
 8001b42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b007      	add	sp, #28
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	80002000 	.word	0x80002000
 8001b58:	fe00e800 	.word	0xfe00e800

08001b5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	0008      	movs	r0, r1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	0019      	movs	r1, r3
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	1c02      	adds	r2, r0, #0
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	2308      	movs	r3, #8
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	1c0a      	adds	r2, r1, #0
 8001b78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2241      	movs	r2, #65	; 0x41
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d000      	beq.n	8001b88 <HAL_I2C_Master_Receive+0x2c>
 8001b86:	e0e8      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	5c9b      	ldrb	r3, [r3, r2]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Master_Receive+0x3a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e0e2      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fbc9 	bl	8001334 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	0219      	lsls	r1, r3, #8
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2319      	movs	r3, #25
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f000 f8fc 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cd      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2241      	movs	r2, #65	; 0x41
 8001bc4:	2122      	movs	r1, #34	; 0x22
 8001bc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2242      	movs	r2, #66	; 0x42
 8001bcc:	2110      	movs	r1, #16
 8001bce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2208      	movs	r2, #8
 8001be0:	18ba      	adds	r2, r7, r2
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d911      	bls.n	8001c1a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	045c      	lsls	r4, r3, #17
 8001c06:	230a      	movs	r3, #10
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	8819      	ldrh	r1, [r3, #0]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <HAL_I2C_Master_Receive+0x208>)
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	0023      	movs	r3, r4
 8001c14:	f000 fb26 	bl	8002264 <I2C_TransferConfig>
 8001c18:	e076      	b.n	8001d08 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	049c      	lsls	r4, r3, #18
 8001c2e:	230a      	movs	r3, #10
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	8819      	ldrh	r1, [r3, #0]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_I2C_Master_Receive+0x208>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	0023      	movs	r3, r4
 8001c3c:	f000 fb12 	bl	8002264 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c40:	e062      	b.n	8001d08 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f989 	bl	8001f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e082      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03a      	beq.n	8001d08 <HAL_I2C_Master_Receive+0x1ac>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d136      	bne.n	8001d08 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	f000 f882 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e053      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d911      	bls.n	8001ce2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	22ff      	movs	r2, #255	; 0xff
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	045c      	lsls	r4, r3, #17
 8001cce:	230a      	movs	r3, #10
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	8819      	ldrh	r1, [r3, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0023      	movs	r3, r4
 8001cdc:	f000 fac2 	bl	8002264 <I2C_TransferConfig>
 8001ce0:	e012      	b.n	8001d08 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	049c      	lsls	r4, r3, #18
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	8819      	ldrh	r1, [r3, #0]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	0023      	movs	r3, r4
 8001d04:	f000 faae 	bl	8002264 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d197      	bne.n	8001c42 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f8dd 	bl	8001ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e01a      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	490b      	ldr	r1, [pc, #44]	; (8001d68 <HAL_I2C_Master_Receive+0x20c>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2241      	movs	r2, #65	; 0x41
 8001d42:	2120      	movs	r1, #32
 8001d44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2242      	movs	r2, #66	; 0x42
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2240      	movs	r2, #64	; 0x40
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b007      	add	sp, #28
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	80002400 	.word	0x80002400
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d103      	bne.n	8001d8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d007      	beq.n	8001da8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	619a      	str	r2, [r3, #24]
  }
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc0:	e030      	b.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	d02d      	beq.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7ff fab4 	bl	8001334 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d122      	bne.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	4013      	ands	r3, r2
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	425a      	negs	r2, r3
 8001dee:	4153      	adcs	r3, r2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	001a      	movs	r2, r3
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d113      	bne.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2220      	movs	r2, #32
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2242      	movs	r2, #66	; 0x42
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00f      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	425a      	negs	r2, r3
 8001e34:	4153      	adcs	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	001a      	movs	r2, r3
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d0bf      	beq.n	8001dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e58:	e032      	b.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 f8ff 	bl	8002064 <I2C_IsErrorOccurred>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d001      	beq.n	8001e6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e030      	b.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	d025      	beq.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e74:	f7ff fa5e 	bl	8001334 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d302      	bcc.n	8001e8a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11a      	bne.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d013      	beq.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2242      	movs	r2, #66	; 0x42
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e007      	b.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d1c5      	bne.n	8001e5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee4:	e02f      	b.n	8001f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f8b9 	bl	8002064 <I2C_IsErrorOccurred>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e02d      	b.n	8001f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff fa1b 	bl	8001334 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11a      	bne.n	8001f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2220      	movs	r2, #32
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d013      	beq.n	8001f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	2220      	movs	r2, #32
 8001f24:	431a      	orrs	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2241      	movs	r2, #65	; 0x41
 8001f2e:	2120      	movs	r1, #32
 8001f30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2242      	movs	r2, #66	; 0x42
 8001f36:	2100      	movs	r1, #0
 8001f38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e007      	b.n	8001f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d1c8      	bne.n	8001ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f6c:	e06b      	b.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f875 	bl	8002064 <I2C_IsErrorOccurred>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e069      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d138      	bne.n	8002002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2204      	movs	r2, #4
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d105      	bne.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e055      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d107      	bne.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc6:	e002      	b.n	8001fce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	491f      	ldr	r1, [pc, #124]	; (8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2241      	movs	r2, #65	; 0x41
 8001fea:	2120      	movs	r1, #32
 8001fec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2242      	movs	r2, #66	; 0x42
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e029      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002002:	f7ff f997 	bl	8001334 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	d302      	bcc.n	8002018 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d116      	bne.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2204      	movs	r2, #4
 8002020:	4013      	ands	r3, r2
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00f      	beq.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	2220      	movs	r2, #32
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2241      	movs	r2, #65	; 0x41
 8002036:	2120      	movs	r1, #32
 8002038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e007      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	2b04      	cmp	r3, #4
 8002052:	d18c      	bne.n	8001f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	fe00e800 	.word	0xfe00e800

08002064 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002070:	2327      	movs	r3, #39	; 0x27
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2210      	movs	r2, #16
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <I2C_IsErrorOccurred+0x2e>
 8002090:	e082      	b.n	8002198 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800209a:	e060      	b.n	800215e <I2C_IsErrorOccurred+0xfa>
 800209c:	2427      	movs	r4, #39	; 0x27
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	193a      	adds	r2, r7, r4
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	d058      	beq.n	800215e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ac:	f7ff f942 	bl	8001334 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d306      	bcc.n	80020ca <I2C_IsErrorOccurred+0x66>
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	193a      	adds	r2, r7, r4
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d149      	bne.n	800215e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	01db      	lsls	r3, r3, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020d8:	2013      	movs	r0, #19
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	2142      	movs	r1, #66	; 0x42
 80020e0:	5c52      	ldrb	r2, [r2, r1]
 80020e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	401a      	ands	r2, r3
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d126      	bne.n	8002146 <I2C_IsErrorOccurred+0xe2>
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	01db      	lsls	r3, r3, #7
 80020fe:	429a      	cmp	r2, r3
 8002100:	d021      	beq.n	8002146 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002102:	183b      	adds	r3, r7, r0
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b20      	cmp	r3, #32
 8002108:	d01d      	beq.n	8002146 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	01c9      	lsls	r1, r1, #7
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800211c:	f7ff f90a 	bl	8001334 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002124:	e00f      	b.n	8002146 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002126:	f7ff f905 	bl	8001334 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b19      	cmp	r3, #25
 8002132:	d908      	bls.n	8002146 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	2220      	movs	r2, #32
 8002138:	4313      	orrs	r3, r2
 800213a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800213c:	2327      	movs	r3, #39	; 0x27
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]

              break;
 8002144:	e00b      	b.n	800215e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2220      	movs	r2, #32
 800214e:	4013      	ands	r3, r2
 8002150:	2127      	movs	r1, #39	; 0x27
 8002152:	187a      	adds	r2, r7, r1
 8002154:	1879      	adds	r1, r7, r1
 8002156:	7809      	ldrb	r1, [r1, #0]
 8002158:	7011      	strb	r1, [r2, #0]
 800215a:	2b20      	cmp	r3, #32
 800215c:	d1e3      	bne.n	8002126 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2220      	movs	r2, #32
 8002166:	4013      	ands	r3, r2
 8002168:	2b20      	cmp	r3, #32
 800216a:	d004      	beq.n	8002176 <I2C_IsErrorOccurred+0x112>
 800216c:	2327      	movs	r3, #39	; 0x27
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d092      	beq.n	800209c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002176:	2327      	movs	r3, #39	; 0x27
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2220      	movs	r2, #32
 8002186:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2204      	movs	r2, #4
 800218c:	4313      	orrs	r3, r2
 800218e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002190:	2327      	movs	r3, #39	; 0x27
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d00c      	beq.n	80021c4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4313      	orrs	r3, r2
 80021b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0052      	lsls	r2, r2, #1
 80021ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021bc:	2327      	movs	r3, #39	; 0x27
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4013      	ands	r3, r2
 80021cc:	d00c      	beq.n	80021e8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2208      	movs	r2, #8
 80021d2:	4313      	orrs	r3, r2
 80021d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	00d2      	lsls	r2, r2, #3
 80021de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021e0:	2327      	movs	r3, #39	; 0x27
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00c      	beq.n	800220c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2202      	movs	r2, #2
 80021f6:	4313      	orrs	r3, r2
 80021f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002204:	2327      	movs	r3, #39	; 0x27
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800220c:	2327      	movs	r3, #39	; 0x27
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01d      	beq.n	8002252 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fda7 	bl	8001d6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	490d      	ldr	r1, [pc, #52]	; (8002260 <I2C_IsErrorOccurred+0x1fc>)
 800222a:	400a      	ands	r2, r1
 800222c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	2120      	movs	r1, #32
 8002240:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2242      	movs	r2, #66	; 0x42
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2240      	movs	r2, #64	; 0x40
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002252:	2327      	movs	r3, #39	; 0x27
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	781b      	ldrb	r3, [r3, #0]
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b00b      	add	sp, #44	; 0x2c
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	fe00e800 	.word	0xfe00e800

08002264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	0008      	movs	r0, r1
 800226e:	0011      	movs	r1, r2
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	240a      	movs	r4, #10
 8002274:	193b      	adds	r3, r7, r4
 8002276:	1c02      	adds	r2, r0, #0
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	2009      	movs	r0, #9
 800227c:	183b      	adds	r3, r7, r0
 800227e:	1c0a      	adds	r2, r1, #0
 8002280:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002282:	193b      	adds	r3, r7, r4
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	059b      	lsls	r3, r3, #22
 8002288:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800228a:	183b      	adds	r3, r7, r0
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0419      	lsls	r1, r3, #16
 8002290:	23ff      	movs	r3, #255	; 0xff
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002296:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	4313      	orrs	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ae:	0d51      	lsrs	r1, r2, #21
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	00d2      	lsls	r2, r2, #3
 80022b4:	400a      	ands	r2, r1
 80022b6:	4907      	ldr	r1, [pc, #28]	; (80022d4 <I2C_TransferConfig+0x70>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	43d2      	mvns	r2, r2
 80022bc:	401a      	ands	r2, r3
 80022be:	0011      	movs	r1, r2
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b007      	add	sp, #28
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	03ff63ff 	.word	0x03ff63ff

080022d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2241      	movs	r2, #65	; 0x41
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d138      	bne.n	8002360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e032      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2241      	movs	r2, #65	; 0x41
 8002308:	2124      	movs	r1, #36	; 0x24
 800230a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	438a      	bics	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4911      	ldr	r1, [pc, #68]	; (800236c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2241      	movs	r2, #65	; 0x41
 8002350:	2120      	movs	r1, #32
 8002352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	ffffefff 	.word	0xffffefff

08002370 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	d139      	bne.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002390:	2302      	movs	r3, #2
 8002392:	e033      	b.n	80023fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	2101      	movs	r1, #1
 800239a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2241      	movs	r2, #65	; 0x41
 80023a0:	2124      	movs	r1, #36	; 0x24
 80023a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	438a      	bics	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2241      	movs	r2, #65	; 0x41
 80023ea:	2120      	movs	r1, #32
 80023ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	fffff0ff 	.word	0xfffff0ff

08002408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f000 fbaf 	bl	8002b7a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241c:	4bcf      	ldr	r3, [pc, #828]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	220c      	movs	r2, #12
 8002422:	4013      	ands	r3, r2
 8002424:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002426:	4bcd      	ldr	r3, [pc, #820]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	4013      	ands	r3, r2
 8002430:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d100      	bne.n	800243e <HAL_RCC_OscConfig+0x36>
 800243c:	e07e      	b.n	800253c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d007      	beq.n	8002454 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x68>
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	025b      	lsls	r3, r3, #9
 8002450:	429a      	cmp	r2, r3
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4bc1      	ldr	r3, [pc, #772]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	4013      	ands	r3, r2
 800245e:	d100      	bne.n	8002462 <HAL_RCC_OscConfig+0x5a>
 8002460:	e06b      	b.n	800253a <HAL_RCC_OscConfig+0x132>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d167      	bne.n	800253a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f000 fb85 	bl	8002b7a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x84>
 800247c:	4bb7      	ldr	r3, [pc, #732]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4bb6      	ldr	r3, [pc, #728]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	0249      	lsls	r1, r1, #9
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e027      	b.n	80024dc <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	23a0      	movs	r3, #160	; 0xa0
 8002492:	02db      	lsls	r3, r3, #11
 8002494:	429a      	cmp	r2, r3
 8002496:	d10e      	bne.n	80024b6 <HAL_RCC_OscConfig+0xae>
 8002498:	4bb0      	ldr	r3, [pc, #704]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4baf      	ldr	r3, [pc, #700]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	02c9      	lsls	r1, r1, #11
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	4bad      	ldr	r3, [pc, #692]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4bac      	ldr	r3, [pc, #688]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0249      	lsls	r1, r1, #9
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e012      	b.n	80024dc <HAL_RCC_OscConfig+0xd4>
 80024b6:	4ba9      	ldr	r3, [pc, #676]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4ba8      	ldr	r3, [pc, #672]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024bc:	49a8      	ldr	r1, [pc, #672]	; (8002760 <HAL_RCC_OscConfig+0x358>)
 80024be:	400a      	ands	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	4ba6      	ldr	r3, [pc, #664]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4ba2      	ldr	r3, [pc, #648]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4ba1      	ldr	r3, [pc, #644]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80024d6:	49a3      	ldr	r1, [pc, #652]	; (8002764 <HAL_RCC_OscConfig+0x35c>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe ff26 	bl	8001334 <HAL_GetTick>
 80024e8:	0003      	movs	r3, r0
 80024ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ec:	e009      	b.n	8002502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ee:	f7fe ff21 	bl	8001334 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d902      	bls.n	8002502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	f000 fb3c 	bl	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002502:	4b96      	ldr	r3, [pc, #600]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d0ef      	beq.n	80024ee <HAL_RCC_OscConfig+0xe6>
 800250e:	e015      	b.n	800253c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe ff10 	bl	8001334 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7fe ff0b 	bl	8001334 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e326      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800252c:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x112>
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_RCC_OscConfig+0x140>
 8002546:	e08b      	b.n	8002660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d13e      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1d0>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002560:	4b7e      	ldr	r3, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_RCC_OscConfig+0x16c>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e302      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a7b      	ldr	r2, [pc, #492]	; (8002768 <HAL_RCC_OscConfig+0x360>)
 800257a:	4013      	ands	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	021a      	lsls	r2, r3, #8
 8002584:	4b75      	ldr	r3, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800258a:	4b74      	ldr	r3, [pc, #464]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2209      	movs	r2, #9
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b71      	ldr	r3, [pc, #452]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800259c:	f000 fc40 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 80025a0:	0001      	movs	r1, r0
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	220f      	movs	r2, #15
 80025aa:	4013      	ands	r3, r2
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x364>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	000a      	movs	r2, r1
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x368>)
 80025b6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80025b8:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0x36c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2513      	movs	r5, #19
 80025be:	197c      	adds	r4, r7, r5
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fe fe71 	bl	80012a8 <HAL_InitTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80025ca:	197b      	adds	r3, r7, r5
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d046      	beq.n	8002660 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80025d2:	197b      	adds	r3, r7, r5
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	e2d0      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2209      	movs	r2, #9
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fea0 	bl	8001334 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fe9b 	bl	8001334 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e2b6      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260c:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2204      	movs	r2, #4
 8002612:	4013      	ands	r3, r2
 8002614:	d0f1      	beq.n	80025fa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a53      	ldr	r2, [pc, #332]	; (8002768 <HAL_RCC_OscConfig+0x360>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	e018      	b.n	8002660 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fe7b 	bl	8001334 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fe76 	bl	8001334 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e291      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2204      	movs	r2, #4
 800265c:	4013      	ands	r3, r2
 800265e:	d1f1      	bne.n	8002644 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d100      	bne.n	800266c <HAL_RCC_OscConfig+0x264>
 800266a:	e0a1      	b.n	80027b0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d140      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x282>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e277      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4a3a      	ldr	r2, [pc, #232]	; (8002778 <HAL_RCC_OscConfig+0x370>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x354>)
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269e:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	0a19      	lsrs	r1, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	061a      	lsls	r2, r3, #24
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	3301      	adds	r3, #1
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	0212      	lsls	r2, r2, #8
 80026be:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	210f      	movs	r1, #15
 80026c8:	400b      	ands	r3, r1
 80026ca:	4928      	ldr	r1, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x364>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x368>)
 80026d2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x36c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2513      	movs	r5, #19
 80026da:	197c      	adds	r4, r7, r5
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe fde3 	bl	80012a8 <HAL_InitTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80026e6:	197b      	adds	r3, r7, r5
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d060      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80026ee:	197b      	adds	r3, r7, r5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	e242      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03f      	beq.n	800277c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCC_OscConfig+0x354>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0049      	lsls	r1, r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fe13 	bl	8001334 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002714:	f7fe fe0e 	bl	8001334 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e229      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x370>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	0a19      	lsrs	r1, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	061a      	lsls	r2, r3, #24
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <HAL_RCC_OscConfig+0x354>)
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e029      	b.n	80027b0 <HAL_RCC_OscConfig+0x3a8>
 800275c:	40021000 	.word	0x40021000
 8002760:	fffeffff 	.word	0xfffeffff
 8002764:	fffbffff 	.word	0xfffbffff
 8002768:	ffffe0ff 	.word	0xffffe0ff
 800276c:	080049bc 	.word	0x080049bc
 8002770:	20000000 	.word	0x20000000
 8002774:	20000008 	.word	0x20000008
 8002778:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800277c:	4bbd      	ldr	r3, [pc, #756]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4bbc      	ldr	r3, [pc, #752]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002782:	49bd      	ldr	r1, [pc, #756]	; (8002a78 <HAL_RCC_OscConfig+0x670>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fdd4 	bl	8001334 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002792:	f7fe fdcf 	bl	8001334 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1ea      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027a4:	4bb3      	ldr	r3, [pc, #716]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4013      	ands	r3, r2
 80027b8:	d036      	beq.n	8002828 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4bac      	ldr	r3, [pc, #688]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c6:	4bab      	ldr	r3, [pc, #684]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fdb1 	bl	8001334 <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fdac 	bl	8001334 <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1c7      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ea:	4ba2      	ldr	r3, [pc, #648]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f1      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3d0>
 80027f4:	e018      	b.n	8002828 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b9f      	ldr	r3, [pc, #636]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fa:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	438a      	bics	r2, r1
 8002800:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fd97 	bl	8001334 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fd92 	bl	8001334 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1ad      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800281e:	4b95      	ldr	r3, [pc, #596]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	2202      	movs	r2, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d1f1      	bne.n	800280c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2204      	movs	r2, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d100      	bne.n	8002834 <HAL_RCC_OscConfig+0x42c>
 8002832:	e0ae      	b.n	8002992 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002834:	2027      	movs	r0, #39	; 0x27
 8002836:	183b      	adds	r3, r7, r0
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283c:	4b8d      	ldr	r3, [pc, #564]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800283e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	055b      	lsls	r3, r3, #21
 8002844:	4013      	ands	r3, r2
 8002846:	d109      	bne.n	800285c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800284a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284c:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0549      	lsls	r1, r1, #21
 8002852:	430a      	orrs	r2, r1
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002856:	183b      	adds	r3, r7, r0
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b87      	ldr	r3, [pc, #540]	; (8002a7c <HAL_RCC_OscConfig+0x674>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4013      	ands	r3, r2
 8002866:	d11a      	bne.n	800289e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002868:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <HAL_RCC_OscConfig+0x674>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <HAL_RCC_OscConfig+0x674>)
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	0049      	lsls	r1, r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fd5d 	bl	8001334 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe fd58 	bl	8001334 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e173      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x674>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4013      	ands	r3, r2
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_OscConfig+0x4b2>
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ae:	4b71      	ldr	r3, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	0049      	lsls	r1, r1, #1
 80028b4:	430a      	orrs	r2, r1
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
 80028b8:	e031      	b.n	800291e <HAL_RCC_OscConfig+0x516>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x4d4>
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c6:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028c8:	496b      	ldr	r1, [pc, #428]	; (8002a78 <HAL_RCC_OscConfig+0x670>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	651a      	str	r2, [r3, #80]	; 0x50
 80028ce:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028d4:	496a      	ldr	r1, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x678>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	651a      	str	r2, [r3, #80]	; 0x50
 80028da:	e020      	b.n	800291e <HAL_RCC_OscConfig+0x516>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	23a0      	movs	r3, #160	; 0xa0
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d10e      	bne.n	8002906 <HAL_RCC_OscConfig+0x4fe>
 80028e8:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	00c9      	lsls	r1, r1, #3
 80028f2:	430a      	orrs	r2, r1
 80028f4:	651a      	str	r2, [r3, #80]	; 0x50
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028fa:	4b5e      	ldr	r3, [pc, #376]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	651a      	str	r2, [r3, #80]	; 0x50
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x516>
 8002906:	4b5b      	ldr	r3, [pc, #364]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800290a:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800290c:	495a      	ldr	r1, [pc, #360]	; (8002a78 <HAL_RCC_OscConfig+0x670>)
 800290e:	400a      	ands	r2, r1
 8002910:	651a      	str	r2, [r3, #80]	; 0x50
 8002912:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002916:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002918:	4959      	ldr	r1, [pc, #356]	; (8002a80 <HAL_RCC_OscConfig+0x678>)
 800291a:	400a      	ands	r2, r1
 800291c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe fd05 	bl	8001334 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800292e:	e009      	b.n	8002944 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe fd00 	bl	8001334 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x67c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e11a      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002944:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d0ef      	beq.n	8002930 <HAL_RCC_OscConfig+0x528>
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fcef 	bl	8001334 <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800295a:	e009      	b.n	8002970 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fcea 	bl	8001334 <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x67c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e104      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002970:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d1ef      	bne.n	800295c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800297c:	2327      	movs	r3, #39	; 0x27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 800298c:	493e      	ldr	r1, [pc, #248]	; (8002a88 <HAL_RCC_OscConfig+0x680>)
 800298e:	400a      	ands	r2, r1
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d049      	beq.n	8002a30 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d026      	beq.n	80029f2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x684>)
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_RCC_OscConfig+0x684>)
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	0189      	lsls	r1, r1, #6
 80029c6:	430a      	orrs	r2, r1
 80029c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fcb3 	bl	8001334 <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d4:	f7fe fcae 	bl	8001334 <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0c9      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f1      	beq.n	80029d4 <HAL_RCC_OscConfig+0x5cc>
 80029f0:	e01e      	b.n	8002a30 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	438a      	bics	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_RCC_OscConfig+0x684>)
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_RCC_OscConfig+0x684>)
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCC_OscConfig+0x688>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fc93 	bl	8001334 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a14:	f7fe fc8e 	bl	8001334 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0a9      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d1f1      	bne.n	8002a14 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_OscConfig+0x632>
 8002a38:	e09e      	b.n	8002b78 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCC_OscConfig+0x63a>
 8002a40:	e077      	b.n	8002b32 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d158      	bne.n	8002afc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x66c>)
 8002a50:	4910      	ldr	r1, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x68c>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fc6d 	bl	8001334 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fc68 	bl	8001334 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d914      	bls.n	8002a98 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e083      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	40021000 	.word	0x40021000
 8002a78:	fffffeff 	.word	0xfffffeff
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffffbff 	.word	0xfffffbff
 8002a84:	00001388 	.word	0x00001388
 8002a88:	efffffff 	.word	0xefffffff
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	ffffdfff 	.word	0xffffdfff
 8002a94:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	049b      	lsls	r3, r3, #18
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d1dd      	bne.n	8002a60 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a37      	ldr	r2, [pc, #220]	; (8002b88 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	431a      	orrs	r2, r3
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0449      	lsls	r1, r1, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fc2f 	bl	8001334 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fc2a 	bl	8001334 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e045      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002aee:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	049b      	lsls	r3, r3, #18
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x6d4>
 8002afa:	e03d      	b.n	8002b78 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002b02:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0x784>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fc14 	bl	8001334 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fe fc0f 	bl	8001334 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e02a      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	049b      	lsls	r3, r3, #18
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x70a>
 8002b30:	e022      	b.n	8002b78 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01d      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x77c>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	025b      	lsls	r3, r3, #9
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10f      	bne.n	8002b74 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	23f0      	movs	r3, #240	; 0xf0
 8002b58:	039b      	lsls	r3, r3, #14
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b00a      	add	sp, #40	; 0x28
 8002b80:	bdb0      	pop	{r4, r5, r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	40021000 	.word	0x40021000
 8002b88:	ff02ffff 	.word	0xff02ffff
 8002b8c:	feffffff 	.word	0xfeffffff

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e128      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b96      	ldr	r3, [pc, #600]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d91e      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4393      	bics	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fbb6 	bl	8001334 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bcc:	e009      	b.n	8002be2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bce:	f7fe fbb1 	bl	8001334 <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a8a      	ldr	r2, [pc, #552]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e109      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b87      	ldr	r3, [pc, #540]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1ee      	bne.n	8002bce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfa:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	22f0      	movs	r2, #240	; 0xf0
 8002c00:	4393      	bics	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d100      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
 8002c18:	e089      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d120      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0e1      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3a:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	049b      	lsls	r3, r3, #18
 8002c42:	4013      	ands	r3, r2
 8002c44:	d114      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0d5      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0ca      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0c2      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c70:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4393      	bics	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fb56 	bl	8001334 <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe fb4d 	bl	8001334 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0a5      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	220c      	movs	r2, #12
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x106>
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d111      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc2:	f7fe fb37 	bl	8001334 <HAL_GetTick>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e08f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	220c      	movs	r2, #12
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d1ef      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0x132>
 8002ce2:	e024      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d11b      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fe fb21 	bl	8001334 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e079      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	220c      	movs	r2, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_ClockConfig+0x15e>
 8002d0e:	e00e      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fb10 	bl	8001334 <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e068      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	220c      	movs	r2, #12
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d21e      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	4393      	bics	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe faf1 	bl	8001334 <HAL_GetTick>
 8002d52:	0003      	movs	r3, r0
 8002d54:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	e009      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fe faec 	bl	8001334 <HAL_GetTick>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x274>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e044      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_ClockConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2201      	movs	r2, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x27c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCC_ClockConfig+0x280>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00da      	lsls	r2, r3, #3
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db8:	f000 f832 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dbc:	0001      	movs	r1, r0
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x278>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_RCC_ClockConfig+0x284>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	000a      	movs	r2, r1
 8002dce:	40da      	lsrs	r2, r3
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_RCC_ClockConfig+0x288>)
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_ClockConfig+0x28c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	250b      	movs	r5, #11
 8002dda:	197c      	adds	r4, r7, r5
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fe fa63 	bl	80012a8 <HAL_InitTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002de6:	197b      	adds	r3, r7, r5
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002dee:	197b      	adds	r3, r7, r5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	40022000 	.word	0x40022000
 8002e04:	00001388 	.word	0x00001388
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	fffff8ff 	.word	0xfffff8ff
 8002e10:	ffffc7ff 	.word	0xffffc7ff
 8002e14:	080049bc 	.word	0x080049bc
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2e:	230c      	movs	r3, #12
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d014      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e36:	d900      	bls.n	8002e3a <HAL_RCC_GetSysClockFreq+0x1a>
 8002e38:	e07b      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x112>
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x24>
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e42:	e076      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e52:	e07c      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e58:	e079      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e5e:	e076      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	0c9a      	lsrs	r2, r3, #18
 8002e64:	230f      	movs	r3, #15
 8002e66:	401a      	ands	r2, r3
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x148>)
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	0d9a      	lsrs	r2, r3, #22
 8002e72:	2303      	movs	r3, #3
 8002e74:	4013      	ands	r3, r2
 8002e76:	3301      	adds	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	025b      	lsls	r3, r3, #9
 8002e82:	4013      	ands	r3, r2
 8002e84:	d01a      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e90:	2300      	movs	r3, #0
 8002e92:	69b8      	ldr	r0, [r7, #24]
 8002e94:	69f9      	ldr	r1, [r7, #28]
 8002e96:	f7fd f9e3 	bl	8000260 <__aeabi_lmul>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	000b      	movs	r3, r1
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f7fd f9b7 	bl	8000220 <__aeabi_uldivmod>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eba:	e037      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d01a      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	f7fd f9c3 	bl	8000260 <__aeabi_lmul>
 8002eda:	0002      	movs	r2, r0
 8002edc:	000b      	movs	r3, r1
 8002ede:	0010      	movs	r0, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f7fd f997 	bl	8000220 <__aeabi_uldivmod>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	000b      	movs	r3, r1
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8002efa:	e017      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	0018      	movs	r0, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	0019      	movs	r1, r3
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f06:	2300      	movs	r3, #0
 8002f08:	f7fd f9aa 	bl	8000260 <__aeabi_lmul>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	000b      	movs	r3, r1
 8002f10:	0010      	movs	r0, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	001c      	movs	r4, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	001d      	movs	r5, r3
 8002f1c:	0022      	movs	r2, r4
 8002f1e:	002b      	movs	r3, r5
 8002f20:	f7fd f97e 	bl	8000220 <__aeabi_uldivmod>
 8002f24:	0002      	movs	r2, r0
 8002f26:	000b      	movs	r3, r1
 8002f28:	0013      	movs	r3, r2
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f30:	e00d      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0b5b      	lsrs	r3, r3, #13
 8002f38:	2207      	movs	r2, #7
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	3301      	adds	r3, #1
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	0212      	lsls	r2, r2, #8
 8002f46:	409a      	lsls	r2, r3
 8002f48:	0013      	movs	r3, r2
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f4c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b00e      	add	sp, #56	; 0x38
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	003d0900 	.word	0x003d0900
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	080049d4 	.word	0x080049d4

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	0001      	movs	r1, r0
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	2207      	movs	r2, #7
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	40d9      	lsrs	r1, r3
 8002f9a:	000b      	movs	r3, r1
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	080049cc 	.word	0x080049cc

08002fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb0:	f7ff ffdc 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb4:	0001      	movs	r1, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	0adb      	lsrs	r3, r3, #11
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	40d9      	lsrs	r1, r3
 8002fc6:	000b      	movs	r3, r1
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	080049cc 	.word	0x080049cc

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2317      	movs	r3, #23
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2220      	movs	r2, #32
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d106      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d100      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002ffe:	e104      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4bb1      	ldr	r3, [pc, #708]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4013      	ands	r3, r2
 800300a:	d10a      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4bae      	ldr	r3, [pc, #696]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800300e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003010:	4bad      	ldr	r3, [pc, #692]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0549      	lsls	r1, r1, #21
 8003016:	430a      	orrs	r2, r1
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800301a:	2317      	movs	r3, #23
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4baa      	ldr	r3, [pc, #680]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4013      	ands	r3, r2
 800302c:	d11a      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4ba7      	ldr	r3, [pc, #668]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4ba6      	ldr	r3, [pc, #664]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	0049      	lsls	r1, r1, #1
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303c:	f7fe f97a 	bl	8001334 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe f975 	bl	8001334 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	; 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e133      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b9c      	ldr	r3, [pc, #624]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d0f0      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003064:	4b98      	ldr	r3, [pc, #608]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	23c0      	movs	r3, #192	; 0xc0
 800306a:	039b      	lsls	r3, r3, #14
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	23c0      	movs	r3, #192	; 0xc0
 8003076:	039b      	lsls	r3, r3, #14
 8003078:	4013      	ands	r3, r2
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	23c0      	movs	r3, #192	; 0xc0
 8003086:	039b      	lsls	r3, r3, #14
 8003088:	4013      	ands	r3, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d013      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	23c0      	movs	r3, #192	; 0xc0
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	401a      	ands	r2, r3
 800309a:	23c0      	movs	r3, #192	; 0xc0
 800309c:	029b      	lsls	r3, r3, #10
 800309e:	429a      	cmp	r2, r3
 80030a0:	d10a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	401a      	ands	r2, r3
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	029b      	lsls	r3, r3, #10
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d101      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e103      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80030b8:	4b83      	ldr	r3, [pc, #524]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d049      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	23c0      	movs	r3, #192	; 0xc0
 80030d0:	029b      	lsls	r3, r3, #10
 80030d2:	4013      	ands	r3, r2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2220      	movs	r2, #32
 80030e0:	4013      	ands	r3, r2
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4013      	ands	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d034      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4013      	ands	r3, r2
 80030fe:	d02e      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003100:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310a:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800310c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800310e:	4b6e      	ldr	r3, [pc, #440]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0309      	lsls	r1, r1, #12
 8003114:	430a      	orrs	r2, r1
 8003116:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800311a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800311e:	496d      	ldr	r1, [pc, #436]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003120:	400a      	ands	r2, r1
 8003122:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4013      	ands	r3, r2
 8003132:	d014      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe f8fe 	bl	8001334 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313c:	e009      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe f8f9 	bl	8001334 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0b6      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4013      	ands	r3, r2
 800315c:	d0ef      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4013      	ands	r3, r2
 8003168:	d01f      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	23c0      	movs	r3, #192	; 0xc0
 8003170:	029b      	lsls	r3, r3, #10
 8003172:	401a      	ands	r2, r3
 8003174:	23c0      	movs	r3, #192	; 0xc0
 8003176:	029b      	lsls	r3, r3, #10
 8003178:	429a      	cmp	r2, r3
 800317a:	d10c      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800317c:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	23c0      	movs	r3, #192	; 0xc0
 800318c:	039b      	lsls	r3, r3, #14
 800318e:	401a      	ands	r2, r3
 8003190:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003198:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	029b      	lsls	r3, r3, #10
 80031a2:	401a      	ands	r2, r3
 80031a4:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031a6:	430a      	orrs	r2, r1
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2220      	movs	r2, #32
 80031b0:	4013      	ands	r3, r2
 80031b2:	d01f      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	401a      	ands	r2, r3
 80031be:	23c0      	movs	r3, #192	; 0xc0
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80031c6:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a44      	ldr	r2, [pc, #272]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	23c0      	movs	r3, #192	; 0xc0
 80031d6:	039b      	lsls	r3, r3, #14
 80031d8:	401a      	ands	r2, r3
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	23c0      	movs	r3, #192	; 0xc0
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	401a      	ands	r2, r3
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f4:	2317      	movs	r3, #23
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003204:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003206:	400a      	ands	r2, r1
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	2203      	movs	r2, #3
 800321a:	4393      	bics	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003224:	430a      	orrs	r2, r1
 8003226:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2202      	movs	r2, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	220c      	movs	r2, #12
 8003238:	4393      	bics	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003242:	430a      	orrs	r2, r1
 8003244:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003260:	430a      	orrs	r2, r1
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	4013      	ands	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003274:	4013      	ands	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800327e:	430a      	orrs	r2, r1
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	4013      	ands	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800329c:	430a      	orrs	r2, r1
 800329e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	4013      	ands	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b006      	add	sp, #24
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	fffcffff 	.word	0xfffcffff
 80032d4:	fff7ffff 	.word	0xfff7ffff
 80032d8:	00001388 	.word	0x00001388
 80032dc:	ffcfffff 	.word	0xffcfffff
 80032e0:	efffffff 	.word	0xefffffff
 80032e4:	fffff3ff 	.word	0xfffff3ff
 80032e8:	ffffcfff 	.word	0xffffcfff
 80032ec:	fbffffff 	.word	0xfbffffff
 80032f0:	fff3ffff 	.word	0xfff3ffff

080032f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e083      	b.n	800340e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	2382      	movs	r3, #130	; 0x82
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	429a      	cmp	r2, r3
 8003318:	d009      	beq.n	800332e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
 8003320:	e005      	b.n	800332e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2251      	movs	r2, #81	; 0x51
 8003338:	5c9b      	ldrb	r3, [r3, r2]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2250      	movs	r2, #80	; 0x50
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f7fd fabc 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2251      	movs	r2, #81	; 0x51
 8003354:	2102      	movs	r1, #2
 8003356:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	438a      	bics	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	2382      	movs	r3, #130	; 0x82
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	401a      	ands	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	2384      	movs	r3, #132	; 0x84
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	400b      	ands	r3, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	400b      	ands	r3, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2102      	movs	r1, #2
 8003390:	400b      	ands	r3, r1
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	2101      	movs	r1, #1
 800339a:	400b      	ands	r3, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2138      	movs	r1, #56	; 0x38
 80033b0:	400b      	ands	r3, r1
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	0011      	movs	r1, r2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	019b      	lsls	r3, r3, #6
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	2204      	movs	r2, #4
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2210      	movs	r2, #16
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <HAL_SPI_Init+0x124>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2251      	movs	r2, #81	; 0x51
 8003408:	2101      	movs	r1, #1
 800340a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b002      	add	sp, #8
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	fffff7ff 	.word	0xfffff7ff

0800341c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800342c:	231f      	movs	r3, #31
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2250      	movs	r2, #80	; 0x50
 8003438:	5c9b      	ldrb	r3, [r3, r2]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Transmit+0x26>
 800343e:	2302      	movs	r3, #2
 8003440:	e145      	b.n	80036ce <HAL_SPI_Transmit+0x2b2>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2250      	movs	r2, #80	; 0x50
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800344a:	f7fd ff73 	bl	8001334 <HAL_GetTick>
 800344e:	0003      	movs	r3, r0
 8003450:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003452:	2316      	movs	r3, #22
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	1dba      	adds	r2, r7, #6
 8003458:	8812      	ldrh	r2, [r2, #0]
 800345a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2251      	movs	r2, #81	; 0x51
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d004      	beq.n	8003472 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003468:	231f      	movs	r3, #31
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003470:	e126      	b.n	80036c0 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_SPI_Transmit+0x64>
 8003478:	1dbb      	adds	r3, r7, #6
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003480:	231f      	movs	r3, #31
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    goto error;
 8003488:	e11a      	b.n	80036c0 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2251      	movs	r2, #81	; 0x51
 800348e:	2103      	movs	r1, #3
 8003490:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1dba      	adds	r2, r7, #6
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1dba      	adds	r2, r7, #6
 80034aa:	8812      	ldrh	r2, [r2, #0]
 80034ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d110      	bne.n	80034fa <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	01c9      	lsls	r1, r1, #7
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2240      	movs	r2, #64	; 0x40
 8003502:	4013      	ands	r3, r2
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d007      	beq.n	8003518 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	429a      	cmp	r2, r3
 8003522:	d152      	bne.n	80035ca <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_SPI_Transmit+0x11a>
 800352c:	2316      	movs	r3, #22
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d143      	bne.n	80035be <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	881a      	ldrh	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	1c9a      	adds	r2, r3, #2
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800355a:	e030      	b.n	80035be <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d112      	bne.n	8003590 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	86da      	strh	r2, [r3, #54]	; 0x36
 800358e:	e016      	b.n	80035be <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003590:	f7fd fed0 	bl	8001334 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d802      	bhi.n	80035a6 <HAL_SPI_Transmit+0x18a>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x190>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	231f      	movs	r3, #31
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	2203      	movs	r2, #3
 80035b2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2251      	movs	r2, #81	; 0x51
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]
          goto error;
 80035bc:	e080      	b.n	80036c0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1c9      	bne.n	800355c <HAL_SPI_Transmit+0x140>
 80035c8:	e053      	b.n	8003672 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_SPI_Transmit+0x1c0>
 80035d2:	2316      	movs	r3, #22
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d145      	bne.n	8003668 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003602:	e031      	b.n	8003668 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d113      	bne.n	800363a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	86da      	strh	r2, [r3, #54]	; 0x36
 8003638:	e016      	b.n	8003668 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363a:	f7fd fe7b 	bl	8001334 <HAL_GetTick>
 800363e:	0002      	movs	r2, r0
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d802      	bhi.n	8003650 <HAL_SPI_Transmit+0x234>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Transmit+0x23a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003656:	231f      	movs	r3, #31
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2203      	movs	r2, #3
 800365c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2251      	movs	r2, #81	; 0x51
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
          goto error;
 8003666:	e02b      	b.n	80036c0 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1c8      	bne.n	8003604 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fc1f 	bl	8003ebc <SPI_EndRxTxTransaction>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80036ae:	231f      	movs	r3, #31
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e003      	b.n	80036c0 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2251      	movs	r2, #81	; 0x51
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2250      	movs	r2, #80	; 0x50
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036c8:	231f      	movs	r3, #31
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b008      	add	sp, #32
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	1dbb      	adds	r3, r7, #6
 80036e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036e8:	2117      	movs	r1, #23
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2251      	movs	r2, #81	; 0x51
 80036f4:	5c9b      	ldrb	r3, [r3, r2]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d003      	beq.n	8003704 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
    goto error;
 8003702:	e109      	b.n	8003918 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	2382      	movs	r3, #130	; 0x82
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	429a      	cmp	r2, r3
 800370e:	d113      	bne.n	8003738 <HAL_SPI_Receive+0x60>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2251      	movs	r2, #81	; 0x51
 800371c:	2104      	movs	r1, #4
 800371e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003720:	1dbb      	adds	r3, r7, #6
 8003722:	881c      	ldrh	r4, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	0023      	movs	r3, r4
 8003730:	f000 f900 	bl	8003934 <HAL_SPI_TransmitReceive>
 8003734:	0003      	movs	r3, r0
 8003736:	e0f6      	b.n	8003926 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2250      	movs	r2, #80	; 0x50
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Receive+0x6e>
 8003742:	2302      	movs	r3, #2
 8003744:	e0ef      	b.n	8003926 <HAL_SPI_Receive+0x24e>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2250      	movs	r2, #80	; 0x50
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800374e:	f7fd fdf1 	bl	8001334 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_SPI_Receive+0x8c>
 800375c:	1dbb      	adds	r3, r7, #6
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003764:	2317      	movs	r3, #23
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
    goto error;
 800376c:	e0d4      	b.n	8003918 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2251      	movs	r2, #81	; 0x51
 8003772:	2104      	movs	r1, #4
 8003774:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1dba      	adds	r2, r7, #6
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1dba      	adds	r2, r7, #6
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d10f      	bne.n	80037dc <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2140      	movs	r1, #64	; 0x40
 80037c8:	438a      	bics	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4956      	ldr	r1, [pc, #344]	; (8003930 <HAL_SPI_Receive+0x258>)
 80037d8:	400a      	ands	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d007      	beq.n	80037fa <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d000      	beq.n	8003804 <HAL_SPI_Receive+0x12c>
 8003802:	e06c      	b.n	80038de <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003804:	e033      	b.n	800386e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	2b01      	cmp	r3, #1
 8003812:	d115      	bne.n	8003840 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	001a      	movs	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800383e:	e016      	b.n	800386e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003840:	f7fd fd78 	bl	8001334 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d802      	bhi.n	8003856 <HAL_SPI_Receive+0x17e>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_SPI_Receive+0x184>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 800385c:	2317      	movs	r3, #23
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2203      	movs	r2, #3
 8003862:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2251      	movs	r2, #81	; 0x51
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]
          goto error;
 800386c:	e054      	b.n	8003918 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1c6      	bne.n	8003806 <HAL_SPI_Receive+0x12e>
 8003878:	e036      	b.n	80038e8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2201      	movs	r2, #1
 8003882:	4013      	ands	r3, r2
 8003884:	2b01      	cmp	r3, #1
 8003886:	d113      	bne.n	80038b0 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	b292      	uxth	r2, r2
 8003894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ae:	e016      	b.n	80038de <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b0:	f7fd fd40 	bl	8001334 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d802      	bhi.n	80038c6 <HAL_SPI_Receive+0x1ee>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_SPI_Receive+0x1f4>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d108      	bne.n	80038de <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80038cc:	2317      	movs	r3, #23
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2203      	movs	r2, #3
 80038d2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2251      	movs	r2, #81	; 0x51
 80038d8:	2101      	movs	r1, #1
 80038da:	5499      	strb	r1, [r3, r2]
          goto error;
 80038dc:	e01c      	b.n	8003918 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1c8      	bne.n	800387a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 fa7a 	bl	8003de8 <SPI_EndRxTransaction>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003906:	2317      	movs	r3, #23
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e003      	b.n	8003918 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2251      	movs	r2, #81	; 0x51
 8003914:	2101      	movs	r1, #1
 8003916:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2250      	movs	r2, #80	; 0x50
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003920:	2317      	movs	r3, #23
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b007      	add	sp, #28
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	ffffbfff 	.word	0xffffbfff

08003934 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	; 0x30
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	001a      	movs	r2, r3
 8003942:	1cbb      	adds	r3, r7, #2
 8003944:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003946:	2301      	movs	r3, #1
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800394a:	232b      	movs	r3, #43	; 0x2b
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2250      	movs	r2, #80	; 0x50
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x2c>
 800395c:	2302      	movs	r3, #2
 800395e:	e1b0      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x38e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2250      	movs	r2, #80	; 0x50
 8003964:	2101      	movs	r1, #1
 8003966:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003968:	f7fd fce4 	bl	8001334 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003970:	2023      	movs	r0, #35	; 0x23
 8003972:	183b      	adds	r3, r7, r0
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	2151      	movs	r1, #81	; 0x51
 8003978:	5c52      	ldrb	r2, [r2, r1]
 800397a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003982:	231a      	movs	r3, #26
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	1cba      	adds	r2, r7, #2
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800398c:	183b      	adds	r3, r7, r0
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d011      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x84>
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	2382      	movs	r3, #130	; 0x82
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	429a      	cmp	r2, r3
 800399c:	d107      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x7a>
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d004      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80039ae:	232b      	movs	r3, #43	; 0x2b
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80039b6:	e17d      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x98>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x98>
 80039c4:	1cbb      	adds	r3, r7, #2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80039cc:	232b      	movs	r3, #43	; 0x2b
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80039d4:	e16e      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2251      	movs	r2, #81	; 0x51
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d003      	beq.n	80039ea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2251      	movs	r2, #81	; 0x51
 80039e6:	2105      	movs	r1, #5
 80039e8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1cba      	adds	r2, r7, #2
 80039fa:	8812      	ldrh	r2, [r2, #0]
 80039fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1cba      	adds	r2, r7, #2
 8003a02:	8812      	ldrh	r2, [r2, #0]
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1cba      	adds	r2, r7, #2
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1cba      	adds	r2, r7, #2
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d007      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d000      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x120>
 8003a52:	e07f      	b.n	8003b54 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x134>
 8003a5c:	231a      	movs	r3, #26
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d000      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x134>
 8003a66:	e06a      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8c:	e057      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1a0>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x1a0>
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d113      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d119      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x1e2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d014      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	b292      	uxth	r2, r2
 8003af8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	1c9a      	adds	r2, r3, #2
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b12:	2301      	movs	r3, #1
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b16:	f7fd fc0d 	bl	8001334 <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d80b      	bhi.n	8003b3e <HAL_SPI_TransmitReceive+0x20a>
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	3301      	adds	r3, #1
 8003b2a:	d008      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003b2c:	232b      	movs	r3, #43	; 0x2b
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2203      	movs	r2, #3
 8003b32:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2251      	movs	r2, #81	; 0x51
 8003b38:	2101      	movs	r1, #1
 8003b3a:	5499      	strb	r1, [r3, r2]
        goto error;
 8003b3c:	e0ba      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1a2      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x15a>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d19d      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x15a>
 8003b52:	e083      	b.n	8003c5c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x234>
 8003b5c:	231a      	movs	r3, #26
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d000      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x234>
 8003b66:	e06f      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8e:	e05b      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2202      	movs	r2, #2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x2a4>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d017      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x2a4>
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d114      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2201      	movs	r2, #1
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d119      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x2e6>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d014      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c16:	2301      	movs	r3, #1
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c1a:	f7fd fb8b 	bl	8001334 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d802      	bhi.n	8003c30 <HAL_SPI_TransmitReceive+0x2fc>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	d102      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x302>
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003c36:	232b      	movs	r3, #43	; 0x2b
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2251      	movs	r2, #81	; 0x51
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
        goto error;
 8003c46:	e035      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d19e      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x25c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d199      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 f92a 	bl	8003ebc <SPI_EndRxTxTransaction>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003c6c:	232b      	movs	r3, #43	; 0x2b
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c7a:	e01b      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003ca2:	232b      	movs	r3, #43	; 0x2b
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e003      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2251      	movs	r2, #81	; 0x51
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2250      	movs	r2, #80	; 0x50
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003cbc:	232b      	movs	r3, #43	; 0x2b
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	781b      	ldrb	r3, [r3, #0]
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b00c      	add	sp, #48	; 0x30
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fd fb2a 	bl	8001334 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fd fb22 	bl	8001334 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	; (8003de0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	015b      	lsls	r3, r3, #5
 8003cfa:	0d1b      	lsrs	r3, r3, #20
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	4353      	muls	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e058      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	d055      	beq.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0a:	f7fd fb13 	bl	8001334 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d902      	bls.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d142      	bne.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	21e0      	movs	r1, #224	; 0xe0
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	2382      	movs	r3, #130	; 0x82
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d113      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d005      	beq.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d110      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	491a      	ldr	r1, [pc, #104]	; (8003de4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0189      	lsls	r1, r1, #6
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2251      	movs	r2, #81	; 0x51
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2250      	movs	r2, #80	; 0x50
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e017      	b.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	425a      	negs	r2, r3
 8003dc6:	4153      	adcs	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	001a      	movs	r2, r3
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d197      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b008      	add	sp, #32
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000000 	.word	0x20000000
 8003de4:	ffffdfff 	.word	0xffffdfff

08003de8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	2382      	movs	r3, #130	; 0x82
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d113      	bne.n	8003e28 <SPI_EndRxTransaction+0x40>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d005      	beq.n	8003e18 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d107      	bne.n	8003e28 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	2382      	movs	r3, #130	; 0x82
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d12b      	bne.n	8003e8c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d012      	beq.n	8003e66 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	0013      	movs	r3, r2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	f7ff ff3d 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d02d      	beq.n	8003eb2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e026      	b.n	8003eb4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	0013      	movs	r3, r2
 8003e70:	2200      	movs	r2, #0
 8003e72:	2101      	movs	r1, #1
 8003e74:	f7ff ff2a 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d01a      	beq.n	8003eb2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	2220      	movs	r2, #32
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e013      	b.n	8003eb4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	0013      	movs	r3, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	2101      	movs	r1, #1
 8003e9a:	f7ff ff17 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e9e:	1e03      	subs	r3, r0, #0
 8003ea0:	d007      	beq.n	8003eb2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e000      	b.n	8003eb4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <SPI_EndRxTxTransaction+0x84>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	491d      	ldr	r1, [pc, #116]	; (8003f44 <SPI_EndRxTxTransaction+0x88>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc f91a 	bl	8000108 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	0013      	movs	r3, r2
 8003eda:	015b      	lsls	r3, r3, #5
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	2382      	movs	r3, #130	; 0x82
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d112      	bne.n	8003f18 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	0013      	movs	r3, r2
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	f7ff fee4 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d016      	beq.n	8003f36 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00f      	b.n	8003f38 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d0f2      	beq.n	8003f18 <SPI_EndRxTxTransaction+0x5c>
 8003f32:	e000      	b.n	8003f36 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003f34:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000000 	.word	0x20000000
 8003f44:	016e3600 	.word	0x016e3600

08003f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e044      	b.n	8003fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2278      	movs	r2, #120	; 0x78
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc fd11 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2224      	movs	r2, #36	; 0x24
 8003f76:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 f830 	bl	8003ff0 <UART_SetConfig>
 8003f90:	0003      	movs	r3, r0
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e024      	b.n	8003fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 faa7 	bl	80044f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	490d      	ldr	r1, [pc, #52]	; (8003fec <HAL_UART_Init+0xa4>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	212a      	movs	r1, #42	; 0x2a
 8003fc6:	438a      	bics	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 fb3f 	bl	8004660 <UART_CheckIdleState>
 8003fe2:	0003      	movs	r3, r0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	ffffb7ff 	.word	0xffffb7ff

08003ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff8:	231a      	movs	r3, #26
 8003ffa:	2218      	movs	r2, #24
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4ac6      	ldr	r2, [pc, #792]	; (800433c <UART_SetConfig+0x34c>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4ac1      	ldr	r2, [pc, #772]	; (8004340 <UART_SetConfig+0x350>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4abb      	ldr	r2, [pc, #748]	; (8004344 <UART_SetConfig+0x354>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004060:	4313      	orrs	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4ab7      	ldr	r2, [pc, #732]	; (8004348 <UART_SetConfig+0x358>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4ab3      	ldr	r2, [pc, #716]	; (800434c <UART_SetConfig+0x35c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d131      	bne.n	80040e8 <UART_SetConfig+0xf8>
 8004084:	4bb2      	ldr	r3, [pc, #712]	; (8004350 <UART_SetConfig+0x360>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	2b03      	cmp	r3, #3
 800408e:	d01d      	beq.n	80040cc <UART_SetConfig+0xdc>
 8004090:	d823      	bhi.n	80040da <UART_SetConfig+0xea>
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00c      	beq.n	80040b0 <UART_SetConfig+0xc0>
 8004096:	d820      	bhi.n	80040da <UART_SetConfig+0xea>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0xb2>
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00e      	beq.n	80040be <UART_SetConfig+0xce>
 80040a0:	e01b      	b.n	80040da <UART_SetConfig+0xea>
 80040a2:	231b      	movs	r3, #27
 80040a4:	2218      	movs	r2, #24
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e09c      	b.n	80041ea <UART_SetConfig+0x1fa>
 80040b0:	231b      	movs	r3, #27
 80040b2:	2218      	movs	r2, #24
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	2202      	movs	r2, #2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e095      	b.n	80041ea <UART_SetConfig+0x1fa>
 80040be:	231b      	movs	r3, #27
 80040c0:	2218      	movs	r2, #24
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	19db      	adds	r3, r3, r7
 80040c6:	2204      	movs	r2, #4
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e08e      	b.n	80041ea <UART_SetConfig+0x1fa>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2218      	movs	r2, #24
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2208      	movs	r2, #8
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e087      	b.n	80041ea <UART_SetConfig+0x1fa>
 80040da:	231b      	movs	r3, #27
 80040dc:	2218      	movs	r2, #24
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	19db      	adds	r3, r3, r7
 80040e2:	2210      	movs	r2, #16
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e080      	b.n	80041ea <UART_SetConfig+0x1fa>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a99      	ldr	r2, [pc, #612]	; (8004354 <UART_SetConfig+0x364>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d131      	bne.n	8004156 <UART_SetConfig+0x166>
 80040f2:	4b97      	ldr	r3, [pc, #604]	; (8004350 <UART_SetConfig+0x360>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	220c      	movs	r2, #12
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d01d      	beq.n	800413a <UART_SetConfig+0x14a>
 80040fe:	d823      	bhi.n	8004148 <UART_SetConfig+0x158>
 8004100:	2b08      	cmp	r3, #8
 8004102:	d00c      	beq.n	800411e <UART_SetConfig+0x12e>
 8004104:	d820      	bhi.n	8004148 <UART_SetConfig+0x158>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x120>
 800410a:	2b04      	cmp	r3, #4
 800410c:	d00e      	beq.n	800412c <UART_SetConfig+0x13c>
 800410e:	e01b      	b.n	8004148 <UART_SetConfig+0x158>
 8004110:	231b      	movs	r3, #27
 8004112:	2218      	movs	r2, #24
 8004114:	189b      	adds	r3, r3, r2
 8004116:	19db      	adds	r3, r3, r7
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e065      	b.n	80041ea <UART_SetConfig+0x1fa>
 800411e:	231b      	movs	r3, #27
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e05e      	b.n	80041ea <UART_SetConfig+0x1fa>
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e057      	b.n	80041ea <UART_SetConfig+0x1fa>
 800413a:	231b      	movs	r3, #27
 800413c:	2218      	movs	r2, #24
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2208      	movs	r2, #8
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e050      	b.n	80041ea <UART_SetConfig+0x1fa>
 8004148:	231b      	movs	r3, #27
 800414a:	2218      	movs	r2, #24
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2210      	movs	r2, #16
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e049      	b.n	80041ea <UART_SetConfig+0x1fa>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7a      	ldr	r2, [pc, #488]	; (8004344 <UART_SetConfig+0x354>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d13e      	bne.n	80041de <UART_SetConfig+0x1ee>
 8004160:	4b7b      	ldr	r3, [pc, #492]	; (8004350 <UART_SetConfig+0x360>)
 8004162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004164:	23c0      	movs	r3, #192	; 0xc0
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4013      	ands	r3, r2
 800416a:	22c0      	movs	r2, #192	; 0xc0
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	4293      	cmp	r3, r2
 8004170:	d027      	beq.n	80041c2 <UART_SetConfig+0x1d2>
 8004172:	22c0      	movs	r2, #192	; 0xc0
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	4293      	cmp	r3, r2
 8004178:	d82a      	bhi.n	80041d0 <UART_SetConfig+0x1e0>
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	0112      	lsls	r2, r2, #4
 800417e:	4293      	cmp	r3, r2
 8004180:	d011      	beq.n	80041a6 <UART_SetConfig+0x1b6>
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	0112      	lsls	r2, r2, #4
 8004186:	4293      	cmp	r3, r2
 8004188:	d822      	bhi.n	80041d0 <UART_SetConfig+0x1e0>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <UART_SetConfig+0x1a8>
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	00d2      	lsls	r2, r2, #3
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <UART_SetConfig+0x1c4>
 8004196:	e01b      	b.n	80041d0 <UART_SetConfig+0x1e0>
 8004198:	231b      	movs	r3, #27
 800419a:	2218      	movs	r2, #24
 800419c:	189b      	adds	r3, r3, r2
 800419e:	19db      	adds	r3, r3, r7
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e021      	b.n	80041ea <UART_SetConfig+0x1fa>
 80041a6:	231b      	movs	r3, #27
 80041a8:	2218      	movs	r2, #24
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	19db      	adds	r3, r3, r7
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e01a      	b.n	80041ea <UART_SetConfig+0x1fa>
 80041b4:	231b      	movs	r3, #27
 80041b6:	2218      	movs	r2, #24
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	2204      	movs	r2, #4
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e013      	b.n	80041ea <UART_SetConfig+0x1fa>
 80041c2:	231b      	movs	r3, #27
 80041c4:	2218      	movs	r2, #24
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	19db      	adds	r3, r3, r7
 80041ca:	2208      	movs	r2, #8
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e00c      	b.n	80041ea <UART_SetConfig+0x1fa>
 80041d0:	231b      	movs	r3, #27
 80041d2:	2218      	movs	r2, #24
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2210      	movs	r2, #16
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e005      	b.n	80041ea <UART_SetConfig+0x1fa>
 80041de:	231b      	movs	r3, #27
 80041e0:	2218      	movs	r2, #24
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	2210      	movs	r2, #16
 80041e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a55      	ldr	r2, [pc, #340]	; (8004344 <UART_SetConfig+0x354>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d000      	beq.n	80041f6 <UART_SetConfig+0x206>
 80041f4:	e084      	b.n	8004300 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f6:	231b      	movs	r3, #27
 80041f8:	2218      	movs	r2, #24
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	19db      	adds	r3, r3, r7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d01d      	beq.n	8004240 <UART_SetConfig+0x250>
 8004204:	dc20      	bgt.n	8004248 <UART_SetConfig+0x258>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d015      	beq.n	8004236 <UART_SetConfig+0x246>
 800420a:	dc1d      	bgt.n	8004248 <UART_SetConfig+0x258>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <UART_SetConfig+0x226>
 8004210:	2b02      	cmp	r3, #2
 8004212:	d005      	beq.n	8004220 <UART_SetConfig+0x230>
 8004214:	e018      	b.n	8004248 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7fe feb3 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 800421a:	0003      	movs	r3, r0
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800421e:	e01c      	b.n	800425a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <UART_SetConfig+0x360>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2210      	movs	r2, #16
 8004226:	4013      	ands	r3, r2
 8004228:	d002      	beq.n	8004230 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800422a:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <UART_SetConfig+0x368>)
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800422e:	e014      	b.n	800425a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004230:	4b4a      	ldr	r3, [pc, #296]	; (800435c <UART_SetConfig+0x36c>)
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004234:	e011      	b.n	800425a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fdf3 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 800423a:	0003      	movs	r3, r0
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800423e:	e00c      	b.n	800425a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004246:	e008      	b.n	800425a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800424c:	231a      	movs	r3, #26
 800424e:	2218      	movs	r2, #24
 8004250:	189b      	adds	r3, r3, r2
 8004252:	19db      	adds	r3, r3, r7
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
        break;
 8004258:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d100      	bne.n	8004262 <UART_SetConfig+0x272>
 8004260:	e132      	b.n	80044c8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	0013      	movs	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	189b      	adds	r3, r3, r2
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d305      	bcc.n	800427e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d906      	bls.n	800428c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800427e:	231a      	movs	r3, #26
 8004280:	2218      	movs	r2, #24
 8004282:	189b      	adds	r3, r3, r2
 8004284:	19db      	adds	r3, r3, r7
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e11d      	b.n	80044c8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	6939      	ldr	r1, [r7, #16]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	000b      	movs	r3, r1
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	0010      	movs	r0, r2
 800429e:	0205      	lsls	r5, r0, #8
 80042a0:	431d      	orrs	r5, r3
 80042a2:	000b      	movs	r3, r1
 80042a4:	021c      	lsls	r4, r3, #8
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	1900      	adds	r0, r0, r4
 80042b8:	4169      	adcs	r1, r5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	2300      	movs	r3, #0
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f7fb ffaa 	bl	8000220 <__aeabi_uldivmod>
 80042cc:	0002      	movs	r2, r0
 80042ce:	000b      	movs	r3, r1
 80042d0:	0013      	movs	r3, r2
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d6:	23c0      	movs	r3, #192	; 0xc0
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	429a      	cmp	r2, r3
 80042dc:	d309      	bcc.n	80042f2 <UART_SetConfig+0x302>
 80042de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	035b      	lsls	r3, r3, #13
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d204      	bcs.n	80042f2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e0ea      	b.n	80044c8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80042f2:	231a      	movs	r3, #26
 80042f4:	2218      	movs	r2, #24
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e0e3      	b.n	80044c8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	429a      	cmp	r2, r3
 800430a:	d000      	beq.n	800430e <UART_SetConfig+0x31e>
 800430c:	e085      	b.n	800441a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800430e:	231b      	movs	r3, #27
 8004310:	2218      	movs	r2, #24
 8004312:	189b      	adds	r3, r3, r2
 8004314:	19db      	adds	r3, r3, r7
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d837      	bhi.n	800438c <UART_SetConfig+0x39c>
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <UART_SetConfig+0x370>)
 8004320:	18d3      	adds	r3, r2, r3
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004326:	f7fe fe2b 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 800432a:	0003      	movs	r3, r0
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800432e:	e036      	b.n	800439e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fe3c 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004334:	0003      	movs	r3, r0
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004338:	e031      	b.n	800439e <UART_SetConfig+0x3ae>
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	efff69f3 	.word	0xefff69f3
 8004340:	ffffcfff 	.word	0xffffcfff
 8004344:	40004800 	.word	0x40004800
 8004348:	fffff4ff 	.word	0xfffff4ff
 800434c:	40013800 	.word	0x40013800
 8004350:	40021000 	.word	0x40021000
 8004354:	40004400 	.word	0x40004400
 8004358:	003d0900 	.word	0x003d0900
 800435c:	00f42400 	.word	0x00f42400
 8004360:	080060e0 	.word	0x080060e0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004364:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <UART_SetConfig+0x4f8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2210      	movs	r2, #16
 800436a:	4013      	ands	r3, r2
 800436c:	d002      	beq.n	8004374 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800436e:	4b5f      	ldr	r3, [pc, #380]	; (80044ec <UART_SetConfig+0x4fc>)
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004372:	e014      	b.n	800439e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004374:	4b5e      	ldr	r3, [pc, #376]	; (80044f0 <UART_SetConfig+0x500>)
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004378:	e011      	b.n	800439e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fe fd51 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 800437e:	0003      	movs	r3, r0
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004382:	e00c      	b.n	800439e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800438a:	e008      	b.n	800439e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004390:	231a      	movs	r3, #26
 8004392:	2218      	movs	r2, #24
 8004394:	189b      	adds	r3, r3, r2
 8004396:	19db      	adds	r3, r3, r7
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
        break;
 800439c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d100      	bne.n	80043a6 <UART_SetConfig+0x3b6>
 80043a4:	e090      	b.n	80044c8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	005a      	lsls	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	18d2      	adds	r2, r2, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	0019      	movs	r1, r3
 80043b8:	0010      	movs	r0, r2
 80043ba:	f7fb fea5 	bl	8000108 <__udivsi3>
 80043be:	0003      	movs	r3, r0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d921      	bls.n	800440c <UART_SetConfig+0x41c>
 80043c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d21c      	bcs.n	800440c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	200e      	movs	r0, #14
 80043d8:	2418      	movs	r4, #24
 80043da:	1903      	adds	r3, r0, r4
 80043dc:	19db      	adds	r3, r3, r7
 80043de:	210f      	movs	r1, #15
 80043e0:	438a      	bics	r2, r1
 80043e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2207      	movs	r2, #7
 80043ec:	4013      	ands	r3, r2
 80043ee:	b299      	uxth	r1, r3
 80043f0:	1903      	adds	r3, r0, r4
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	1902      	adds	r2, r0, r4
 80043f6:	19d2      	adds	r2, r2, r7
 80043f8:	8812      	ldrh	r2, [r2, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1902      	adds	r2, r0, r4
 8004404:	19d2      	adds	r2, r2, r7
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e05d      	b.n	80044c8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800440c:	231a      	movs	r3, #26
 800440e:	2218      	movs	r2, #24
 8004410:	189b      	adds	r3, r3, r2
 8004412:	19db      	adds	r3, r3, r7
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e056      	b.n	80044c8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441a:	231b      	movs	r3, #27
 800441c:	2218      	movs	r2, #24
 800441e:	189b      	adds	r3, r3, r2
 8004420:	19db      	adds	r3, r3, r7
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d822      	bhi.n	800446e <UART_SetConfig+0x47e>
 8004428:	009a      	lsls	r2, r3, #2
 800442a:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <UART_SetConfig+0x504>)
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004432:	f7fe fda5 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004436:	0003      	movs	r3, r0
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800443a:	e021      	b.n	8004480 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7fe fdb6 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004440:	0003      	movs	r3, r0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004444:	e01c      	b.n	8004480 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <UART_SetConfig+0x4f8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2210      	movs	r2, #16
 800444c:	4013      	ands	r3, r2
 800444e:	d002      	beq.n	8004456 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <UART_SetConfig+0x4fc>)
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004454:	e014      	b.n	8004480 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <UART_SetConfig+0x500>)
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800445a:	e011      	b.n	8004480 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445c:	f7fe fce0 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8004460:	0003      	movs	r3, r0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004464:	e00c      	b.n	8004480 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446c:	e008      	b.n	8004480 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004472:	231a      	movs	r3, #26
 8004474:	2218      	movs	r2, #24
 8004476:	189b      	adds	r3, r3, r2
 8004478:	19db      	adds	r3, r3, r7
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
        break;
 800447e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	085a      	lsrs	r2, r3, #1
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	18d2      	adds	r2, r2, r3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0019      	movs	r1, r3
 8004496:	0010      	movs	r0, r2
 8004498:	f7fb fe36 	bl	8000108 <__udivsi3>
 800449c:	0003      	movs	r3, r0
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2b0f      	cmp	r3, #15
 80044a4:	d90a      	bls.n	80044bc <UART_SetConfig+0x4cc>
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	025b      	lsls	r3, r3, #9
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d205      	bcs.n	80044bc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	e005      	b.n	80044c8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80044bc:	231a      	movs	r3, #26
 80044be:	2218      	movs	r2, #24
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	19db      	adds	r3, r3, r7
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2200      	movs	r2, #0
 80044cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2200      	movs	r2, #0
 80044d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044d4:	231a      	movs	r3, #26
 80044d6:	2218      	movs	r2, #24
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	19db      	adds	r3, r3, r7
 80044dc:	781b      	ldrb	r3, [r3, #0]
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b00e      	add	sp, #56	; 0x38
 80044e4:	bdb0      	pop	{r4, r5, r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	40021000 	.word	0x40021000
 80044ec:	003d0900 	.word	0x003d0900
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	08006104 	.word	0x08006104

080044f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2201      	movs	r2, #1
 8004506:	4013      	ands	r3, r2
 8004508:	d00b      	beq.n	8004522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a4a      	ldr	r2, [pc, #296]	; (800463c <UART_AdvFeatureConfig+0x144>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2202      	movs	r2, #2
 8004528:	4013      	ands	r3, r2
 800452a:	d00b      	beq.n	8004544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4a43      	ldr	r2, [pc, #268]	; (8004640 <UART_AdvFeatureConfig+0x148>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2204      	movs	r2, #4
 800454a:	4013      	ands	r3, r2
 800454c:	d00b      	beq.n	8004566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <UART_AdvFeatureConfig+0x14c>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2208      	movs	r2, #8
 800456c:	4013      	ands	r3, r2
 800456e:	d00b      	beq.n	8004588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a34      	ldr	r2, [pc, #208]	; (8004648 <UART_AdvFeatureConfig+0x150>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2210      	movs	r2, #16
 800458e:	4013      	ands	r3, r2
 8004590:	d00b      	beq.n	80045aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a2c      	ldr	r2, [pc, #176]	; (800464c <UART_AdvFeatureConfig+0x154>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2220      	movs	r2, #32
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00b      	beq.n	80045cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <UART_AdvFeatureConfig+0x158>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	4013      	ands	r3, r2
 80045d4:	d01d      	beq.n	8004612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <UART_AdvFeatureConfig+0x15c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	035b      	lsls	r3, r3, #13
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d10b      	bne.n	8004612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <UART_AdvFeatureConfig+0x160>)
 8004602:	4013      	ands	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	4013      	ands	r3, r2
 800461a:	d00b      	beq.n	8004634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <UART_AdvFeatureConfig+0x164>)
 8004624:	4013      	ands	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fffdffff 	.word	0xfffdffff
 8004640:	fffeffff 	.word	0xfffeffff
 8004644:	fffbffff 	.word	0xfffbffff
 8004648:	ffff7fff 	.word	0xffff7fff
 800464c:	ffffefff 	.word	0xffffefff
 8004650:	ffffdfff 	.word	0xffffdfff
 8004654:	ffefffff 	.word	0xffefffff
 8004658:	ff9fffff 	.word	0xff9fffff
 800465c:	fff7ffff 	.word	0xfff7ffff

08004660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b092      	sub	sp, #72	; 0x48
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2284      	movs	r2, #132	; 0x84
 800466c:	2100      	movs	r1, #0
 800466e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004670:	f7fc fe60 	bl	8001334 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2208      	movs	r2, #8
 8004680:	4013      	ands	r3, r2
 8004682:	2b08      	cmp	r3, #8
 8004684:	d12c      	bne.n	80046e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	2280      	movs	r2, #128	; 0x80
 800468a:	0391      	lsls	r1, r2, #14
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4a46      	ldr	r2, [pc, #280]	; (80047a8 <UART_CheckIdleState+0x148>)
 8004690:	9200      	str	r2, [sp, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	f000 f88c 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d021      	beq.n	80046e0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8310 	mrs	r3, PRIMASK
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046a6:	2301      	movs	r3, #1
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	438a      	bics	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2278      	movs	r2, #120	; 0x78
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e05f      	b.n	80047a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d146      	bne.n	800477c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	03d1      	lsls	r1, r2, #15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <UART_CheckIdleState+0x148>)
 80046f8:	9200      	str	r2, [sp, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f000 f858 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d03b      	beq.n	800477c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004704:	f3ef 8310 	mrs	r3, PRIMASK
 8004708:	60fb      	str	r3, [r7, #12]
  return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
 800470e:	2301      	movs	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4921      	ldr	r1, [pc, #132]	; (80047ac <UART_CheckIdleState+0x14c>)
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f383 8810 	msr	PRIMASK, r3
}
 8004734:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004736:	f3ef 8310 	mrs	r3, PRIMASK
 800473a:	61bb      	str	r3, [r7, #24]
  return(result);
 800473c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
 8004740:	2301      	movs	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	438a      	bics	r2, r1
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f383 8810 	msr	PRIMASK, r3
}
 8004766:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	2120      	movs	r1, #32
 800476e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2278      	movs	r2, #120	; 0x78
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e011      	b.n	80047a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	2120      	movs	r1, #32
 8004788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2278      	movs	r2, #120	; 0x78
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b010      	add	sp, #64	; 0x40
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	01ffffff 	.word	0x01ffffff
 80047ac:	fffffedf 	.word	0xfffffedf

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e04b      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	3301      	adds	r3, #1
 80047c6:	d048      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7fc fdb4 	bl	8001334 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <UART_WaitOnFlagUntilTimeout+0x2e>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04b      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2204      	movs	r2, #4
 80047ea:	4013      	ands	r3, r2
 80047ec:	d035      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2208      	movs	r2, #8
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d111      	bne.n	8004820 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f83c 	bl	8004884 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2284      	movs	r2, #132	; 0x84
 8004810:	2108      	movs	r1, #8
 8004812:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2278      	movs	r2, #120	; 0x78
 8004818:	2100      	movs	r1, #0
 800481a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e02c      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	401a      	ands	r2, r3
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	429a      	cmp	r2, r3
 8004832:	d112      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f81f 	bl	8004884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2284      	movs	r2, #132	; 0x84
 800484a:	2120      	movs	r1, #32
 800484c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2278      	movs	r2, #120	; 0x78
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e00f      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	425a      	negs	r2, r3
 800486a:	4153      	adcs	r3, r2
 800486c:	b2db      	uxtb	r3, r3
 800486e:	001a      	movs	r2, r3
 8004870:	1dfb      	adds	r3, r7, #7
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d0a4      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b004      	add	sp, #16
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	617b      	str	r3, [r7, #20]
  return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4926      	ldr	r1, [pc, #152]	; (8004948 <UART_EndRxTransfer+0xc4>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048be:	f3ef 8310 	mrs	r3, PRIMASK
 80048c2:	623b      	str	r3, [r7, #32]
  return(result);
 80048c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30
 80048c8:	2301      	movs	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	438a      	bics	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f383 8810 	msr	PRIMASK, r3
}
 80048ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d118      	bne.n	800492a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f8:	f3ef 8310 	mrs	r3, PRIMASK
 80048fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80048fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	2301      	movs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2110      	movs	r1, #16
 800491a:	438a      	bics	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	2120      	movs	r1, #32
 8004930:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b00e      	add	sp, #56	; 0x38
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	fffffedf 	.word	0xfffffedf

0800494c <memset>:
 800494c:	0003      	movs	r3, r0
 800494e:	1882      	adds	r2, r0, r2
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	7019      	strb	r1, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2600      	movs	r6, #0
 8004960:	4c0c      	ldr	r4, [pc, #48]	; (8004994 <__libc_init_array+0x38>)
 8004962:	4d0d      	ldr	r5, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	2600      	movs	r6, #0
 800496e:	f000 f819 	bl	80049a4 <_init>
 8004972:	4c0a      	ldr	r4, [pc, #40]	; (800499c <__libc_init_array+0x40>)
 8004974:	4d0a      	ldr	r5, [pc, #40]	; (80049a0 <__libc_init_array+0x44>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	00b3      	lsls	r3, r6, #2
 8004982:	58eb      	ldr	r3, [r5, r3]
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	00b3      	lsls	r3, r6, #2
 800498c:	58eb      	ldr	r3, [r5, r3]
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08006130 	.word	0x08006130
 8004998:	08006130 	.word	0x08006130
 800499c:	08006134 	.word	0x08006134
 80049a0:	08006130 	.word	0x08006130

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
