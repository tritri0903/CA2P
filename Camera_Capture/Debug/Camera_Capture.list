
Camera_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df8  08009df8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e00  08009e00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e04  08009e04  00019e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000078  08009e80  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08009e80  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136d9  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f45  00000000  00000000  000337bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d21  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161fe  00000000  00000000  00038509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a65  00000000  00000000  0004e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cd17  00000000  00000000  0006616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041c8  00000000  00000000  000e2e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800945c 	.word	0x0800945c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800945c 	.word	0x0800945c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	4c2a      	ldr	r4, [pc, #168]	; (8000578 <main+0xac>)
 80004d0:	44a5      	add	sp, r4
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 ffd6 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f85c 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f988 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f968 	bl	80007b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f936 	bl	8000754 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e8:	f000 f8fc 	bl	80006e4 <MX_SPI1_Init>
  MX_I2C1_Init();
 80004ec:	f000 f8ba 	bl	8000664 <MX_I2C1_Init>
  MX_FATFS_Init();
 80004f0:	f005 fa08 	bl	8005904 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <main+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	2120      	movs	r1, #32
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fcc9 	bl	8001e92 <HAL_GPIO_WritePin>

  //ArduCAM_Init(OV2640);
  uint8_t debug[] = "Hello Serial\r\n";
 8000500:	2580      	movs	r5, #128	; 0x80
 8000502:	016d      	lsls	r5, r5, #5
 8000504:	197b      	adds	r3, r7, r5
 8000506:	4a1e      	ldr	r2, [pc, #120]	; (8000580 <main+0xb4>)
 8000508:	ca13      	ldmia	r2!, {r0, r1, r4}
 800050a:	c313      	stmia	r3!, {r0, r1, r4}
 800050c:	8811      	ldrh	r1, [r2, #0]
 800050e:	8019      	strh	r1, [r3, #0]
 8000510:	7892      	ldrb	r2, [r2, #2]
 8000512:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart2, debug, sizeof(debug)-1, HAL_MAX_DELAY);
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	1979      	adds	r1, r7, r5
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0xb8>)
 800051c:	220e      	movs	r2, #14
 800051e:	f004 fca3 	bl	8004e68 <HAL_UART_Transmit>
  uint8_t rxBuffer[4096];

  DMA_Complet = 0;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <main+0xbc>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]

  while(SD_Card_Test());
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	f000 f9e9 	bl	8000900 <SD_Card_Test>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d1fb      	bne.n	800052a <main+0x5e>
  ArduCAM_Init(OV2640);
 8000532:	2005      	movs	r0, #5
 8000534:	f000 fcb4 	bl	8000ea0 <ArduCAM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	019b      	lsls	r3, r3, #6
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0xb0>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f001 fc89 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d1f6      	bne.n	8000538 <main+0x6c>
		  SingleCapTransfer();
 800054a:	f000 fd1f 	bl	8000f8c <SingleCapTransfer>
		  memset(TxBuffer, 0, sizeof(TxBuffer));
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	005a      	lsls	r2, r3, #1
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <main+0xc0>)
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f008 fafa 	bl	8008b50 <memset>
		  sprintf(TxBuffer, "Capture Done! \r\n");
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <main+0xc4>)
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0xc0>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f008 fad4 	bl	8008b10 <siprintf>
		  HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), 100);
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	005a      	lsls	r2, r3, #1
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <main+0xc0>)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <main+0xb8>)
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	f004 fc79 	bl	8004e68 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000576:	e7df      	b.n	8000538 <main+0x6c>
 8000578:	ffffeff0 	.word	0xffffeff0
 800057c:	50000800 	.word	0x50000800
 8000580:	08009488 	.word	0x08009488
 8000584:	200001d0 	.word	0x200001d0
 8000588:	20000358 	.word	0x20000358
 800058c:	20000258 	.word	0x20000258
 8000590:	08009474 	.word	0x08009474

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b09d      	sub	sp, #116	; 0x74
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	2438      	movs	r4, #56	; 0x38
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	2338      	movs	r3, #56	; 0x38
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f008 fad3 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005aa:	2324      	movs	r3, #36	; 0x24
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	0018      	movs	r0, r3
 80005b0:	2314      	movs	r3, #20
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f008 facb 	bl	8008b50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ba:	003b      	movs	r3, r7
 80005bc:	0018      	movs	r0, r3
 80005be:	2324      	movs	r3, #36	; 0x24
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f008 fac4 	bl	8008b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xc8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a24      	ldr	r2, [pc, #144]	; (8000660 <SystemClock_Config+0xcc>)
 80005ce:	401a      	ands	r2, r3
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xc8>)
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	0109      	lsls	r1, r1, #4
 80005d6:	430a      	orrs	r2, r1
 80005d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	22a0      	movs	r2, #160	; 0xa0
 80005e4:	02d2      	lsls	r2, r2, #11
 80005e6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 fa5f 	bl	8002ab4 <HAL_RCC_OscConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005fa:	f000 fa49 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	2124      	movs	r1, #36	; 0x24
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220f      	movs	r2, #15
 8000604:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2202      	movs	r2, #2
 800060a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2290      	movs	r2, #144	; 0x90
 8000610:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f002 fe0a 	bl	800323c <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800062c:	f000 fa30 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000630:	003b      	movs	r3, r7
 8000632:	220a      	movs	r2, #10
 8000634:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	f003 f81d 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800064e:	f000 fa1f 	bl	8000a90 <Error_Handler>
  }
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b01d      	add	sp, #116	; 0x74
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40007000 	.word	0x40007000
 8000660:	ffffe7ff 	.word	0xffffe7ff

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fc13 	bl	8001ecc <HAL_I2C_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 f9f1 	bl	8000a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 f966 	bl	8002984 <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f9e8 	bl	8000a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 f9a9 	bl	8002a1c <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f9df 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000094 	.word	0x20000094
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00000509 	.word	0x00000509

080006e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_SPI1_Init+0x68>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	; (8000750 <MX_SPI1_Init+0x6c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI1_Init+0x68>)
 80006f0:	2282      	movs	r2, #130	; 0x82
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_SPI1_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_SPI1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI1_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_SPI1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x68>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_SPI1_Init+0x68>)
 8000718:	2218      	movs	r2, #24
 800071a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_SPI1_Init+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI1_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_SPI1_Init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI1_Init+0x68>)
 8000730:	2207      	movs	r2, #7
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_SPI1_Init+0x68>)
 8000736:	0018      	movs	r0, r3
 8000738:	f003 f932 	bl	80039a0 <HAL_SPI_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f9a6 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000e8 	.word	0x200000e8
 8000750:	40013000 	.word	0x40013000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	22e1      	movs	r2, #225	; 0xe1
 8000762:	0252      	lsls	r2, r2, #9
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	0018      	movs	r0, r3
 800079a:	f004 fb11 	bl	8004dc0 <HAL_UART_Init>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f975 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001d0 	.word	0x200001d0
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_DMA_Init+0x38>)
 80007bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_DMA_Init+0x38>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_DMA_Init+0x38>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	200a      	movs	r0, #10
 80007d8:	f000 ff94 	bl	8001704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007dc:	200a      	movs	r0, #10
 80007de:	f000 ffa6 	bl	800172e <HAL_NVIC_EnableIRQ>

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08b      	sub	sp, #44	; 0x2c
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	2414      	movs	r4, #20
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2314      	movs	r3, #20
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f008 f9a5 	bl	8008b50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x108>)
 800080c:	2104      	movs	r1, #4
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	2204      	movs	r2, #4
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <MX_GPIO_Init+0x108>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x108>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_GPIO_Init+0x108>)
 8000854:	2102      	movs	r1, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_GPIO_Init+0x108>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2202      	movs	r2, #2
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fb0f 	bl	8001e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_GPIO_Init+0x10c>)
 8000876:	2200      	movs	r2, #0
 8000878:	21a0      	movs	r1, #160	; 0xa0
 800087a:	0018      	movs	r0, r3
 800087c:	f001 fb09 	bl	8001e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	0192      	lsls	r2, r2, #6
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2284      	movs	r2, #132	; 0x84
 800088c:	0392      	lsls	r2, r2, #14
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	193b      	adds	r3, r7, r4
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_GPIO_Init+0x10c>)
 800089a:	0019      	movs	r1, r3
 800089c:	0010      	movs	r0, r2
 800089e:	f001 f965 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	193a      	adds	r2, r7, r4
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f952 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SD_CS_Pin;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	22a0      	movs	r2, #160	; 0xa0
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <MX_GPIO_Init+0x10c>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f001 f93f 	bl	8001b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b00b      	add	sp, #44	; 0x2c
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000
 80008fc:	50000800 	.word	0x50000800

08000900 <SD_Card_Test>:

/* USER CODE BEGIN 4 */
static uint8_t SD_Card_Test(void)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	4c4d      	ldr	r4, [pc, #308]	; (8000a38 <SD_Card_Test+0x138>)
 8000904:	44a5      	add	sp, r4
 8000906:	af00      	add	r7, sp, #0
	UINT RWC, WWC; // Read/Write Word Counter
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	char RW_Buffer[200];
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, "", 1);
 8000908:	4d4c      	ldr	r5, [pc, #304]	; (8000a3c <SD_Card_Test+0x13c>)
 800090a:	197c      	adds	r4, r7, r5
 800090c:	494c      	ldr	r1, [pc, #304]	; (8000a40 <SD_Card_Test+0x140>)
 800090e:	23bf      	movs	r3, #191	; 0xbf
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	2201      	movs	r2, #1
 8000916:	0018      	movs	r0, r3
 8000918:	f007 fc1e 	bl	8008158 <f_mount>
 800091c:	0003      	movs	r3, r0
 800091e:	7023      	strb	r3, [r4, #0]
	memset(TxBuffer, 0, sizeof(TxBuffer));
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	005a      	lsls	r2, r3, #1
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <SD_Card_Test+0x144>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f008 f911 	bl	8008b50 <memset>
	if (FR_Status != FR_OK){
 800092e:	197b      	adds	r3, r7, r5
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d02c      	beq.n	8000990 <SD_Card_Test+0x90>
		//------------------[ Unmount The SD Card ]--------------------
		FR_Status = f_mount(NULL, "", 0);
 8000936:	197c      	adds	r4, r7, r5
 8000938:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <SD_Card_Test+0x140>)
 800093a:	2200      	movs	r2, #0
 800093c:	0019      	movs	r1, r3
 800093e:	2000      	movs	r0, #0
 8000940:	f007 fc0a 	bl	8008158 <f_mount>
 8000944:	0003      	movs	r3, r0
 8000946:	7023      	strb	r3, [r4, #0]
		if (FR_Status != FR_OK)
 8000948:	197b      	adds	r3, r7, r5
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d00f      	beq.n	8000970 <SD_Card_Test+0x70>
		{
		  sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000950:	197b      	adds	r3, r7, r5
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	493c      	ldr	r1, [pc, #240]	; (8000a48 <SD_Card_Test+0x148>)
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <SD_Card_Test+0x144>)
 8000958:	0018      	movs	r0, r3
 800095a:	f008 f8d9 	bl	8008b10 <siprintf>
		  HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), HAL_MAX_DELAY);
 800095e:	2301      	movs	r3, #1
 8000960:	425b      	negs	r3, r3
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0052      	lsls	r2, r2, #1
 8000966:	4937      	ldr	r1, [pc, #220]	; (8000a44 <SD_Card_Test+0x144>)
 8000968:	4838      	ldr	r0, [pc, #224]	; (8000a4c <SD_Card_Test+0x14c>)
 800096a:	f004 fa7d 	bl	8004e68 <HAL_UART_Transmit>
 800096e:	e00d      	b.n	800098c <SD_Card_Test+0x8c>
		} else{
		  sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <SD_Card_Test+0x150>)
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <SD_Card_Test+0x144>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f008 f8ca 	bl	8008b10 <siprintf>
		  HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), HAL_MAX_DELAY);
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	492f      	ldr	r1, [pc, #188]	; (8000a44 <SD_Card_Test+0x144>)
 8000986:	4831      	ldr	r0, [pc, #196]	; (8000a4c <SD_Card_Test+0x14c>)
 8000988:	f004 fa6e 	bl	8004e68 <HAL_UART_Transmit>
		}
		return 1;
 800098c:	2301      	movs	r3, #1
 800098e:	e04c      	b.n	8000a2a <SD_Card_Test+0x12a>
	}
	else{
		sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n");
 8000990:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <SD_Card_Test+0x154>)
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <SD_Card_Test+0x144>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f008 f8ba 	bl	8008b10 <siprintf>
		HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), HAL_MAX_DELAY);
 800099c:	2301      	movs	r3, #1
 800099e:	425b      	negs	r3, r3
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	4927      	ldr	r1, [pc, #156]	; (8000a44 <SD_Card_Test+0x144>)
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <SD_Card_Test+0x14c>)
 80009a8:	f004 fa5e 	bl	8004e68 <HAL_UART_Transmit>
	}
	//------------------[ Open A Text File For Write & Write Data ]--------------------
	//Open the file
	FR_Status = f_open(&Fil, "im1.jpg", FA_CREATE_ALWAYS | FA_WRITE);
 80009ac:	4d23      	ldr	r5, [pc, #140]	; (8000a3c <SD_Card_Test+0x13c>)
 80009ae:	197c      	adds	r4, r7, r5
 80009b0:	4929      	ldr	r1, [pc, #164]	; (8000a58 <SD_Card_Test+0x158>)
 80009b2:	23cc      	movs	r3, #204	; 0xcc
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	220a      	movs	r2, #10
 80009b8:	0018      	movs	r0, r3
 80009ba:	f007 fc19 	bl	80081f0 <f_open>
 80009be:	0003      	movs	r3, r0
 80009c0:	7023      	strb	r3, [r4, #0]
	if(FR_Status != FR_OK)
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d010      	beq.n	80009ec <SD_Card_Test+0xec>
	{
	  sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 80009ca:	197b      	adds	r3, r7, r5
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4923      	ldr	r1, [pc, #140]	; (8000a5c <SD_Card_Test+0x15c>)
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <SD_Card_Test+0x144>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f008 f89c 	bl	8008b10 <siprintf>
	  HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), HAL_MAX_DELAY);
 80009d8:	2301      	movs	r3, #1
 80009da:	425b      	negs	r3, r3
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	4918      	ldr	r1, [pc, #96]	; (8000a44 <SD_Card_Test+0x144>)
 80009e2:	481a      	ldr	r0, [pc, #104]	; (8000a4c <SD_Card_Test+0x14c>)
 80009e4:	f004 fa40 	bl	8004e68 <HAL_UART_Transmit>
	  return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e01e      	b.n	8000a2a <SD_Card_Test+0x12a>
	}
	// (2) Write Data To The Text File [ Using f_write() Function ]
	strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 80009ec:	003a      	movs	r2, r7
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <SD_Card_Test+0x160>)
 80009f0:	0010      	movs	r0, r2
 80009f2:	0019      	movs	r1, r3
 80009f4:	2339      	movs	r3, #57	; 0x39
 80009f6:	001a      	movs	r2, r3
 80009f8:	f008 f8de 	bl	8008bb8 <memcpy>
	f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 80009fc:	003b      	movs	r3, r7
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fb82 	bl	8000108 <strlen>
 8000a04:	0002      	movs	r2, r0
 8000a06:	23c8      	movs	r3, #200	; 0xc8
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	0039      	movs	r1, r7
 8000a0c:	24cc      	movs	r4, #204	; 0xcc
 8000a0e:	1938      	adds	r0, r7, r4
 8000a10:	f007 fde2 	bl	80085d8 <f_write>
	// Close The File
	f_close(&Fil);
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	f007 ffe1 	bl	80089de <f_close>
	f_mount(NULL, "", 0);
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SD_Card_Test+0x140>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0019      	movs	r1, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	f007 fb98 	bl	8008158 <f_mount>
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	23a6      	movs	r3, #166	; 0xa6
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	449d      	add	sp, r3
 8000a34:	bdb0      	pop	{r4, r5, r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	fffffad0 	.word	0xfffffad0
 8000a3c:	0000052f 	.word	0x0000052f
 8000a40:	08009498 	.word	0x08009498
 8000a44:	20000258 	.word	0x20000258
 8000a48:	0800949c 	.word	0x0800949c
 8000a4c:	200001d0 	.word	0x200001d0
 8000a50:	080094d4 	.word	0x080094d4
 8000a54:	080094f8 	.word	0x080094f8
 8000a58:	0800951c 	.word	0x0800951c
 8000a5c:	08009524 	.word	0x08009524
 8000a60:	08009568 	.word	0x08009568

08000a64 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET); // Exemple avec GPIOB et PIN 12
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_SPI_RxCpltCallback+0x24>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fa0d 	bl	8001e92 <HAL_GPIO_WritePin>
	DMA_Complet = 1;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_SPI_RxCpltCallback+0x28>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	50000800 	.word	0x50000800
 8000a8c:	20000358 	.word	0x20000358

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_MspInit+0x24>)
 8000aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x24>)
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <HAL_MspInit+0x24>)
 8000aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_MspInit+0x24>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0549      	lsls	r1, r1, #21
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	240c      	movs	r4, #12
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f008 f83a 	bl	8008b50 <memset>
  if(hi2c->Instance==I2C1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d128      	bne.n	8000b38 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x80>)
 8000ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_I2C_MspInit+0x80>)
 8000aec:	2102      	movs	r1, #2
 8000aee:	430a      	orrs	r2, r1
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_I2C_MspInit+0x80>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	2202      	movs	r2, #2
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afe:	0021      	movs	r1, r4
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	22c0      	movs	r2, #192	; 0xc0
 8000b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2212      	movs	r2, #18
 8000b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2203      	movs	r2, #3
 8000b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_I2C_MspInit+0x84>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f001 f821 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_I2C_MspInit+0x80>)
 8000b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x80>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0389      	lsls	r1, r1, #14
 8000b34:	430a      	orrs	r2, r1
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b009      	add	sp, #36	; 0x24
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	50000400 	.word	0x50000400

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	2414      	movs	r4, #20
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f007 fff6 	bl	8008b50 <memset>
  if(hspi->Instance==SPI1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a56      	ldr	r2, [pc, #344]	; (8000cc4 <HAL_SPI_MspInit+0x178>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d000      	beq.n	8000b70 <HAL_SPI_MspInit+0x24>
 8000b6e:	e0a4      	b.n	8000cba <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b70:	4b55      	ldr	r3, [pc, #340]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0149      	lsls	r1, r1, #5
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b82:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8a:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b4c      	ldr	r3, [pc, #304]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <HAL_SPI_MspInit+0x17c>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	193a      	adds	r2, r7, r4
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 ffc9 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2208      	movs	r2, #8
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <HAL_SPI_MspInit+0x180>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f000 ffb3 	bl	8001b6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_SPI_MspInit+0x188>)
 8000c0a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fd92 	bl	8001768 <HAL_DMA_Init>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8000c48:	f7ff ff22 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <HAL_SPI_MspInit+0x184>)
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c5a:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_SPI_MspInit+0x190>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c66:	2210      	movs	r2, #16
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fd69 	bl	8001768 <HAL_DMA_Init>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8000c9a:	f7ff fef9 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000ca2:	649a      	str	r2, [r3, #72]	; 0x48
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_SPI_MspInit+0x18c>)
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fd28 	bl	8001704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f000 fd3a 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b00b      	add	sp, #44	; 0x2c
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	50000400 	.word	0x50000400
 8000cd0:	20000140 	.word	0x20000140
 8000cd4:	4002001c 	.word	0x4002001c
 8000cd8:	20000188 	.word	0x20000188
 8000cdc:	40020030 	.word	0x40020030

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	240c      	movs	r4, #12
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f007 ff2c 	bl	8008b50 <memset>
  if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d129      	bne.n	8000d56 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2201      	movs	r2, #1
 8000d22:	4013      	ands	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2202      	movs	r2, #2
 8000d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2204      	movs	r2, #4
 8000d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	187a      	adds	r2, r7, r1
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 ff0b 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b009      	add	sp, #36	; 0x24
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 fbce 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fe07 	bl	80019b2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fe03 	bl	80019b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000140 	.word	0x20000140
 8000db8:	20000188 	.word	0x20000188

08000dbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <SPI1_IRQHandler+0x14>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f003 fcbe 	bl	8004744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	200000e8 	.word	0x200000e8

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f007 feac 	bl	8008b60 <__errno>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	18d2      	adds	r2, r2, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20002000 	.word	0x20002000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	2000035c 	.word	0x2000035c
 8000e3c:	20000500 	.word	0x20000500

08000e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e50:	f7ff fff6 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f007 fe77 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fb25 	bl	80004cc <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   r0, =_estack
 8000e84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e90:	08009e08 	.word	0x08009e08
  ldr r2, =_sbss
 8000e94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e98:	200004fc 	.word	0x200004fc

08000e9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_COMP_IRQHandler>
	...

08000ea0 <ArduCAM_Init>:

uint8_t vid, pid;


void ArduCAM_Init(byte model) 
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
	write_reg(0x07, 0x80);
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f000 f9b2 	bl	8001218 <write_reg>
	HAL_Delay(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f000 fb55 	bl	8001564 <HAL_Delay>
	write_reg(0x07, 0x00);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f000 f9ab 	bl	8001218 <write_reg>
	HAL_Delay(100);
 8000ec2:	2064      	movs	r0, #100	; 0x64
 8000ec4:	f000 fb4e 	bl	8001564 <HAL_Delay>

	set_format(JPEG);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 f915 	bl	80010f8 <set_format>

	wrSensorReg8_8(0xff, 0x01);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	20ff      	movs	r0, #255	; 0xff
 8000ed2:	f000 fa31 	bl	8001338 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <ArduCAM_Init+0xcc>)
 8000ed8:	0019      	movs	r1, r3
 8000eda:	200a      	movs	r0, #10
 8000edc:	f000 fa56 	bl	800138c <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <ArduCAM_Init+0xd0>)
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f000 fa51 	bl	800138c <rdSensorReg8_8>
    if ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 ))){
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <ArduCAM_Init+0xcc>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b26      	cmp	r3, #38	; 0x26
 8000ef0:	d00c      	beq.n	8000f0c <ArduCAM_Init+0x6c>
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <ArduCAM_Init+0xd0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b41      	cmp	r3, #65	; 0x41
 8000ef8:	d103      	bne.n	8000f02 <ArduCAM_Init+0x62>
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <ArduCAM_Init+0xd0>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b42      	cmp	r3, #66	; 0x42
 8000f00:	d004      	beq.n	8000f0c <ArduCAM_Init+0x6c>
      //Serial.println(F("ACK CMD Can't find OV2640 module! END"));
    	HAL_Delay(1000);
 8000f02:	23fa      	movs	r3, #250	; 0xfa
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fb2c 	bl	8001564 <HAL_Delay>
    }
    else{
      //Serial.println(F("ACK CMD OV2640 detected. END"));break;
    }

    wrSensorReg8_8(0xff, 0x01);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	20ff      	movs	r0, #255	; 0xff
 8000f10:	f000 fa12 	bl	8001338 <wrSensorReg8_8>
	wrSensorReg8_8(0x12, 0x80);
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	2012      	movs	r0, #18
 8000f18:	f000 fa0e 	bl	8001338 <wrSensorReg8_8>
	HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f000 fb21 	bl	8001564 <HAL_Delay>
	if (m_fmt == JPEG)
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ArduCAM_Init+0xd4>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d118      	bne.n	8000f5c <ArduCAM_Init+0xbc>
	{
	  wrSensorRegs8_8(OV2640_JPEG_INIT);
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <ArduCAM_Init+0xd8>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fa67 	bl	8001400 <wrSensorRegs8_8>
	  wrSensorRegs8_8(OV2640_YUV422);
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <ArduCAM_Init+0xdc>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa63 	bl	8001400 <wrSensorRegs8_8>
	  wrSensorRegs8_8(OV2640_JPEG);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <ArduCAM_Init+0xe0>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fa5f 	bl	8001400 <wrSensorRegs8_8>
	  wrSensorReg8_8(0xff, 0x01);
 8000f42:	2101      	movs	r1, #1
 8000f44:	20ff      	movs	r0, #255	; 0xff
 8000f46:	f000 f9f7 	bl	8001338 <wrSensorReg8_8>
	  wrSensorReg8_8(0x15, 0x00);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2015      	movs	r0, #21
 8000f4e:	f000 f9f3 	bl	8001338 <wrSensorReg8_8>
	  wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <ArduCAM_Init+0xe4>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fa53 	bl	8001400 <wrSensorRegs8_8>
	}
	else
	{
	  wrSensorRegs8_8(OV2640_QVGA);
	}
 }
 8000f5a:	e003      	b.n	8000f64 <ArduCAM_Init+0xc4>
	  wrSensorRegs8_8(OV2640_QVGA);
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <ArduCAM_Init+0xe8>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fa4e 	bl	8001400 <wrSensorRegs8_8>
 }
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000364 	.word	0x20000364
 8000f70:	20000365 	.word	0x20000365
 8000f74:	20000005 	.word	0x20000005
 8000f78:	08009914 	.word	0x08009914
 8000f7c:	08009c10 	.word	0x08009c10
 8000f80:	08009c38 	.word	0x08009c38
 8000f84:	08009c5c 	.word	0x08009c5c
 8000f88:	0800960c 	.word	0x0800960c

08000f8c <SingleCapTransfer>:


void SingleCapTransfer(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	4c40      	ldr	r4, [pc, #256]	; (8001090 <SingleCapTransfer+0x104>)
 8000f90:	44a5      	add	sp, r4
 8000f92:	af00      	add	r7, sp, #0
	uint8_t temp_last, temp[1024];

	flush_fifo();
 8000f94:	f000 f96e 	bl	8001274 <flush_fifo>
	HAL_Delay(1000);
 8000f98:	23fa      	movs	r3, #250	; 0xfa
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fae1 	bl	8001564 <HAL_Delay>
	flush_fifo();
 8000fa2:	f000 f967 	bl	8001274 <flush_fifo>
	clear_fifo_flag();
 8000fa6:	f000 f977 	bl	8001298 <clear_fifo_flag>
	start_capture();
 8000faa:	f000 f96c 	bl	8001286 <start_capture>
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK));
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	2041      	movs	r0, #65	; 0x41
 8000fb4:	f000 f99f 	bl	80012f6 <get_bit>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d0f9      	beq.n	8000fb0 <SingleCapTransfer+0x24>

	length= (int)read_fifo_length();
 8000fbc:	f000 f975 	bl	80012aa <read_fifo_length>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <SingleCapTransfer+0x108>)
 8000fc4:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
	//temp = HAL_SPI_Receive(&hspi1, &temp, 1, HAL_MAX_DELAY);
    //uint8_t data[length];
    length --;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <SingleCapTransfer+0x108>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <SingleCapTransfer+0x108>)
 8000fce:	601a      	str	r2, [r3, #0]
    while ( length > 0)
 8000fd0:	e054      	b.n	800107c <SingleCapTransfer+0xf0>
    {
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <SingleCapTransfer+0x10c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 ff5a 	bl	8001e92 <HAL_GPIO_WritePin>
		set_fifo_burst();
 8000fde:	f000 f935 	bl	800124c <set_fifo_burst>
		//temp_last = temp;
		DMA_Complet = 0;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <SingleCapTransfer+0x110>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]

		length = length - 1024;
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <SingleCapTransfer+0x108>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <SingleCapTransfer+0x114>)
 8000fee:	189a      	adds	r2, r3, r2
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <SingleCapTransfer+0x108>)
 8000ff2:	601a      	str	r2, [r3, #0]
		if (length > 1024){
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <SingleCapTransfer+0x108>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d907      	bls.n	8001010 <SingleCapTransfer+0x84>
		  DMA1_RX_HAL(&hspi1, &temp, 1024);
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	00da      	lsls	r2, r3, #3
 8001004:	1d39      	adds	r1, r7, #4
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SingleCapTransfer+0x118>)
 8001008:	0018      	movs	r0, r3
 800100a:	f000 f857 	bl	80010bc <DMA1_RX_HAL>
		else{
		  DMA1_RX_HAL(&hspi1, &temp, 1024);
		  length = 0;
		  break;
		}
		while(!DMA_Complet){};
 800100e:	e00a      	b.n	8001026 <SingleCapTransfer+0x9a>
		  DMA1_RX_HAL(&hspi1, &temp, 1024);
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	00da      	lsls	r2, r3, #3
 8001014:	1d39      	adds	r1, r7, #4
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <SingleCapTransfer+0x118>)
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f84f 	bl	80010bc <DMA1_RX_HAL>
		  length = 0;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <SingleCapTransfer+0x108>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		  break;
 8001024:	e02f      	b.n	8001086 <SingleCapTransfer+0xfa>
		while(!DMA_Complet){};
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <SingleCapTransfer+0x110>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0fb      	beq.n	8001026 <SingleCapTransfer+0x9a>
		uint16_t len = 0;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <SingleCapTransfer+0x11c>)
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
		while(len < 0x400){
 8001036:	e01a      	b.n	800106e <SingleCapTransfer+0xe2>
			temp_last = temp[len];
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <SingleCapTransfer+0x11c>)
 800103a:	183b      	adds	r3, r7, r0
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <SingleCapTransfer+0x120>)
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	491b      	ldr	r1, [pc, #108]	; (80010b0 <SingleCapTransfer+0x124>)
 8001044:	2481      	movs	r4, #129	; 0x81
 8001046:	00e4      	lsls	r4, r4, #3
 8001048:	1909      	adds	r1, r1, r4
 800104a:	19c9      	adds	r1, r1, r7
 800104c:	5c8a      	ldrb	r2, [r1, r2]
 800104e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &temp[len], 1, 10);
 8001050:	0004      	movs	r4, r0
 8001052:	183b      	adds	r3, r7, r0
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	1d3a      	adds	r2, r7, #4
 8001058:	18d1      	adds	r1, r2, r3
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <SingleCapTransfer+0x128>)
 800105c:	230a      	movs	r3, #10
 800105e:	2201      	movs	r2, #1
 8001060:	f003 ff02 	bl	8004e68 <HAL_UART_Transmit>
			len++;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	193b      	adds	r3, r7, r4
 800106a:	3201      	adds	r2, #1
 800106c:	801a      	strh	r2, [r3, #0]
		while(len < 0x400){
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <SingleCapTransfer+0x11c>)
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	881a      	ldrh	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	429a      	cmp	r2, r3
 800107a:	d3dd      	bcc.n	8001038 <SingleCapTransfer+0xac>
    while ( length > 0)
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SingleCapTransfer+0x108>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1a6      	bne.n	8000fd2 <SingleCapTransfer+0x46>
//      }
//      if ( (temp == 0xD9) && (temp_last == 0xFF) ){ //If find the end ,break while,
//    	  break;}
		//HAL_Delay(10);
    }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <SingleCapTransfer+0x12c>)
 800108c:	449d      	add	sp, r3
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	fffffbf4 	.word	0xfffffbf4
 8001094:	20000360 	.word	0x20000360
 8001098:	50000800 	.word	0x50000800
 800109c:	20000358 	.word	0x20000358
 80010a0:	fffffc00 	.word	0xfffffc00
 80010a4:	200000e8 	.word	0x200000e8
 80010a8:	00000406 	.word	0x00000406
 80010ac:	00000405 	.word	0x00000405
 80010b0:	fffffbfc 	.word	0xfffffbfc
 80010b4:	200001d0 	.word	0x200001d0
 80010b8:	0000040c 	.word	0x0000040c

080010bc <DMA1_RX_HAL>:

void DMA1_RX_HAL(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    // 1. Mettre le CS à LOW pour commencer la communication
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET); // Exemple avec GPIOB et PIN 12
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <DMA1_RX_HAL+0x38>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fedf 	bl	8001e92 <HAL_GPIO_WritePin>

    // 2. Configuration du SPI en mode réception DMA
    // HAL_SPI_TransmitReceive_DMA permet de gérer à la fois la transmission et la réception via DMA
    if (HAL_SPI_Receive_DMA(hspi, pData, len) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	0018      	movs	r0, r3
 80010de:	f003 f94b 	bl	8004378 <HAL_SPI_Receive_DMA>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <DMA1_RX_HAL+0x2e>
    {
        // Gérer les erreurs si nécessaire
        Error_Handler();
 80010e6:	f7ff fcd3 	bl	8000a90 <Error_Handler>
    }
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	50000800 	.word	0x50000800

080010f8 <set_format>:



void set_format(byte fmt)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
  if (fmt == BMP)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <set_format+0x1c>
    m_fmt = BMP;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <set_format+0x2c>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 8001112:	e002      	b.n	800111a <set_format+0x22>
    m_fmt = JPEG;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <set_format+0x2c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000005 	.word	0x20000005

08001128 <bus_read>:
	write_reg(ARDUCHIP_FRAMES, nbr-1);
}


uint8_t bus_read(uint8_t address)
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	701a      	strb	r2, [r3, #0]
    uint8_t txData = address;
 8001134:	250f      	movs	r5, #15
 8001136:	197b      	adds	r3, r7, r5
 8001138:	1dfa      	adds	r2, r7, #7
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	701a      	strb	r2, [r3, #0]
    uint8_t rxData = 0x00;
 800113e:	240e      	movs	r4, #14
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]

    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <bus_read+0x60>)
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fea0 	bl	8001e92 <HAL_GPIO_WritePin>

    // Envoi de l'adresse via SPI
    HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 8001152:	2301      	movs	r3, #1
 8001154:	425b      	negs	r3, r3
 8001156:	1979      	adds	r1, r7, r5
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <bus_read+0x64>)
 800115a:	2201      	movs	r2, #1
 800115c:	f002 fcb4 	bl	8003ac8 <HAL_SPI_Transmit>

    //HAL_Delay(1);

    // Lecture de la donnée via SPI
    HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 8001160:	2301      	movs	r3, #1
 8001162:	425b      	negs	r3, r3
 8001164:	1939      	adds	r1, r7, r4
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <bus_read+0x64>)
 8001168:	2201      	movs	r2, #1
 800116a:	f002 fe0b 	bl	8003d84 <HAL_SPI_Receive>

    //HAL_Delay(1);

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <bus_read+0x60>)
 8001170:	2201      	movs	r2, #1
 8001172:	2120      	movs	r1, #32
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fe8c 	bl	8001e92 <HAL_GPIO_WritePin>

    return rxData;
 800117a:	193b      	adds	r3, r7, r4
 800117c:	781b      	ldrb	r3, [r3, #0]
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	50000800 	.word	0x50000800
 800118c:	200000e8 	.word	0x200000e8

08001190 <bus_write>:


uint8_t bus_write(uint8_t address, uint8_t value)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	1dbb      	adds	r3, r7, #6
 800119e:	1c0a      	adds	r2, r1, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <bus_write+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fe72 	bl	8001e92 <HAL_GPIO_WritePin>

    // Attente de 10 millisecondes
    //HAL_Delay(1);

    // Envoi de l'adresse via SPI
    HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
 80011b2:	1df9      	adds	r1, r7, #7
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <bus_write+0x54>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	f002 fc86 	bl	8003ac8 <HAL_SPI_Transmit>

    // Envoi de la valeur via SPI
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	1db9      	adds	r1, r7, #6
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <bus_write+0x54>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f002 fc7f 	bl	8003ac8 <HAL_SPI_Transmit>

    // Attente de 10 millisecondes
    //HAL_Delay(1);

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <bus_write+0x50>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	2120      	movs	r1, #32
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fe5e 	bl	8001e92 <HAL_GPIO_WritePin>

    return 1;  // Indique que l'opération s'est bien déroulée
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	50000800 	.word	0x50000800
 80011e4:	200000e8 	.word	0x200000e8

080011e8 <read_reg>:


uint8_t read_reg(uint8_t addr)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	227f      	movs	r2, #127	; 0x7f
 80011fa:	4013      	ands	r3, r2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	250f      	movs	r5, #15
 8001200:	197c      	adds	r4, r7, r5
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ff90 	bl	8001128 <bus_read>
 8001208:	0003      	movs	r3, r0
 800120a:	7023      	strb	r3, [r4, #0]
	return data;
 800120c:	197b      	adds	r3, r7, r5
 800120e:	781b      	ldrb	r3, [r3, #0]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bdb0      	pop	{r4, r5, r7, pc}

08001218 <write_reg>:


void write_reg(uint8_t addr, uint8_t data)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	1dbb      	adds	r3, r7, #6
 8001226:	1c0a      	adds	r2, r1, #0
 8001228:	701a      	strb	r2, [r3, #0]
	 bus_write(addr | 0x80, data); 
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	4252      	negs	r2, r2
 8001232:	4313      	orrs	r3, r2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	1dbb      	adds	r3, r7, #6
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	0019      	movs	r1, r3
 800123c:	0010      	movs	r0, r2
 800123e:	f7ff ffa7 	bl	8001190 <bus_write>
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <set_fifo_burst>:
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}

void set_fifo_burst()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	uint8_t value = 0x3C;
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	223c      	movs	r2, #60	; 0x3c
 8001256:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001258:	2301      	movs	r3, #1
 800125a:	425b      	negs	r3, r3
 800125c:	1df9      	adds	r1, r7, #7
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <set_fifo_burst+0x24>)
 8001260:	2201      	movs	r2, #1
 8001262:	f002 fc31 	bl	8003ac8 <HAL_SPI_Transmit>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	200000e8 	.word	0x200000e8

08001274 <flush_fifo>:

void flush_fifo(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001278:	2101      	movs	r1, #1
 800127a:	2004      	movs	r0, #4
 800127c:	f7ff ffcc 	bl	8001218 <write_reg>
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <start_capture>:

void start_capture(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 800128a:	2102      	movs	r1, #2
 800128c:	2004      	movs	r0, #4
 800128e:	f7ff ffc3 	bl	8001218 <write_reg>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 800129c:	2101      	movs	r1, #1
 800129e:	2004      	movs	r0, #4
 80012a0:	f7ff ffba 	bl	8001218 <write_reg>
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <read_fifo_length>:

uint32_t read_fifo_length(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 80012b4:	2042      	movs	r0, #66	; 0x42
 80012b6:	f7ff ff97 	bl	80011e8 <read_reg>
 80012ba:	0003      	movs	r3, r0
 80012bc:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 80012be:	2043      	movs	r0, #67	; 0x43
 80012c0:	f7ff ff92 	bl	80011e8 <read_reg>
 80012c4:	0003      	movs	r3, r0
 80012c6:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 80012c8:	2044      	movs	r0, #68	; 0x44
 80012ca:	f7ff ff8d 	bl	80011e8 <read_reg>
 80012ce:	0003      	movs	r3, r0
 80012d0:	001a      	movs	r2, r3
 80012d2:	237f      	movs	r3, #127	; 0x7f
 80012d4:	4013      	ands	r3, r2
 80012d6:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	041a      	lsls	r2, r3, #16
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	431a      	orrs	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	025b      	lsls	r3, r3, #9
 80012e8:	0a5b      	lsrs	r3, r3, #9
 80012ea:	60fb      	str	r3, [r7, #12]
	return len;	
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <get_bit>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 80012f6:	b5b0      	push	{r4, r5, r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	0002      	movs	r2, r0
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	1c0a      	adds	r2, r1, #0
 8001306:	701a      	strb	r2, [r3, #0]
  uint8_t temp;
  temp = read_reg(addr);
 8001308:	250f      	movs	r5, #15
 800130a:	197c      	adds	r4, r7, r5
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff69 	bl	80011e8 <read_reg>
 8001316:	0003      	movs	r3, r0
 8001318:	7023      	strb	r3, [r4, #0]
  temp = temp & bit;
 800131a:	0028      	movs	r0, r5
 800131c:	183b      	adds	r3, r7, r0
 800131e:	183a      	adds	r2, r7, r0
 8001320:	1db9      	adds	r1, r7, #6
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	7809      	ldrb	r1, [r1, #0]
 8001326:	400a      	ands	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
  return temp;
 800132a:	183b      	adds	r3, r7, r0
 800132c:	781b      	ldrb	r3, [r3, #0]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b004      	add	sp, #16
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001338 <wrSensorReg8_8>:
      break;
  }
}


byte wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	0002      	movs	r2, r0
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	1c0a      	adds	r2, r1, #0
 8001348:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);  // Temporisation en millisecondes pour laisser le temps au capteur
 800134a:	2001      	movs	r0, #1
 800134c:	f000 f90a 	bl	8001564 <HAL_Delay>
    uint8_t data[2] = {regID, regDat};
 8001350:	200c      	movs	r0, #12
 8001352:	183b      	adds	r3, r7, r0
 8001354:	1dfa      	adds	r2, r7, #7
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	183b      	adds	r3, r7, r0
 800135c:	1dba      	adds	r2, r7, #6
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	705a      	strb	r2, [r3, #1]
    //data[0] = regID; // Première valeur de 8 bits
    //data[1] = regDat; // Deuxième valeur de 8 bits

    // Démarre la transmission en envoyant l'adresse du capteur avec HAL I2C
    HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &data, 2, 1000);
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <wrSensorReg8_8+0x4c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b299      	uxth	r1, r3
 8001368:	183a      	adds	r2, r7, r0
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <wrSensorReg8_8+0x50>)
 800136c:	23fa      	movs	r3, #250	; 0xfa
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2302      	movs	r3, #2
 8001374:	f000 fe40 	bl	8001ff8 <HAL_I2C_Master_Transmit>

    // Envoie la valeur du registre au capteur
    //HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regDat, 1, HAL_MAX_DELAY);

    return 0;  // Succès
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000004 	.word	0x20000004
 8001388:	20000094 	.word	0x20000094

0800138c <rdSensorReg8_8>:


byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	0002      	movs	r2, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);  // Petit délai pour la stabilité du bus
 800139a:	200a      	movs	r0, #10
 800139c:	f000 f8e2 	bl	8001564 <HAL_Delay>

    // Envoi de l'adresse du capteur en mode écriture et ID du registre
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY) != HAL_OK)
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <rdSensorReg8_8+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b299      	uxth	r1, r3
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <rdSensorReg8_8+0x70>)
 80013aa:	2301      	movs	r3, #1
 80013ac:	425b      	negs	r3, r3
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	f000 fe21 	bl	8001ff8 <HAL_I2C_Master_Transmit>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <rdSensorReg8_8+0x32>
    {
        return 1;  // Erreur lors de l'écriture de l'adresse
 80013ba:	2301      	movs	r3, #1
 80013bc:	e018      	b.n	80013f0 <rdSensorReg8_8+0x64>
    }

    HAL_Delay(1);  // Délai pour la synchronisation du bus
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 f8d0 	bl	8001564 <HAL_Delay>

    // Relance de l'I2C avec l'adresse du capteur en mode lecture
    if (HAL_I2C_Master_Receive(&hi2c1, sensor_addr | 0x01, regDat, 1, HAL_MAX_DELAY) != HAL_OK)
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <rdSensorReg8_8+0x6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	b299      	uxth	r1, r3
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	480a      	ldr	r0, [pc, #40]	; (80013fc <rdSensorReg8_8+0x70>)
 80013d4:	2301      	movs	r3, #1
 80013d6:	425b      	negs	r3, r3
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 ff14 	bl	8002208 <HAL_I2C_Master_Receive>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <rdSensorReg8_8+0x5c>
    {
        return 2;  // Erreur lors de la lecture
 80013e4:	2302      	movs	r3, #2
 80013e6:	e003      	b.n	80013f0 <rdSensorReg8_8+0x64>
    }

    HAL_Delay(1);  // Délai pour s'assurer de la bonne fin de la transaction
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f8bb 	bl	8001564 <HAL_Delay>

    return 0;  // Lecture réussie
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000094 	.word	0x20000094

08001400 <wrSensorRegs8_8>:

// I2C Array Write 8-bit address, 8-bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    int err = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
    uint16_t reg_addr = 0;
 800140c:	2312      	movs	r3, #18
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
    uint16_t reg_val = 0;
 8001414:	2310      	movs	r3, #16
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	801a      	strh	r2, [r3, #0]
    const struct sensor_reg *next = reglist;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]

    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001420:	e020      	b.n	8001464 <wrSensorRegs8_8+0x64>
    {
        reg_addr = next->reg;
 8001422:	2112      	movs	r1, #18
 8001424:	187b      	adds	r3, r7, r1
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	801a      	strh	r2, [r3, #0]
        reg_val = next->val;
 800142c:	2010      	movs	r0, #16
 800142e:	183b      	adds	r3, r7, r0
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	8852      	ldrh	r2, [r2, #2]
 8001434:	801a      	strh	r2, [r3, #0]

        err = wrSensorReg8_8(reg_addr, reg_val); // Écriture dans le registre
 8001436:	187b      	adds	r3, r7, r1
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	183b      	adds	r3, r7, r0
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	0019      	movs	r1, r3
 8001444:	0010      	movs	r0, r2
 8001446:	f7ff ff77 	bl	8001338 <wrSensorReg8_8>
 800144a:	0003      	movs	r3, r0
 800144c:	617b      	str	r3, [r7, #20]
        if (err != 0)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <wrSensorRegs8_8+0x58>
        {
            return err; // Retourne l'erreur immédiatement si une écriture échoue
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	e010      	b.n	800147a <wrSensorRegs8_8+0x7a>
        }

        HAL_Delay(1); // Pause de 1 ms pour garantir la stabilité du bus I2C
 8001458:	2001      	movs	r0, #1
 800145a:	f000 f883 	bl	8001564 <HAL_Delay>

        next++; // Passe au prochain registre
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3304      	adds	r3, #4
 8001462:	60fb      	str	r3, [r7, #12]
    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001464:	2312      	movs	r3, #18
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d1d9      	bne.n	8001422 <wrSensorRegs8_8+0x22>
 800146e:	2310      	movs	r3, #16
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d1d4      	bne.n	8001422 <wrSensorRegs8_8+0x22>
    }

    return err; // Retourne 0 si toutes les écritures sont réussies
 8001478:	697b      	ldr	r3, [r7, #20]
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b006      	add	sp, #24
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_Init+0x3c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_Init+0x3c>)
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f811 	bl	80014c4 <HAL_InitTick>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d003      	beq.n	80014ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e001      	b.n	80014b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ae:	f7ff faf5 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_InitTick+0x5c>)
 80014ce:	681c      	ldr	r4, [r3, #0]
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_InitTick+0x60>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	0019      	movs	r1, r3
 80014d6:	23fa      	movs	r3, #250	; 0xfa
 80014d8:	0098      	lsls	r0, r3, #2
 80014da:	f7fe fe27 	bl	800012c <__udivsi3>
 80014de:	0003      	movs	r3, r0
 80014e0:	0019      	movs	r1, r3
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7fe fe22 	bl	800012c <__udivsi3>
 80014e8:	0003      	movs	r3, r0
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f92f 	bl	800174e <HAL_SYSTICK_Config>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e00f      	b.n	8001518 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d80b      	bhi.n	8001516 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	2301      	movs	r3, #1
 8001502:	425b      	negs	r3, r3
 8001504:	2200      	movs	r2, #0
 8001506:	0018      	movs	r0, r3
 8001508:	f000 f8fc 	bl	8001704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_InitTick+0x64>)
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b003      	add	sp, #12
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	001a      	movs	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	18d2      	adds	r2, r2, r3
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	2000000c 	.word	0x2000000c
 800154c:	20000368 	.word	0x20000368

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	20000368 	.word	0x20000368

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fff0 	bl	8001550 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	001a      	movs	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	189b      	adds	r3, r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	f7ff ffe0 	bl	8001550 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	2000000c 	.word	0x2000000c

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b7f      	cmp	r3, #127	; 0x7f
 80015be:	d809      	bhi.n	80015d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	001a      	movs	r2, r3
 80015c6:	231f      	movs	r3, #31
 80015c8:	401a      	ands	r2, r3
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_EnableIRQ+0x30>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	4091      	lsls	r1, r2
 80015d0:	000a      	movs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
  }
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	0002      	movs	r2, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b7f      	cmp	r3, #127	; 0x7f
 80015f4:	d828      	bhi.n	8001648 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f6:	4a2f      	ldr	r2, [pc, #188]	; (80016b4 <__NVIC_SetPriority+0xd4>)
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	33c0      	adds	r3, #192	; 0xc0
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	589b      	ldr	r3, [r3, r2]
 8001606:	1dfa      	adds	r2, r7, #7
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	0011      	movs	r1, r2
 800160c:	2203      	movs	r2, #3
 800160e:	400a      	ands	r2, r1
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	21ff      	movs	r1, #255	; 0xff
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	43d2      	mvns	r2, r2
 800161a:	401a      	ands	r2, r3
 800161c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	401a      	ands	r2, r3
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	2303      	movs	r3, #3
 800162e:	4003      	ands	r3, r0
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <__NVIC_SetPriority+0xd4>)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	430a      	orrs	r2, r1
 8001640:	33c0      	adds	r3, #192	; 0xc0
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001646:	e031      	b.n	80016ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <__NVIC_SetPriority+0xd8>)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0019      	movs	r1, r3
 8001650:	230f      	movs	r3, #15
 8001652:	400b      	ands	r3, r1
 8001654:	3b08      	subs	r3, #8
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3306      	adds	r3, #6
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	18d3      	adds	r3, r2, r3
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1dfa      	adds	r2, r7, #7
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	0011      	movs	r1, r2
 8001668:	2203      	movs	r2, #3
 800166a:	400a      	ands	r2, r1
 800166c:	00d2      	lsls	r2, r2, #3
 800166e:	21ff      	movs	r1, #255	; 0xff
 8001670:	4091      	lsls	r1, r2
 8001672:	000a      	movs	r2, r1
 8001674:	43d2      	mvns	r2, r2
 8001676:	401a      	ands	r2, r3
 8001678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	22ff      	movs	r2, #255	; 0xff
 8001680:	401a      	ands	r2, r3
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0018      	movs	r0, r3
 8001688:	2303      	movs	r3, #3
 800168a:	4003      	ands	r3, r0
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <__NVIC_SetPriority+0xd8>)
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	001c      	movs	r4, r3
 8001698:	230f      	movs	r3, #15
 800169a:	4023      	ands	r3, r4
 800169c:	3b08      	subs	r3, #8
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	430a      	orrs	r2, r1
 80016a2:	3306      	adds	r3, #6
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	18c3      	adds	r3, r0, r3
 80016a8:	3304      	adds	r3, #4
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b003      	add	sp, #12
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	045b      	lsls	r3, r3, #17
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d301      	bcc.n	80016d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d0:	2301      	movs	r3, #1
 80016d2:	e010      	b.n	80016f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <SysTick_Config+0x44>)
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	3a01      	subs	r2, #1
 80016da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016dc:	2301      	movs	r3, #1
 80016de:	425b      	negs	r3, r3
 80016e0:	2103      	movs	r1, #3
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff ff7c 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x44>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x44>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	210f      	movs	r1, #15
 8001710:	187b      	adds	r3, r7, r1
 8001712:	1c02      	adds	r2, r0, #0
 8001714:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	187b      	adds	r3, r7, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	0011      	movs	r1, r2
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	0002      	movs	r2, r0
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b25b      	sxtb	r3, r3
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ff33 	bl	80015ac <__NVIC_EnableIRQ>
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ffaf 	bl	80016bc <SysTick_Config>
 800175e:	0003      	movs	r3, r0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e061      	b.n	800183e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_DMA_Init+0xe0>)
 8001780:	4694      	mov	ip, r2
 8001782:	4463      	add	r3, ip
 8001784:	2114      	movs	r1, #20
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fcd0 	bl	800012c <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	009a      	lsls	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_DMA_Init+0xe4>)
 8001798:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2225      	movs	r2, #37	; 0x25
 800179e:	2102      	movs	r1, #2
 80017a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_DMA_Init+0xe8>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	01db      	lsls	r3, r3, #7
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d018      	beq.n	8001826 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_DMA_Init+0xec>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	211c      	movs	r1, #28
 80017fe:	400b      	ands	r3, r1
 8001800:	210f      	movs	r1, #15
 8001802:	4099      	lsls	r1, r3
 8001804:	000b      	movs	r3, r1
 8001806:	43d9      	mvns	r1, r3
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_DMA_Init+0xec>)
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_DMA_Init+0xec>)
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	201c      	movs	r0, #28
 800181c:	4003      	ands	r3, r0
 800181e:	409a      	lsls	r2, r3
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_DMA_Init+0xec>)
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2225      	movs	r2, #37	; 0x25
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	bffdfff8 	.word	0xbffdfff8
 800184c:	40020000 	.word	0x40020000
 8001850:	ffff800f 	.word	0xffff800f
 8001854:	400200a8 	.word	0x400200a8

08001858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2317      	movs	r3, #23
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2224      	movs	r2, #36	; 0x24
 8001872:	5c9b      	ldrb	r3, [r3, r2]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_DMA_Start_IT+0x24>
 8001878:	2302      	movs	r3, #2
 800187a:	e04f      	b.n	800191c <HAL_DMA_Start_IT+0xc4>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	2101      	movs	r1, #1
 8001882:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2225      	movs	r2, #37	; 0x25
 8001888:	5c9b      	ldrb	r3, [r3, r2]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d13a      	bne.n	8001906 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2225      	movs	r2, #37	; 0x25
 8001894:	2102      	movs	r1, #2
 8001896:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	438a      	bics	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f92a 	bl	8001b0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	210e      	movs	r1, #14
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e00f      	b.n	80018f4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	210a      	movs	r1, #10
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e007      	b.n	8001916 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2224      	movs	r2, #36	; 0x24
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800190e:	2317      	movs	r3, #23
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001916:	2317      	movs	r3, #23
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b006      	add	sp, #24
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	210f      	movs	r1, #15
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2225      	movs	r2, #37	; 0x25
 8001938:	5c9b      	ldrb	r3, [r3, r2]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d006      	beq.n	800194e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2204      	movs	r2, #4
 8001944:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e02a      	b.n	80019a4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	210e      	movs	r1, #14
 800195a:	438a      	bics	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	438a      	bics	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	221c      	movs	r2, #28
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	4091      	lsls	r1, r2
 800197e:	000a      	movs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2225      	movs	r2, #37	; 0x25
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2224      	movs	r2, #36	; 0x24
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	0010      	movs	r0, r2
 80019a2:	4798      	blx	r3
    }
  }
  return status;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	781b      	ldrb	r3, [r3, #0]
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	221c      	movs	r2, #28
 80019d0:	4013      	ands	r3, r2
 80019d2:	2204      	movs	r2, #4
 80019d4:	409a      	lsls	r2, r3
 80019d6:	0013      	movs	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	d026      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x7a>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2204      	movs	r2, #4
 80019e2:	4013      	ands	r3, r2
 80019e4:	d022      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2220      	movs	r2, #32
 80019ee:	4013      	ands	r3, r2
 80019f0:	d107      	bne.n	8001a02 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2104      	movs	r1, #4
 80019fe:	438a      	bics	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	221c      	movs	r2, #28
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4091      	lsls	r1, r2
 8001a12:	000a      	movs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d100      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x6e>
 8001a1e:	e071      	b.n	8001b04 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	0010      	movs	r0, r2
 8001a28:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	e06b      	b.n	8001b04 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	221c      	movs	r2, #28
 8001a32:	4013      	ands	r3, r2
 8001a34:	2202      	movs	r2, #2
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d02d      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xea>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d029      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4013      	ands	r3, r2
 8001a52:	d10b      	bne.n	8001a6c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	210a      	movs	r1, #10
 8001a60:	438a      	bics	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2225      	movs	r2, #37	; 0x25
 8001a68:	2101      	movs	r1, #1
 8001a6a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	221c      	movs	r2, #28
 8001a72:	401a      	ands	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d039      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	0010      	movs	r0, r2
 8001a98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a9a:	e033      	b.n	8001b04 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	221c      	movs	r2, #28
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	d02a      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x154>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d026      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	210e      	movs	r1, #14
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	221c      	movs	r2, #28
 8001ace:	401a      	ands	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2225      	movs	r2, #37	; 0x25
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2224      	movs	r2, #36	; 0x24
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	0010      	movs	r0, r2
 8001b02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46c0      	nop			; (mov r8, r8)
}
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	221c      	movs	r2, #28
 8001b22:	401a      	ands	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4091      	lsls	r1, r2
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d108      	bne.n	8001b52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b50:	e007      	b.n	8001b62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	60da      	str	r2, [r3, #12]
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b82:	e14f      	b.n	8001e24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x30>
 8001b9a:	e140      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d005      	beq.n	8001bb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	2201      	movs	r2, #1
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d017      	beq.n	8001c52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	58d3      	ldr	r3, [r2, r3]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2107      	movs	r1, #7
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	23c0      	movs	r3, #192	; 0xc0
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x17c>
 8001ce6:	e09a      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	43da      	mvns	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	23a0      	movs	r3, #160	; 0xa0
 8001d1c:	05db      	lsls	r3, r3, #23
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x1ea>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x1e6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a46      	ldr	r2, [pc, #280]	; (8001e48 <HAL_GPIO_Init+0x2dc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x1e2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_GPIO_Init+0x2e0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x1de>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <HAL_GPIO_Init+0x2e4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x1da>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d56:	2300      	movs	r3, #0
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	035b      	lsls	r3, r3, #13
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	1e13      	subs	r3, r2, #0
 8001e2e:	d000      	beq.n	8001e32 <HAL_GPIO_Init+0x2c6>
 8001e30:	e6a8      	b.n	8001b84 <HAL_GPIO_Init+0x18>
  }
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	50000c00 	.word	0x50000c00
 8001e50:	50001c00 	.word	0x50001c00
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	000a      	movs	r2, r1
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	1cba      	adds	r2, r7, #2
 8001e6c:	8812      	ldrh	r2, [r2, #0]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e72:	230f      	movs	r3, #15
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e84:	230f      	movs	r3, #15
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	0008      	movs	r0, r1
 8001e9c:	0011      	movs	r1, r2
 8001e9e:	1cbb      	adds	r3, r7, #2
 8001ea0:	1c02      	adds	r2, r0, #0
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	1c7b      	adds	r3, r7, #1
 8001ea6:	1c0a      	adds	r2, r1, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eaa:	1c7b      	adds	r3, r7, #1
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	1cbb      	adds	r3, r7, #2
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ebc:	1cbb      	adds	r3, r7, #2
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e082      	b.n	8001fe4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	; 0x41
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe fde5 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2241      	movs	r2, #65	; 0x41
 8001efe:	2124      	movs	r1, #36	; 0x24
 8001f00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	438a      	bics	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4934      	ldr	r1, [pc, #208]	; (8001fec <HAL_I2C_Init+0x120>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4931      	ldr	r1, [pc, #196]	; (8001ff0 <HAL_I2C_Init+0x124>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0209      	lsls	r1, r1, #8
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e007      	b.n	8001f5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2184      	movs	r1, #132	; 0x84
 8001f54:	0209      	lsls	r1, r1, #8
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d104      	bne.n	8001f6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	491f      	ldr	r1, [pc, #124]	; (8001ff4 <HAL_I2C_Init+0x128>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	491a      	ldr	r1, [pc, #104]	; (8001ff0 <HAL_I2C_Init+0x124>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69d9      	ldr	r1, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2241      	movs	r2, #65	; 0x41
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2242      	movs	r2, #66	; 0x42
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	f0ffffff 	.word	0xf0ffffff
 8001ff0:	ffff7fff 	.word	0xffff7fff
 8001ff4:	02008000 	.word	0x02008000

08001ff8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	0008      	movs	r0, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	0019      	movs	r1, r3
 8002006:	230a      	movs	r3, #10
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	2308      	movs	r3, #8
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	1c0a      	adds	r2, r1, #0
 8002014:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d000      	beq.n	8002024 <HAL_I2C_Master_Transmit+0x2c>
 8002022:	e0e7      	b.n	80021f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Master_Transmit+0x3a>
 800202e:	2302      	movs	r3, #2
 8002030:	e0e1      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800203a:	f7ff fa89 	bl	8001550 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	0219      	lsls	r1, r3, #8
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	f000 fa04 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2241      	movs	r2, #65	; 0x41
 8002060:	2121      	movs	r1, #33	; 0x21
 8002062:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2242      	movs	r2, #66	; 0x42
 8002068:	2110      	movs	r1, #16
 800206a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2208      	movs	r2, #8
 800207c:	18ba      	adds	r2, r7, r2
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d911      	bls.n	80020b6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	b2da      	uxtb	r2, r3
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	045c      	lsls	r4, r3, #17
 80020a2:	230a      	movs	r3, #10
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	8819      	ldrh	r1, [r3, #0]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_I2C_Master_Transmit+0x208>)
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	0023      	movs	r3, r4
 80020b0:	f000 fc2e 	bl	8002910 <I2C_TransferConfig>
 80020b4:	e075      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	049c      	lsls	r4, r3, #18
 80020ca:	230a      	movs	r3, #10
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	8819      	ldrh	r1, [r3, #0]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_I2C_Master_Transmit+0x208>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	0023      	movs	r3, r4
 80020d8:	f000 fc1a 	bl	8002910 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020dc:	e061      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fa07 	bl	80024f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e081      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d03a      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x1aa>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d136      	bne.n	80021a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	0013      	movs	r3, r2
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	f000 f98b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e053      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2bff      	cmp	r3, #255	; 0xff
 8002156:	d911      	bls.n	800217c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	22ff      	movs	r2, #255	; 0xff
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	b2da      	uxtb	r2, r3
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	045c      	lsls	r4, r3, #17
 8002168:	230a      	movs	r3, #10
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	8819      	ldrh	r1, [r3, #0]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	0023      	movs	r3, r4
 8002176:	f000 fbcb 	bl	8002910 <I2C_TransferConfig>
 800217a:	e012      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	049c      	lsls	r4, r3, #18
 8002190:	230a      	movs	r3, #10
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	8819      	ldrh	r1, [r3, #0]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	0023      	movs	r3, r4
 800219e:	f000 fbb7 	bl	8002910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d198      	bne.n	80020de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f9e6 	bl	8002584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01a      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2220      	movs	r2, #32
 80021c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <HAL_I2C_Master_Transmit+0x20c>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2241      	movs	r2, #65	; 0x41
 80021dc:	2120      	movs	r1, #32
 80021de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2242      	movs	r2, #66	; 0x42
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b007      	add	sp, #28
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	80002000 	.word	0x80002000
 8002204:	fe00e800 	.word	0xfe00e800

08002208 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	0008      	movs	r0, r1
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	0019      	movs	r1, r3
 8002216:	230a      	movs	r3, #10
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	2308      	movs	r3, #8
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	1c0a      	adds	r2, r1, #0
 8002224:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2241      	movs	r2, #65	; 0x41
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d000      	beq.n	8002234 <HAL_I2C_Master_Receive+0x2c>
 8002232:	e0e8      	b.n	8002406 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Master_Receive+0x3a>
 800223e:	2302      	movs	r3, #2
 8002240:	e0e2      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224a:	f7ff f981 	bl	8001550 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	0219      	lsls	r1, r3, #8
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2319      	movs	r3, #25
 800225e:	2201      	movs	r2, #1
 8002260:	f000 f8fc 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0cd      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2241      	movs	r2, #65	; 0x41
 8002270:	2122      	movs	r1, #34	; 0x22
 8002272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2242      	movs	r2, #66	; 0x42
 8002278:	2110      	movs	r1, #16
 800227a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2208      	movs	r2, #8
 800228c:	18ba      	adds	r2, r7, r2
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d911      	bls.n	80022c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	045c      	lsls	r4, r3, #17
 80022b2:	230a      	movs	r3, #10
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	8819      	ldrh	r1, [r3, #0]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_I2C_Master_Receive+0x208>)
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0023      	movs	r3, r4
 80022c0:	f000 fb26 	bl	8002910 <I2C_TransferConfig>
 80022c4:	e076      	b.n	80023b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049c      	lsls	r4, r3, #18
 80022da:	230a      	movs	r3, #10
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_I2C_Master_Receive+0x208>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0023      	movs	r3, r4
 80022e8:	f000 fb12 	bl	8002910 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80022ec:	e062      	b.n	80023b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f989 	bl	800260c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022fa:	1e03      	subs	r3, r0, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e082      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03a      	beq.n	80023b4 <HAL_I2C_Master_Receive+0x1ac>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d136      	bne.n	80023b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	0013      	movs	r3, r2
 8002350:	2200      	movs	r2, #0
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	f000 f882 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e053      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d911      	bls.n	800238e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	b2da      	uxtb	r2, r3
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	045c      	lsls	r4, r3, #17
 800237a:	230a      	movs	r3, #10
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	8819      	ldrh	r1, [r3, #0]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	0023      	movs	r3, r4
 8002388:	f000 fac2 	bl	8002910 <I2C_TransferConfig>
 800238c:	e012      	b.n	80023b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	049c      	lsls	r4, r3, #18
 80023a2:	230a      	movs	r3, #10
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	8819      	ldrh	r1, [r3, #0]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	0023      	movs	r3, r4
 80023b0:	f000 faae 	bl	8002910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d197      	bne.n	80022ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8dd 	bl	8002584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e01a      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2220      	movs	r2, #32
 80023d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	490b      	ldr	r1, [pc, #44]	; (8002414 <HAL_I2C_Master_Receive+0x20c>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2241      	movs	r2, #65	; 0x41
 80023ee:	2120      	movs	r1, #32
 80023f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2242      	movs	r2, #66	; 0x42
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b007      	add	sp, #28
 800240e:	bd90      	pop	{r4, r7, pc}
 8002410:	80002400 	.word	0x80002400
 8002414:	fe00e800 	.word	0xfe00e800

08002418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d103      	bne.n	8002436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]
  }
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e030      	b.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	d02d      	beq.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7ff f86c 	bl	8001550 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d122      	bne.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4013      	ands	r3, r2
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	425a      	negs	r2, r3
 800249a:	4153      	adcs	r3, r2
 800249c:	b2db      	uxtb	r3, r3
 800249e:	001a      	movs	r2, r3
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d113      	bne.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	2220      	movs	r2, #32
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2241      	movs	r2, #65	; 0x41
 80024b8:	2120      	movs	r1, #32
 80024ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2242      	movs	r2, #66	; 0x42
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00f      	b.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	425a      	negs	r2, r3
 80024e0:	4153      	adcs	r3, r2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	001a      	movs	r2, r3
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d0bf      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b004      	add	sp, #16
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002504:	e032      	b.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f8ff 	bl	8002710 <I2C_IsErrorOccurred>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e030      	b.n	800257c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	d025      	beq.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7ff f816 	bl	8001550 <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d302      	bcc.n	8002536 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11a      	bne.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d013      	beq.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	2220      	movs	r2, #32
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2241      	movs	r2, #65	; 0x41
 8002554:	2120      	movs	r1, #32
 8002556:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2242      	movs	r2, #66	; 0x42
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2202      	movs	r2, #2
 8002574:	4013      	ands	r3, r2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d1c5      	bne.n	8002506 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002590:	e02f      	b.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f8b9 	bl	8002710 <I2C_IsErrorOccurred>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02d      	b.n	8002602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7fe ffd3 	bl	8001550 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11a      	bne.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d013      	beq.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	2220      	movs	r2, #32
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2241      	movs	r2, #65	; 0x41
 80025da:	2120      	movs	r1, #32
 80025dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2242      	movs	r2, #66	; 0x42
 80025e2:	2100      	movs	r1, #0
 80025e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d1c8      	bne.n	8002592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002618:	e06b      	b.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f875 	bl	8002710 <I2C_IsErrorOccurred>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e069      	b.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2220      	movs	r2, #32
 8002636:	4013      	ands	r3, r2
 8002638:	2b20      	cmp	r3, #32
 800263a:	d138      	bne.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2204      	movs	r2, #4
 8002644:	4013      	ands	r3, r2
 8002646:	2b04      	cmp	r3, #4
 8002648:	d105      	bne.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e055      	b.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2210      	movs	r2, #16
 800265e:	4013      	ands	r3, r2
 8002660:	2b10      	cmp	r3, #16
 8002662:	d107      	bne.n	8002674 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2204      	movs	r2, #4
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
 8002672:	e002      	b.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2220      	movs	r2, #32
 8002680:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800268e:	400a      	ands	r2, r1
 8002690:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2241      	movs	r2, #65	; 0x41
 8002696:	2120      	movs	r1, #32
 8002698:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2242      	movs	r2, #66	; 0x42
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e029      	b.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe ff4f 	bl	8001550 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00f      	beq.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	2220      	movs	r2, #32
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2241      	movs	r2, #65	; 0x41
 80026e2:	2120      	movs	r1, #32
 80026e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	2100      	movs	r1, #0
 80026ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e007      	b.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2204      	movs	r2, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d18c      	bne.n	800261a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	fe00e800 	.word	0xfe00e800

08002710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2327      	movs	r3, #39	; 0x27
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2210      	movs	r2, #16
 8002738:	4013      	ands	r3, r2
 800273a:	d100      	bne.n	800273e <I2C_IsErrorOccurred+0x2e>
 800273c:	e082      	b.n	8002844 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002746:	e060      	b.n	800280a <I2C_IsErrorOccurred+0xfa>
 8002748:	2427      	movs	r4, #39	; 0x27
 800274a:	193b      	adds	r3, r7, r4
 800274c:	193a      	adds	r2, r7, r4
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3301      	adds	r3, #1
 8002756:	d058      	beq.n	800280a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7fe fefa 	bl	8001550 <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	429a      	cmp	r2, r3
 8002766:	d306      	bcc.n	8002776 <I2C_IsErrorOccurred+0x66>
 8002768:	193b      	adds	r3, r7, r4
 800276a:	193a      	adds	r2, r7, r4
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d149      	bne.n	800280a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002784:	2013      	movs	r0, #19
 8002786:	183b      	adds	r3, r7, r0
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	2142      	movs	r1, #66	; 0x42
 800278c:	5c52      	ldrb	r2, [r2, r1]
 800278e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	401a      	ands	r2, r3
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d126      	bne.n	80027f2 <I2C_IsErrorOccurred+0xe2>
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	01db      	lsls	r3, r3, #7
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d021      	beq.n	80027f2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d01d      	beq.n	80027f2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	01c9      	lsls	r1, r1, #7
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027c8:	f7fe fec2 	bl	8001550 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d0:	e00f      	b.n	80027f2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027d2:	f7fe febd 	bl	8001550 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b19      	cmp	r3, #25
 80027de:	d908      	bls.n	80027f2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4313      	orrs	r3, r2
 80027e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027e8:	2327      	movs	r3, #39	; 0x27
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]

              break;
 80027f0:	e00b      	b.n	800280a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2220      	movs	r2, #32
 80027fa:	4013      	ands	r3, r2
 80027fc:	2127      	movs	r1, #39	; 0x27
 80027fe:	187a      	adds	r2, r7, r1
 8002800:	1879      	adds	r1, r7, r1
 8002802:	7809      	ldrb	r1, [r1, #0]
 8002804:	7011      	strb	r1, [r2, #0]
 8002806:	2b20      	cmp	r3, #32
 8002808:	d1e3      	bne.n	80027d2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2220      	movs	r2, #32
 8002812:	4013      	ands	r3, r2
 8002814:	2b20      	cmp	r3, #32
 8002816:	d004      	beq.n	8002822 <I2C_IsErrorOccurred+0x112>
 8002818:	2327      	movs	r3, #39	; 0x27
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d092      	beq.n	8002748 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002822:	2327      	movs	r3, #39	; 0x27
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2204      	movs	r2, #4
 8002838:	4313      	orrs	r3, r2
 800283a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800283c:	2327      	movs	r3, #39	; 0x27
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d00c      	beq.n	8002870 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2201      	movs	r2, #1
 800285a:	4313      	orrs	r3, r2
 800285c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	0052      	lsls	r2, r2, #1
 8002866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002868:	2327      	movs	r3, #39	; 0x27
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4013      	ands	r3, r2
 8002878:	d00c      	beq.n	8002894 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	2208      	movs	r2, #8
 800287e:	4313      	orrs	r3, r2
 8002880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	00d2      	lsls	r2, r2, #3
 800288a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800288c:	2327      	movs	r3, #39	; 0x27
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d00c      	beq.n	80028b8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4313      	orrs	r3, r2
 80028a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b0:	2327      	movs	r3, #39	; 0x27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80028b8:	2327      	movs	r3, #39	; 0x27
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01d      	beq.n	80028fe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff fda7 	bl	8002418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	490d      	ldr	r1, [pc, #52]	; (800290c <I2C_IsErrorOccurred+0x1fc>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2241      	movs	r2, #65	; 0x41
 80028ea:	2120      	movs	r1, #32
 80028ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2242      	movs	r2, #66	; 0x42
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80028fe:	2327      	movs	r3, #39	; 0x27
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	781b      	ldrb	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b00b      	add	sp, #44	; 0x2c
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	fe00e800 	.word	0xfe00e800

08002910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	0008      	movs	r0, r1
 800291a:	0011      	movs	r1, r2
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	240a      	movs	r4, #10
 8002920:	193b      	adds	r3, r7, r4
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	2009      	movs	r0, #9
 8002928:	183b      	adds	r3, r7, r0
 800292a:	1c0a      	adds	r2, r1, #0
 800292c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800292e:	193b      	adds	r3, r7, r4
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	059b      	lsls	r3, r3, #22
 8002934:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002936:	183b      	adds	r3, r7, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	0419      	lsls	r1, r3, #16
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002942:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	4313      	orrs	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295a:	0d51      	lsrs	r1, r2, #21
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	00d2      	lsls	r2, r2, #3
 8002960:	400a      	ands	r2, r1
 8002962:	4907      	ldr	r1, [pc, #28]	; (8002980 <I2C_TransferConfig+0x70>)
 8002964:	430a      	orrs	r2, r1
 8002966:	43d2      	mvns	r2, r2
 8002968:	401a      	ands	r2, r3
 800296a:	0011      	movs	r1, r2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b007      	add	sp, #28
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	03ff63ff 	.word	0x03ff63ff

08002984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2241      	movs	r2, #65	; 0x41
 8002992:	5c9b      	ldrb	r3, [r3, r2]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	d138      	bne.n	8002a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e032      	b.n	8002a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	2101      	movs	r1, #1
 80029ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2241      	movs	r2, #65	; 0x41
 80029b4:	2124      	movs	r1, #36	; 0x24
 80029b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2241      	movs	r2, #65	; 0x41
 80029fc:	2120      	movs	r1, #32
 80029fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	ffffefff 	.word	0xffffefff

08002a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2241      	movs	r2, #65	; 0x41
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d139      	bne.n	8002aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	5c9b      	ldrb	r3, [r3, r2]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e033      	b.n	8002aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	2101      	movs	r1, #1
 8002a46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2241      	movs	r2, #65	; 0x41
 8002a4c:	2124      	movs	r1, #36	; 0x24
 8002a4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2241      	movs	r2, #65	; 0x41
 8002a96:	2120      	movs	r1, #32
 8002a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	fffff0ff 	.word	0xfffff0ff

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f000 fbaf 	bl	8003226 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac8:	4bcf      	ldr	r3, [pc, #828]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	220c      	movs	r2, #12
 8002ace:	4013      	ands	r3, r2
 8002ad0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad2:	4bcd      	ldr	r3, [pc, #820]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	025b      	lsls	r3, r3, #9
 8002ada:	4013      	ands	r3, r2
 8002adc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d100      	bne.n	8002aea <HAL_RCC_OscConfig+0x36>
 8002ae8:	e07e      	b.n	8002be8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d007      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x68>
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	025b      	lsls	r3, r3, #9
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	4bc1      	ldr	r3, [pc, #772]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	029b      	lsls	r3, r3, #10
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5a>
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_OscConfig+0x132>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d167      	bne.n	8002be6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f000 fb85 	bl	8003226 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	025b      	lsls	r3, r3, #9
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x84>
 8002b28:	4bb7      	ldr	r3, [pc, #732]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4bb6      	ldr	r3, [pc, #728]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0249      	lsls	r1, r1, #9
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e027      	b.n	8002b88 <HAL_RCC_OscConfig+0xd4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	23a0      	movs	r3, #160	; 0xa0
 8002b3e:	02db      	lsls	r3, r3, #11
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d10e      	bne.n	8002b62 <HAL_RCC_OscConfig+0xae>
 8002b44:	4bb0      	ldr	r3, [pc, #704]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4baf      	ldr	r3, [pc, #700]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	02c9      	lsls	r1, r1, #11
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	4bad      	ldr	r3, [pc, #692]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4bac      	ldr	r3, [pc, #688]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0249      	lsls	r1, r1, #9
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	e012      	b.n	8002b88 <HAL_RCC_OscConfig+0xd4>
 8002b62:	4ba9      	ldr	r3, [pc, #676]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4ba8      	ldr	r3, [pc, #672]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b68:	49a8      	ldr	r1, [pc, #672]	; (8002e0c <HAL_RCC_OscConfig+0x358>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	4ba6      	ldr	r3, [pc, #664]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	025b      	lsls	r3, r3, #9
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002b82:	49a3      	ldr	r1, [pc, #652]	; (8002e10 <HAL_RCC_OscConfig+0x35c>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fcde 	bl	8001550 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fcd9 	bl	8001550 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	; 0x64
 8002ba6:	d902      	bls.n	8002bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f000 fb3c 	bl	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bae:	4b96      	ldr	r3, [pc, #600]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0ef      	beq.n	8002b9a <HAL_RCC_OscConfig+0xe6>
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fcc8 	bl	8001550 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fcc3 	bl	8001550 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b64      	cmp	r3, #100	; 0x64
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e326      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd8:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x112>
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x140>
 8002bf2:	e08b      	b.n	8002d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d13e      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1d0>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d13b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_RCC_OscConfig+0x16c>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e302      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x360>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c36:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c48:	f000 fc40 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8002c4c:	0001      	movs	r1, r0
 8002c4e:	4b6e      	ldr	r3, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	220f      	movs	r2, #15
 8002c56:	4013      	ands	r3, r2
 8002c58:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x364>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	40da      	lsrs	r2, r3
 8002c60:	4b6e      	ldr	r3, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x368>)
 8002c62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c64:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x36c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2513      	movs	r5, #19
 8002c6a:	197c      	adds	r4, r7, r5
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fe fc29 	bl	80014c4 <HAL_InitTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c76:	197b      	adds	r3, r7, r5
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d046      	beq.n	8002d0c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002c7e:	197b      	adds	r3, r7, r5
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	e2d0      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d027      	beq.n	8002cda <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2209      	movs	r2, #9
 8002c90:	4393      	bics	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fc58 	bl	8001550 <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fc53 	bl	8001550 <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e2b6      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d0f1      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a53      	ldr	r2, [pc, #332]	; (8002e14 <HAL_RCC_OscConfig+0x360>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	021a      	lsls	r2, r3, #8
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fc33 	bl	8001550 <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fc2e 	bl	8001550 <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e291      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d1f1      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2210      	movs	r2, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_RCC_OscConfig+0x264>
 8002d16:	e0a1      	b.n	8002e5c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d140      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x282>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e277      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d36:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <HAL_RCC_OscConfig+0x370>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	0a19      	lsrs	r1, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	061a      	lsls	r2, r3, #24
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	0b5b      	lsrs	r3, r3, #13
 8002d64:	3301      	adds	r3, #1
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	0212      	lsls	r2, r2, #8
 8002d6a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	210f      	movs	r1, #15
 8002d74:	400b      	ands	r3, r1
 8002d76:	4928      	ldr	r1, [pc, #160]	; (8002e18 <HAL_RCC_OscConfig+0x364>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x368>)
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x36c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2513      	movs	r5, #19
 8002d86:	197c      	adds	r4, r7, r5
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7fe fb9b 	bl	80014c4 <HAL_InitTick>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d92:	197b      	adds	r3, r7, r5
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d060      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002d9a:	197b      	adds	r3, r7, r5
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	e242      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d03f      	beq.n	8002e28 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0049      	lsls	r1, r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe fbcb 	bl	8001550 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fbc6 	bl	8001550 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e229      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x370>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	0a19      	lsrs	r1, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	061a      	lsls	r2, r3, #24
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <HAL_RCC_OscConfig+0x354>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e029      	b.n	8002e5c <HAL_RCC_OscConfig+0x3a8>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	fffeffff 	.word	0xfffeffff
 8002e10:	fffbffff 	.word	0xfffbffff
 8002e14:	ffffe0ff 	.word	0xffffe0ff
 8002e18:	080095e8 	.word	0x080095e8
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000008 	.word	0x20000008
 8002e24:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e28:	4bbd      	ldr	r3, [pc, #756]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4bbc      	ldr	r3, [pc, #752]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e2e:	49bd      	ldr	r1, [pc, #756]	; (8003124 <HAL_RCC_OscConfig+0x670>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fb8c 	bl	8001550 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fb87 	bl	8001550 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1ea      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e50:	4bb3      	ldr	r3, [pc, #716]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	4013      	ands	r3, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d019      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6e:	4bac      	ldr	r3, [pc, #688]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e72:	4bab      	ldr	r3, [pc, #684]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fb69 	bl	8001550 <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe fb64 	bl	8001550 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1c7      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e96:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d0f1      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3d0>
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea2:	4b9f      	ldr	r3, [pc, #636]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea6:	4b9e      	ldr	r3, [pc, #632]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	438a      	bics	r2, r1
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fb4f 	bl	8001550 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe fb4a 	bl	8001550 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1ad      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eca:	4b95      	ldr	r3, [pc, #596]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d1f1      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4013      	ands	r3, r2
 8002edc:	d100      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x42c>
 8002ede:	e0ae      	b.n	800303e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2027      	movs	r0, #39	; 0x27
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee8:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	055b      	lsls	r3, r3, #21
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef8:	4b89      	ldr	r3, [pc, #548]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	0549      	lsls	r1, r1, #21
 8002efe:	430a      	orrs	r2, r1
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f02:	183b      	adds	r3, r7, r0
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b87      	ldr	r3, [pc, #540]	; (8003128 <HAL_RCC_OscConfig+0x674>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	d11a      	bne.n	8002f4a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f14:	4b84      	ldr	r3, [pc, #528]	; (8003128 <HAL_RCC_OscConfig+0x674>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b83      	ldr	r3, [pc, #524]	; (8003128 <HAL_RCC_OscConfig+0x674>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fb15 	bl	8001550 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fb10 	bl	8001550 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e173      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x674>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4b2>
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f5a:	4b71      	ldr	r3, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0049      	lsls	r1, r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50
 8002f64:	e031      	b.n	8002fca <HAL_RCC_OscConfig+0x516>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4d4>
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f74:	496b      	ldr	r1, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x670>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7a:	4b69      	ldr	r3, [pc, #420]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7e:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f80:	496a      	ldr	r1, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x678>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
 8002f86:	e020      	b.n	8002fca <HAL_RCC_OscConfig+0x516>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	23a0      	movs	r3, #160	; 0xa0
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10e      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x4fe>
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	00c9      	lsls	r1, r1, #3
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0049      	lsls	r1, r1, #1
 8002fac:	430a      	orrs	r2, r1
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb0:	e00b      	b.n	8002fca <HAL_RCC_OscConfig+0x516>
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fb8:	495a      	ldr	r1, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x670>)
 8002fba:	400a      	ands	r2, r1
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8002fbe:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002fc4:	4959      	ldr	r1, [pc, #356]	; (800312c <HAL_RCC_OscConfig+0x678>)
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d015      	beq.n	8002ffe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fabd 	bl	8001550 <HAL_GetTick>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fda:	e009      	b.n	8002ff0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fab8 	bl	8001550 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_RCC_OscConfig+0x67c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e11a      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8002ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x528>
 8002ffc:	e014      	b.n	8003028 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe faa7 	bl	8001550 <HAL_GetTick>
 8003002:	0003      	movs	r3, r0
 8003004:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003006:	e009      	b.n	800301c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe faa2 	bl	8001550 <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	4a47      	ldr	r2, [pc, #284]	; (8003130 <HAL_RCC_OscConfig+0x67c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e104      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 800301e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4013      	ands	r3, r2
 8003026:	d1ef      	bne.n	8003008 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003028:	2327      	movs	r3, #39	; 0x27
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003036:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003038:	493e      	ldr	r1, [pc, #248]	; (8003134 <HAL_RCC_OscConfig+0x680>)
 800303a:	400a      	ands	r2, r1
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	4013      	ands	r3, r2
 8003046:	d049      	beq.n	80030dc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d026      	beq.n	800309e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003056:	2101      	movs	r1, #1
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003062:	2101      	movs	r1, #1
 8003064:	430a      	orrs	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
 8003068:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_RCC_OscConfig+0x684>)
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCC_OscConfig+0x684>)
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	0189      	lsls	r1, r1, #6
 8003072:	430a      	orrs	r2, r1
 8003074:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe fa6b 	bl	8001550 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003080:	f7fe fa66 	bl	8001550 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0c9      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2202      	movs	r2, #2
 8003098:	4013      	ands	r3, r2
 800309a:	d0f1      	beq.n	8003080 <HAL_RCC_OscConfig+0x5cc>
 800309c:	e01e      	b.n	80030dc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	438a      	bics	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCC_OscConfig+0x684>)
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_OscConfig+0x684>)
 80030b0:	4922      	ldr	r1, [pc, #136]	; (800313c <HAL_RCC_OscConfig+0x688>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fa4b 	bl	8001550 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c0:	f7fe fa46 	bl	8001550 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0a9      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d1f1      	bne.n	80030c0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d100      	bne.n	80030e6 <HAL_RCC_OscConfig+0x632>
 80030e4:	e09e      	b.n	8003224 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d100      	bne.n	80030ee <HAL_RCC_OscConfig+0x63a>
 80030ec:	e077      	b.n	80031de <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d158      	bne.n	80031a8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x66c>)
 80030fc:	4910      	ldr	r1, [pc, #64]	; (8003140 <HAL_RCC_OscConfig+0x68c>)
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe fa25 	bl	8001550 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800310a:	e01b      	b.n	8003144 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fa20 	bl	8001550 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d914      	bls.n	8003144 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e083      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	fffffeff 	.word	0xfffffeff
 8003128:	40007000 	.word	0x40007000
 800312c:	fffffbff 	.word	0xfffffbff
 8003130:	00001388 	.word	0x00001388
 8003134:	efffffff 	.word	0xefffffff
 8003138:	40010000 	.word	0x40010000
 800313c:	ffffdfff 	.word	0xffffdfff
 8003140:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003144:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	049b      	lsls	r3, r3, #18
 800314c:	4013      	ands	r3, r2
 800314e:	d1dd      	bne.n	800310c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_RCC_OscConfig+0x780>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	431a      	orrs	r2, r3
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	0449      	lsls	r1, r1, #17
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe f9e7 	bl	8001550 <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe f9e2 	bl	8001550 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e045      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	049b      	lsls	r3, r3, #18
 80031a2:	4013      	ands	r3, r2
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x6d4>
 80031a6:	e03d      	b.n	8003224 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031ae:	4922      	ldr	r1, [pc, #136]	; (8003238 <HAL_RCC_OscConfig+0x784>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe f9cc 	bl	8001550 <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe f9c7 	bl	8001550 <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e02a      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	049b      	lsls	r3, r3, #18
 80031d8:	4013      	ands	r3, r2
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x70a>
 80031dc:	e022      	b.n	8003224 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e01d      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	025b      	lsls	r3, r3, #9
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d10f      	bne.n	8003220 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	23f0      	movs	r3, #240	; 0xf0
 8003204:	039b      	lsls	r3, r3, #14
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	23c0      	movs	r3, #192	; 0xc0
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b00a      	add	sp, #40	; 0x28
 800322c:	bdb0      	pop	{r4, r5, r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	40021000 	.word	0x40021000
 8003234:	ff02ffff 	.word	0xff02ffff
 8003238:	feffffff 	.word	0xfeffffff

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e128      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d91e      	bls.n	800329c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b93      	ldr	r3, [pc, #588]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	4393      	bics	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	4b90      	ldr	r3, [pc, #576]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003270:	f7fe f96e 	bl	8001550 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003278:	e009      	b.n	800328e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327a:	f7fe f969 	bl	8001550 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a8a      	ldr	r2, [pc, #552]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e109      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2201      	movs	r2, #1
 8003294:	4013      	ands	r3, r2
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a6:	4b83      	ldr	r3, [pc, #524]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	22f0      	movs	r2, #240	; 0xf0
 80032ac:	4393      	bics	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d100      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x8a>
 80032c4:	e089      	b.n	80033da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ce:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	029b      	lsls	r3, r3, #10
 80032d6:	4013      	ands	r3, r2
 80032d8:	d120      	bne.n	800331c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0e1      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	049b      	lsls	r3, r3, #18
 80032ee:	4013      	ands	r3, r2
 80032f0:	d114      	bne.n	800331c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0d5      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d106      	bne.n	800330c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d109      	bne.n	800331c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0ca      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800330c:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4013      	ands	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0c2      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2203      	movs	r2, #3
 8003322:	4393      	bics	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe f90e 	bl	8001550 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d111      	bne.n	8003364 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	e009      	b.n	8003356 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003342:	f7fe f905 	bl	8001550 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0a5      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	220c      	movs	r2, #12
 800335c:	4013      	ands	r3, r2
 800335e:	2b08      	cmp	r3, #8
 8003360:	d1ef      	bne.n	8003342 <HAL_RCC_ClockConfig+0x106>
 8003362:	e03a      	b.n	80033da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d111      	bne.n	8003390 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	e009      	b.n	8003382 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7fe f8ef 	bl	8001550 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	4a4d      	ldr	r2, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e08f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003382:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	220c      	movs	r2, #12
 8003388:	4013      	ands	r3, r2
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d1ef      	bne.n	800336e <HAL_RCC_ClockConfig+0x132>
 800338e:	e024      	b.n	80033da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d11b      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003398:	e009      	b.n	80033ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339a:	f7fe f8d9 	bl	8001550 <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e079      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	220c      	movs	r2, #12
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_ClockConfig+0x15e>
 80033ba:	e00e      	b.n	80033da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe f8c8 	bl	8001550 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	4a3a      	ldr	r2, [pc, #232]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e068      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033d0:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	220c      	movs	r2, #12
 80033d6:	4013      	ands	r3, r2
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d21e      	bcs.n	8003426 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033fa:	f7fe f8a9 	bl	8001550 <HAL_GetTick>
 80033fe:	0003      	movs	r3, r0
 8003400:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	e009      	b.n	8003418 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe f8a4 	bl	8001550 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <HAL_RCC_ClockConfig+0x274>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e044      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_RCC_ClockConfig+0x27c>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2208      	movs	r2, #8
 800344a:	4013      	ands	r3, r2
 800344c:	d00a      	beq.n	8003464 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_RCC_ClockConfig+0x280>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00da      	lsls	r2, r3, #3
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003464:	f000 f832 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8003468:	0001      	movs	r1, r0
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x278>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	220f      	movs	r2, #15
 8003472:	4013      	ands	r3, r2
 8003474:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_RCC_ClockConfig+0x284>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	000a      	movs	r2, r1
 800347a:	40da      	lsrs	r2, r3
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x288>)
 800347e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_ClockConfig+0x28c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	250b      	movs	r5, #11
 8003486:	197c      	adds	r4, r7, r5
 8003488:	0018      	movs	r0, r3
 800348a:	f7fe f81b 	bl	80014c4 <HAL_InitTick>
 800348e:	0003      	movs	r3, r0
 8003490:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003492:	197b      	adds	r3, r7, r5
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800349a:	197b      	adds	r3, r7, r5
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	e000      	b.n	80034a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bdb0      	pop	{r4, r5, r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	40022000 	.word	0x40022000
 80034b0:	00001388 	.word	0x00001388
 80034b4:	40021000 	.word	0x40021000
 80034b8:	fffff8ff 	.word	0xfffff8ff
 80034bc:	ffffc7ff 	.word	0xffffc7ff
 80034c0:	080095e8 	.word	0x080095e8
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b08e      	sub	sp, #56	; 0x38
 80034d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034d2:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_GetSysClockFreq+0x138>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034da:	230c      	movs	r3, #12
 80034dc:	4013      	ands	r3, r2
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d014      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x40>
 80034e2:	d900      	bls.n	80034e6 <HAL_RCC_GetSysClockFreq+0x1a>
 80034e4:	e07b      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x112>
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x24>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ee:	e076      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034f0:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_RCC_GetSysClockFreq+0x138>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2210      	movs	r2, #16
 80034f6:	4013      	ands	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034fe:	e07c      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003500:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_RCC_GetSysClockFreq+0x140>)
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003504:	e079      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003506:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_RCC_GetSysClockFreq+0x144>)
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800350a:	e076      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	0c9a      	lsrs	r2, r3, #18
 8003510:	230f      	movs	r3, #15
 8003512:	401a      	ands	r2, r3
 8003514:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCC_GetSysClockFreq+0x148>)
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	0d9a      	lsrs	r2, r3, #22
 800351e:	2303      	movs	r3, #3
 8003520:	4013      	ands	r3, r2
 8003522:	3301      	adds	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_GetSysClockFreq+0x138>)
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	025b      	lsls	r3, r3, #9
 800352e:	4013      	ands	r3, r2
 8003530:	d01a      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	4a35      	ldr	r2, [pc, #212]	; (8003610 <HAL_RCC_GetSysClockFreq+0x144>)
 800353c:	2300      	movs	r3, #0
 800353e:	69b8      	ldr	r0, [r7, #24]
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	f7fc fe9f 	bl	8000284 <__aeabi_lmul>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	0010      	movs	r0, r2
 800354c:	0019      	movs	r1, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f7fc fe73 	bl	8000244 <__aeabi_uldivmod>
 800355e:	0002      	movs	r2, r0
 8003560:	000b      	movs	r3, r1
 8003562:	0013      	movs	r3, r2
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
 8003566:	e037      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003568:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_RCC_GetSysClockFreq+0x138>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d01a      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4a23      	ldr	r2, [pc, #140]	; (8003608 <HAL_RCC_GetSysClockFreq+0x13c>)
 800357c:	2300      	movs	r3, #0
 800357e:	68b8      	ldr	r0, [r7, #8]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	f7fc fe7f 	bl	8000284 <__aeabi_lmul>
 8003586:	0002      	movs	r2, r0
 8003588:	000b      	movs	r3, r1
 800358a:	0010      	movs	r0, r2
 800358c:	0019      	movs	r1, r3
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f7fc fe53 	bl	8000244 <__aeabi_uldivmod>
 800359e:	0002      	movs	r2, r0
 80035a0:	000b      	movs	r3, r1
 80035a2:	0013      	movs	r3, r2
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
 80035a6:	e017      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	0018      	movs	r0, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	0019      	movs	r1, r3
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_RCC_GetSysClockFreq+0x140>)
 80035b2:	2300      	movs	r3, #0
 80035b4:	f7fc fe66 	bl	8000284 <__aeabi_lmul>
 80035b8:	0002      	movs	r2, r0
 80035ba:	000b      	movs	r3, r1
 80035bc:	0010      	movs	r0, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	001c      	movs	r4, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	001d      	movs	r5, r3
 80035c8:	0022      	movs	r2, r4
 80035ca:	002b      	movs	r3, r5
 80035cc:	f7fc fe3a 	bl	8000244 <__aeabi_uldivmod>
 80035d0:	0002      	movs	r2, r0
 80035d2:	000b      	movs	r3, r1
 80035d4:	0013      	movs	r3, r2
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035dc:	e00d      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_GetSysClockFreq+0x138>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	2207      	movs	r2, #7
 80035e6:	4013      	ands	r3, r2
 80035e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	3301      	adds	r3, #1
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	0212      	lsls	r2, r2, #8
 80035f2:	409a      	lsls	r2, r3
 80035f4:	0013      	movs	r3, r2
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b00e      	add	sp, #56	; 0x38
 8003602:	bdb0      	pop	{r4, r5, r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	003d0900 	.word	0x003d0900
 800360c:	00f42400 	.word	0x00f42400
 8003610:	007a1200 	.word	0x007a1200
 8003614:	08009600 	.word	0x08009600

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_RCC_GetHCLKFreq+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff2 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003634:	0001      	movs	r1, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	2207      	movs	r2, #7
 800363e:	4013      	ands	r3, r2
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	40d9      	lsrs	r1, r3
 8003646:	000b      	movs	r3, r1
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	40021000 	.word	0x40021000
 8003654:	080095f8 	.word	0x080095f8

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	0001      	movs	r1, r0
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	0adb      	lsrs	r3, r3, #11
 8003668:	2207      	movs	r2, #7
 800366a:	4013      	ands	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	40d9      	lsrs	r1, r3
 8003672:	000b      	movs	r3, r1
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	40021000 	.word	0x40021000
 8003680:	080095f8 	.word	0x080095f8

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800368c:	2317      	movs	r3, #23
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2220      	movs	r2, #32
 800369a:	4013      	ands	r3, r2
 800369c:	d106      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 80036aa:	e104      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ac:	4bb1      	ldr	r3, [pc, #708]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	055b      	lsls	r3, r3, #21
 80036b4:	4013      	ands	r3, r2
 80036b6:	d10a      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4bae      	ldr	r3, [pc, #696]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036bc:	4bad      	ldr	r3, [pc, #692]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	0549      	lsls	r1, r1, #21
 80036c2:	430a      	orrs	r2, r1
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4baa      	ldr	r3, [pc, #680]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	d11a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4ba7      	ldr	r3, [pc, #668]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4ba6      	ldr	r3, [pc, #664]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0049      	lsls	r1, r1, #1
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e8:	f7fd ff32 	bl	8001550 <HAL_GetTick>
 80036ec:	0003      	movs	r3, r0
 80036ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	e008      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f2:	f7fd ff2d 	bl	8001550 <HAL_GetTick>
 80036f6:	0002      	movs	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b64      	cmp	r3, #100	; 0x64
 80036fe:	d901      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e133      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	4b9c      	ldr	r3, [pc, #624]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4013      	ands	r3, r2
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003710:	4b98      	ldr	r3, [pc, #608]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	23c0      	movs	r3, #192	; 0xc0
 8003716:	039b      	lsls	r3, r3, #14
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	23c0      	movs	r3, #192	; 0xc0
 8003722:	039b      	lsls	r3, r3, #14
 8003724:	4013      	ands	r3, r2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	429a      	cmp	r2, r3
 800372a:	d107      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	23c0      	movs	r3, #192	; 0xc0
 8003732:	039b      	lsls	r3, r3, #14
 8003734:	4013      	ands	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d013      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	23c0      	movs	r3, #192	; 0xc0
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	401a      	ands	r2, r3
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	429a      	cmp	r2, r3
 800374c:	d10a      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b89      	ldr	r3, [pc, #548]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	401a      	ands	r2, r3
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	029b      	lsls	r3, r3, #10
 800375c:	429a      	cmp	r2, r3
 800375e:	d101      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e103      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003764:	4b83      	ldr	r3, [pc, #524]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003768:	23c0      	movs	r3, #192	; 0xc0
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d049      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	23c0      	movs	r3, #192	; 0xc0
 800377c:	029b      	lsls	r3, r3, #10
 800377e:	4013      	ands	r3, r2
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	429a      	cmp	r2, r3
 8003784:	d004      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	4013      	ands	r3, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	429a      	cmp	r2, r3
 800379e:	d034      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4013      	ands	r3, r2
 80037aa:	d02e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80037ac:	4b71      	ldr	r3, [pc, #452]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	4a72      	ldr	r2, [pc, #456]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ba:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0309      	lsls	r1, r1, #12
 80037c0:	430a      	orrs	r2, r1
 80037c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ca:	496d      	ldr	r1, [pc, #436]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	d014      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd feb6 	bl	8001550 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	e009      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd feb1 	bl	8001550 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0b6      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d0ef      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d01f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	23c0      	movs	r3, #192	; 0xc0
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	401a      	ands	r2, r3
 8003820:	23c0      	movs	r3, #192	; 0xc0
 8003822:	029b      	lsls	r3, r3, #10
 8003824:	429a      	cmp	r2, r3
 8003826:	d10c      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003828:	4b52      	ldr	r3, [pc, #328]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	23c0      	movs	r3, #192	; 0xc0
 8003838:	039b      	lsls	r3, r3, #14
 800383a:	401a      	ands	r2, r3
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003844:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	23c0      	movs	r3, #192	; 0xc0
 800384c:	029b      	lsls	r3, r3, #10
 800384e:	401a      	ands	r2, r3
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003852:	430a      	orrs	r2, r1
 8003854:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2220      	movs	r2, #32
 800385c:	4013      	ands	r3, r2
 800385e:	d01f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	23c0      	movs	r3, #192	; 0xc0
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	401a      	ands	r2, r3
 800386a:	23c0      	movs	r3, #192	; 0xc0
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	429a      	cmp	r2, r3
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a44      	ldr	r2, [pc, #272]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003878:	4013      	ands	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	039b      	lsls	r3, r3, #14
 8003884:	401a      	ands	r2, r3
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800388e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	23c0      	movs	r3, #192	; 0xc0
 8003896:	029b      	lsls	r3, r3, #10
 8003898:	401a      	ands	r2, r3
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800389c:	430a      	orrs	r2, r1
 800389e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038a0:	2317      	movs	r3, #23
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b0:	4936      	ldr	r1, [pc, #216]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038b2:	400a      	ands	r2, r1
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	2203      	movs	r2, #3
 80038c6:	4393      	bics	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038d0:	430a      	orrs	r2, r1
 80038d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2202      	movs	r2, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038de:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	220c      	movs	r2, #12
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	4013      	ands	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800390c:	430a      	orrs	r2, r1
 800390e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	4013      	ands	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003920:	4013      	ands	r3, r2
 8003922:	0019      	movs	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800392a:	430a      	orrs	r2, r1
 800392c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	4013      	ands	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003948:	430a      	orrs	r2, r1
 800394a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	4013      	ands	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003966:	430a      	orrs	r2, r1
 8003968:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b006      	add	sp, #24
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	fffcffff 	.word	0xfffcffff
 8003980:	fff7ffff 	.word	0xfff7ffff
 8003984:	00001388 	.word	0x00001388
 8003988:	ffcfffff 	.word	0xffcfffff
 800398c:	efffffff 	.word	0xefffffff
 8003990:	fffff3ff 	.word	0xfffff3ff
 8003994:	ffffcfff 	.word	0xffffcfff
 8003998:	fbffffff 	.word	0xfbffffff
 800399c:	fff3ffff 	.word	0xfff3ffff

080039a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e083      	b.n	8003aba <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	2382      	movs	r3, #130	; 0x82
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d009      	beq.n	80039da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]
 80039cc:	e005      	b.n	80039da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2251      	movs	r2, #81	; 0x51
 80039e4:	5c9b      	ldrb	r3, [r3, r2]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2250      	movs	r2, #80	; 0x50
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fd f8a8 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2251      	movs	r2, #81	; 0x51
 8003a00:	2102      	movs	r1, #2
 8003a02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	438a      	bics	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	2382      	movs	r3, #130	; 0x82
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	2384      	movs	r3, #132	; 0x84
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	400b      	ands	r3, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68d9      	ldr	r1, [r3, #12]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	400b      	ands	r3, r1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	2101      	movs	r1, #1
 8003a46:	400b      	ands	r3, r1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	400b      	ands	r3, r1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2138      	movs	r1, #56	; 0x38
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	400b      	ands	r3, r1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	019b      	lsls	r3, r3, #6
 8003a74:	401a      	ands	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	2204      	movs	r2, #4
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2210      	movs	r2, #16
 8003a90:	401a      	ands	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4907      	ldr	r1, [pc, #28]	; (8003ac4 <HAL_SPI_Init+0x124>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2251      	movs	r2, #81	; 0x51
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	fffff7ff 	.word	0xfffff7ff

08003ac8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	1dbb      	adds	r3, r7, #6
 8003ad6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad8:	231f      	movs	r3, #31
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2250      	movs	r2, #80	; 0x50
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_SPI_Transmit+0x26>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e145      	b.n	8003d7a <HAL_SPI_Transmit+0x2b2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2250      	movs	r2, #80	; 0x50
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af6:	f7fd fd2b 	bl	8001550 <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003afe:	2316      	movs	r3, #22
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	1dba      	adds	r2, r7, #6
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2251      	movs	r2, #81	; 0x51
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d004      	beq.n	8003b1e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003b14:	231f      	movs	r3, #31
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b1c:	e126      	b.n	8003d6c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_SPI_Transmit+0x64>
 8003b24:	1dbb      	adds	r3, r7, #6
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003b2c:	231f      	movs	r3, #31
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b34:	e11a      	b.n	8003d6c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2251      	movs	r2, #81	; 0x51
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1dba      	adds	r2, r7, #6
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1dba      	adds	r2, r7, #6
 8003b56:	8812      	ldrh	r2, [r2, #0]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d110      	bne.n	8003ba6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2140      	movs	r1, #64	; 0x40
 8003b90:	438a      	bics	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	01c9      	lsls	r1, r1, #7
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d007      	beq.n	8003bc4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d152      	bne.n	8003c76 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_SPI_Transmit+0x11a>
 8003bd8:	2316      	movs	r3, #22
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d143      	bne.n	8003c6a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c06:	e030      	b.n	8003c6a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d112      	bne.n	8003c3c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c9a      	adds	r2, r3, #2
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c3a:	e016      	b.n	8003c6a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fd fc88 	bl	8001550 <HAL_GetTick>
 8003c40:	0002      	movs	r2, r0
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d802      	bhi.n	8003c52 <HAL_SPI_Transmit+0x18a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_SPI_Transmit+0x190>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003c58:	231f      	movs	r3, #31
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2251      	movs	r2, #81	; 0x51
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]
          goto error;
 8003c68:	e080      	b.n	8003d6c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1c9      	bne.n	8003c08 <HAL_SPI_Transmit+0x140>
 8003c74:	e053      	b.n	8003d1e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_SPI_Transmit+0x1c0>
 8003c7e:	2316      	movs	r3, #22
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d145      	bne.n	8003d14 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cae:	e031      	b.n	8003d14 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d113      	bne.n	8003ce6 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ce4:	e016      	b.n	8003d14 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce6:	f7fd fc33 	bl	8001550 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d802      	bhi.n	8003cfc <HAL_SPI_Transmit+0x234>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Transmit+0x23a>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d108      	bne.n	8003d14 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003d02:	231f      	movs	r3, #31
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	2203      	movs	r2, #3
 8003d08:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2251      	movs	r2, #81	; 0x51
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d12:	e02b      	b.n	8003d6c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1c8      	bne.n	8003cb0 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f001 f805 	bl	8004d34 <SPI_EndRxTxTransaction>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003d5a:	231f      	movs	r3, #31
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e003      	b.n	8003d6c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2251      	movs	r2, #81	; 0x51
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2250      	movs	r2, #80	; 0x50
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d74:	231f      	movs	r3, #31
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b008      	add	sp, #32
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	1dbb      	adds	r3, r7, #6
 8003d92:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d94:	2117      	movs	r1, #23
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2251      	movs	r2, #81	; 0x51
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2202      	movs	r2, #2
 8003dac:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dae:	e109      	b.n	8003fc4 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	2382      	movs	r3, #130	; 0x82
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d113      	bne.n	8003de4 <HAL_SPI_Receive+0x60>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10f      	bne.n	8003de4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2251      	movs	r2, #81	; 0x51
 8003dc8:	2104      	movs	r1, #4
 8003dca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dcc:	1dbb      	adds	r3, r7, #6
 8003dce:	881c      	ldrh	r4, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	f000 f900 	bl	8003fe0 <HAL_SPI_TransmitReceive>
 8003de0:	0003      	movs	r3, r0
 8003de2:	e0f6      	b.n	8003fd2 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2250      	movs	r2, #80	; 0x50
 8003de8:	5c9b      	ldrb	r3, [r3, r2]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Receive+0x6e>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0ef      	b.n	8003fd2 <HAL_SPI_Receive+0x24e>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2250      	movs	r2, #80	; 0x50
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dfa:	f7fd fba9 	bl	8001550 <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_SPI_Receive+0x8c>
 8003e08:	1dbb      	adds	r3, r7, #6
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003e10:	2317      	movs	r3, #23
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e18:	e0d4      	b.n	8003fc4 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2251      	movs	r2, #81	; 0x51
 8003e1e:	2104      	movs	r1, #4
 8003e20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1dba      	adds	r2, r7, #6
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1dba      	adds	r2, r7, #6
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2140      	movs	r1, #64	; 0x40
 8003e74:	438a      	bics	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4956      	ldr	r1, [pc, #344]	; (8003fdc <HAL_SPI_Receive+0x258>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d007      	beq.n	8003ea6 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2140      	movs	r1, #64	; 0x40
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d000      	beq.n	8003eb0 <HAL_SPI_Receive+0x12c>
 8003eae:	e06c      	b.n	8003f8a <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003eb0:	e033      	b.n	8003f1a <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d115      	bne.n	8003eec <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eea:	e016      	b.n	8003f1a <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eec:	f7fd fb30 	bl	8001550 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d802      	bhi.n	8003f02 <HAL_SPI_Receive+0x17e>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_SPI_Receive+0x184>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d108      	bne.n	8003f1a <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003f08:	2317      	movs	r3, #23
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2251      	movs	r2, #81	; 0x51
 8003f14:	2101      	movs	r1, #1
 8003f16:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f18:	e054      	b.n	8003fc4 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1c6      	bne.n	8003eb2 <HAL_SPI_Receive+0x12e>
 8003f24:	e036      	b.n	8003f94 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d113      	bne.n	8003f5c <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f5a:	e016      	b.n	8003f8a <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5c:	f7fd faf8 	bl	8001550 <HAL_GetTick>
 8003f60:	0002      	movs	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d802      	bhi.n	8003f72 <HAL_SPI_Receive+0x1ee>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Receive+0x1f4>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d108      	bne.n	8003f8a <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2317      	movs	r3, #23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2251      	movs	r2, #81	; 0x51
 8003f84:	2101      	movs	r1, #1
 8003f86:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f88:	e01c      	b.n	8003fc4 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1c8      	bne.n	8003f26 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 fe60 	bl	8004c60 <SPI_EndRxTransaction>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003fb2:	2317      	movs	r3, #23
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e003      	b.n	8003fc4 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2251      	movs	r2, #81	; 0x51
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2250      	movs	r2, #80	; 0x50
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003fcc:	2317      	movs	r3, #23
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b007      	add	sp, #28
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	ffffbfff 	.word	0xffffbfff

08003fe0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	001a      	movs	r2, r3
 8003fee:	1cbb      	adds	r3, r7, #2
 8003ff0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff6:	232b      	movs	r3, #43	; 0x2b
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2250      	movs	r2, #80	; 0x50
 8004002:	5c9b      	ldrb	r3, [r3, r2]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_SPI_TransmitReceive+0x2c>
 8004008:	2302      	movs	r3, #2
 800400a:	e1b0      	b.n	800436e <HAL_SPI_TransmitReceive+0x38e>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2250      	movs	r2, #80	; 0x50
 8004010:	2101      	movs	r1, #1
 8004012:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004014:	f7fd fa9c 	bl	8001550 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800401c:	2023      	movs	r0, #35	; 0x23
 800401e:	183b      	adds	r3, r7, r0
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	2151      	movs	r1, #81	; 0x51
 8004024:	5c52      	ldrb	r2, [r2, r1]
 8004026:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800402e:	231a      	movs	r3, #26
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	1cba      	adds	r2, r7, #2
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004038:	183b      	adds	r3, r7, r0
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d011      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x84>
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	2382      	movs	r3, #130	; 0x82
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	429a      	cmp	r2, r3
 8004048:	d107      	bne.n	800405a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_SPI_TransmitReceive+0x7a>
 8004052:	183b      	adds	r3, r7, r0
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d004      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800405a:	232b      	movs	r3, #43	; 0x2b
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2202      	movs	r2, #2
 8004060:	701a      	strb	r2, [r3, #0]
    goto error;
 8004062:	e17d      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x98>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x98>
 8004070:	1cbb      	adds	r3, r7, #2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004078:	232b      	movs	r3, #43	; 0x2b
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004080:	e16e      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2251      	movs	r2, #81	; 0x51
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2251      	movs	r2, #81	; 0x51
 8004092:	2105      	movs	r1, #5
 8004094:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1cba      	adds	r2, r7, #2
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1cba      	adds	r2, r7, #2
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1cba      	adds	r2, r7, #2
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1cba      	adds	r2, r7, #2
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	4013      	ands	r3, r2
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d007      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2140      	movs	r1, #64	; 0x40
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d000      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x120>
 80040fe:	e07f      	b.n	8004200 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x134>
 8004108:	231a      	movs	r3, #26
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d000      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x134>
 8004112:	e06a      	b.n	80041ea <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004138:	e057      	b.n	80041ea <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11b      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x1a0>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x1a0>
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d113      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	2b01      	cmp	r3, #1
 800418c:	d119      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x1e2>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	b292      	uxth	r2, r2
 80041a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c2:	f7fd f9c5 	bl	8001550 <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d80b      	bhi.n	80041ea <HAL_SPI_TransmitReceive+0x20a>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	3301      	adds	r3, #1
 80041d6:	d008      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80041d8:	232b      	movs	r3, #43	; 0x2b
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2203      	movs	r2, #3
 80041de:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2251      	movs	r2, #81	; 0x51
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]
        goto error;
 80041e8:	e0ba      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1a2      	bne.n	800413a <HAL_SPI_TransmitReceive+0x15a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d19d      	bne.n	800413a <HAL_SPI_TransmitReceive+0x15a>
 80041fe:	e083      	b.n	8004308 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x234>
 8004208:	231a      	movs	r3, #26
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d000      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x234>
 8004212:	e06f      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423a:	e05b      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2202      	movs	r2, #2
 8004244:	4013      	ands	r3, r2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d11c      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x2a4>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x2a4>
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d114      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	7812      	ldrb	r2, [r2, #0]
 8004266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2201      	movs	r2, #1
 800428c:	4013      	ands	r3, r2
 800428e:	2b01      	cmp	r3, #1
 8004290:	d119      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x2e6>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d014      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c2:	2301      	movs	r3, #1
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042c6:	f7fd f943 	bl	8001550 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d802      	bhi.n	80042dc <HAL_SPI_TransmitReceive+0x2fc>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	3301      	adds	r3, #1
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x302>
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80042e2:	232b      	movs	r3, #43	; 0x2b
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2203      	movs	r2, #3
 80042e8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2251      	movs	r2, #81	; 0x51
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]
        goto error;
 80042f2:	e035      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d19e      	bne.n	800423c <HAL_SPI_TransmitReceive+0x25c>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d199      	bne.n	800423c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fd10 	bl	8004d34 <SPI_EndRxTxTransaction>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d007      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8004318:	232b      	movs	r3, #43	; 0x2b
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004326:	e01b      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800434e:	232b      	movs	r3, #43	; 0x2b
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e003      	b.n	8004360 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2251      	movs	r2, #81	; 0x51
 800435c:	2101      	movs	r1, #1
 800435e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2250      	movs	r2, #80	; 0x50
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004368:	232b      	movs	r3, #43	; 0x2b
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b00c      	add	sp, #48	; 0x30
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004386:	2117      	movs	r1, #23
 8004388:	187b      	adds	r3, r7, r1
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2251      	movs	r2, #81	; 0x51
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d003      	beq.n	80043a2 <HAL_SPI_Receive_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
 800439a:	187b      	adds	r3, r7, r1
 800439c:	2202      	movs	r2, #2
 800439e:	701a      	strb	r2, [r3, #0]
    goto error;
 80043a0:	e0ab      	b.n	80044fa <HAL_SPI_Receive_DMA+0x182>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d112      	bne.n	80043d0 <HAL_SPI_Receive_DMA+0x58>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	2382      	movs	r3, #130	; 0x82
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d10c      	bne.n	80043d0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2251      	movs	r2, #81	; 0x51
 80043ba:	2104      	movs	r1, #4
 80043bc:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80043be:	1dbb      	adds	r3, r7, #6
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f8aa 	bl	8004520 <HAL_SPI_TransmitReceive_DMA>
 80043cc:	0003      	movs	r3, r0
 80043ce:	e09b      	b.n	8004508 <HAL_SPI_Receive_DMA+0x190>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2250      	movs	r2, #80	; 0x50
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_SPI_Receive_DMA+0x66>
 80043da:	2302      	movs	r3, #2
 80043dc:	e094      	b.n	8004508 <HAL_SPI_Receive_DMA+0x190>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2250      	movs	r2, #80	; 0x50
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_SPI_Receive_DMA+0x7c>
 80043ec:	1dbb      	adds	r3, r7, #6
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_SPI_Receive_DMA+0x86>
  {
    errorcode = HAL_ERROR;
 80043f4:	2317      	movs	r3, #23
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80043fc:	e07d      	b.n	80044fa <HAL_SPI_Receive_DMA+0x182>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2251      	movs	r2, #81	; 0x51
 8004402:	2104      	movs	r1, #4
 8004404:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1dba      	adds	r2, r7, #6
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1dba      	adds	r2, r7, #6
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	429a      	cmp	r2, r3
 8004444:	d10f      	bne.n	8004466 <HAL_SPI_Receive_DMA+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	438a      	bics	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	492b      	ldr	r1, [pc, #172]	; (8004510 <HAL_SPI_Receive_DMA+0x198>)
 8004462:	400a      	ands	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <HAL_SPI_Receive_DMA+0x19c>)
 800446c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	4a29      	ldr	r2, [pc, #164]	; (8004518 <HAL_SPI_Receive_DMA+0x1a0>)
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_SPI_Receive_DMA+0x1a4>)
 800447c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	2200      	movs	r2, #0
 8004484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	0019      	movs	r1, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800449e:	f7fd f9db 	bl	8001858 <HAL_DMA_Start_IT>
 80044a2:	1e03      	subs	r3, r0, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_SPI_Receive_DMA+0x144>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	2210      	movs	r2, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80044b2:	2317      	movs	r3, #23
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]

    goto error;
 80044ba:	e01e      	b.n	80044fa <HAL_SPI_Receive_DMA+0x182>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d007      	beq.n	80044da <HAL_SPI_Receive_DMA+0x162>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2120      	movs	r1, #32
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2250      	movs	r2, #80	; 0x50
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004502:	2317      	movs	r3, #23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b006      	add	sp, #24
 800450e:	bd80      	pop	{r7, pc}
 8004510:	ffffbfff 	.word	0xffffbfff
 8004514:	08004a9b 	.word	0x08004a9b
 8004518:	08004959 	.word	0x08004959
 800451c:	08004ad7 	.word	0x08004ad7

08004520 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	001a      	movs	r2, r3
 800452e:	1cbb      	adds	r3, r7, #2
 8004530:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004532:	2317      	movs	r3, #23
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2250      	movs	r2, #80	; 0x50
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_SPI_TransmitReceive_DMA+0x28>
 8004544:	2302      	movs	r3, #2
 8004546:	e0ee      	b.n	8004726 <HAL_SPI_TransmitReceive_DMA+0x206>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2250      	movs	r2, #80	; 0x50
 800454c:	2101      	movs	r1, #1
 800454e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004550:	2016      	movs	r0, #22
 8004552:	183b      	adds	r3, r7, r0
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	2151      	movs	r1, #81	; 0x51
 8004558:	5c52      	ldrb	r2, [r2, r1]
 800455a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004562:	0001      	movs	r1, r0
 8004564:	187b      	adds	r3, r7, r1
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d011      	beq.n	8004590 <HAL_SPI_TransmitReceive_DMA+0x70>
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	2382      	movs	r3, #130	; 0x82
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	429a      	cmp	r2, r3
 8004574:	d107      	bne.n	8004586 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <HAL_SPI_TransmitReceive_DMA+0x66>
 800457e:	187b      	adds	r3, r7, r1
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d004      	beq.n	8004590 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8004586:	2317      	movs	r3, #23
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2202      	movs	r2, #2
 800458c:	701a      	strb	r2, [r3, #0]
    goto error;
 800458e:	e0c3      	b.n	8004718 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_SPI_TransmitReceive_DMA+0x84>
 800459c:	1cbb      	adds	r3, r7, #2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80045a4:	2317      	movs	r3, #23
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80045ac:	e0b4      	b.n	8004718 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2251      	movs	r2, #81	; 0x51
 80045b2:	5c9b      	ldrb	r3, [r3, r2]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d003      	beq.n	80045c2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2251      	movs	r2, #81	; 0x51
 80045be:	2105      	movs	r1, #5
 80045c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1cba      	adds	r2, r7, #2
 80045d2:	8812      	ldrh	r2, [r2, #0]
 80045d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1cba      	adds	r2, r7, #2
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1cba      	adds	r2, r7, #2
 80045e8:	8812      	ldrh	r2, [r2, #0]
 80045ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1cba      	adds	r2, r7, #2
 80045f0:	8812      	ldrh	r2, [r2, #0]
 80045f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2251      	movs	r2, #81	; 0x51
 8004604:	5c9b      	ldrb	r3, [r3, r2]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b04      	cmp	r3, #4
 800460a:	d108      	bne.n	800461e <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	4a47      	ldr	r2, [pc, #284]	; (8004730 <HAL_SPI_TransmitReceive_DMA+0x210>)
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_SPI_TransmitReceive_DMA+0x214>)
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
 800461c:	e007      	b.n	800462e <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	4a45      	ldr	r2, [pc, #276]	; (8004738 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	4a44      	ldr	r2, [pc, #272]	; (800473c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	4a43      	ldr	r2, [pc, #268]	; (8004740 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8004634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	2200      	movs	r2, #0
 800463c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	0019      	movs	r1, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004656:	f7fd f8ff 	bl	8001858 <HAL_DMA_Start_IT>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d00a      	beq.n	8004674 <HAL_SPI_TransmitReceive_DMA+0x154>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	2210      	movs	r2, #16
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800466a:	2317      	movs	r3, #23
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]

    goto error;
 8004672:	e051      	b.n	8004718 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004690:	2200      	movs	r2, #0
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a0:	2200      	movs	r2, #0
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	0019      	movs	r1, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046bc:	f7fd f8cc 	bl	8001858 <HAL_DMA_Start_IT>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d00a      	beq.n	80046da <HAL_SPI_TransmitReceive_DMA+0x1ba>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	2210      	movs	r2, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80046d0:	2317      	movs	r3, #23
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]

    goto error;
 80046d8:	e01e      	b.n	8004718 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d007      	beq.n	80046f8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2140      	movs	r1, #64	; 0x40
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2120      	movs	r1, #32
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2102      	movs	r1, #2
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2250      	movs	r2, #80	; 0x50
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004720:	2317      	movs	r3, #23
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	781b      	ldrb	r3, [r3, #0]
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b006      	add	sp, #24
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	08004a9b 	.word	0x08004a9b
 8004734:	08004959 	.word	0x08004959
 8004738:	08004ab9 	.word	0x08004ab9
 800473c:	08004a07 	.word	0x08004a07
 8004740:	08004ad7 	.word	0x08004ad7

08004744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	4013      	ands	r3, r2
 8004762:	d10d      	bne.n	8004780 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2201      	movs	r2, #1
 8004768:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800476a:	d009      	beq.n	8004780 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	4013      	ands	r3, r2
 8004772:	d005      	beq.n	8004780 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	0010      	movs	r0, r2
 800477c:	4798      	blx	r3
    return;
 800477e:	e0c5      	b.n	800490c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_SPI_IRQHandler+0x58>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	4013      	ands	r3, r2
 800478e:	d005      	beq.n	800479c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	0010      	movs	r0, r2
 8004798:	4798      	blx	r3
    return;
 800479a:	e0b7      	b.n	800490c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2220      	movs	r2, #32
 80047a0:	4013      	ands	r3, r2
 80047a2:	d109      	bne.n	80047b8 <HAL_SPI_IRQHandler+0x74>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	4013      	ands	r3, r2
 80047aa:	d105      	bne.n	80047b8 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4013      	ands	r3, r2
 80047b4:	d100      	bne.n	80047b8 <HAL_SPI_IRQHandler+0x74>
 80047b6:	e0a9      	b.n	800490c <HAL_SPI_IRQHandler+0x1c8>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2220      	movs	r2, #32
 80047bc:	4013      	ands	r3, r2
 80047be:	d100      	bne.n	80047c2 <HAL_SPI_IRQHandler+0x7e>
 80047c0:	e0a4      	b.n	800490c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2240      	movs	r2, #64	; 0x40
 80047c6:	4013      	ands	r3, r2
 80047c8:	d023      	beq.n	8004812 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2251      	movs	r2, #81	; 0x51
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d011      	beq.n	80047fa <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	2204      	movs	r2, #4
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	e00b      	b.n	8004812 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
        return;
 8004810:	e07c      	b.n	800490c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2220      	movs	r2, #32
 8004816:	4013      	ands	r3, r2
 8004818:	d014      	beq.n	8004844 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	2201      	movs	r2, #1
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	438a      	bics	r2, r1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d00c      	beq.n	8004868 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	2208      	movs	r2, #8
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	2b00      	cmp	r3, #0
 800486e:	d04c      	beq.n	800490a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	21e0      	movs	r1, #224	; 0xe0
 800487c:	438a      	bics	r2, r1
 800487e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2251      	movs	r2, #81	; 0x51
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	d103      	bne.n	8004898 <HAL_SPI_IRQHandler+0x154>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d032      	beq.n	80048fe <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2103      	movs	r1, #3
 80048a4:	438a      	bics	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_SPI_IRQHandler+0x1d0>)
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fd f831 	bl	8001924 <HAL_DMA_Abort_IT>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <HAL_SPI_IRQHandler+0x1d0>)
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	0018      	movs	r0, r3
 80048e8:	f7fd f81c 	bl	8001924 <HAL_DMA_Abort_IT>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80048fc:	e004      	b.n	8004908 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f000 f821 	bl	8004948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004906:	e000      	b.n	800490a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8004908:	46c0      	nop			; (mov r8, r8)
    return;
 800490a:	46c0      	nop			; (mov r8, r8)
  }
}
 800490c:	46bd      	mov	sp, r7
 800490e:	b008      	add	sp, #32
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	08004b19 	.word	0x08004b19

08004918 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004966:	f7fc fdf3 	bl	8001550 <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	4013      	ands	r3, r2
 8004978:	2b20      	cmp	r3, #32
 800497a:	d03d      	beq.n	80049f8 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2120      	movs	r1, #32
 8004988:	438a      	bics	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <SPI_DMAReceiveCplt+0x5a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	2382      	movs	r3, #130	; 0x82
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	429a      	cmp	r2, r3
 800499e:	d108      	bne.n	80049b2 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2103      	movs	r1, #3
 80049ac:	438a      	bics	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	e007      	b.n	80049c2 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	438a      	bics	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 f949 	bl	8004c60 <SPI_EndRxTransaction>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d002      	beq.n	80049d8 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2251      	movs	r2, #81	; 0x51
 80049e2:	2101      	movs	r1, #1
 80049e4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7ff ffa9 	bl	8004948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049f6:	e003      	b.n	8004a00 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fc f832 	bl	8000a64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b004      	add	sp, #16
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a14:	f7fc fd9c 	bl	8001550 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2220      	movs	r2, #32
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d030      	beq.n	8004a8c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2120      	movs	r1, #32
 8004a36:	438a      	bics	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	0018      	movs	r0, r3
 8004a42:	f000 f977 	bl	8004d34 <SPI_EndRxTxTransaction>
 8004a46:	1e03      	subs	r3, r0, #0
 8004a48:	d005      	beq.n	8004a56 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	2220      	movs	r2, #32
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2103      	movs	r1, #3
 8004a62:	438a      	bics	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2251      	movs	r2, #81	; 0x51
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ff5f 	bl	8004948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a8a:	e003      	b.n	8004a94 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff ff42 	bl	8004918 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b004      	add	sp, #16
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff ff3c 	bl	8004928 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff ff35 	bl	8004938 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b004      	add	sp, #16
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2103      	movs	r1, #3
 8004af0:	438a      	bics	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2210      	movs	r2, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2251      	movs	r2, #81	; 0x51
 8004b04:	2101      	movs	r1, #1
 8004b06:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f7ff ff1c 	bl	8004948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7ff ff07 	bl	8004948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b004      	add	sp, #16
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	1dfb      	adds	r3, r7, #7
 8004b52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b54:	f7fc fcfc 	bl	8001550 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b64:	f7fc fcf4 	bl	8001550 <HAL_GetTick>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	015b      	lsls	r3, r3, #5
 8004b72:	0d1b      	lsrs	r3, r3, #20
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	4353      	muls	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b7a:	e058      	b.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	d055      	beq.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b82:	f7fc fce5 	bl	8001550 <HAL_GetTick>
 8004b86:	0002      	movs	r2, r0
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d902      	bls.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d142      	bne.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	21e0      	movs	r1, #224	; 0xe0
 8004ba4:	438a      	bics	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	2382      	movs	r3, #130	; 0x82
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d113      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x98>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d005      	beq.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2140      	movs	r1, #64	; 0x40
 8004bd8:	438a      	bics	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	019b      	lsls	r3, r3, #6
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d110      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	491a      	ldr	r1, [pc, #104]	; (8004c5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0189      	lsls	r1, r1, #6
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2251      	movs	r2, #81	; 0x51
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2250      	movs	r2, #80	; 0x50
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e017      	b.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	425a      	negs	r2, r3
 8004c3e:	4153      	adcs	r3, r2
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	001a      	movs	r2, r3
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d197      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b008      	add	sp, #32
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	ffffdfff 	.word	0xffffdfff

08004c60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2382      	movs	r3, #130	; 0x82
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d113      	bne.n	8004ca0 <SPI_EndRxTransaction+0x40>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d107      	bne.n	8004ca0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2140      	movs	r1, #64	; 0x40
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	2382      	movs	r3, #130	; 0x82
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d12b      	bne.n	8004d04 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d012      	beq.n	8004cde <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	f7ff ff3d 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004cca:	1e03      	subs	r3, r0, #0
 8004ccc:	d02d      	beq.n	8004d2a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e026      	b.n	8004d2c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2101      	movs	r1, #1
 8004cec:	f7ff ff2a 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d01a      	beq.n	8004d2a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e013      	b.n	8004d2c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	0013      	movs	r3, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2101      	movs	r1, #1
 8004d12:	f7ff ff17 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004d16:	1e03      	subs	r3, r0, #0
 8004d18:	d007      	beq.n	8004d2a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	2220      	movs	r2, #32
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e000      	b.n	8004d2c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b004      	add	sp, #16
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <SPI_EndRxTxTransaction+0x84>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	491d      	ldr	r1, [pc, #116]	; (8004dbc <SPI_EndRxTxTransaction+0x88>)
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7fb f9f0 	bl	800012c <__udivsi3>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	001a      	movs	r2, r3
 8004d50:	0013      	movs	r3, r2
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	2382      	movs	r3, #130	; 0x82
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d112      	bne.n	8004d90 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	0013      	movs	r3, r2
 8004d74:	2200      	movs	r2, #0
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	f7ff fee4 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004d7c:	1e03      	subs	r3, r0, #0
 8004d7e:	d016      	beq.n	8004dae <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	2220      	movs	r2, #32
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e00f      	b.n	8004db0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d0f2      	beq.n	8004d90 <SPI_EndRxTxTransaction+0x5c>
 8004daa:	e000      	b.n	8004dae <SPI_EndRxTxTransaction+0x7a>
        break;
 8004dac:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b006      	add	sp, #24
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	016e3600 	.word	0x016e3600

08004dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e044      	b.n	8004e5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2278      	movs	r2, #120	; 0x78
 8004dde:	2100      	movs	r1, #0
 8004de0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7fb ff7b 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	; 0x24
 8004dee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f000 f8d0 	bl	8004fa8 <UART_SetConfig>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e024      	b.n	8004e5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 fb47 	bl	80054b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	490d      	ldr	r1, [pc, #52]	; (8004e64 <HAL_UART_Init+0xa4>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	212a      	movs	r1, #42	; 0x2a
 8004e3e:	438a      	bics	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fbdf 	bl	8005618 <UART_CheckIdleState>
 8004e5a:	0003      	movs	r3, r0
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	ffffb7ff 	.word	0xffffb7ff

08004e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	1dbb      	adds	r3, r7, #6
 8004e76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d000      	beq.n	8004e82 <HAL_UART_Transmit+0x1a>
 8004e80:	e08c      	b.n	8004f9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_UART_Transmit+0x28>
 8004e88:	1dbb      	adds	r3, r7, #6
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e084      	b.n	8004f9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d109      	bne.n	8004eb4 <HAL_UART_Transmit+0x4c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	d001      	beq.n	8004eb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e074      	b.n	8004f9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2284      	movs	r2, #132	; 0x84
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2221      	movs	r2, #33	; 0x21
 8004ec0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fb45 	bl	8001550 <HAL_GetTick>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1dba      	adds	r2, r7, #6
 8004ece:	2150      	movs	r1, #80	; 0x50
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1dba      	adds	r2, r7, #6
 8004ed8:	2152      	movs	r1, #82	; 0x52
 8004eda:	8812      	ldrh	r2, [r2, #0]
 8004edc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	015b      	lsls	r3, r3, #5
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x94>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f04:	e02f      	b.n	8004f66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	0013      	movs	r3, r2
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	f000 fc28 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d004      	beq.n	8004f26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e03b      	b.n	8004f9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	001a      	movs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	05d2      	lsls	r2, r2, #23
 8004f38:	0dd2      	lsrs	r2, r2, #23
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	3302      	adds	r3, #2
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e007      	b.n	8004f54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2252      	movs	r2, #82	; 0x52
 8004f58:	5a9b      	ldrh	r3, [r3, r2]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b299      	uxth	r1, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2252      	movs	r2, #82	; 0x52
 8004f64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2252      	movs	r2, #82	; 0x52
 8004f6a:	5a9b      	ldrh	r3, [r3, r2]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1c9      	bne.n	8004f06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	0013      	movs	r3, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2140      	movs	r1, #64	; 0x40
 8004f80:	f000 fbf2 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 8004f84:	1e03      	subs	r3, r0, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e005      	b.n	8004f9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b008      	add	sp, #32
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b08e      	sub	sp, #56	; 0x38
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb0:	231a      	movs	r3, #26
 8004fb2:	2218      	movs	r2, #24
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	19db      	adds	r3, r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4ac6      	ldr	r2, [pc, #792]	; (80052f4 <UART_SetConfig+0x34c>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4ac1      	ldr	r2, [pc, #772]	; (80052f8 <UART_SetConfig+0x350>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4abb      	ldr	r2, [pc, #748]	; (80052fc <UART_SetConfig+0x354>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005018:	4313      	orrs	r3, r2
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4ab7      	ldr	r2, [pc, #732]	; (8005300 <UART_SetConfig+0x358>)
 8005024:	4013      	ands	r3, r2
 8005026:	0019      	movs	r1, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4ab3      	ldr	r2, [pc, #716]	; (8005304 <UART_SetConfig+0x35c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d131      	bne.n	80050a0 <UART_SetConfig+0xf8>
 800503c:	4bb2      	ldr	r3, [pc, #712]	; (8005308 <UART_SetConfig+0x360>)
 800503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005040:	2203      	movs	r2, #3
 8005042:	4013      	ands	r3, r2
 8005044:	2b03      	cmp	r3, #3
 8005046:	d01d      	beq.n	8005084 <UART_SetConfig+0xdc>
 8005048:	d823      	bhi.n	8005092 <UART_SetConfig+0xea>
 800504a:	2b02      	cmp	r3, #2
 800504c:	d00c      	beq.n	8005068 <UART_SetConfig+0xc0>
 800504e:	d820      	bhi.n	8005092 <UART_SetConfig+0xea>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <UART_SetConfig+0xb2>
 8005054:	2b01      	cmp	r3, #1
 8005056:	d00e      	beq.n	8005076 <UART_SetConfig+0xce>
 8005058:	e01b      	b.n	8005092 <UART_SetConfig+0xea>
 800505a:	231b      	movs	r3, #27
 800505c:	2218      	movs	r2, #24
 800505e:	189b      	adds	r3, r3, r2
 8005060:	19db      	adds	r3, r3, r7
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e09c      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005068:	231b      	movs	r3, #27
 800506a:	2218      	movs	r2, #24
 800506c:	189b      	adds	r3, r3, r2
 800506e:	19db      	adds	r3, r3, r7
 8005070:	2202      	movs	r2, #2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e095      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005076:	231b      	movs	r3, #27
 8005078:	2218      	movs	r2, #24
 800507a:	189b      	adds	r3, r3, r2
 800507c:	19db      	adds	r3, r3, r7
 800507e:	2204      	movs	r2, #4
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e08e      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005084:	231b      	movs	r3, #27
 8005086:	2218      	movs	r2, #24
 8005088:	189b      	adds	r3, r3, r2
 800508a:	19db      	adds	r3, r3, r7
 800508c:	2208      	movs	r2, #8
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e087      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005092:	231b      	movs	r3, #27
 8005094:	2218      	movs	r2, #24
 8005096:	189b      	adds	r3, r3, r2
 8005098:	19db      	adds	r3, r3, r7
 800509a:	2210      	movs	r2, #16
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e080      	b.n	80051a2 <UART_SetConfig+0x1fa>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a99      	ldr	r2, [pc, #612]	; (800530c <UART_SetConfig+0x364>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d131      	bne.n	800510e <UART_SetConfig+0x166>
 80050aa:	4b97      	ldr	r3, [pc, #604]	; (8005308 <UART_SetConfig+0x360>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	220c      	movs	r2, #12
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d01d      	beq.n	80050f2 <UART_SetConfig+0x14a>
 80050b6:	d823      	bhi.n	8005100 <UART_SetConfig+0x158>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d00c      	beq.n	80050d6 <UART_SetConfig+0x12e>
 80050bc:	d820      	bhi.n	8005100 <UART_SetConfig+0x158>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <UART_SetConfig+0x120>
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00e      	beq.n	80050e4 <UART_SetConfig+0x13c>
 80050c6:	e01b      	b.n	8005100 <UART_SetConfig+0x158>
 80050c8:	231b      	movs	r3, #27
 80050ca:	2218      	movs	r2, #24
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e065      	b.n	80051a2 <UART_SetConfig+0x1fa>
 80050d6:	231b      	movs	r3, #27
 80050d8:	2218      	movs	r2, #24
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	19db      	adds	r3, r3, r7
 80050de:	2202      	movs	r2, #2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e05e      	b.n	80051a2 <UART_SetConfig+0x1fa>
 80050e4:	231b      	movs	r3, #27
 80050e6:	2218      	movs	r2, #24
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	19db      	adds	r3, r3, r7
 80050ec:	2204      	movs	r2, #4
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e057      	b.n	80051a2 <UART_SetConfig+0x1fa>
 80050f2:	231b      	movs	r3, #27
 80050f4:	2218      	movs	r2, #24
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	19db      	adds	r3, r3, r7
 80050fa:	2208      	movs	r2, #8
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e050      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005100:	231b      	movs	r3, #27
 8005102:	2218      	movs	r2, #24
 8005104:	189b      	adds	r3, r3, r2
 8005106:	19db      	adds	r3, r3, r7
 8005108:	2210      	movs	r2, #16
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e049      	b.n	80051a2 <UART_SetConfig+0x1fa>
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a7a      	ldr	r2, [pc, #488]	; (80052fc <UART_SetConfig+0x354>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d13e      	bne.n	8005196 <UART_SetConfig+0x1ee>
 8005118:	4b7b      	ldr	r3, [pc, #492]	; (8005308 <UART_SetConfig+0x360>)
 800511a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800511c:	23c0      	movs	r3, #192	; 0xc0
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4013      	ands	r3, r2
 8005122:	22c0      	movs	r2, #192	; 0xc0
 8005124:	0112      	lsls	r2, r2, #4
 8005126:	4293      	cmp	r3, r2
 8005128:	d027      	beq.n	800517a <UART_SetConfig+0x1d2>
 800512a:	22c0      	movs	r2, #192	; 0xc0
 800512c:	0112      	lsls	r2, r2, #4
 800512e:	4293      	cmp	r3, r2
 8005130:	d82a      	bhi.n	8005188 <UART_SetConfig+0x1e0>
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	4293      	cmp	r3, r2
 8005138:	d011      	beq.n	800515e <UART_SetConfig+0x1b6>
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	4293      	cmp	r3, r2
 8005140:	d822      	bhi.n	8005188 <UART_SetConfig+0x1e0>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <UART_SetConfig+0x1a8>
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	00d2      	lsls	r2, r2, #3
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <UART_SetConfig+0x1c4>
 800514e:	e01b      	b.n	8005188 <UART_SetConfig+0x1e0>
 8005150:	231b      	movs	r3, #27
 8005152:	2218      	movs	r2, #24
 8005154:	189b      	adds	r3, r3, r2
 8005156:	19db      	adds	r3, r3, r7
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e021      	b.n	80051a2 <UART_SetConfig+0x1fa>
 800515e:	231b      	movs	r3, #27
 8005160:	2218      	movs	r2, #24
 8005162:	189b      	adds	r3, r3, r2
 8005164:	19db      	adds	r3, r3, r7
 8005166:	2202      	movs	r2, #2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e01a      	b.n	80051a2 <UART_SetConfig+0x1fa>
 800516c:	231b      	movs	r3, #27
 800516e:	2218      	movs	r2, #24
 8005170:	189b      	adds	r3, r3, r2
 8005172:	19db      	adds	r3, r3, r7
 8005174:	2204      	movs	r2, #4
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e013      	b.n	80051a2 <UART_SetConfig+0x1fa>
 800517a:	231b      	movs	r3, #27
 800517c:	2218      	movs	r2, #24
 800517e:	189b      	adds	r3, r3, r2
 8005180:	19db      	adds	r3, r3, r7
 8005182:	2208      	movs	r2, #8
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e00c      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005188:	231b      	movs	r3, #27
 800518a:	2218      	movs	r2, #24
 800518c:	189b      	adds	r3, r3, r2
 800518e:	19db      	adds	r3, r3, r7
 8005190:	2210      	movs	r2, #16
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e005      	b.n	80051a2 <UART_SetConfig+0x1fa>
 8005196:	231b      	movs	r3, #27
 8005198:	2218      	movs	r2, #24
 800519a:	189b      	adds	r3, r3, r2
 800519c:	19db      	adds	r3, r3, r7
 800519e:	2210      	movs	r2, #16
 80051a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a55      	ldr	r2, [pc, #340]	; (80052fc <UART_SetConfig+0x354>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d000      	beq.n	80051ae <UART_SetConfig+0x206>
 80051ac:	e084      	b.n	80052b8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ae:	231b      	movs	r3, #27
 80051b0:	2218      	movs	r2, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d01d      	beq.n	80051f8 <UART_SetConfig+0x250>
 80051bc:	dc20      	bgt.n	8005200 <UART_SetConfig+0x258>
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d015      	beq.n	80051ee <UART_SetConfig+0x246>
 80051c2:	dc1d      	bgt.n	8005200 <UART_SetConfig+0x258>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <UART_SetConfig+0x226>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d005      	beq.n	80051d8 <UART_SetConfig+0x230>
 80051cc:	e018      	b.n	8005200 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ce:	f7fe fa2d 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80051d2:	0003      	movs	r3, r0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d6:	e01c      	b.n	8005212 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d8:	4b4b      	ldr	r3, [pc, #300]	; (8005308 <UART_SetConfig+0x360>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2210      	movs	r2, #16
 80051de:	4013      	ands	r3, r2
 80051e0:	d002      	beq.n	80051e8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051e2:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <UART_SetConfig+0x368>)
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051e6:	e014      	b.n	8005212 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <UART_SetConfig+0x36c>)
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ec:	e011      	b.n	8005212 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe f96d 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 80051f2:	0003      	movs	r3, r0
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051f6:	e00c      	b.n	8005212 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051fe:	e008      	b.n	8005212 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005204:	231a      	movs	r3, #26
 8005206:	2218      	movs	r2, #24
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
        break;
 8005210:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d100      	bne.n	800521a <UART_SetConfig+0x272>
 8005218:	e132      	b.n	8005480 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	0013      	movs	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	189b      	adds	r3, r3, r2
 8005224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005226:	429a      	cmp	r2, r3
 8005228:	d305      	bcc.n	8005236 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d906      	bls.n	8005244 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005236:	231a      	movs	r3, #26
 8005238:	2218      	movs	r2, #24
 800523a:	189b      	adds	r3, r3, r2
 800523c:	19db      	adds	r3, r3, r7
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e11d      	b.n	8005480 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	6939      	ldr	r1, [r7, #16]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	000b      	movs	r3, r1
 8005252:	0e1b      	lsrs	r3, r3, #24
 8005254:	0010      	movs	r0, r2
 8005256:	0205      	lsls	r5, r0, #8
 8005258:	431d      	orrs	r5, r3
 800525a:	000b      	movs	r3, r1
 800525c:	021c      	lsls	r4, r3, #8
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	1900      	adds	r0, r0, r4
 8005270:	4169      	adcs	r1, r5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	2300      	movs	r3, #0
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f7fa ffe0 	bl	8000244 <__aeabi_uldivmod>
 8005284:	0002      	movs	r2, r0
 8005286:	000b      	movs	r3, r1
 8005288:	0013      	movs	r3, r2
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528e:	23c0      	movs	r3, #192	; 0xc0
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	429a      	cmp	r2, r3
 8005294:	d309      	bcc.n	80052aa <UART_SetConfig+0x302>
 8005296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	035b      	lsls	r3, r3, #13
 800529c:	429a      	cmp	r2, r3
 800529e:	d204      	bcs.n	80052aa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	e0ea      	b.n	8005480 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80052aa:	231a      	movs	r3, #26
 80052ac:	2218      	movs	r2, #24
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	19db      	adds	r3, r3, r7
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e0e3      	b.n	8005480 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d000      	beq.n	80052c6 <UART_SetConfig+0x31e>
 80052c4:	e085      	b.n	80053d2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80052c6:	231b      	movs	r3, #27
 80052c8:	2218      	movs	r2, #24
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d837      	bhi.n	8005344 <UART_SetConfig+0x39c>
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <UART_SetConfig+0x370>)
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7fe f9a5 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80052e2:	0003      	movs	r3, r0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e6:	e036      	b.n	8005356 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7fe f9b6 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80052ec:	0003      	movs	r3, r0
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f0:	e031      	b.n	8005356 <UART_SetConfig+0x3ae>
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	efff69f3 	.word	0xefff69f3
 80052f8:	ffffcfff 	.word	0xffffcfff
 80052fc:	40004800 	.word	0x40004800
 8005300:	fffff4ff 	.word	0xfffff4ff
 8005304:	40013800 	.word	0x40013800
 8005308:	40021000 	.word	0x40021000
 800530c:	40004400 	.word	0x40004400
 8005310:	003d0900 	.word	0x003d0900
 8005314:	00f42400 	.word	0x00f42400
 8005318:	08009cfc 	.word	0x08009cfc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531c:	4b60      	ldr	r3, [pc, #384]	; (80054a0 <UART_SetConfig+0x4f8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2210      	movs	r2, #16
 8005322:	4013      	ands	r3, r2
 8005324:	d002      	beq.n	800532c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005326:	4b5f      	ldr	r3, [pc, #380]	; (80054a4 <UART_SetConfig+0x4fc>)
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800532a:	e014      	b.n	8005356 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800532c:	4b5e      	ldr	r3, [pc, #376]	; (80054a8 <UART_SetConfig+0x500>)
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005330:	e011      	b.n	8005356 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fe f8cb 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8005336:	0003      	movs	r3, r0
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800533a:	e00c      	b.n	8005356 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005342:	e008      	b.n	8005356 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005348:	231a      	movs	r3, #26
 800534a:	2218      	movs	r2, #24
 800534c:	189b      	adds	r3, r3, r2
 800534e:	19db      	adds	r3, r3, r7
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
        break;
 8005354:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d100      	bne.n	800535e <UART_SetConfig+0x3b6>
 800535c:	e090      	b.n	8005480 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	005a      	lsls	r2, r3, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	18d2      	adds	r2, r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	0019      	movs	r1, r3
 8005370:	0010      	movs	r0, r2
 8005372:	f7fa fedb 	bl	800012c <__udivsi3>
 8005376:	0003      	movs	r3, r0
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b0f      	cmp	r3, #15
 800537e:	d921      	bls.n	80053c4 <UART_SetConfig+0x41c>
 8005380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	025b      	lsls	r3, r3, #9
 8005386:	429a      	cmp	r2, r3
 8005388:	d21c      	bcs.n	80053c4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	b29a      	uxth	r2, r3
 800538e:	200e      	movs	r0, #14
 8005390:	2418      	movs	r4, #24
 8005392:	1903      	adds	r3, r0, r4
 8005394:	19db      	adds	r3, r3, r7
 8005396:	210f      	movs	r1, #15
 8005398:	438a      	bics	r2, r1
 800539a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2207      	movs	r2, #7
 80053a4:	4013      	ands	r3, r2
 80053a6:	b299      	uxth	r1, r3
 80053a8:	1903      	adds	r3, r0, r4
 80053aa:	19db      	adds	r3, r3, r7
 80053ac:	1902      	adds	r2, r0, r4
 80053ae:	19d2      	adds	r2, r2, r7
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	1902      	adds	r2, r0, r4
 80053bc:	19d2      	adds	r2, r2, r7
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e05d      	b.n	8005480 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80053c4:	231a      	movs	r3, #26
 80053c6:	2218      	movs	r2, #24
 80053c8:	189b      	adds	r3, r3, r2
 80053ca:	19db      	adds	r3, r3, r7
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e056      	b.n	8005480 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d2:	231b      	movs	r3, #27
 80053d4:	2218      	movs	r2, #24
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	19db      	adds	r3, r3, r7
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d822      	bhi.n	8005426 <UART_SetConfig+0x47e>
 80053e0:	009a      	lsls	r2, r3, #2
 80053e2:	4b32      	ldr	r3, [pc, #200]	; (80054ac <UART_SetConfig+0x504>)
 80053e4:	18d3      	adds	r3, r2, r3
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ea:	f7fe f91f 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80053ee:	0003      	movs	r3, r0
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053f2:	e021      	b.n	8005438 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe f930 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80053f8:	0003      	movs	r3, r0
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053fc:	e01c      	b.n	8005438 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fe:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <UART_SetConfig+0x4f8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2210      	movs	r2, #16
 8005404:	4013      	ands	r3, r2
 8005406:	d002      	beq.n	800540e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005408:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <UART_SetConfig+0x4fc>)
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e014      	b.n	8005438 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <UART_SetConfig+0x500>)
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005412:	e011      	b.n	8005438 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005414:	f7fe f85a 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8005418:	0003      	movs	r3, r0
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800541c:	e00c      	b.n	8005438 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005424:	e008      	b.n	8005438 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800542a:	231a      	movs	r3, #26
 800542c:	2218      	movs	r2, #24
 800542e:	189b      	adds	r3, r3, r2
 8005430:	19db      	adds	r3, r3, r7
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
        break;
 8005436:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d020      	beq.n	8005480 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	085a      	lsrs	r2, r3, #1
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	18d2      	adds	r2, r2, r3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0019      	movs	r1, r3
 800544e:	0010      	movs	r0, r2
 8005450:	f7fa fe6c 	bl	800012c <__udivsi3>
 8005454:	0003      	movs	r3, r0
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d90a      	bls.n	8005474 <UART_SetConfig+0x4cc>
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	025b      	lsls	r3, r3, #9
 8005464:	429a      	cmp	r2, r3
 8005466:	d205      	bcs.n	8005474 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	b29a      	uxth	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	e005      	b.n	8005480 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005474:	231a      	movs	r3, #26
 8005476:	2218      	movs	r2, #24
 8005478:	189b      	adds	r3, r3, r2
 800547a:	19db      	adds	r3, r3, r7
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2200      	movs	r2, #0
 8005484:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2200      	movs	r2, #0
 800548a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800548c:	231a      	movs	r3, #26
 800548e:	2218      	movs	r2, #24
 8005490:	189b      	adds	r3, r3, r2
 8005492:	19db      	adds	r3, r3, r7
 8005494:	781b      	ldrb	r3, [r3, #0]
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b00e      	add	sp, #56	; 0x38
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	40021000 	.word	0x40021000
 80054a4:	003d0900 	.word	0x003d0900
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	08009d20 	.word	0x08009d20

080054b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2201      	movs	r2, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	d00b      	beq.n	80054da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <UART_AdvFeatureConfig+0x144>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2202      	movs	r2, #2
 80054e0:	4013      	ands	r3, r2
 80054e2:	d00b      	beq.n	80054fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	; (80055f8 <UART_AdvFeatureConfig+0x148>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2204      	movs	r2, #4
 8005502:	4013      	ands	r3, r2
 8005504:	d00b      	beq.n	800551e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <UART_AdvFeatureConfig+0x14c>)
 800550e:	4013      	ands	r3, r2
 8005510:	0019      	movs	r1, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2208      	movs	r2, #8
 8005524:	4013      	ands	r3, r2
 8005526:	d00b      	beq.n	8005540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4a34      	ldr	r2, [pc, #208]	; (8005600 <UART_AdvFeatureConfig+0x150>)
 8005530:	4013      	ands	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	2210      	movs	r2, #16
 8005546:	4013      	ands	r3, r2
 8005548:	d00b      	beq.n	8005562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <UART_AdvFeatureConfig+0x154>)
 8005552:	4013      	ands	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2220      	movs	r2, #32
 8005568:	4013      	ands	r3, r2
 800556a:	d00b      	beq.n	8005584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4a25      	ldr	r2, [pc, #148]	; (8005608 <UART_AdvFeatureConfig+0x158>)
 8005574:	4013      	ands	r3, r2
 8005576:	0019      	movs	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2240      	movs	r2, #64	; 0x40
 800558a:	4013      	ands	r3, r2
 800558c:	d01d      	beq.n	80055ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <UART_AdvFeatureConfig+0x15c>)
 8005596:	4013      	ands	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	035b      	lsls	r3, r3, #13
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d10b      	bne.n	80055ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <UART_AdvFeatureConfig+0x160>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <UART_AdvFeatureConfig+0x164>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	fffdffff 	.word	0xfffdffff
 80055f8:	fffeffff 	.word	0xfffeffff
 80055fc:	fffbffff 	.word	0xfffbffff
 8005600:	ffff7fff 	.word	0xffff7fff
 8005604:	ffffefff 	.word	0xffffefff
 8005608:	ffffdfff 	.word	0xffffdfff
 800560c:	ffefffff 	.word	0xffefffff
 8005610:	ff9fffff 	.word	0xff9fffff
 8005614:	fff7ffff 	.word	0xfff7ffff

08005618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b092      	sub	sp, #72	; 0x48
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2284      	movs	r2, #132	; 0x84
 8005624:	2100      	movs	r1, #0
 8005626:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005628:	f7fb ff92 	bl	8001550 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2208      	movs	r2, #8
 8005638:	4013      	ands	r3, r2
 800563a:	2b08      	cmp	r3, #8
 800563c:	d12c      	bne.n	8005698 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	0391      	lsls	r1, r2, #14
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4a46      	ldr	r2, [pc, #280]	; (8005760 <UART_CheckIdleState+0x148>)
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	f000 f88c 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d021      	beq.n	8005698 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
 800565e:	2301      	movs	r3, #1
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	438a      	bics	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2278      	movs	r2, #120	; 0x78
 8005690:	2100      	movs	r1, #0
 8005692:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05f      	b.n	8005758 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2204      	movs	r2, #4
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d146      	bne.n	8005734 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	03d1      	lsls	r1, r2, #15
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <UART_CheckIdleState+0x148>)
 80056b0:	9200      	str	r2, [sp, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f000 f858 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d03b      	beq.n	8005734 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056bc:	f3ef 8310 	mrs	r3, PRIMASK
 80056c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80056c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
 80056c6:	2301      	movs	r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f383 8810 	msr	PRIMASK, r3
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4921      	ldr	r1, [pc, #132]	; (8005764 <UART_CheckIdleState+0x14c>)
 80056de:	400a      	ands	r2, r1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f383 8810 	msr	PRIMASK, r3
}
 80056ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80056f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
 80056f8:	2301      	movs	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2101      	movs	r1, #1
 8005710:	438a      	bics	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	2120      	movs	r1, #32
 8005726:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2278      	movs	r2, #120	; 0x78
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e011      	b.n	8005758 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	2120      	movs	r1, #32
 8005740:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2278      	movs	r2, #120	; 0x78
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b010      	add	sp, #64	; 0x40
 800575e:	bd80      	pop	{r7, pc}
 8005760:	01ffffff 	.word	0x01ffffff
 8005764:	fffffedf 	.word	0xfffffedf

08005768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005778:	e04b      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3301      	adds	r3, #1
 800577e:	d048      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005780:	f7fb fee6 	bl	8001550 <HAL_GetTick>
 8005784:	0002      	movs	r2, r0
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04b      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2204      	movs	r2, #4
 80057a2:	4013      	ands	r3, r2
 80057a4:	d035      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	2208      	movs	r2, #8
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d111      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2208      	movs	r2, #8
 80057ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 f83c 	bl	800583c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2284      	movs	r2, #132	; 0x84
 80057c8:	2108      	movs	r1, #8
 80057ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2278      	movs	r2, #120	; 0x78
 80057d0:	2100      	movs	r1, #0
 80057d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e02c      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	401a      	ands	r2, r3
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d112      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 f81f 	bl	800583c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2284      	movs	r2, #132	; 0x84
 8005802:	2120      	movs	r1, #32
 8005804:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2278      	movs	r2, #120	; 0x78
 800580a:	2100      	movs	r1, #0
 800580c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	425a      	negs	r2, r3
 8005822:	4153      	adcs	r3, r2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	001a      	movs	r2, r3
 8005828:	1dfb      	adds	r3, r7, #7
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d0a4      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	0018      	movs	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	b004      	add	sp, #16
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005844:	f3ef 8310 	mrs	r3, PRIMASK
 8005848:	617b      	str	r3, [r7, #20]
  return(result);
 800584a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
 800584e:	2301      	movs	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f383 8810 	msr	PRIMASK, r3
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4926      	ldr	r1, [pc, #152]	; (8005900 <UART_EndRxTransfer+0xc4>)
 8005866:	400a      	ands	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f383 8810 	msr	PRIMASK, r3
}
 8005874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005876:	f3ef 8310 	mrs	r3, PRIMASK
 800587a:	623b      	str	r3, [r7, #32]
  return(result);
 800587c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	633b      	str	r3, [r7, #48]	; 0x30
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	f383 8810 	msr	PRIMASK, r3
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2101      	movs	r1, #1
 8005898:	438a      	bics	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	f383 8810 	msr	PRIMASK, r3
}
 80058a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d118      	bne.n	80058e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b0:	f3ef 8310 	mrs	r3, PRIMASK
 80058b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ba:	2301      	movs	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2110      	movs	r1, #16
 80058d2:	438a      	bics	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	2120      	movs	r1, #32
 80058e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b00e      	add	sp, #56	; 0x38
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	fffffedf 	.word	0xfffffedf

08005904 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005908:	4a06      	ldr	r2, [pc, #24]	; (8005924 <MX_FATFS_Init+0x20>)
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <MX_FATFS_Init+0x24>)
 800590c:	0011      	movs	r1, r2
 800590e:	0018      	movs	r0, r3
 8005910:	f003 f8ee 	bl	8008af0 <FATFS_LinkDriver>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <MX_FATFS_Init+0x28>)
 800591a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	20000370 	.word	0x20000370
 8005928:	20000010 	.word	0x20000010
 800592c:	2000036c 	.word	0x2000036c

08005930 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005934:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	0002      	movs	r2, r0
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); // User Modification
 8005948:	1dfb      	adds	r3, r7, #7
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	0018      	movs	r0, r3
 800594e:	f000 fa19 	bl	8005d84 <USER_SPI_initialize>
 8005952:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	0002      	movs	r2, r0
 8005964:	1dfb      	adds	r3, r7, #7
 8005966:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //User Modification
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fb21 	bl	8005fb4 <USER_SPI_status>
 8005972:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800597c:	b5b0      	push	{r4, r5, r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	250f      	movs	r5, #15
 800598a:	197b      	adds	r3, r7, r5
 800598c:	1c02      	adds	r2, r0, #0
 800598e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005990:	683c      	ldr	r4, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	197b      	adds	r3, r7, r5
 8005998:	7818      	ldrb	r0, [r3, #0]
 800599a:	0023      	movs	r3, r4
 800599c:	f000 fb20 	bl	8005fe0 <USER_SPI_read>
 80059a0:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}

080059aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80059aa:	b5b0      	push	{r4, r5, r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	250f      	movs	r5, #15
 80059b8:	197b      	adds	r3, r7, r5
 80059ba:	1c02      	adds	r2, r0, #0
 80059bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80059be:	683c      	ldr	r4, [r7, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	197b      	adds	r3, r7, r5
 80059c6:	7818      	ldrb	r0, [r3, #0]
 80059c8:	0023      	movs	r3, r4
 80059ca:	f000 fb75 	bl	80060b8 <USER_SPI_write>
 80059ce:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b004      	add	sp, #16
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	603a      	str	r2, [r7, #0]
 80059e0:	1dfb      	adds	r3, r7, #7
 80059e2:	1c02      	adds	r2, r0, #0
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	1dbb      	adds	r3, r7, #6
 80059e8:	1c0a      	adds	r2, r1, #0
 80059ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	1dbb      	adds	r3, r7, #6
 80059f0:	7819      	ldrb	r1, [r3, #0]
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 fbde 	bl	80061b8 <USER_SPI_ioctl>
 80059fc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b002      	add	sp, #8
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005a10:	f7fb fd9e 	bl	8001550 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <SPI_Timer_On+0x20>)
 8005a18:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8005a1a:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <SPI_Timer_On+0x24>)
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	46c0      	nop			; (mov r8, r8)
 8005a22:	46bd      	mov	sp, r7
 8005a24:	b002      	add	sp, #8
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000378 	.word	0x20000378
 8005a2c:	2000037c 	.word	0x2000037c

08005a30 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005a34:	f7fb fd8c 	bl	8001550 <HAL_GetTick>
 8005a38:	0002      	movs	r2, r0
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <SPI_Timer_Status+0x24>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <SPI_Timer_Status+0x28>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	419b      	sbcs	r3, r3
 8005a48:	425b      	negs	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	20000378 	.word	0x20000378
 8005a58:	2000037c 	.word	0x2000037c

08005a5c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	0002      	movs	r2, r0
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005a68:	240f      	movs	r4, #15
 8005a6a:	193a      	adds	r2, r7, r4
 8005a6c:	1df9      	adds	r1, r7, #7
 8005a6e:	4806      	ldr	r0, [pc, #24]	; (8005a88 <xchg_spi+0x2c>)
 8005a70:	2332      	movs	r3, #50	; 0x32
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2301      	movs	r3, #1
 8005a76:	f7fe fab3 	bl	8003fe0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005a7a:	193b      	adds	r3, r7, r4
 8005a7c:	781b      	ldrb	r3, [r3, #0]
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b005      	add	sp, #20
 8005a84:	bd90      	pop	{r4, r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	200000e8 	.word	0x200000e8

08005a8c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e00a      	b.n	8005ab2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	18d4      	adds	r4, r2, r3
 8005aa2:	20ff      	movs	r0, #255	; 0xff
 8005aa4:	f7ff ffda 	bl	8005a5c <xchg_spi>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3f0      	bcc.n	8005a9c <rcvr_spi_multi+0x10>
	}
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b005      	add	sp, #20
 8005ac2:	bd90      	pop	{r4, r7, pc}

08005ac4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	4803      	ldr	r0, [pc, #12]	; (8005ae8 <xmit_spi_multi+0x24>)
 8005ada:	f7fd fff5 	bl	8003ac8 <HAL_SPI_Transmit>
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	200000e8 	.word	0x200000e8

08005aec <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005aec:	b5b0      	push	{r4, r5, r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005af4:	f7fb fd2c 	bl	8001550 <HAL_GetTick>
 8005af8:	0003      	movs	r3, r0
 8005afa:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005b00:	250f      	movs	r5, #15
 8005b02:	197c      	adds	r4, r7, r5
 8005b04:	20ff      	movs	r0, #255	; 0xff
 8005b06:	f7ff ffa9 	bl	8005a5c <xchg_spi>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005b0e:	197b      	adds	r3, r7, r5
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	d007      	beq.n	8005b26 <wait_ready+0x3a>
 8005b16:	f7fb fd1b 	bl	8001550 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d8ec      	bhi.n	8005b00 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8005b26:	230f      	movs	r3, #15
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	3bff      	subs	r3, #255	; 0xff
 8005b2e:	425a      	negs	r2, r3
 8005b30:	4153      	adcs	r3, r2
 8005b32:	b2db      	uxtb	r3, r3
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b006      	add	sp, #24
 8005b3a:	bdb0      	pop	{r4, r5, r7, pc}

08005b3c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <despiselect+0x1c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fc f9a3 	bl	8001e92 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005b4c:	20ff      	movs	r0, #255	; 0xff
 8005b4e:	f7ff ff85 	bl	8005a5c <xchg_spi>

}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	50000800 	.word	0x50000800

08005b5c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <spiselect+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7fc f993 	bl	8001e92 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005b6c:	20ff      	movs	r0, #255	; 0xff
 8005b6e:	f7ff ff75 	bl	8005a5c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005b72:	23fa      	movs	r3, #250	; 0xfa
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff ffb8 	bl	8005aec <wait_ready>
 8005b7c:	1e03      	subs	r3, r0, #0
 8005b7e:	d001      	beq.n	8005b84 <spiselect+0x28>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e002      	b.n	8005b8a <spiselect+0x2e>

	despiselect();
 8005b84:	f7ff ffda 	bl	8005b3c <despiselect>
	return 0;	/* Timeout */
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	50000800 	.word	0x50000800

08005b94 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005b94:	b5b0      	push	{r4, r5, r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005b9e:	20c8      	movs	r0, #200	; 0xc8
 8005ba0:	f7ff ff32 	bl	8005a08 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005ba4:	250f      	movs	r5, #15
 8005ba6:	197c      	adds	r4, r7, r5
 8005ba8:	20ff      	movs	r0, #255	; 0xff
 8005baa:	f7ff ff57 	bl	8005a5c <xchg_spi>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005bb2:	197b      	adds	r3, r7, r5
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d103      	bne.n	8005bc2 <rcvr_datablock+0x2e>
 8005bba:	f7ff ff39 	bl	8005a30 <SPI_Timer_Status>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005bc2:	230f      	movs	r3, #15
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2bfe      	cmp	r3, #254	; 0xfe
 8005bca:	d001      	beq.n	8005bd0 <rcvr_datablock+0x3c>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e00c      	b.n	8005bea <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff ff58 	bl	8005a8c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005bdc:	20ff      	movs	r0, #255	; 0xff
 8005bde:	f7ff ff3d 	bl	8005a5c <xchg_spi>
 8005be2:	20ff      	movs	r0, #255	; 0xff
 8005be4:	f7ff ff3a 	bl	8005a5c <xchg_spi>

	return 1;						/* Function succeeded */
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	0018      	movs	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b004      	add	sp, #16
 8005bf0:	bdb0      	pop	{r4, r5, r7, pc}

08005bf2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005bf2:	b5b0      	push	{r4, r5, r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	000a      	movs	r2, r1
 8005bfc:	1cfb      	adds	r3, r7, #3
 8005bfe:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005c00:	23fa      	movs	r3, #250	; 0xfa
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7ff ff71 	bl	8005aec <wait_ready>
 8005c0a:	1e03      	subs	r3, r0, #0
 8005c0c:	d101      	bne.n	8005c12 <xmit_datablock+0x20>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e025      	b.n	8005c5e <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8005c12:	1cfb      	adds	r3, r7, #3
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7ff ff20 	bl	8005a5c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005c1c:	1cfb      	adds	r3, r7, #3
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2bfd      	cmp	r3, #253	; 0xfd
 8005c22:	d01b      	beq.n	8005c5c <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	009a      	lsls	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0011      	movs	r1, r2
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff ff49 	bl	8005ac4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005c32:	20ff      	movs	r0, #255	; 0xff
 8005c34:	f7ff ff12 	bl	8005a5c <xchg_spi>
 8005c38:	20ff      	movs	r0, #255	; 0xff
 8005c3a:	f7ff ff0f 	bl	8005a5c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005c3e:	250f      	movs	r5, #15
 8005c40:	197c      	adds	r4, r7, r5
 8005c42:	20ff      	movs	r0, #255	; 0xff
 8005c44:	f7ff ff0a 	bl	8005a5c <xchg_spi>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005c4c:	197b      	adds	r3, r7, r5
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	221f      	movs	r2, #31
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d001      	beq.n	8005c5c <xmit_datablock+0x6a>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <xmit_datablock+0x6c>
	}
	return 1;
 8005c5c:	2301      	movs	r3, #1
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b004      	add	sp, #16
 8005c64:	bdb0      	pop	{r4, r5, r7, pc}

08005c66 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005c66:	b5b0      	push	{r4, r5, r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	0002      	movs	r2, r0
 8005c6e:	6039      	str	r1, [r7, #0]
 8005c70:	1dfb      	adds	r3, r7, #7
 8005c72:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005c74:	1dfb      	adds	r3, r7, #7
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da15      	bge.n	8005caa <send_cmd+0x44>
		cmd &= 0x7F;
 8005c7e:	1dfb      	adds	r3, r7, #7
 8005c80:	1dfa      	adds	r2, r7, #7
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	217f      	movs	r1, #127	; 0x7f
 8005c86:	400a      	ands	r2, r1
 8005c88:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8005c8a:	250e      	movs	r5, #14
 8005c8c:	197c      	adds	r4, r7, r5
 8005c8e:	2100      	movs	r1, #0
 8005c90:	2037      	movs	r0, #55	; 0x37
 8005c92:	f7ff ffe8 	bl	8005c66 <send_cmd>
 8005c96:	0003      	movs	r3, r0
 8005c98:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8005c9a:	002a      	movs	r2, r5
 8005c9c:	18bb      	adds	r3, r7, r2
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d902      	bls.n	8005caa <send_cmd+0x44>
 8005ca4:	18bb      	adds	r3, r7, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	e067      	b.n	8005d7a <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005caa:	1dfb      	adds	r3, r7, #7
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b0c      	cmp	r3, #12
 8005cb0:	d007      	beq.n	8005cc2 <send_cmd+0x5c>
		despiselect();
 8005cb2:	f7ff ff43 	bl	8005b3c <despiselect>
		if (!spiselect()) return 0xFF;
 8005cb6:	f7ff ff51 	bl	8005b5c <spiselect>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d101      	bne.n	8005cc2 <send_cmd+0x5c>
 8005cbe:	23ff      	movs	r3, #255	; 0xff
 8005cc0:	e05b      	b.n	8005d7a <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005cc2:	1dfb      	adds	r3, r7, #7
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2240      	movs	r2, #64	; 0x40
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7ff fec5 	bl	8005a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	0e1b      	lsrs	r3, r3, #24
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7ff febf 	bl	8005a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7ff feb9 	bl	8005a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7ff feb3 	bl	8005a5c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff feae 	bl	8005a5c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005d00:	210f      	movs	r1, #15
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005d08:	1dfb      	adds	r3, r7, #7
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d102      	bne.n	8005d16 <send_cmd+0xb0>
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	2295      	movs	r2, #149	; 0x95
 8005d14:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005d16:	1dfb      	adds	r3, r7, #7
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d103      	bne.n	8005d26 <send_cmd+0xc0>
 8005d1e:	230f      	movs	r3, #15
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2287      	movs	r2, #135	; 0x87
 8005d24:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8005d26:	230f      	movs	r3, #15
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7ff fe95 	bl	8005a5c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005d32:	1dfb      	adds	r3, r7, #7
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	d102      	bne.n	8005d40 <send_cmd+0xda>
 8005d3a:	20ff      	movs	r0, #255	; 0xff
 8005d3c:	f7ff fe8e 	bl	8005a5c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005d40:	230f      	movs	r3, #15
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	220a      	movs	r2, #10
 8005d46:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8005d48:	250e      	movs	r5, #14
 8005d4a:	197c      	adds	r4, r7, r5
 8005d4c:	20ff      	movs	r0, #255	; 0xff
 8005d4e:	f7ff fe85 	bl	8005a5c <xchg_spi>
 8005d52:	0003      	movs	r3, r0
 8005d54:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8005d56:	197b      	adds	r3, r7, r5
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	b25b      	sxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da09      	bge.n	8005d74 <send_cmd+0x10e>
 8005d60:	210f      	movs	r1, #15
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	187a      	adds	r2, r7, r1
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	187b      	adds	r3, r7, r1
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e9      	bne.n	8005d48 <send_cmd+0xe2>

	return res;							/* Return received response */
 8005d74:	230e      	movs	r3, #14
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	781b      	ldrb	r3, [r3, #0]
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005d84 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	1dfb      	adds	r3, r7, #7
 8005d8e:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005d90:	1dfb      	adds	r3, r7, #7
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <USER_SPI_initialize+0x18>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e100      	b.n	8005f9e <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005d9c:	4b82      	ldr	r3, [pc, #520]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	001a      	movs	r2, r3
 8005da4:	2302      	movs	r3, #2
 8005da6:	4013      	ands	r3, r2
 8005da8:	d003      	beq.n	8005db2 <USER_SPI_initialize+0x2e>
 8005daa:	4b7f      	ldr	r3, [pc, #508]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e0f5      	b.n	8005f9e <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8005db2:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <USER_SPI_initialize+0x228>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2238      	movs	r2, #56	; 0x38
 8005dba:	4393      	bics	r3, r2
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	4b7b      	ldr	r3, [pc, #492]	; (8005fac <USER_SPI_initialize+0x228>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2130      	movs	r1, #48	; 0x30
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005dc8:	230f      	movs	r3, #15
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	220a      	movs	r2, #10
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e008      	b.n	8005de4 <USER_SPI_initialize+0x60>
 8005dd2:	20ff      	movs	r0, #255	; 0xff
 8005dd4:	f7ff fe42 	bl	8005a5c <xchg_spi>
 8005dd8:	210f      	movs	r1, #15
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	3a01      	subs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	240f      	movs	r4, #15
 8005de6:	193b      	adds	r3, r7, r4
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f1      	bne.n	8005dd2 <USER_SPI_initialize+0x4e>

	ty = 0;
 8005dee:	230d      	movs	r3, #13
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005df6:	2100      	movs	r1, #0
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f7ff ff34 	bl	8005c66 <send_cmd>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d000      	beq.n	8005e06 <USER_SPI_initialize+0x82>
 8005e04:	e0a6      	b.n	8005f54 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005e06:	23fa      	movs	r3, #250	; 0xfa
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7ff fdfc 	bl	8005a08 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005e10:	23d5      	movs	r3, #213	; 0xd5
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	0019      	movs	r1, r3
 8005e16:	2008      	movs	r0, #8
 8005e18:	f7ff ff25 	bl	8005c66 <send_cmd>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d162      	bne.n	8005ee8 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005e22:	193b      	adds	r3, r7, r4
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e00f      	b.n	8005e4a <USER_SPI_initialize+0xc6>
 8005e2a:	250f      	movs	r5, #15
 8005e2c:	197b      	adds	r3, r7, r5
 8005e2e:	781c      	ldrb	r4, [r3, #0]
 8005e30:	20ff      	movs	r0, #255	; 0xff
 8005e32:	f7ff fe13 	bl	8005a5c <xchg_spi>
 8005e36:	0003      	movs	r3, r0
 8005e38:	001a      	movs	r2, r3
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	551a      	strb	r2, [r3, r4]
 8005e40:	197b      	adds	r3, r7, r5
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	197b      	adds	r3, r7, r5
 8005e46:	3201      	adds	r2, #1
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	230f      	movs	r3, #15
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d9ea      	bls.n	8005e2a <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005e54:	2208      	movs	r2, #8
 8005e56:	18bb      	adds	r3, r7, r2
 8005e58:	789b      	ldrb	r3, [r3, #2]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d000      	beq.n	8005e60 <USER_SPI_initialize+0xdc>
 8005e5e:	e079      	b.n	8005f54 <USER_SPI_initialize+0x1d0>
 8005e60:	18bb      	adds	r3, r7, r2
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2baa      	cmp	r3, #170	; 0xaa
 8005e66:	d000      	beq.n	8005e6a <USER_SPI_initialize+0xe6>
 8005e68:	e074      	b.n	8005f54 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	f7ff fde0 	bl	8005a30 <SPI_Timer_Status>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d007      	beq.n	8005e84 <USER_SPI_initialize+0x100>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	05db      	lsls	r3, r3, #23
 8005e78:	0019      	movs	r1, r3
 8005e7a:	20a9      	movs	r0, #169	; 0xa9
 8005e7c:	f7ff fef3 	bl	8005c66 <send_cmd>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d1f3      	bne.n	8005e6c <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005e84:	f7ff fdd4 	bl	8005a30 <SPI_Timer_Status>
 8005e88:	1e03      	subs	r3, r0, #0
 8005e8a:	d063      	beq.n	8005f54 <USER_SPI_initialize+0x1d0>
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	203a      	movs	r0, #58	; 0x3a
 8005e90:	f7ff fee9 	bl	8005c66 <send_cmd>
 8005e94:	1e03      	subs	r3, r0, #0
 8005e96:	d15d      	bne.n	8005f54 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005e98:	230f      	movs	r3, #15
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e00f      	b.n	8005ec2 <USER_SPI_initialize+0x13e>
 8005ea2:	250f      	movs	r5, #15
 8005ea4:	197b      	adds	r3, r7, r5
 8005ea6:	781c      	ldrb	r4, [r3, #0]
 8005ea8:	20ff      	movs	r0, #255	; 0xff
 8005eaa:	f7ff fdd7 	bl	8005a5c <xchg_spi>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	551a      	strb	r2, [r3, r4]
 8005eb8:	197b      	adds	r3, r7, r5
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	197b      	adds	r3, r7, r5
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	230f      	movs	r3, #15
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d9ea      	bls.n	8005ea2 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005ecc:	2308      	movs	r3, #8
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d001      	beq.n	8005ede <USER_SPI_initialize+0x15a>
 8005eda:	220c      	movs	r2, #12
 8005edc:	e000      	b.n	8005ee0 <USER_SPI_initialize+0x15c>
 8005ede:	2204      	movs	r2, #4
 8005ee0:	230d      	movs	r3, #13
 8005ee2:	18fb      	adds	r3, r7, r3
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e035      	b.n	8005f54 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005ee8:	2100      	movs	r1, #0
 8005eea:	20a9      	movs	r0, #169	; 0xa9
 8005eec:	f7ff febb 	bl	8005c66 <send_cmd>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d808      	bhi.n	8005f08 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005ef6:	230d      	movs	r3, #13
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	2202      	movs	r2, #2
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	230e      	movs	r3, #14
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	22a9      	movs	r2, #169	; 0xa9
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e007      	b.n	8005f18 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005f08:	230d      	movs	r3, #13
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	230e      	movs	r3, #14
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	f7ff fd89 	bl	8005a30 <SPI_Timer_Status>
 8005f1e:	1e03      	subs	r3, r0, #0
 8005f20:	d008      	beq.n	8005f34 <USER_SPI_initialize+0x1b0>
 8005f22:	230e      	movs	r3, #14
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7ff fe9b 	bl	8005c66 <send_cmd>
 8005f30:	1e03      	subs	r3, r0, #0
 8005f32:	d1f2      	bne.n	8005f1a <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005f34:	f7ff fd7c 	bl	8005a30 <SPI_Timer_Status>
 8005f38:	1e03      	subs	r3, r0, #0
 8005f3a:	d007      	beq.n	8005f4c <USER_SPI_initialize+0x1c8>
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	0019      	movs	r1, r3
 8005f42:	2010      	movs	r0, #16
 8005f44:	f7ff fe8f 	bl	8005c66 <send_cmd>
 8005f48:	1e03      	subs	r3, r0, #0
 8005f4a:	d003      	beq.n	8005f54 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8005f4c:	230d      	movs	r3, #13
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <USER_SPI_initialize+0x22c>)
 8005f56:	240d      	movs	r4, #13
 8005f58:	193a      	adds	r2, r7, r4
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
	despiselect();
 8005f5e:	f7ff fded 	bl	8005b3c <despiselect>

	if (ty) {			/* OK */
 8005f62:	193b      	adds	r3, r7, r4
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <USER_SPI_initialize+0x228>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2238      	movs	r2, #56	; 0x38
 8005f72:	4393      	bics	r3, r2
 8005f74:	001a      	movs	r2, r3
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <USER_SPI_initialize+0x228>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2201      	movs	r2, #1
 8005f88:	4393      	bics	r3, r2
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e002      	b.n	8005f98 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <USER_SPI_initialize+0x224>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	20000024 	.word	0x20000024
 8005fac:	200000e8 	.word	0x200000e8
 8005fb0:	20000374 	.word	0x20000374

08005fb4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	0002      	movs	r2, r0
 8005fbc:	1dfb      	adds	r3, r7, #7
 8005fbe:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005fc0:	1dfb      	adds	r3, r7, #7
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <USER_SPI_status+0x18>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e002      	b.n	8005fd2 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <USER_SPI_status+0x28>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b002      	add	sp, #8
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	20000024 	.word	0x20000024

08005fe0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	210f      	movs	r1, #15
 8005fee:	187b      	adds	r3, r7, r1
 8005ff0:	1c02      	adds	r2, r0, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005ff4:	187b      	adds	r3, r7, r1
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <USER_SPI_read+0x22>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <USER_SPI_read+0x26>
 8006002:	2304      	movs	r3, #4
 8006004:	e04f      	b.n	80060a6 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <USER_SPI_read+0xd0>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	001a      	movs	r2, r3
 800600e:	2301      	movs	r3, #1
 8006010:	4013      	ands	r3, r2
 8006012:	d001      	beq.n	8006018 <USER_SPI_read+0x38>
 8006014:	2303      	movs	r3, #3
 8006016:	e046      	b.n	80060a6 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006018:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <USER_SPI_read+0xd4>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	001a      	movs	r2, r3
 800601e:	2308      	movs	r3, #8
 8006020:	4013      	ands	r3, r2
 8006022:	d102      	bne.n	800602a <USER_SPI_read+0x4a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	025b      	lsls	r3, r3, #9
 8006028:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d112      	bne.n	8006056 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0019      	movs	r1, r3
 8006034:	2011      	movs	r0, #17
 8006036:	f7ff fe16 	bl	8005c66 <send_cmd>
 800603a:	1e03      	subs	r3, r0, #0
 800603c:	d12d      	bne.n	800609a <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f7ff fda4 	bl	8005b94 <rcvr_datablock>
 800604c:	1e03      	subs	r3, r0, #0
 800604e:	d024      	beq.n	800609a <USER_SPI_read+0xba>
			count = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	e021      	b.n	800609a <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0019      	movs	r1, r3
 800605a:	2012      	movs	r0, #18
 800605c:	f7ff fe03 	bl	8005c66 <send_cmd>
 8006060:	1e03      	subs	r3, r0, #0
 8006062:	d11a      	bne.n	800609a <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	009a      	lsls	r2, r3, #2
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	0011      	movs	r1, r2
 800606c:	0018      	movs	r0, r3
 800606e:	f7ff fd91 	bl	8005b94 <rcvr_datablock>
 8006072:	1e03      	subs	r3, r0, #0
 8006074:	d00c      	beq.n	8006090 <USER_SPI_read+0xb0>
				buff += 512;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	0092      	lsls	r2, r2, #2
 800607c:	4694      	mov	ip, r2
 800607e:	4463      	add	r3, ip
 8006080:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3b01      	subs	r3, #1
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ea      	bne.n	8006064 <USER_SPI_read+0x84>
 800608e:	e000      	b.n	8006092 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8006090:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006092:	2100      	movs	r1, #0
 8006094:	200c      	movs	r0, #12
 8006096:	f7ff fde6 	bl	8005c66 <send_cmd>
		}
	}
	despiselect();
 800609a:	f7ff fd4f 	bl	8005b3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	1e5a      	subs	r2, r3, #1
 80060a2:	4193      	sbcs	r3, r2
 80060a4:	b2db      	uxtb	r3, r3
}
 80060a6:	0018      	movs	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b004      	add	sp, #16
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	20000024 	.word	0x20000024
 80060b4:	20000374 	.word	0x20000374

080060b8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	210f      	movs	r1, #15
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	1c02      	adds	r2, r0, #0
 80060ca:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <USER_SPI_write+0x22>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <USER_SPI_write+0x26>
 80060da:	2304      	movs	r3, #4
 80060dc:	e063      	b.n	80061a6 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80060de:	4b34      	ldr	r3, [pc, #208]	; (80061b0 <USER_SPI_write+0xf8>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	001a      	movs	r2, r3
 80060e6:	2301      	movs	r3, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d001      	beq.n	80060f0 <USER_SPI_write+0x38>
 80060ec:	2303      	movs	r3, #3
 80060ee:	e05a      	b.n	80061a6 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80060f0:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <USER_SPI_write+0xf8>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	001a      	movs	r2, r3
 80060f8:	2304      	movs	r3, #4
 80060fa:	4013      	ands	r3, r2
 80060fc:	d001      	beq.n	8006102 <USER_SPI_write+0x4a>
 80060fe:	2302      	movs	r3, #2
 8006100:	e051      	b.n	80061a6 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006102:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <USER_SPI_write+0xfc>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	001a      	movs	r2, r3
 8006108:	2308      	movs	r3, #8
 800610a:	4013      	ands	r3, r2
 800610c:	d102      	bne.n	8006114 <USER_SPI_write+0x5c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	025b      	lsls	r3, r3, #9
 8006112:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d110      	bne.n	800613c <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0019      	movs	r1, r3
 800611e:	2018      	movs	r0, #24
 8006120:	f7ff fda1 	bl	8005c66 <send_cmd>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d138      	bne.n	800619a <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	21fe      	movs	r1, #254	; 0xfe
 800612c:	0018      	movs	r0, r3
 800612e:	f7ff fd60 	bl	8005bf2 <xmit_datablock>
 8006132:	1e03      	subs	r3, r0, #0
 8006134:	d031      	beq.n	800619a <USER_SPI_write+0xe2>
			count = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	e02e      	b.n	800619a <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <USER_SPI_write+0xfc>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	001a      	movs	r2, r3
 8006142:	2306      	movs	r3, #6
 8006144:	4013      	ands	r3, r2
 8006146:	d004      	beq.n	8006152 <USER_SPI_write+0x9a>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	0019      	movs	r1, r3
 800614c:	2097      	movs	r0, #151	; 0x97
 800614e:	f7ff fd8a 	bl	8005c66 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0019      	movs	r1, r3
 8006156:	2019      	movs	r0, #25
 8006158:	f7ff fd85 	bl	8005c66 <send_cmd>
 800615c:	1e03      	subs	r3, r0, #0
 800615e:	d11c      	bne.n	800619a <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	21fc      	movs	r1, #252	; 0xfc
 8006164:	0018      	movs	r0, r3
 8006166:	f7ff fd44 	bl	8005bf2 <xmit_datablock>
 800616a:	1e03      	subs	r3, r0, #0
 800616c:	d00c      	beq.n	8006188 <USER_SPI_write+0xd0>
				buff += 512;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	4694      	mov	ip, r2
 8006176:	4463      	add	r3, ip
 8006178:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1ec      	bne.n	8006160 <USER_SPI_write+0xa8>
 8006186:	e000      	b.n	800618a <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006188:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800618a:	21fd      	movs	r1, #253	; 0xfd
 800618c:	2000      	movs	r0, #0
 800618e:	f7ff fd30 	bl	8005bf2 <xmit_datablock>
 8006192:	1e03      	subs	r3, r0, #0
 8006194:	d101      	bne.n	800619a <USER_SPI_write+0xe2>
 8006196:	2301      	movs	r3, #1
 8006198:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800619a:	f7ff fccf 	bl	8005b3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	4193      	sbcs	r3, r2
 80061a4:	b2db      	uxtb	r3, r3
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b004      	add	sp, #16
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	20000024 	.word	0x20000024
 80061b4:	20000374 	.word	0x20000374

080061b8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b08d      	sub	sp, #52	; 0x34
 80061bc:	af00      	add	r7, sp, #0
 80061be:	603a      	str	r2, [r7, #0]
 80061c0:	1dfb      	adds	r3, r7, #7
 80061c2:	1c02      	adds	r2, r0, #0
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	1dbb      	adds	r3, r7, #6
 80061c8:	1c0a      	adds	r2, r1, #0
 80061ca:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <USER_SPI_ioctl+0x20>
 80061d4:	2304      	movs	r3, #4
 80061d6:	e178      	b.n	80064ca <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80061d8:	4bbe      	ldr	r3, [pc, #760]	; (80064d4 <USER_SPI_ioctl+0x31c>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	001a      	movs	r2, r3
 80061e0:	2301      	movs	r3, #1
 80061e2:	4013      	ands	r3, r2
 80061e4:	d001      	beq.n	80061ea <USER_SPI_ioctl+0x32>
 80061e6:	2303      	movs	r3, #3
 80061e8:	e16f      	b.n	80064ca <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 80061ea:	232f      	movs	r3, #47	; 0x2f
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80061f2:	1dbb      	adds	r3, r7, #6
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d100      	bne.n	80061fc <USER_SPI_ioctl+0x44>
 80061fa:	e100      	b.n	80063fe <USER_SPI_ioctl+0x246>
 80061fc:	dd00      	ble.n	8006200 <USER_SPI_ioctl+0x48>
 80061fe:	e14d      	b.n	800649c <USER_SPI_ioctl+0x2e4>
 8006200:	2b03      	cmp	r3, #3
 8006202:	d100      	bne.n	8006206 <USER_SPI_ioctl+0x4e>
 8006204:	e074      	b.n	80062f0 <USER_SPI_ioctl+0x138>
 8006206:	dd00      	ble.n	800620a <USER_SPI_ioctl+0x52>
 8006208:	e148      	b.n	800649c <USER_SPI_ioctl+0x2e4>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <USER_SPI_ioctl+0x5c>
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00a      	beq.n	8006228 <USER_SPI_ioctl+0x70>
 8006212:	e143      	b.n	800649c <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006214:	f7ff fca2 	bl	8005b5c <spiselect>
 8006218:	1e03      	subs	r3, r0, #0
 800621a:	d100      	bne.n	800621e <USER_SPI_ioctl+0x66>
 800621c:	e143      	b.n	80064a6 <USER_SPI_ioctl+0x2ee>
 800621e:	232f      	movs	r3, #47	; 0x2f
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
		break;
 8006226:	e13e      	b.n	80064a6 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006228:	2100      	movs	r1, #0
 800622a:	2009      	movs	r0, #9
 800622c:	f7ff fd1b 	bl	8005c66 <send_cmd>
 8006230:	1e03      	subs	r3, r0, #0
 8006232:	d000      	beq.n	8006236 <USER_SPI_ioctl+0x7e>
 8006234:	e139      	b.n	80064aa <USER_SPI_ioctl+0x2f2>
 8006236:	240c      	movs	r4, #12
 8006238:	193b      	adds	r3, r7, r4
 800623a:	2110      	movs	r1, #16
 800623c:	0018      	movs	r0, r3
 800623e:	f7ff fca9 	bl	8005b94 <rcvr_datablock>
 8006242:	1e03      	subs	r3, r0, #0
 8006244:	d100      	bne.n	8006248 <USER_SPI_ioctl+0x90>
 8006246:	e130      	b.n	80064aa <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006248:	0020      	movs	r0, r4
 800624a:	183b      	adds	r3, r7, r0
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	099b      	lsrs	r3, r3, #6
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d115      	bne.n	8006282 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006256:	183b      	adds	r3, r7, r0
 8006258:	7a5b      	ldrb	r3, [r3, #9]
 800625a:	001a      	movs	r2, r3
 800625c:	183b      	adds	r3, r7, r0
 800625e:	7a1b      	ldrb	r3, [r3, #8]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	0019      	movs	r1, r3
 8006266:	183b      	adds	r3, r7, r0
 8006268:	79db      	ldrb	r3, [r3, #7]
 800626a:	041a      	lsls	r2, r3, #16
 800626c:	23fc      	movs	r3, #252	; 0xfc
 800626e:	039b      	lsls	r3, r3, #14
 8006270:	4013      	ands	r3, r2
 8006272:	18cb      	adds	r3, r1, r3
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	029a      	lsls	r2, r3, #10
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e031      	b.n	80062e6 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006282:	200c      	movs	r0, #12
 8006284:	183b      	adds	r3, r7, r0
 8006286:	795b      	ldrb	r3, [r3, #5]
 8006288:	220f      	movs	r2, #15
 800628a:	4013      	ands	r3, r2
 800628c:	b2da      	uxtb	r2, r3
 800628e:	183b      	adds	r3, r7, r0
 8006290:	7a9b      	ldrb	r3, [r3, #10]
 8006292:	09db      	lsrs	r3, r3, #7
 8006294:	b2db      	uxtb	r3, r3
 8006296:	18d3      	adds	r3, r2, r3
 8006298:	b2da      	uxtb	r2, r3
 800629a:	183b      	adds	r3, r7, r0
 800629c:	7a5b      	ldrb	r3, [r3, #9]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2106      	movs	r1, #6
 80062a4:	400b      	ands	r3, r1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	18d3      	adds	r3, r2, r3
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	242e      	movs	r4, #46	; 0x2e
 80062ae:	193b      	adds	r3, r7, r4
 80062b0:	3202      	adds	r2, #2
 80062b2:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80062b4:	183b      	adds	r3, r7, r0
 80062b6:	7a1b      	ldrb	r3, [r3, #8]
 80062b8:	099b      	lsrs	r3, r3, #6
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	001a      	movs	r2, r3
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	79db      	ldrb	r3, [r3, #7]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	18d2      	adds	r2, r2, r3
 80062c6:	183b      	adds	r3, r7, r0
 80062c8:	799b      	ldrb	r3, [r3, #6]
 80062ca:	0299      	lsls	r1, r3, #10
 80062cc:	23c0      	movs	r3, #192	; 0xc0
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	400b      	ands	r3, r1
 80062d2:	18d3      	adds	r3, r2, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	3b09      	subs	r3, #9
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	409a      	lsls	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80062e6:	232f      	movs	r3, #47	; 0x2f
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80062ee:	e0dc      	b.n	80064aa <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80062f0:	4b79      	ldr	r3, [pc, #484]	; (80064d8 <USER_SPI_ioctl+0x320>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	001a      	movs	r2, r3
 80062f6:	2304      	movs	r3, #4
 80062f8:	4013      	ands	r3, r2
 80062fa:	d035      	beq.n	8006368 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80062fc:	2100      	movs	r1, #0
 80062fe:	208d      	movs	r0, #141	; 0x8d
 8006300:	f7ff fcb1 	bl	8005c66 <send_cmd>
 8006304:	1e03      	subs	r3, r0, #0
 8006306:	d000      	beq.n	800630a <USER_SPI_ioctl+0x152>
 8006308:	e0d1      	b.n	80064ae <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 800630a:	20ff      	movs	r0, #255	; 0xff
 800630c:	f7ff fba6 	bl	8005a5c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006310:	230c      	movs	r3, #12
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	2110      	movs	r1, #16
 8006316:	0018      	movs	r0, r3
 8006318:	f7ff fc3c 	bl	8005b94 <rcvr_datablock>
 800631c:	1e03      	subs	r3, r0, #0
 800631e:	d100      	bne.n	8006322 <USER_SPI_ioctl+0x16a>
 8006320:	e0c5      	b.n	80064ae <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006322:	232e      	movs	r3, #46	; 0x2e
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	2230      	movs	r2, #48	; 0x30
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e008      	b.n	800633e <USER_SPI_ioctl+0x186>
 800632c:	20ff      	movs	r0, #255	; 0xff
 800632e:	f7ff fb95 	bl	8005a5c <xchg_spi>
 8006332:	212e      	movs	r1, #46	; 0x2e
 8006334:	187b      	adds	r3, r7, r1
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	187b      	adds	r3, r7, r1
 800633a:	3a01      	subs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	232e      	movs	r3, #46	; 0x2e
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f1      	bne.n	800632c <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006348:	230c      	movs	r3, #12
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	7a9b      	ldrb	r3, [r3, #10]
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	b2db      	uxtb	r3, r3
 8006352:	001a      	movs	r2, r3
 8006354:	2310      	movs	r3, #16
 8006356:	4093      	lsls	r3, r2
 8006358:	001a      	movs	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800635e:	232f      	movs	r3, #47	; 0x2f
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006366:	e0a2      	b.n	80064ae <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006368:	2100      	movs	r1, #0
 800636a:	2009      	movs	r0, #9
 800636c:	f7ff fc7b 	bl	8005c66 <send_cmd>
 8006370:	1e03      	subs	r3, r0, #0
 8006372:	d000      	beq.n	8006376 <USER_SPI_ioctl+0x1be>
 8006374:	e09b      	b.n	80064ae <USER_SPI_ioctl+0x2f6>
 8006376:	240c      	movs	r4, #12
 8006378:	193b      	adds	r3, r7, r4
 800637a:	2110      	movs	r1, #16
 800637c:	0018      	movs	r0, r3
 800637e:	f7ff fc09 	bl	8005b94 <rcvr_datablock>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d100      	bne.n	8006388 <USER_SPI_ioctl+0x1d0>
 8006386:	e092      	b.n	80064ae <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006388:	4b53      	ldr	r3, [pc, #332]	; (80064d8 <USER_SPI_ioctl+0x320>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	001a      	movs	r2, r3
 800638e:	2302      	movs	r3, #2
 8006390:	4013      	ands	r3, r2
 8006392:	d016      	beq.n	80063c2 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006394:	0021      	movs	r1, r4
 8006396:	187b      	adds	r3, r7, r1
 8006398:	7a9b      	ldrb	r3, [r3, #10]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	227e      	movs	r2, #126	; 0x7e
 800639e:	4013      	ands	r3, r2
 80063a0:	187a      	adds	r2, r7, r1
 80063a2:	7ad2      	ldrb	r2, [r2, #11]
 80063a4:	09d2      	lsrs	r2, r2, #7
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	189b      	adds	r3, r3, r2
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	187b      	adds	r3, r7, r1
 80063ae:	7b5b      	ldrb	r3, [r3, #13]
 80063b0:	099b      	lsrs	r3, r3, #6
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	409a      	lsls	r2, r3
 80063b8:	0013      	movs	r3, r2
 80063ba:	001a      	movs	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e018      	b.n	80063f4 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80063c2:	210c      	movs	r1, #12
 80063c4:	187b      	adds	r3, r7, r1
 80063c6:	7a9b      	ldrb	r3, [r3, #10]
 80063c8:	109b      	asrs	r3, r3, #2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	001a      	movs	r2, r3
 80063ce:	231f      	movs	r3, #31
 80063d0:	4013      	ands	r3, r2
 80063d2:	3301      	adds	r3, #1
 80063d4:	0008      	movs	r0, r1
 80063d6:	187a      	adds	r2, r7, r1
 80063d8:	7ad2      	ldrb	r2, [r2, #11]
 80063da:	00d2      	lsls	r2, r2, #3
 80063dc:	2118      	movs	r1, #24
 80063de:	400a      	ands	r2, r1
 80063e0:	1839      	adds	r1, r7, r0
 80063e2:	7ac9      	ldrb	r1, [r1, #11]
 80063e4:	0949      	lsrs	r1, r1, #5
 80063e6:	b2c9      	uxtb	r1, r1
 80063e8:	1852      	adds	r2, r2, r1
 80063ea:	3201      	adds	r2, #1
 80063ec:	4353      	muls	r3, r2
 80063ee:	001a      	movs	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80063f4:	232f      	movs	r3, #47	; 0x2f
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
		break;
 80063fc:	e057      	b.n	80064ae <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80063fe:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <USER_SPI_ioctl+0x320>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	001a      	movs	r2, r3
 8006404:	2306      	movs	r3, #6
 8006406:	4013      	ands	r3, r2
 8006408:	d053      	beq.n	80064b2 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800640a:	240c      	movs	r4, #12
 800640c:	193a      	adds	r2, r7, r4
 800640e:	1dfb      	adds	r3, r7, #7
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	210b      	movs	r1, #11
 8006414:	0018      	movs	r0, r3
 8006416:	f7ff fecf 	bl	80061b8 <USER_SPI_ioctl>
 800641a:	1e03      	subs	r3, r0, #0
 800641c:	d14b      	bne.n	80064b6 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800641e:	193b      	adds	r3, r7, r4
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	099b      	lsrs	r3, r3, #6
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <USER_SPI_ioctl+0x27e>
 800642a:	193b      	adds	r3, r7, r4
 800642c:	7a9b      	ldrb	r3, [r3, #10]
 800642e:	001a      	movs	r2, r3
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	4013      	ands	r3, r2
 8006434:	d041      	beq.n	80064ba <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006446:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <USER_SPI_ioctl+0x320>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	001a      	movs	r2, r3
 800644c:	2308      	movs	r3, #8
 800644e:	4013      	ands	r3, r2
 8006450:	d105      	bne.n	800645e <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	025b      	lsls	r3, r3, #9
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	025b      	lsls	r3, r3, #9
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	0019      	movs	r1, r3
 8006462:	2020      	movs	r0, #32
 8006464:	f7ff fbff 	bl	8005c66 <send_cmd>
 8006468:	1e03      	subs	r3, r0, #0
 800646a:	d128      	bne.n	80064be <USER_SPI_ioctl+0x306>
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	0019      	movs	r1, r3
 8006470:	2021      	movs	r0, #33	; 0x21
 8006472:	f7ff fbf8 	bl	8005c66 <send_cmd>
 8006476:	1e03      	subs	r3, r0, #0
 8006478:	d121      	bne.n	80064be <USER_SPI_ioctl+0x306>
 800647a:	2100      	movs	r1, #0
 800647c:	2026      	movs	r0, #38	; 0x26
 800647e:	f7ff fbf2 	bl	8005c66 <send_cmd>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d11b      	bne.n	80064be <USER_SPI_ioctl+0x306>
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <USER_SPI_ioctl+0x324>)
 8006488:	0018      	movs	r0, r3
 800648a:	f7ff fb2f 	bl	8005aec <wait_ready>
 800648e:	1e03      	subs	r3, r0, #0
 8006490:	d015      	beq.n	80064be <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006492:	232f      	movs	r3, #47	; 0x2f
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
		}
		break;
 800649a:	e010      	b.n	80064be <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 800649c:	232f      	movs	r3, #47	; 0x2f
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	2204      	movs	r2, #4
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e00c      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		break;
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	e00a      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		break;
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	e008      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		break;
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	e006      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	e004      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	e002      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	e000      	b.n	80064c0 <USER_SPI_ioctl+0x308>
		break;
 80064be:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 80064c0:	f7ff fb3c 	bl	8005b3c <despiselect>

	return res;
 80064c4:	232f      	movs	r3, #47	; 0x2f
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	781b      	ldrb	r3, [r3, #0]
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b00d      	add	sp, #52	; 0x34
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	20000024 	.word	0x20000024
 80064d8:	20000374 	.word	0x20000374
 80064dc:	00007530 	.word	0x00007530

080064e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80064e0:	b5b0      	push	{r4, r5, r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	0002      	movs	r2, r0
 80064e8:	1dfb      	adds	r3, r7, #7
 80064ea:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064ec:	1dfb      	adds	r3, r7, #7
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <disk_status+0x40>)
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	18d3      	adds	r3, r2, r3
 80064f6:	3304      	adds	r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	1dfa      	adds	r2, r7, #7
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	4907      	ldr	r1, [pc, #28]	; (8006520 <disk_status+0x40>)
 8006502:	188a      	adds	r2, r1, r2
 8006504:	7a12      	ldrb	r2, [r2, #8]
 8006506:	250f      	movs	r5, #15
 8006508:	197c      	adds	r4, r7, r5
 800650a:	0010      	movs	r0, r2
 800650c:	4798      	blx	r3
 800650e:	0003      	movs	r3, r0
 8006510:	7023      	strb	r3, [r4, #0]
  return stat;
 8006512:	197b      	adds	r3, r7, r5
 8006514:	781b      	ldrb	r3, [r3, #0]
}
 8006516:	0018      	movs	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	b004      	add	sp, #16
 800651c:	bdb0      	pop	{r4, r5, r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	200003a8 	.word	0x200003a8

08006524 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	0002      	movs	r2, r0
 800652c:	1dfb      	adds	r3, r7, #7
 800652e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8006530:	200f      	movs	r0, #15
 8006532:	183b      	adds	r3, r7, r0
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8006538:	1dfb      	adds	r3, r7, #7
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	4a10      	ldr	r2, [pc, #64]	; (8006580 <disk_initialize+0x5c>)
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d116      	bne.n	8006572 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8006544:	1dfb      	adds	r3, r7, #7
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <disk_initialize+0x5c>)
 800654a:	2101      	movs	r1, #1
 800654c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800654e:	1dfb      	adds	r3, r7, #7
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	4a0b      	ldr	r2, [pc, #44]	; (8006580 <disk_initialize+0x5c>)
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	18d3      	adds	r3, r2, r3
 8006558:	3304      	adds	r3, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	1dfa      	adds	r2, r7, #7
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	4907      	ldr	r1, [pc, #28]	; (8006580 <disk_initialize+0x5c>)
 8006564:	188a      	adds	r2, r1, r2
 8006566:	7a12      	ldrb	r2, [r2, #8]
 8006568:	183c      	adds	r4, r7, r0
 800656a:	0010      	movs	r0, r2
 800656c:	4798      	blx	r3
 800656e:	0003      	movs	r3, r0
 8006570:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006572:	230f      	movs	r3, #15
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	781b      	ldrb	r3, [r3, #0]
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b005      	add	sp, #20
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	200003a8 	.word	0x200003a8

08006584 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	210f      	movs	r1, #15
 8006592:	187b      	adds	r3, r7, r1
 8006594:	1c02      	adds	r2, r0, #0
 8006596:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006598:	187b      	adds	r3, r7, r1
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <disk_read+0x4c>)
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	3304      	adds	r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689d      	ldr	r5, [r3, #8]
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <disk_read+0x4c>)
 80065ae:	18d3      	adds	r3, r2, r3
 80065b0:	7a18      	ldrb	r0, [r3, #8]
 80065b2:	2617      	movs	r6, #23
 80065b4:	19bc      	adds	r4, r7, r6
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	47a8      	blx	r5
 80065be:	0003      	movs	r3, r0
 80065c0:	7023      	strb	r3, [r4, #0]
  return res;
 80065c2:	19bb      	adds	r3, r7, r6
 80065c4:	781b      	ldrb	r3, [r3, #0]
}
 80065c6:	0018      	movs	r0, r3
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b007      	add	sp, #28
 80065cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	200003a8 	.word	0x200003a8

080065d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	210f      	movs	r1, #15
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	1c02      	adds	r2, r0, #0
 80065e6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <disk_write+0x4c>)
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	18d3      	adds	r3, r2, r3
 80065f2:	3304      	adds	r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68dd      	ldr	r5, [r3, #12]
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <disk_write+0x4c>)
 80065fe:	18d3      	adds	r3, r2, r3
 8006600:	7a18      	ldrb	r0, [r3, #8]
 8006602:	2617      	movs	r6, #23
 8006604:	19bc      	adds	r4, r7, r6
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	47a8      	blx	r5
 800660e:	0003      	movs	r3, r0
 8006610:	7023      	strb	r3, [r4, #0]
  return res;
 8006612:	19bb      	adds	r3, r7, r6
 8006614:	781b      	ldrb	r3, [r3, #0]
}
 8006616:	0018      	movs	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	b007      	add	sp, #28
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	200003a8 	.word	0x200003a8

08006624 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	603a      	str	r2, [r7, #0]
 800662c:	1dfb      	adds	r3, r7, #7
 800662e:	1c02      	adds	r2, r0, #0
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	1dbb      	adds	r3, r7, #6
 8006634:	1c0a      	adds	r2, r1, #0
 8006636:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006638:	1dfb      	adds	r3, r7, #7
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <disk_ioctl+0x4c>)
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	18d3      	adds	r3, r2, r3
 8006642:	3304      	adds	r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	1dfa      	adds	r2, r7, #7
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	4908      	ldr	r1, [pc, #32]	; (8006670 <disk_ioctl+0x4c>)
 800664e:	188a      	adds	r2, r1, r2
 8006650:	7a10      	ldrb	r0, [r2, #8]
 8006652:	260f      	movs	r6, #15
 8006654:	19bc      	adds	r4, r7, r6
 8006656:	683d      	ldr	r5, [r7, #0]
 8006658:	1dba      	adds	r2, r7, #6
 800665a:	7811      	ldrb	r1, [r2, #0]
 800665c:	002a      	movs	r2, r5
 800665e:	4798      	blx	r3
 8006660:	0003      	movs	r3, r0
 8006662:	7023      	strb	r3, [r4, #0]
  return res;
 8006664:	19bb      	adds	r3, r7, r6
 8006666:	781b      	ldrb	r3, [r3, #0]
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b005      	add	sp, #20
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	200003a8 	.word	0x200003a8

08006674 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3301      	adds	r3, #1
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	210e      	movs	r1, #14
 8006684:	187b      	adds	r3, r7, r1
 8006686:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006688:	187b      	adds	r3, r7, r1
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	b21a      	sxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b21b      	sxth	r3, r3
 8006696:	4313      	orrs	r3, r2
 8006698:	b21a      	sxth	r2, r3
 800669a:	187b      	adds	r3, r7, r1
 800669c:	801a      	strh	r2, [r3, #0]
	return rv;
 800669e:	187b      	adds	r3, r7, r1
 80066a0:	881b      	ldrh	r3, [r3, #0]
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}

080066aa <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3303      	adds	r3, #3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	3202      	adds	r2, #2
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	3201      	adds	r2, #1
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
	return rv;
 80066e2:	68fb      	ldr	r3, [r7, #12]
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b004      	add	sp, #16
 80066ea:	bd80      	pop	{r7, pc}

080066ec <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	000a      	movs	r2, r1
 80066f6:	1cbb      	adds	r3, r7, #2
 80066f8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	1cba      	adds	r2, r7, #2
 8006702:	8812      	ldrh	r2, [r2, #0]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	1cbb      	adds	r3, r7, #2
 800670a:	1cba      	adds	r2, r7, #2
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	0a12      	lsrs	r2, r2, #8
 8006710:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	1cba      	adds	r2, r7, #2
 800671a:	8812      	ldrh	r2, [r2, #0]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
}
 8006720:	46c0      	nop			; (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	b002      	add	sp, #8
 8006726:	bd80      	pop	{r7, pc}

08006728 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
}
 8006774:	46c0      	nop			; (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}

0800677c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	1c53      	adds	r3, r2, #1
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	6179      	str	r1, [r7, #20]
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f1      	bne.n	8006796 <mem_cpy+0x1a>
	}
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b006      	add	sp, #24
 80067b8:	bd80      	pop	{r7, pc}

080067ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	617a      	str	r2, [r7, #20]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	607b      	str	r3, [r7, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f3      	bne.n	80067ca <mem_set+0x10>
}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b006      	add	sp, #24
 80067ea:	bd80      	pop	{r7, pc}

080067ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	61fa      	str	r2, [r7, #28]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	0019      	movs	r1, r3
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	61ba      	str	r2, [r7, #24]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	1acb      	subs	r3, r1, r3
 8006818:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3b01      	subs	r3, #1
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <mem_cmp+0x40>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0eb      	beq.n	8006804 <mem_cmp+0x18>

	return r;
 800682c:	697b      	ldr	r3, [r7, #20]
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b008      	add	sp, #32
 8006834:	bd80      	pop	{r7, pc}

08006836 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006840:	e002      	b.n	8006848 <chk_chr+0x12>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3301      	adds	r3, #1
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <chk_chr+0x26>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	001a      	movs	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	4293      	cmp	r3, r2
 800685a:	d1f2      	bne.n	8006842 <chk_chr+0xc>
	return *str;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	781b      	ldrb	r3, [r3, #0]
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b002      	add	sp, #8
 8006866:	bd80      	pop	{r7, pc}

08006868 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e027      	b.n	80068cc <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 800687c:	4b25      	ldr	r3, [pc, #148]	; (8006914 <chk_lock+0xac>)
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	0112      	lsls	r2, r2, #4
 8006882:	58d3      	ldr	r3, [r2, r3]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01c      	beq.n	80068c2 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006888:	4b22      	ldr	r3, [pc, #136]	; (8006914 <chk_lock+0xac>)
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	0112      	lsls	r2, r2, #4
 800688e:	58d2      	ldr	r2, [r2, r3]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d116      	bne.n	80068c6 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006898:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <chk_lock+0xac>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	18d3      	adds	r3, r2, r3
 80068a0:	3304      	adds	r3, #4
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d10c      	bne.n	80068c6 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80068ac:	4a19      	ldr	r2, [pc, #100]	; (8006914 <chk_lock+0xac>)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	18d3      	adds	r3, r2, r3
 80068b4:	3308      	adds	r3, #8
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80068bc:	429a      	cmp	r2, r3
 80068be:	d102      	bne.n	80068c6 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80068c0:	e007      	b.n	80068d2 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 80068c2:	2301      	movs	r3, #1
 80068c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d9d4      	bls.n	800687c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d109      	bne.n	80068ec <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <chk_lock+0x7c>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d101      	bne.n	80068e8 <chk_lock+0x80>
 80068e4:	2300      	movs	r3, #0
 80068e6:	e011      	b.n	800690c <chk_lock+0xa4>
 80068e8:	2312      	movs	r3, #18
 80068ea:	e00f      	b.n	800690c <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <chk_lock+0x9e>
 80068f2:	4a08      	ldr	r2, [pc, #32]	; (8006914 <chk_lock+0xac>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	18d3      	adds	r3, r2, r3
 80068fa:	330c      	adds	r3, #12
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	429a      	cmp	r2, r3
 8006904:	d101      	bne.n	800690a <chk_lock+0xa2>
 8006906:	2310      	movs	r3, #16
 8006908:	e000      	b.n	800690c <chk_lock+0xa4>
 800690a:	2300      	movs	r3, #0
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b004      	add	sp, #16
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000388 	.word	0x20000388

08006918 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	e002      	b.n	800692a <enq_lock+0x12>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3301      	adds	r3, #1
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d805      	bhi.n	800693c <enq_lock+0x24>
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <enq_lock+0x38>)
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	0112      	lsls	r2, r2, #4
 8006936:	58d3      	ldr	r3, [r2, r3]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f3      	bne.n	8006924 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3b02      	subs	r3, #2
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	4193      	sbcs	r3, r2
 8006944:	b2db      	uxtb	r3, r3
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	20000388 	.word	0x20000388

08006954 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e01e      	b.n	80069a2 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <inc_lock+0x110>)
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	0112      	lsls	r2, r2, #4
 800696a:	58d2      	ldr	r2, [r2, r3]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d113      	bne.n	800699c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006974:	4a3b      	ldr	r2, [pc, #236]	; (8006a64 <inc_lock+0x110>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	18d3      	adds	r3, r2, r3
 800697c:	3304      	adds	r3, #4
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006984:	429a      	cmp	r2, r3
 8006986:	d109      	bne.n	800699c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8006988:	4a36      	ldr	r2, [pc, #216]	; (8006a64 <inc_lock+0x110>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	18d3      	adds	r3, r2, r3
 8006990:	3308      	adds	r3, #8
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006998:	429a      	cmp	r2, r3
 800699a:	d006      	beq.n	80069aa <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d9dd      	bls.n	8006964 <inc_lock+0x10>
 80069a8:	e000      	b.n	80069ac <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 80069aa:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d130      	bne.n	8006a14 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e002      	b.n	80069be <inc_lock+0x6a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d805      	bhi.n	80069d0 <inc_lock+0x7c>
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <inc_lock+0x110>)
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	0112      	lsls	r2, r2, #4
 80069ca:	58d3      	ldr	r3, [r2, r3]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f3      	bne.n	80069b8 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d101      	bne.n	80069da <inc_lock+0x86>
 80069d6:	2300      	movs	r3, #0
 80069d8:	e03f      	b.n	8006a5a <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <inc_lock+0x110>)
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	0112      	lsls	r2, r2, #4
 80069e4:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	491e      	ldr	r1, [pc, #120]	; (8006a64 <inc_lock+0x110>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	18cb      	adds	r3, r1, r3
 80069f2:	3304      	adds	r3, #4
 80069f4:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	491a      	ldr	r1, [pc, #104]	; (8006a64 <inc_lock+0x110>)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	18cb      	adds	r3, r1, r3
 8006a02:	3308      	adds	r3, #8
 8006a04:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a06:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <inc_lock+0x110>)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	18d3      	adds	r3, r2, r3
 8006a0e:	330c      	adds	r3, #12
 8006a10:	2200      	movs	r2, #0
 8006a12:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <inc_lock+0xda>
 8006a1a:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <inc_lock+0x110>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	18d3      	adds	r3, r2, r3
 8006a22:	330c      	adds	r3, #12
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <inc_lock+0xda>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e015      	b.n	8006a5a <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d108      	bne.n	8006a46 <inc_lock+0xf2>
 8006a34:	4a0b      	ldr	r2, [pc, #44]	; (8006a64 <inc_lock+0x110>)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	e001      	b.n	8006a4a <inc_lock+0xf6>
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4906      	ldr	r1, [pc, #24]	; (8006a64 <inc_lock+0x110>)
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	0112      	lsls	r2, r2, #4
 8006a50:	188a      	adds	r2, r1, r2
 8006a52:	320c      	adds	r2, #12
 8006a54:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b004      	add	sp, #16
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	20000388 	.word	0x20000388

08006a68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d832      	bhi.n	8006ae2 <dec_lock+0x7a>
		n = Files[i].ctr;
 8006a7c:	200e      	movs	r0, #14
 8006a7e:	183b      	adds	r3, r7, r0
 8006a80:	491d      	ldr	r1, [pc, #116]	; (8006af8 <dec_lock+0x90>)
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	0112      	lsls	r2, r2, #4
 8006a86:	188a      	adds	r2, r1, r2
 8006a88:	320c      	adds	r2, #12
 8006a8a:	8812      	ldrh	r2, [r2, #0]
 8006a8c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a8e:	183b      	adds	r3, r7, r0
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	2380      	movs	r3, #128	; 0x80
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d102      	bne.n	8006aa0 <dec_lock+0x38>
 8006a9a:	183b      	adds	r3, r7, r0
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006aa0:	210e      	movs	r1, #14
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <dec_lock+0x4c>
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	187b      	adds	r3, r7, r1
 8006ab0:	3a01      	subs	r2, #1
 8006ab2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006ab4:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <dec_lock+0x90>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	18d3      	adds	r3, r2, r3
 8006abc:	330c      	adds	r3, #12
 8006abe:	210e      	movs	r1, #14
 8006ac0:	187a      	adds	r2, r7, r1
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <dec_lock+0x70>
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <dec_lock+0x90>)
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	0112      	lsls	r2, r2, #4
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006ad8:	230d      	movs	r3, #13
 8006ada:	18fb      	adds	r3, r7, r3
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e003      	b.n	8006aea <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ae2:	230d      	movs	r3, #13
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006aea:	230d      	movs	r3, #13
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	781b      	ldrb	r3, [r3, #0]
}
 8006af0:	0018      	movs	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b004      	add	sp, #16
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000388 	.word	0x20000388

08006afc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e00e      	b.n	8006b28 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <clear_lock+0x3c>)
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	0112      	lsls	r2, r2, #4
 8006b10:	58d3      	ldr	r3, [r2, r3]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d104      	bne.n	8006b22 <clear_lock+0x26>
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <clear_lock+0x3c>)
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	0112      	lsls	r2, r2, #4
 8006b1e:	2100      	movs	r1, #0
 8006b20:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d9ed      	bls.n	8006b0a <clear_lock+0xe>
	}
}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000388 	.word	0x20000388

08006b3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b44:	240f      	movs	r4, #15
 8006b46:	193b      	adds	r3, r7, r4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	78db      	ldrb	r3, [r3, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d034      	beq.n	8006bbe <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7858      	ldrb	r0, [r3, #1]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3330      	adds	r3, #48	; 0x30
 8006b62:	0019      	movs	r1, r3
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	2301      	movs	r3, #1
 8006b68:	f7ff fd34 	bl	80065d4 <disk_write>
 8006b6c:	1e03      	subs	r3, r0, #0
 8006b6e:	d003      	beq.n	8006b78 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006b70:	193b      	adds	r3, r7, r4
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e022      	b.n	8006bbe <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d217      	bcs.n	8006bbe <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	789b      	ldrb	r3, [r3, #2]
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	e010      	b.n	8006bb8 <sync_window+0x7c>
					wsect += fs->fsize;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	18d3      	adds	r3, r2, r3
 8006b9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7858      	ldrb	r0, [r3, #1]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3330      	adds	r3, #48	; 0x30
 8006ba8:	0019      	movs	r1, r3
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	2301      	movs	r3, #1
 8006bae:	f7ff fd11 	bl	80065d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d8eb      	bhi.n	8006b96 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8006bbe:	230f      	movs	r3, #15
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	781b      	ldrb	r3, [r3, #0]
}
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b007      	add	sp, #28
 8006bca:	bd90      	pop	{r4, r7, pc}

08006bcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006bd6:	250f      	movs	r5, #15
 8006bd8:	197b      	adds	r3, r7, r5
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d01f      	beq.n	8006c28 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006be8:	197c      	adds	r4, r7, r5
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7ff ffa5 	bl	8006b3c <sync_window>
 8006bf2:	0003      	movs	r3, r0
 8006bf4:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006bf6:	002c      	movs	r4, r5
 8006bf8:	193b      	adds	r3, r7, r4
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d113      	bne.n	8006c28 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7858      	ldrb	r0, [r3, #1]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3330      	adds	r3, #48	; 0x30
 8006c08:	0019      	movs	r1, r3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f7ff fcb9 	bl	8006584 <disk_read>
 8006c12:	1e03      	subs	r3, r0, #0
 8006c14:	d005      	beq.n	8006c22 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006c16:	2301      	movs	r3, #1
 8006c18:	425b      	negs	r3, r3
 8006c1a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c1c:	193b      	adds	r3, r7, r4
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006c28:	230f      	movs	r3, #15
 8006c2a:	18fb      	adds	r3, r7, r3
 8006c2c:	781b      	ldrb	r3, [r3, #0]
}
 8006c2e:	0018      	movs	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b004      	add	sp, #16
 8006c34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006c38:	b5b0      	push	{r4, r5, r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006c40:	250f      	movs	r5, #15
 8006c42:	197c      	adds	r4, r7, r5
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f7ff ff78 	bl	8006b3c <sync_window>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006c50:	197b      	adds	r3, r7, r5
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d15d      	bne.n	8006d14 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d14c      	bne.n	8006cfa <sync_fs+0xc2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	791b      	ldrb	r3, [r3, #4]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d148      	bne.n	8006cfa <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3330      	adds	r3, #48	; 0x30
 8006c6c:	2280      	movs	r2, #128	; 0x80
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	2100      	movs	r1, #0
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7ff fda1 	bl	80067ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3330      	adds	r3, #48	; 0x30
 8006c7c:	33ff      	adds	r3, #255	; 0xff
 8006c7e:	33ff      	adds	r3, #255	; 0xff
 8006c80:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <sync_fs+0xec>)
 8006c82:	0011      	movs	r1, r2
 8006c84:	0018      	movs	r0, r3
 8006c86:	f7ff fd31 	bl	80066ec <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3330      	adds	r3, #48	; 0x30
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <sync_fs+0xf0>)
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff fd48 	bl	8006728 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3330      	adds	r3, #48	; 0x30
 8006c9c:	33e5      	adds	r3, #229	; 0xe5
 8006c9e:	33ff      	adds	r3, #255	; 0xff
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <sync_fs+0xf4>)
 8006ca2:	0011      	movs	r1, r2
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7ff fd3f 	bl	8006728 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3330      	adds	r3, #48	; 0x30
 8006cae:	33e9      	adds	r3, #233	; 0xe9
 8006cb0:	33ff      	adds	r3, #255	; 0xff
 8006cb2:	001a      	movs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	0019      	movs	r1, r3
 8006cba:	0010      	movs	r0, r2
 8006cbc:	f7ff fd34 	bl	8006728 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3330      	adds	r3, #48	; 0x30
 8006cc4:	33ed      	adds	r3, #237	; 0xed
 8006cc6:	33ff      	adds	r3, #255	; 0xff
 8006cc8:	001a      	movs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	0019      	movs	r1, r3
 8006cd0:	0010      	movs	r0, r2
 8006cd2:	f7ff fd29 	bl	8006728 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7858      	ldrb	r0, [r3, #1]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3330      	adds	r3, #48	; 0x30
 8006ce8:	0019      	movs	r1, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f7ff fc70 	bl	80065d4 <disk_write>
			fs->fsi_flag = 0;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2100      	movs	r1, #0
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7ff fc8e 	bl	8006624 <disk_ioctl>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d003      	beq.n	8006d14 <sync_fs+0xdc>
 8006d0c:	230f      	movs	r3, #15
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2201      	movs	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8006d14:	230f      	movs	r3, #15
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	781b      	ldrb	r3, [r3, #0]
}
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bdb0      	pop	{r4, r5, r7, pc}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	0000aa55 	.word	0x0000aa55
 8006d28:	41615252 	.word	0x41615252
 8006d2c:	61417272 	.word	0x61417272

08006d30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3b02      	subs	r3, #2
 8006d3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	3b02      	subs	r3, #2
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d301      	bcc.n	8006d50 <clust2sect+0x20>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e007      	b.n	8006d60 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	895b      	ldrh	r3, [r3, #10]
 8006d54:	001a      	movs	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	435a      	muls	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	18d3      	adds	r3, r2, r3
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d904      	bls.n	8006d88 <get_fat+0x20>
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d302      	bcc.n	8006d8e <get_fat+0x26>
		val = 1;	/* Internal error */
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e092      	b.n	8006eb4 <get_fat+0x14c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006d8e:	2301      	movs	r3, #1
 8006d90:	425b      	negs	r3, r3
 8006d92:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d064      	beq.n	8006e66 <get_fat+0xfe>
 8006d9c:	dd00      	ble.n	8006da0 <get_fat+0x38>
 8006d9e:	e07f      	b.n	8006ea0 <get_fat+0x138>
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d002      	beq.n	8006daa <get_fat+0x42>
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d043      	beq.n	8006e30 <get_fat+0xc8>
 8006da8:	e07a      	b.n	8006ea0 <get_fat+0x138>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	18d3      	adds	r3, r2, r3
 8006db6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6a1a      	ldr	r2, [r3, #32]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	0a5b      	lsrs	r3, r3, #9
 8006dc0:	18d2      	adds	r2, r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	0011      	movs	r1, r2
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7ff ff00 	bl	8006bcc <move_window>
 8006dcc:	1e03      	subs	r3, r0, #0
 8006dce:	d16a      	bne.n	8006ea6 <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	60fa      	str	r2, [r7, #12]
 8006dd6:	05db      	lsls	r3, r3, #23
 8006dd8:	0ddb      	lsrs	r3, r3, #23
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	2130      	movs	r1, #48	; 0x30
 8006dde:	18d3      	adds	r3, r2, r3
 8006de0:	185b      	adds	r3, r3, r1
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0a5b      	lsrs	r3, r3, #9
 8006dee:	18d2      	adds	r2, r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	0011      	movs	r1, r2
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff fee9 	bl	8006bcc <move_window>
 8006dfa:	1e03      	subs	r3, r0, #0
 8006dfc:	d155      	bne.n	8006eaa <get_fat+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	05db      	lsls	r3, r3, #23
 8006e02:	0ddb      	lsrs	r3, r3, #23
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	2130      	movs	r1, #48	; 0x30
 8006e08:	18d3      	adds	r3, r2, r3
 8006e0a:	185b      	adds	r3, r3, r1
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	001a      	movs	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d002      	beq.n	8006e26 <get_fat+0xbe>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	e002      	b.n	8006e2c <get_fat+0xc4>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	0d1b      	lsrs	r3, r3, #20
 8006e2c:	617b      	str	r3, [r7, #20]
			break;
 8006e2e:	e041      	b.n	8006eb4 <get_fat+0x14c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	18d2      	adds	r2, r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7ff fec4 	bl	8006bcc <move_window>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d132      	bne.n	8006eae <get_fat+0x146>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3330      	adds	r3, #48	; 0x30
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	0059      	lsls	r1, r3, #1
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	400b      	ands	r3, r1
 8006e58:	18d3      	adds	r3, r2, r3
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7ff fc0a 	bl	8006674 <ld_word>
 8006e60:	0003      	movs	r3, r0
 8006e62:	617b      	str	r3, [r7, #20]
			break;
 8006e64:	e026      	b.n	8006eb4 <get_fat+0x14c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	09db      	lsrs	r3, r3, #7
 8006e6e:	18d2      	adds	r2, r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	0011      	movs	r1, r2
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff fea9 	bl	8006bcc <move_window>
 8006e7a:	1e03      	subs	r3, r0, #0
 8006e7c:	d119      	bne.n	8006eb2 <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	3330      	adds	r3, #48	; 0x30
 8006e82:	001a      	movs	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	0099      	lsls	r1, r3, #2
 8006e88:	23fe      	movs	r3, #254	; 0xfe
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	400b      	ands	r3, r1
 8006e8e:	18d3      	adds	r3, r2, r3
 8006e90:	0018      	movs	r0, r3
 8006e92:	f7ff fc0a 	bl	80066aa <ld_dword>
 8006e96:	0003      	movs	r3, r0
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]
			break;
 8006e9e:	e009      	b.n	8006eb4 <get_fat+0x14c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e006      	b.n	8006eb4 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	e004      	b.n	8006eb4 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	e002      	b.n	8006eb4 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	e000      	b.n	8006eb4 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006eb2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006eb4:	697b      	ldr	r3, [r7, #20]
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b006      	add	sp, #24
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006ebe:	b5b0      	push	{r4, r5, r7, lr}
 8006ec0:	b088      	sub	sp, #32
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006eca:	231f      	movs	r3, #31
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d800      	bhi.n	8006eda <put_fat+0x1c>
 8006ed8:	e0eb      	b.n	80070b2 <put_fat+0x1f4>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d300      	bcc.n	8006ee6 <put_fat+0x28>
 8006ee4:	e0e5      	b.n	80070b2 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d100      	bne.n	8006ef0 <put_fat+0x32>
 8006eee:	e0a1      	b.n	8007034 <put_fat+0x176>
 8006ef0:	dd00      	ble.n	8006ef4 <put_fat+0x36>
 8006ef2:	e0de      	b.n	80070b2 <put_fat+0x1f4>
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d003      	beq.n	8006f00 <put_fat+0x42>
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d100      	bne.n	8006efe <put_fat+0x40>
 8006efc:	e075      	b.n	8006fea <put_fat+0x12c>
 8006efe:	e0d8      	b.n	80070b2 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	18d3      	adds	r3, r2, r3
 8006f0c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	0a5b      	lsrs	r3, r3, #9
 8006f16:	18d2      	adds	r2, r2, r3
 8006f18:	251f      	movs	r5, #31
 8006f1a:	197c      	adds	r4, r7, r5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	0011      	movs	r1, r2
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7ff fe53 	bl	8006bcc <move_window>
 8006f26:	0003      	movs	r3, r0
 8006f28:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006f2a:	197b      	adds	r3, r7, r5
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d000      	beq.n	8006f34 <put_fat+0x76>
 8006f32:	e0b7      	b.n	80070a4 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3330      	adds	r3, #48	; 0x30
 8006f38:	001a      	movs	r2, r3
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1c59      	adds	r1, r3, #1
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	05db      	lsls	r3, r3, #23
 8006f42:	0ddb      	lsrs	r3, r3, #23
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d00d      	beq.n	8006f6c <put_fat+0xae>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b25b      	sxtb	r3, r3
 8006f56:	220f      	movs	r2, #15
 8006f58:	4013      	ands	r3, r2
 8006f5a:	b25a      	sxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e001      	b.n	8006f70 <put_fat+0xb2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	18d2      	adds	r2, r2, r3
 8006f84:	251f      	movs	r5, #31
 8006f86:	197c      	adds	r4, r7, r5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	0011      	movs	r1, r2
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7ff fe1d 	bl	8006bcc <move_window>
 8006f92:	0003      	movs	r3, r0
 8006f94:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006f96:	197b      	adds	r3, r7, r5
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d000      	beq.n	8006fa0 <put_fat+0xe2>
 8006f9e:	e083      	b.n	80070a8 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3330      	adds	r3, #48	; 0x30
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	05db      	lsls	r3, r3, #23
 8006faa:	0ddb      	lsrs	r3, r3, #23
 8006fac:	18d3      	adds	r3, r2, r3
 8006fae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <put_fat+0x102>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	091b      	lsrs	r3, r3, #4
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e00e      	b.n	8006fde <put_fat+0x120>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	220f      	movs	r2, #15
 8006fc8:	4393      	bics	r3, r2
 8006fca:	b25a      	sxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	210f      	movs	r1, #15
 8006fd4:	400b      	ands	r3, r1
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	70da      	strb	r2, [r3, #3]
			break;
 8006fe8:	e063      	b.n	80070b2 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1a      	ldr	r2, [r3, #32]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	18d2      	adds	r2, r2, r3
 8006ff4:	251f      	movs	r5, #31
 8006ff6:	197c      	adds	r4, r7, r5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	0011      	movs	r1, r2
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff fde5 	bl	8006bcc <move_window>
 8007002:	0003      	movs	r3, r0
 8007004:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007006:	197b      	adds	r3, r7, r5
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14e      	bne.n	80070ac <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3330      	adds	r3, #48	; 0x30
 8007012:	001a      	movs	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	0059      	lsls	r1, r3, #1
 8007018:	23ff      	movs	r3, #255	; 0xff
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	400b      	ands	r3, r1
 800701e:	18d3      	adds	r3, r2, r3
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	b292      	uxth	r2, r2
 8007024:	0011      	movs	r1, r2
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff fb60 	bl	80066ec <st_word>
			fs->wflag = 1;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	70da      	strb	r2, [r3, #3]
			break;
 8007032:	e03e      	b.n	80070b2 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	09db      	lsrs	r3, r3, #7
 800703c:	18d2      	adds	r2, r2, r3
 800703e:	251f      	movs	r5, #31
 8007040:	197c      	adds	r4, r7, r5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	0011      	movs	r1, r2
 8007046:	0018      	movs	r0, r3
 8007048:	f7ff fdc0 	bl	8006bcc <move_window>
 800704c:	0003      	movs	r3, r0
 800704e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007050:	197b      	adds	r3, r7, r5
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d12b      	bne.n	80070b0 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	091c      	lsrs	r4, r3, #4
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3330      	adds	r3, #48	; 0x30
 8007062:	001a      	movs	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	0099      	lsls	r1, r3, #2
 8007068:	23fe      	movs	r3, #254	; 0xfe
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	400b      	ands	r3, r1
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	0018      	movs	r0, r3
 8007072:	f7ff fb1a 	bl	80066aa <ld_dword>
 8007076:	0003      	movs	r3, r0
 8007078:	0f1b      	lsrs	r3, r3, #28
 800707a:	071b      	lsls	r3, r3, #28
 800707c:	4323      	orrs	r3, r4
 800707e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3330      	adds	r3, #48	; 0x30
 8007084:	001a      	movs	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	0099      	lsls	r1, r3, #2
 800708a:	23fe      	movs	r3, #254	; 0xfe
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	400b      	ands	r3, r1
 8007090:	18d3      	adds	r3, r2, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	0011      	movs	r1, r2
 8007096:	0018      	movs	r0, r3
 8007098:	f7ff fb46 	bl	8006728 <st_dword>
			fs->wflag = 1;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	70da      	strb	r2, [r3, #3]
			break;
 80070a2:	e006      	b.n	80070b2 <put_fat+0x1f4>
			if (res != FR_OK) break;
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	e004      	b.n	80070b2 <put_fat+0x1f4>
			if (res != FR_OK) break;
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	e002      	b.n	80070b2 <put_fat+0x1f4>
			if (res != FR_OK) break;
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	e000      	b.n	80070b2 <put_fat+0x1f4>
			if (res != FR_OK) break;
 80070b0:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 80070b2:	231f      	movs	r3, #31
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	781b      	ldrb	r3, [r3, #0]
}
 80070b8:	0018      	movs	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b008      	add	sp, #32
 80070be:	bdb0      	pop	{r4, r5, r7, pc}

080070c0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80070c0:	b5b0      	push	{r4, r5, r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80070cc:	231f      	movs	r3, #31
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d904      	bls.n	80070ea <remove_chain+0x2a>
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d301      	bcc.n	80070ee <remove_chain+0x2e>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e057      	b.n	800719e <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d011      	beq.n	8007118 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80070f4:	251f      	movs	r5, #31
 80070f6:	197c      	adds	r4, r7, r5
 80070f8:	2301      	movs	r3, #1
 80070fa:	425a      	negs	r2, r3
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	0018      	movs	r0, r3
 8007102:	f7ff fedc 	bl	8006ebe <put_fat>
 8007106:	0003      	movs	r3, r0
 8007108:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800710a:	197b      	adds	r3, r7, r5
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <remove_chain+0x58>
 8007112:	197b      	adds	r3, r7, r5
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	e042      	b.n	800719e <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0011      	movs	r1, r2
 800711e:	0018      	movs	r0, r3
 8007120:	f7ff fe22 	bl	8006d68 <get_fat>
 8007124:	0003      	movs	r3, r0
 8007126:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d035      	beq.n	800719a <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <remove_chain+0x78>
 8007134:	2302      	movs	r3, #2
 8007136:	e032      	b.n	800719e <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3301      	adds	r3, #1
 800713c:	d101      	bne.n	8007142 <remove_chain+0x82>
 800713e:	2301      	movs	r3, #1
 8007140:	e02d      	b.n	800719e <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007142:	251f      	movs	r5, #31
 8007144:	197c      	adds	r4, r7, r5
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2200      	movs	r2, #0
 800714c:	0018      	movs	r0, r3
 800714e:	f7ff feb6 	bl	8006ebe <put_fat>
 8007152:	0003      	movs	r3, r0
 8007154:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8007156:	197b      	adds	r3, r7, r5
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <remove_chain+0xa4>
 800715e:	197b      	adds	r3, r7, r5
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	e01c      	b.n	800719e <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	3b02      	subs	r3, #2
 800716e:	429a      	cmp	r2, r3
 8007170:	d20b      	bcs.n	800718a <remove_chain+0xca>
			fs->free_clst++;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	791b      	ldrb	r3, [r3, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	4313      	orrs	r3, r2
 8007184:	b2da      	uxtb	r2, r3
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d3bf      	bcc.n	8007118 <remove_chain+0x58>
 8007198:	e000      	b.n	800719c <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800719a:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b008      	add	sp, #32
 80071a4:	bdb0      	pop	{r4, r5, r7, pc}

080071a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80071a6:	b5b0      	push	{r4, r5, r7, lr}
 80071a8:	b088      	sub	sp, #32
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <create_chain+0x2c>
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d31d      	bcc.n	800720e <create_chain+0x68>
 80071d2:	2301      	movs	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e01a      	b.n	800720e <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	0011      	movs	r1, r2
 80071de:	0018      	movs	r0, r3
 80071e0:	f7ff fdc2 	bl	8006d68 <get_fat>
 80071e4:	0003      	movs	r3, r0
 80071e6:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d801      	bhi.n	80071f2 <create_chain+0x4c>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07b      	b.n	80072ea <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3301      	adds	r3, #1
 80071f6:	d101      	bne.n	80071fc <create_chain+0x56>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	e076      	b.n	80072ea <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d201      	bcs.n	800720a <create_chain+0x64>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e06f      	b.n	80072ea <create_chain+0x144>
		scl = clst;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	429a      	cmp	r2, r3
 8007220:	d307      	bcc.n	8007232 <create_chain+0x8c>
				ncl = 2;
 8007222:	2302      	movs	r3, #2
 8007224:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d901      	bls.n	8007232 <create_chain+0x8c>
 800722e:	2300      	movs	r3, #0
 8007230:	e05b      	b.n	80072ea <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	0011      	movs	r1, r2
 8007238:	0018      	movs	r0, r3
 800723a:	f7ff fd95 	bl	8006d68 <get_fat>
 800723e:	0003      	movs	r3, r0
 8007240:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00d      	beq.n	8007264 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <create_chain+0xae>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	d101      	bne.n	8007258 <create_chain+0xb2>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e048      	b.n	80072ea <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	429a      	cmp	r2, r3
 800725e:	d1d8      	bne.n	8007212 <create_chain+0x6c>
 8007260:	2300      	movs	r3, #0
 8007262:	e042      	b.n	80072ea <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8007264:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007266:	2517      	movs	r5, #23
 8007268:	197c      	adds	r4, r7, r5
 800726a:	2301      	movs	r3, #1
 800726c:	425a      	negs	r2, r3
 800726e:	69f9      	ldr	r1, [r7, #28]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	0018      	movs	r0, r3
 8007274:	f7ff fe23 	bl	8006ebe <put_fat>
 8007278:	0003      	movs	r3, r0
 800727a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800727c:	197b      	adds	r3, r7, r5
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <create_chain+0xf6>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d008      	beq.n	800729c <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800728a:	197c      	adds	r4, r7, r5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	0018      	movs	r0, r3
 8007294:	f7ff fe13 	bl	8006ebe <put_fat>
 8007298:	0003      	movs	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800729c:	2317      	movs	r3, #23
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d116      	bne.n	80072d4 <create_chain+0x12e>
		fs->last_clst = ncl;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	3b02      	subs	r3, #2
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d804      	bhi.n	80072c4 <create_chain+0x11e>
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	1e5a      	subs	r2, r3, #1
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	711a      	strb	r2, [r3, #4]
 80072d2:	e009      	b.n	80072e8 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80072d4:	2317      	movs	r3, #23
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d102      	bne.n	80072e4 <create_chain+0x13e>
 80072de:	2301      	movs	r3, #1
 80072e0:	425b      	negs	r3, r3
 80072e2:	e000      	b.n	80072e6 <create_chain+0x140>
 80072e4:	2301      	movs	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80072e8:	69fb      	ldr	r3, [r7, #28]
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b008      	add	sp, #32
 80072f0:	bdb0      	pop	{r4, r5, r7, pc}

080072f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	3304      	adds	r3, #4
 8007308:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	0a5a      	lsrs	r2, r3, #9
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	895b      	ldrh	r3, [r3, #10]
 8007312:	0019      	movs	r1, r3
 8007314:	0010      	movs	r0, r2
 8007316:	f7f8 ff09 	bl	800012c <__udivsi3>
 800731a:	0003      	movs	r3, r0
 800731c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	613a      	str	r2, [r7, #16]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <clmt_clust+0x40>
 800732e:	2300      	movs	r3, #0
 8007330:	e010      	b.n	8007354 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d307      	bcc.n	800734a <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3304      	adds	r3, #4
 8007346:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007348:	e7e9      	b.n	800731e <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800734a:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	18d3      	adds	r3, r2, r3
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b006      	add	sp, #24
 800735a:	bd80      	pop	{r7, pc}

0800735c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	2380      	movs	r3, #128	; 0x80
 8007370:	039b      	lsls	r3, r3, #14
 8007372:	429a      	cmp	r2, r3
 8007374:	d203      	bcs.n	800737e <dir_sdi+0x22>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	221f      	movs	r2, #31
 800737a:	4013      	ands	r3, r2
 800737c:	d001      	beq.n	8007382 <dir_sdi+0x26>
		return FR_INT_ERR;
 800737e:	2302      	movs	r3, #2
 8007380:	e066      	b.n	8007450 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <dir_sdi+0x46>
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d902      	bls.n	80073a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10c      	bne.n	80073c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	8912      	ldrh	r2, [r2, #8]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d301      	bcc.n	80073b8 <dir_sdi+0x5c>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e04b      	b.n	8007450 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	61da      	str	r2, [r3, #28]
 80073c0:	e02c      	b.n	800741c <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	895b      	ldrh	r3, [r3, #10]
 80073c6:	025b      	lsls	r3, r3, #9
 80073c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073ca:	e01a      	b.n	8007402 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	0011      	movs	r1, r2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f7ff fcc8 	bl	8006d68 <get_fat>
 80073d8:	0003      	movs	r3, r0
 80073da:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	3301      	adds	r3, #1
 80073e0:	d101      	bne.n	80073e6 <dir_sdi+0x8a>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e034      	b.n	8007450 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d904      	bls.n	80073f6 <dir_sdi+0x9a>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d301      	bcc.n	80073fa <dir_sdi+0x9e>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e02a      	b.n	8007450 <dir_sdi+0xf4>
			ofs -= csz;
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	429a      	cmp	r2, r3
 8007408:	d2e0      	bcs.n	80073cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	0011      	movs	r1, r2
 8007410:	0018      	movs	r0, r3
 8007412:	f7ff fc8d 	bl	8006d30 <clust2sect>
 8007416:	0002      	movs	r2, r0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <dir_sdi+0xd2>
 800742a:	2302      	movs	r3, #2
 800742c:	e010      	b.n	8007450 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69da      	ldr	r2, [r3, #28]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	0a5b      	lsrs	r3, r3, #9
 8007436:	18d2      	adds	r2, r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3330      	adds	r3, #48	; 0x30
 8007440:	001a      	movs	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	05db      	lsls	r3, r3, #23
 8007446:	0ddb      	lsrs	r3, r3, #23
 8007448:	18d2      	adds	r2, r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b006      	add	sp, #24
 8007456:	bd80      	pop	{r7, pc}

08007458 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	3320      	adds	r3, #32
 800746e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <dir_next+0x2a>
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	2380      	movs	r3, #128	; 0x80
 800747c:	039b      	lsls	r3, r3, #14
 800747e:	429a      	cmp	r2, r3
 8007480:	d301      	bcc.n	8007486 <dir_next+0x2e>
 8007482:	2304      	movs	r3, #4
 8007484:	e0ad      	b.n	80075e2 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	05db      	lsls	r3, r3, #23
 800748a:	0ddb      	lsrs	r3, r3, #23
 800748c:	d000      	beq.n	8007490 <dir_next+0x38>
 800748e:	e09b      	b.n	80075c8 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	8912      	ldrh	r2, [r2, #8]
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d200      	bcs.n	80074b0 <dir_next+0x58>
 80074ae:	e08b      	b.n	80075c8 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	61da      	str	r2, [r3, #28]
 80074b6:	2304      	movs	r3, #4
 80074b8:	e093      	b.n	80075e2 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	0a5b      	lsrs	r3, r3, #9
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	8952      	ldrh	r2, [r2, #10]
 80074c2:	3a01      	subs	r2, #1
 80074c4:	4013      	ands	r3, r2
 80074c6:	d000      	beq.n	80074ca <dir_next+0x72>
 80074c8:	e07e      	b.n	80075c8 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	0019      	movs	r1, r3
 80074d2:	0010      	movs	r0, r2
 80074d4:	f7ff fc48 	bl	8006d68 <get_fat>
 80074d8:	0003      	movs	r3, r0
 80074da:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d801      	bhi.n	80074e6 <dir_next+0x8e>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e07d      	b.n	80075e2 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	3301      	adds	r3, #1
 80074ea:	d101      	bne.n	80074f0 <dir_next+0x98>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e078      	b.n	80075e2 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d35a      	bcc.n	80075b0 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	61da      	str	r2, [r3, #28]
 8007506:	2304      	movs	r3, #4
 8007508:	e06b      	b.n	80075e2 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	0019      	movs	r1, r3
 8007512:	0010      	movs	r0, r2
 8007514:	f7ff fe47 	bl	80071a6 <create_chain>
 8007518:	0003      	movs	r3, r0
 800751a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <dir_next+0xce>
 8007522:	2307      	movs	r3, #7
 8007524:	e05d      	b.n	80075e2 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <dir_next+0xd8>
 800752c:	2302      	movs	r3, #2
 800752e:	e058      	b.n	80075e2 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3301      	adds	r3, #1
 8007534:	d101      	bne.n	800753a <dir_next+0xe2>
 8007536:	2301      	movs	r3, #1
 8007538:	e053      	b.n	80075e2 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	0018      	movs	r0, r3
 800753e:	f7ff fafd 	bl	8006b3c <sync_window>
 8007542:	1e03      	subs	r3, r0, #0
 8007544:	d001      	beq.n	800754a <dir_next+0xf2>
 8007546:	2301      	movs	r3, #1
 8007548:	e04b      	b.n	80075e2 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3330      	adds	r3, #48	; 0x30
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	2100      	movs	r1, #0
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff f930 	bl	80067ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	0011      	movs	r1, r2
 8007564:	0018      	movs	r0, r3
 8007566:	f7ff fbe3 	bl	8006d30 <clust2sect>
 800756a:	0002      	movs	r2, r0
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007570:	e012      	b.n	8007598 <dir_next+0x140>
						fs->wflag = 1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0018      	movs	r0, r3
 800757c:	f7ff fade 	bl	8006b3c <sync_window>
 8007580:	1e03      	subs	r3, r0, #0
 8007582:	d001      	beq.n	8007588 <dir_next+0x130>
 8007584:	2301      	movs	r3, #1
 8007586:	e02c      	b.n	80075e2 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3301      	adds	r3, #1
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	895b      	ldrh	r3, [r3, #10]
 800759c:	001a      	movs	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d3e6      	bcc.n	8007572 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	0011      	movs	r1, r2
 80075bc:	0018      	movs	r0, r3
 80075be:	f7ff fbb7 	bl	8006d30 <clust2sect>
 80075c2:	0002      	movs	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	001a      	movs	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	05db      	lsls	r3, r3, #23
 80075d8:	0ddb      	lsrs	r3, r3, #23
 80075da:	18d2      	adds	r2, r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b006      	add	sp, #24
 80075e8:	bd80      	pop	{r7, pc}

080075ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075ea:	b5b0      	push	{r4, r5, r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80075fa:	2517      	movs	r5, #23
 80075fc:	197c      	adds	r4, r7, r5
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2100      	movs	r1, #0
 8007602:	0018      	movs	r0, r3
 8007604:	f7ff feaa 	bl	800735c <dir_sdi>
 8007608:	0003      	movs	r3, r0
 800760a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800760c:	197b      	adds	r3, r7, r5
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d133      	bne.n	800767c <dir_alloc+0x92>
		n = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	2517      	movs	r5, #23
 800761e:	197c      	adds	r4, r7, r5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f7ff fad1 	bl	8006bcc <move_window>
 800762a:	0003      	movs	r3, r0
 800762c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800762e:	197b      	adds	r3, r7, r5
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d121      	bne.n	800767a <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2be5      	cmp	r3, #229	; 0xe5
 800763e:	d004      	beq.n	800764a <dir_alloc+0x60>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d107      	bne.n	800765a <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	3301      	adds	r3, #1
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d102      	bne.n	800765e <dir_alloc+0x74>
 8007658:	e010      	b.n	800767c <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800765a:	2300      	movs	r3, #0
 800765c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800765e:	2517      	movs	r5, #23
 8007660:	197c      	adds	r4, r7, r5
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2101      	movs	r1, #1
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff fef6 	bl	8007458 <dir_next>
 800766c:	0003      	movs	r3, r0
 800766e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007670:	197b      	adds	r3, r7, r5
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0cf      	beq.n	8007618 <dir_alloc+0x2e>
 8007678:	e000      	b.n	800767c <dir_alloc+0x92>
			if (res != FR_OK) break;
 800767a:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800767c:	2217      	movs	r2, #23
 800767e:	18bb      	adds	r3, r7, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d102      	bne.n	800768c <dir_alloc+0xa2>
 8007686:	18bb      	adds	r3, r7, r2
 8007688:	2207      	movs	r2, #7
 800768a:	701a      	strb	r2, [r3, #0]
	return res;
 800768c:	2317      	movs	r3, #23
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b006      	add	sp, #24
 8007698:	bdb0      	pop	{r4, r5, r7, pc}

0800769a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	331a      	adds	r3, #26
 80076a8:	0018      	movs	r0, r3
 80076aa:	f7fe ffe3 	bl	8006674 <ld_word>
 80076ae:	0003      	movs	r3, r0
 80076b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d109      	bne.n	80076ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	3314      	adds	r3, #20
 80076be:	0018      	movs	r0, r3
 80076c0:	f7fe ffd8 	bl	8006674 <ld_word>
 80076c4:	0003      	movs	r3, r0
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b004      	add	sp, #16
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	331a      	adds	r3, #26
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	b292      	uxth	r2, r2
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7fe fffc 	bl	80066ec <st_word>
	if (fs->fs_type == FS_FAT32) {
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d109      	bne.n	8007710 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3314      	adds	r3, #20
 8007700:	001a      	movs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	b29b      	uxth	r3, r3
 8007708:	0019      	movs	r1, r3
 800770a:	0010      	movs	r0, r2
 800770c:	f7fe ffee 	bl	80066ec <st_word>
	}
}
 8007710:	46c0      	nop			; (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	b004      	add	sp, #16
 8007716:	bd80      	pop	{r7, pc}

08007718 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007718:	b5b0      	push	{r4, r5, r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007726:	2517      	movs	r5, #23
 8007728:	197c      	adds	r4, r7, r5
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2100      	movs	r1, #0
 800772e:	0018      	movs	r0, r3
 8007730:	f7ff fe14 	bl	800735c <dir_sdi>
 8007734:	0003      	movs	r3, r0
 8007736:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8007738:	197b      	adds	r3, r7, r5
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <dir_find+0x2e>
 8007740:	197b      	adds	r3, r7, r5
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	e04c      	b.n	80077e0 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	2517      	movs	r5, #23
 800774c:	197c      	adds	r4, r7, r5
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	0011      	movs	r1, r2
 8007752:	0018      	movs	r0, r3
 8007754:	f7ff fa3a 	bl	8006bcc <move_window>
 8007758:	0003      	movs	r3, r0
 800775a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800775c:	0029      	movs	r1, r5
 800775e:	187b      	adds	r3, r7, r1
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d136      	bne.n	80077d4 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	200f      	movs	r0, #15
 800776c:	183b      	adds	r3, r7, r0
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007772:	183b      	adds	r3, r7, r0
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <dir_find+0x6a>
 800777a:	187b      	adds	r3, r7, r1
 800777c:	2204      	movs	r2, #4
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	e02b      	b.n	80077da <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	330b      	adds	r3, #11
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	223f      	movs	r2, #63	; 0x3f
 800778c:	4013      	ands	r3, r2
 800778e:	b2da      	uxtb	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	330b      	adds	r3, #11
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	001a      	movs	r2, r3
 800779e:	2308      	movs	r3, #8
 80077a0:	4013      	ands	r3, r2
 80077a2:	d109      	bne.n	80077b8 <dir_find+0xa0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a18      	ldr	r0, [r3, #32]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	220b      	movs	r2, #11
 80077ae:	0019      	movs	r1, r3
 80077b0:	f7ff f81c 	bl	80067ec <mem_cmp>
 80077b4:	1e03      	subs	r3, r0, #0
 80077b6:	d00f      	beq.n	80077d8 <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077b8:	2517      	movs	r5, #23
 80077ba:	197c      	adds	r4, r7, r5
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2100      	movs	r1, #0
 80077c0:	0018      	movs	r0, r3
 80077c2:	f7ff fe49 	bl	8007458 <dir_next>
 80077c6:	0003      	movs	r3, r0
 80077c8:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80077ca:	197b      	adds	r3, r7, r5
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0b9      	beq.n	8007746 <dir_find+0x2e>
 80077d2:	e002      	b.n	80077da <dir_find+0xc2>
		if (res != FR_OK) break;
 80077d4:	46c0      	nop			; (mov r8, r8)
 80077d6:	e000      	b.n	80077da <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077d8:	46c0      	nop			; (mov r8, r8)

	return res;
 80077da:	2317      	movs	r3, #23
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	781b      	ldrb	r3, [r3, #0]
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b006      	add	sp, #24
 80077e6:	bdb0      	pop	{r4, r5, r7, pc}

080077e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077e8:	b5b0      	push	{r4, r5, r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077f6:	250f      	movs	r5, #15
 80077f8:	197c      	adds	r4, r7, r5
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2101      	movs	r1, #1
 80077fe:	0018      	movs	r0, r3
 8007800:	f7ff fef3 	bl	80075ea <dir_alloc>
 8007804:	0003      	movs	r3, r0
 8007806:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007808:	197b      	adds	r3, r7, r5
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11f      	bne.n	8007850 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	197c      	adds	r4, r7, r5
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	0011      	movs	r1, r2
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff f9d6 	bl	8006bcc <move_window>
 8007820:	0003      	movs	r3, r0
 8007822:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007824:	197b      	adds	r3, r7, r5
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d111      	bne.n	8007850 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	2220      	movs	r2, #32
 8007832:	2100      	movs	r1, #0
 8007834:	0018      	movs	r0, r3
 8007836:	f7fe ffc0 	bl	80067ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a18      	ldr	r0, [r3, #32]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3324      	adds	r3, #36	; 0x24
 8007842:	220b      	movs	r2, #11
 8007844:	0019      	movs	r1, r3
 8007846:	f7fe ff99 	bl	800677c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2201      	movs	r2, #1
 800784e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007850:	230f      	movs	r3, #15
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	781b      	ldrb	r3, [r3, #0]
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007860 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	220b      	movs	r2, #11
 800787a:	2120      	movs	r1, #32
 800787c:	0018      	movs	r0, r3
 800787e:	f7fe ff9c 	bl	80067ba <mem_set>
	si = i = 0; ni = 8;
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	2308      	movs	r3, #8
 800788c:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	61fa      	str	r2, [r7, #28]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	18d2      	adds	r2, r2, r3
 8007898:	211b      	movs	r1, #27
 800789a:	187b      	adds	r3, r7, r1
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078a0:	000a      	movs	r2, r1
 80078a2:	18bb      	adds	r3, r7, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d800      	bhi.n	80078ac <create_name+0x4c>
 80078aa:	e062      	b.n	8007972 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078ac:	18bb      	adds	r3, r7, r2
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b2f      	cmp	r3, #47	; 0x2f
 80078b2:	d007      	beq.n	80078c4 <create_name+0x64>
 80078b4:	18bb      	adds	r3, r7, r2
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ba:	d110      	bne.n	80078de <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078bc:	e002      	b.n	80078c4 <create_name+0x64>
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	18d3      	adds	r3, r2, r3
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b2f      	cmp	r3, #47	; 0x2f
 80078ce:	d0f6      	beq.n	80078be <create_name+0x5e>
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	18d3      	adds	r3, r2, r3
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b5c      	cmp	r3, #92	; 0x5c
 80078da:	d0f0      	beq.n	80078be <create_name+0x5e>
			break;
 80078dc:	e04a      	b.n	8007974 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078de:	231b      	movs	r3, #27
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b2e      	cmp	r3, #46	; 0x2e
 80078e6:	d003      	beq.n	80078f0 <create_name+0x90>
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d30e      	bcc.n	800790e <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	d004      	beq.n	8007900 <create_name+0xa0>
 80078f6:	231b      	movs	r3, #27
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b2e      	cmp	r3, #46	; 0x2e
 80078fe:	d001      	beq.n	8007904 <create_name+0xa4>
 8007900:	2306      	movs	r3, #6
 8007902:	e054      	b.n	80079ae <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8007904:	2308      	movs	r3, #8
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	230b      	movs	r3, #11
 800790a:	617b      	str	r3, [r7, #20]
			continue;
 800790c:	e030      	b.n	8007970 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 800790e:	211b      	movs	r1, #27
 8007910:	187b      	adds	r3, r7, r1
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b25b      	sxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	da07      	bge.n	800792a <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800791a:	187b      	adds	r3, r7, r1
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	3b80      	subs	r3, #128	; 0x80
 8007920:	001a      	movs	r2, r3
 8007922:	187b      	adds	r3, r7, r1
 8007924:	4924      	ldr	r1, [pc, #144]	; (80079b8 <create_name+0x158>)
 8007926:	5c8a      	ldrb	r2, [r1, r2]
 8007928:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800792a:	231b      	movs	r3, #27
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	4b22      	ldr	r3, [pc, #136]	; (80079bc <create_name+0x15c>)
 8007932:	0011      	movs	r1, r2
 8007934:	0018      	movs	r0, r3
 8007936:	f7fe ff7e 	bl	8006836 <chk_chr>
 800793a:	1e03      	subs	r3, r0, #0
 800793c:	d001      	beq.n	8007942 <create_name+0xe2>
 800793e:	2306      	movs	r3, #6
 8007940:	e035      	b.n	80079ae <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007942:	221b      	movs	r2, #27
 8007944:	18bb      	adds	r3, r7, r2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b60      	cmp	r3, #96	; 0x60
 800794a:	d908      	bls.n	800795e <create_name+0xfe>
 800794c:	18bb      	adds	r3, r7, r2
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b7a      	cmp	r3, #122	; 0x7a
 8007952:	d804      	bhi.n	800795e <create_name+0xfe>
 8007954:	18bb      	adds	r3, r7, r2
 8007956:	18ba      	adds	r2, r7, r2
 8007958:	7812      	ldrb	r2, [r2, #0]
 800795a:	3a20      	subs	r2, #32
 800795c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	613a      	str	r2, [r7, #16]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	18d3      	adds	r3, r2, r3
 8007968:	221b      	movs	r2, #27
 800796a:	18ba      	adds	r2, r7, r2
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007970:	e78d      	b.n	800788e <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007972:	46c0      	nop			; (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	18d2      	adds	r2, r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <create_name+0x128>
 8007984:	2306      	movs	r3, #6
 8007986:	e012      	b.n	80079ae <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2be5      	cmp	r3, #229	; 0xe5
 800798e:	d102      	bne.n	8007996 <create_name+0x136>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2205      	movs	r2, #5
 8007994:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007996:	231b      	movs	r3, #27
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b20      	cmp	r3, #32
 800799e:	d801      	bhi.n	80079a4 <create_name+0x144>
 80079a0:	2204      	movs	r2, #4
 80079a2:	e000      	b.n	80079a6 <create_name+0x146>
 80079a4:	2200      	movs	r2, #0
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	330b      	adds	r3, #11
 80079aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079ae:	0018      	movs	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b008      	add	sp, #32
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	08009d44 	.word	0x08009d44
 80079bc:	080095a4 	.word	0x080095a4

080079c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079c0:	b5b0      	push	{r4, r5, r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079d4:	e002      	b.n	80079dc <follow_path+0x1c>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	3301      	adds	r3, #1
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b2f      	cmp	r3, #47	; 0x2f
 80079e2:	d0f8      	beq.n	80079d6 <follow_path+0x16>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b5c      	cmp	r3, #92	; 0x5c
 80079ea:	d0f4      	beq.n	80079d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b1f      	cmp	r3, #31
 80079f8:	d80d      	bhi.n	8007a16 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	222f      	movs	r2, #47	; 0x2f
 80079fe:	2180      	movs	r1, #128	; 0x80
 8007a00:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8007a02:	2317      	movs	r3, #23
 8007a04:	18fc      	adds	r4, r7, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff fca6 	bl	800735c <dir_sdi>
 8007a10:	0003      	movs	r3, r0
 8007a12:	7023      	strb	r3, [r4, #0]
 8007a14:	e052      	b.n	8007abc <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a16:	2517      	movs	r5, #23
 8007a18:	197c      	adds	r4, r7, r5
 8007a1a:	003a      	movs	r2, r7
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	0011      	movs	r1, r2
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7ff ff1d 	bl	8007860 <create_name>
 8007a26:	0003      	movs	r3, r0
 8007a28:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007a2a:	197b      	adds	r3, r7, r5
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d13f      	bne.n	8007ab2 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a32:	197c      	adds	r4, r7, r5
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff fe6e 	bl	8007718 <dir_find>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8007a40:	200b      	movs	r0, #11
 8007a42:	183b      	adds	r3, r7, r0
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	212f      	movs	r1, #47	; 0x2f
 8007a48:	5c52      	ldrb	r2, [r2, r1]
 8007a4a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a4c:	197b      	adds	r3, r7, r5
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00c      	beq.n	8007a6e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a54:	197b      	adds	r3, r7, r5
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d12c      	bne.n	8007ab6 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a5c:	183b      	adds	r3, r7, r0
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2204      	movs	r2, #4
 8007a62:	4013      	ands	r3, r2
 8007a64:	d127      	bne.n	8007ab6 <follow_path+0xf6>
 8007a66:	197b      	adds	r3, r7, r5
 8007a68:	2205      	movs	r2, #5
 8007a6a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007a6c:	e023      	b.n	8007ab6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a6e:	230b      	movs	r3, #11
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2204      	movs	r2, #4
 8007a76:	4013      	ands	r3, r2
 8007a78:	d11f      	bne.n	8007aba <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	799b      	ldrb	r3, [r3, #6]
 8007a7e:	001a      	movs	r2, r3
 8007a80:	2310      	movs	r3, #16
 8007a82:	4013      	ands	r3, r2
 8007a84:	d104      	bne.n	8007a90 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8007a86:	2317      	movs	r3, #23
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	2205      	movs	r2, #5
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e015      	b.n	8007abc <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3330      	adds	r3, #48	; 0x30
 8007a94:	001a      	movs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	05db      	lsls	r3, r3, #23
 8007a9c:	0ddb      	lsrs	r3, r3, #23
 8007a9e:	18d2      	adds	r2, r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7ff fdf8 	bl	800769a <ld_clust>
 8007aaa:	0002      	movs	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ab0:	e7b1      	b.n	8007a16 <follow_path+0x56>
			if (res != FR_OK) break;
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	e002      	b.n	8007abc <follow_path+0xfc>
				break;
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	e000      	b.n	8007abc <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007aba:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8007abc:	2317      	movs	r3, #23
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	781b      	ldrb	r3, [r3, #0]
}
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b006      	add	sp, #24
 8007ac8:	bdb0      	pop	{r4, r5, r7, pc}

08007aca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d031      	beq.n	8007b44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	e002      	b.n	8007aee <get_ldnumber+0x24>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3301      	adds	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d903      	bls.n	8007afe <get_ldnumber+0x34>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b3a      	cmp	r3, #58	; 0x3a
 8007afc:	d1f4      	bne.n	8007ae8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b3a      	cmp	r3, #58	; 0x3a
 8007b04:	d11c      	bne.n	8007b40 <get_ldnumber+0x76>
			tp = *path;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	60fa      	str	r2, [r7, #12]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	3b30      	subs	r3, #48	; 0x30
 8007b16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b09      	cmp	r3, #9
 8007b1c:	d80e      	bhi.n	8007b3c <get_ldnumber+0x72>
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d10a      	bne.n	8007b3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <get_ldnumber+0x72>
					vol = (int)i;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	3301      	adds	r3, #1
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	e002      	b.n	8007b46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b44:	693b      	ldr	r3, [r7, #16]
}
 8007b46:	0018      	movs	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	b006      	add	sp, #24
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	70da      	strb	r2, [r3, #3]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	4252      	negs	r2, r2
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	0011      	movs	r1, r2
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f7ff f82c 	bl	8006bcc <move_window>
 8007b74:	1e03      	subs	r3, r0, #0
 8007b76:	d001      	beq.n	8007b7c <check_fs+0x2c>
 8007b78:	2304      	movs	r3, #4
 8007b7a:	e037      	b.n	8007bec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3330      	adds	r3, #48	; 0x30
 8007b80:	33ff      	adds	r3, #255	; 0xff
 8007b82:	33ff      	adds	r3, #255	; 0xff
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7fe fd75 	bl	8006674 <ld_word>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <check_fs+0xa4>)
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <check_fs+0x48>
 8007b94:	2303      	movs	r3, #3
 8007b96:	e029      	b.n	8007bec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2230      	movs	r2, #48	; 0x30
 8007b9c:	5c9b      	ldrb	r3, [r3, r2]
 8007b9e:	2be9      	cmp	r3, #233	; 0xe9
 8007ba0:	d009      	beq.n	8007bb6 <check_fs+0x66>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2230      	movs	r2, #48	; 0x30
 8007ba6:	5c9b      	ldrb	r3, [r3, r2]
 8007ba8:	2beb      	cmp	r3, #235	; 0xeb
 8007baa:	d11e      	bne.n	8007bea <check_fs+0x9a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2232      	movs	r2, #50	; 0x32
 8007bb0:	5c9b      	ldrb	r3, [r3, r2]
 8007bb2:	2b90      	cmp	r3, #144	; 0x90
 8007bb4:	d119      	bne.n	8007bea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3330      	adds	r3, #48	; 0x30
 8007bba:	3336      	adds	r3, #54	; 0x36
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f7fe fd74 	bl	80066aa <ld_dword>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	0a1b      	lsrs	r3, r3, #8
 8007bc8:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <check_fs+0xa8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d101      	bne.n	8007bd2 <check_fs+0x82>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e00c      	b.n	8007bec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3330      	adds	r3, #48	; 0x30
 8007bd6:	3352      	adds	r3, #82	; 0x52
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7fe fd66 	bl	80066aa <ld_dword>
 8007bde:	0003      	movs	r3, r0
 8007be0:	4a06      	ldr	r2, [pc, #24]	; (8007bfc <check_fs+0xac>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <check_fs+0x9a>
 8007be6:	2300      	movs	r3, #0
 8007be8:	e000      	b.n	8007bec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bea:	2302      	movs	r3, #2
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	0000aa55 	.word	0x0000aa55
 8007bf8:	00544146 	.word	0x00544146
 8007bfc:	33544146 	.word	0x33544146

08007c00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c00:	b5b0      	push	{r4, r5, r7, lr}
 8007c02:	b096      	sub	sp, #88	; 0x58
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	1dfb      	adds	r3, r7, #7
 8007c0c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7ff ff57 	bl	8007aca <get_ldnumber>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da01      	bge.n	8007c2a <find_volume+0x2a>
 8007c26:	230b      	movs	r3, #11
 8007c28:	e24b      	b.n	80080c2 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c2a:	4bcc      	ldr	r3, [pc, #816]	; (8007f5c <find_volume+0x35c>)
 8007c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c2e:	0092      	lsls	r2, r2, #2
 8007c30:	58d3      	ldr	r3, [r2, r3]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <find_volume+0x3e>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	e241      	b.n	80080c2 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c44:	1dfb      	adds	r3, r7, #7
 8007c46:	1dfa      	adds	r2, r7, #7
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	438a      	bics	r2, r1
 8007c4e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01b      	beq.n	8007c90 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2537      	movs	r5, #55	; 0x37
 8007c5e:	197c      	adds	r4, r7, r5
 8007c60:	0018      	movs	r0, r3
 8007c62:	f7fe fc3d 	bl	80064e0 <disk_status>
 8007c66:	0003      	movs	r3, r0
 8007c68:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c6a:	0029      	movs	r1, r5
 8007c6c:	187b      	adds	r3, r7, r1
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	d10c      	bne.n	8007c90 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c76:	1dfb      	adds	r3, r7, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d006      	beq.n	8007c8c <find_volume+0x8c>
 8007c7e:	187b      	adds	r3, r7, r1
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2204      	movs	r2, #4
 8007c84:	4013      	ands	r3, r2
 8007c86:	d001      	beq.n	8007c8c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8007c88:	230a      	movs	r3, #10
 8007c8a:	e21a      	b.n	80080c2 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e218      	b.n	80080c2 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2537      	movs	r5, #55	; 0x37
 8007ca4:	197c      	adds	r4, r7, r5
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f7fe fc3c 	bl	8006524 <disk_initialize>
 8007cac:	0003      	movs	r3, r0
 8007cae:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cb0:	197b      	adds	r3, r7, r5
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d001      	beq.n	8007cbe <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e201      	b.n	80080c2 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cbe:	1dfb      	adds	r3, r7, #7
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <find_volume+0xd6>
 8007cc6:	2337      	movs	r3, #55	; 0x37
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	4013      	ands	r3, r2
 8007cd0:	d001      	beq.n	8007cd6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007cd2:	230a      	movs	r3, #10
 8007cd4:	e1f5      	b.n	80080c2 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007cda:	2557      	movs	r5, #87	; 0x57
 8007cdc:	197c      	adds	r4, r7, r5
 8007cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	0011      	movs	r1, r2
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7ff ff33 	bl	8007b50 <check_fs>
 8007cea:	0003      	movs	r3, r0
 8007cec:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cee:	197b      	adds	r3, r7, r5
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d14b      	bne.n	8007d8e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfa:	e01d      	b.n	8007d38 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	3330      	adds	r3, #48	; 0x30
 8007d00:	001a      	movs	r2, r3
 8007d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	33bf      	adds	r3, #191	; 0xbf
 8007d08:	33ff      	adds	r3, #255	; 0xff
 8007d0a:	18d3      	adds	r3, r2, r3
 8007d0c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	3304      	adds	r3, #4
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d006      	beq.n	8007d26 <find_volume+0x126>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7fe fcc4 	bl	80066aa <ld_dword>
 8007d22:	0003      	movs	r3, r0
 8007d24:	e000      	b.n	8007d28 <find_volume+0x128>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2214      	movs	r2, #20
 8007d2a:	18ba      	adds	r2, r7, r2
 8007d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d2e:	0089      	lsls	r1, r1, #2
 8007d30:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d34:	3301      	adds	r3, #1
 8007d36:	643b      	str	r3, [r7, #64]	; 0x40
 8007d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d9de      	bls.n	8007cfc <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d3e:	2300      	movs	r3, #0
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <find_volume+0x14e>
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d4e:	2314      	movs	r3, #20
 8007d50:	18fb      	adds	r3, r7, r3
 8007d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d54:	0092      	lsls	r2, r2, #2
 8007d56:	58d3      	ldr	r3, [r2, r3]
 8007d58:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <find_volume+0x172>
 8007d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	0011      	movs	r1, r2
 8007d66:	0018      	movs	r0, r3
 8007d68:	f7ff fef2 	bl	8007b50 <check_fs>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	001a      	movs	r2, r3
 8007d70:	e000      	b.n	8007d74 <find_volume+0x174>
 8007d72:	2203      	movs	r2, #3
 8007d74:	2157      	movs	r1, #87	; 0x57
 8007d76:	187b      	adds	r3, r7, r1
 8007d78:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d7a:	187b      	adds	r3, r7, r1
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d905      	bls.n	8007d8e <find_volume+0x18e>
 8007d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d84:	3301      	adds	r3, #1
 8007d86:	643b      	str	r3, [r7, #64]	; 0x40
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d9df      	bls.n	8007d4e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d8e:	2357      	movs	r3, #87	; 0x57
 8007d90:	18fb      	adds	r3, r7, r3
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d101      	bne.n	8007d9c <find_volume+0x19c>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e192      	b.n	80080c2 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d9c:	2357      	movs	r3, #87	; 0x57
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d901      	bls.n	8007daa <find_volume+0x1aa>
 8007da6:	230d      	movs	r3, #13
 8007da8:	e18b      	b.n	80080c2 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	3330      	adds	r3, #48	; 0x30
 8007dae:	330b      	adds	r3, #11
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7fe fc5f 	bl	8006674 <ld_word>
 8007db6:	0003      	movs	r3, r0
 8007db8:	001a      	movs	r2, r3
 8007dba:	2380      	movs	r3, #128	; 0x80
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d001      	beq.n	8007dc6 <find_volume+0x1c6>
 8007dc2:	230d      	movs	r3, #13
 8007dc4:	e17d      	b.n	80080c2 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	3330      	adds	r3, #48	; 0x30
 8007dca:	3316      	adds	r3, #22
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f7fe fc51 	bl	8006674 <ld_word>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <find_volume+0x1ec>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	3330      	adds	r3, #48	; 0x30
 8007de0:	3324      	adds	r3, #36	; 0x24
 8007de2:	0018      	movs	r0, r3
 8007de4:	f7fe fc61 	bl	80066aa <ld_dword>
 8007de8:	0003      	movs	r3, r0
 8007dea:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007df0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	2240      	movs	r2, #64	; 0x40
 8007df6:	5c9a      	ldrb	r2, [r3, r2]
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	789b      	ldrb	r3, [r3, #2]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d005      	beq.n	8007e10 <find_volume+0x210>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	789b      	ldrb	r3, [r3, #2]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d001      	beq.n	8007e10 <find_volume+0x210>
 8007e0c:	230d      	movs	r3, #13
 8007e0e:	e158      	b.n	80080c2 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	789b      	ldrb	r3, [r3, #2]
 8007e14:	001a      	movs	r2, r3
 8007e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e18:	4353      	muls	r3, r2
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	223d      	movs	r2, #61	; 0x3d
 8007e20:	5c9b      	ldrb	r3, [r3, r2]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	895b      	ldrh	r3, [r3, #10]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <find_volume+0x240>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	895b      	ldrh	r3, [r3, #10]
 8007e34:	001a      	movs	r2, r3
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	895b      	ldrh	r3, [r3, #10]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	d001      	beq.n	8007e44 <find_volume+0x244>
 8007e40:	230d      	movs	r3, #13
 8007e42:	e13e      	b.n	80080c2 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	3330      	adds	r3, #48	; 0x30
 8007e48:	3311      	adds	r3, #17
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f7fe fc12 	bl	8006674 <ld_word>
 8007e50:	0003      	movs	r3, r0
 8007e52:	001a      	movs	r2, r3
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	891b      	ldrh	r3, [r3, #8]
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	4013      	ands	r3, r2
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <find_volume+0x26a>
 8007e66:	230d      	movs	r3, #13
 8007e68:	e12b      	b.n	80080c2 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	3330      	adds	r3, #48	; 0x30
 8007e6e:	3313      	adds	r3, #19
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7fe fbff 	bl	8006674 <ld_word>
 8007e76:	0003      	movs	r3, r0
 8007e78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <find_volume+0x290>
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	3330      	adds	r3, #48	; 0x30
 8007e84:	3320      	adds	r3, #32
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7fe fc0f 	bl	80066aa <ld_dword>
 8007e8c:	0003      	movs	r3, r0
 8007e8e:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	3330      	adds	r3, #48	; 0x30
 8007e94:	330e      	adds	r3, #14
 8007e96:	252e      	movs	r5, #46	; 0x2e
 8007e98:	197c      	adds	r4, r7, r5
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f7fe fbea 	bl	8006674 <ld_word>
 8007ea0:	0003      	movs	r3, r0
 8007ea2:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ea4:	197b      	adds	r3, r7, r5
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <find_volume+0x2b0>
 8007eac:	230d      	movs	r3, #13
 8007eae:	e108      	b.n	80080c2 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007eb0:	232e      	movs	r3, #46	; 0x2e
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	881a      	ldrh	r2, [r3, #0]
 8007eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb8:	18d3      	adds	r3, r2, r3
 8007eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebc:	8912      	ldrh	r2, [r2, #8]
 8007ebe:	0912      	lsrs	r2, r2, #4
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d201      	bcs.n	8007ed2 <find_volume+0x2d2>
 8007ece:	230d      	movs	r3, #13
 8007ed0:	e0f7      	b.n	80080c2 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	895b      	ldrh	r3, [r3, #10]
 8007edc:	0019      	movs	r1, r3
 8007ede:	0010      	movs	r0, r2
 8007ee0:	f7f8 f924 	bl	800012c <__udivsi3>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <find_volume+0x2f2>
 8007eee:	230d      	movs	r3, #13
 8007ef0:	e0e7      	b.n	80080c2 <find_volume+0x4c2>
		fmt = FS_FAT32;
 8007ef2:	2157      	movs	r1, #87	; 0x57
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <find_volume+0x360>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d802      	bhi.n	8007f08 <find_volume+0x308>
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	2202      	movs	r2, #2
 8007f06:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <find_volume+0x364>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d803      	bhi.n	8007f18 <find_volume+0x318>
 8007f10:	2357      	movs	r3, #87	; 0x57
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	2201      	movs	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	1c9a      	adds	r2, r3, #2
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f24:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f26:	232e      	movs	r3, #46	; 0x2e
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	881a      	ldrh	r2, [r3, #0]
 8007f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f2e:	18d2      	adds	r2, r2, r3
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	18d2      	adds	r2, r2, r3
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007f3e:	2357      	movs	r3, #87	; 0x57
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d123      	bne.n	8007f90 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	3330      	adds	r3, #48	; 0x30
 8007f4c:	332a      	adds	r3, #42	; 0x2a
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7fe fb90 	bl	8006674 <ld_word>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d007      	beq.n	8007f68 <find_volume+0x368>
 8007f58:	230d      	movs	r3, #13
 8007f5a:	e0b2      	b.n	80080c2 <find_volume+0x4c2>
 8007f5c:	20000380 	.word	0x20000380
 8007f60:	0000fff5 	.word	0x0000fff5
 8007f64:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	891b      	ldrh	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <find_volume+0x374>
 8007f70:	230d      	movs	r3, #13
 8007f72:	e0a6      	b.n	80080c2 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	3330      	adds	r3, #48	; 0x30
 8007f78:	332c      	adds	r3, #44	; 0x2c
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f7fe fb95 	bl	80066aa <ld_dword>
 8007f80:	0002      	movs	r2, r0
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8e:	e020      	b.n	8007fd2 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	891b      	ldrh	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <find_volume+0x39c>
 8007f98:	230d      	movs	r3, #13
 8007f9a:	e092      	b.n	80080c2 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa2:	18d2      	adds	r2, r2, r3
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fa8:	2357      	movs	r3, #87	; 0x57
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <find_volume+0x3ba>
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	e00a      	b.n	8007fd0 <find_volume+0x3d0>
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	695a      	ldr	r2, [r3, #20]
 8007fbe:	0013      	movs	r3, r2
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	189b      	adds	r3, r3, r2
 8007fc4:	085a      	lsrs	r2, r3, #1
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	2101      	movs	r1, #1
 8007fcc:	400b      	ands	r3, r1
 8007fce:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007fd0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd8:	493c      	ldr	r1, [pc, #240]	; (80080cc <find_volume+0x4cc>)
 8007fda:	468c      	mov	ip, r1
 8007fdc:	4463      	add	r3, ip
 8007fde:	0a5b      	lsrs	r3, r3, #9
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d201      	bcs.n	8007fe8 <find_volume+0x3e8>
 8007fe4:	230d      	movs	r3, #13
 8007fe6:	e06c      	b.n	80080c2 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2201      	movs	r2, #1
 8007fec:	4252      	negs	r2, r2
 8007fee:	611a      	str	r2, [r3, #16]
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	2280      	movs	r2, #128	; 0x80
 8007ffc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ffe:	2357      	movs	r3, #87	; 0x57
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d148      	bne.n	800809a <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	3330      	adds	r3, #48	; 0x30
 800800c:	3330      	adds	r3, #48	; 0x30
 800800e:	0018      	movs	r0, r3
 8008010:	f7fe fb30 	bl	8006674 <ld_word>
 8008014:	0003      	movs	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d13f      	bne.n	800809a <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800801a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	0011      	movs	r1, r2
 8008022:	0018      	movs	r0, r3
 8008024:	f7fe fdd2 	bl	8006bcc <move_window>
 8008028:	1e03      	subs	r3, r0, #0
 800802a:	d136      	bne.n	800809a <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	2200      	movs	r2, #0
 8008030:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	3330      	adds	r3, #48	; 0x30
 8008036:	33ff      	adds	r3, #255	; 0xff
 8008038:	33ff      	adds	r3, #255	; 0xff
 800803a:	0018      	movs	r0, r3
 800803c:	f7fe fb1a 	bl	8006674 <ld_word>
 8008040:	0003      	movs	r3, r0
 8008042:	001a      	movs	r2, r3
 8008044:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <find_volume+0x4d0>)
 8008046:	429a      	cmp	r2, r3
 8008048:	d127      	bne.n	800809a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	3330      	adds	r3, #48	; 0x30
 800804e:	0018      	movs	r0, r3
 8008050:	f7fe fb2b 	bl	80066aa <ld_dword>
 8008054:	0003      	movs	r3, r0
 8008056:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <find_volume+0x4d4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d11e      	bne.n	800809a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	3330      	adds	r3, #48	; 0x30
 8008060:	33e5      	adds	r3, #229	; 0xe5
 8008062:	33ff      	adds	r3, #255	; 0xff
 8008064:	0018      	movs	r0, r3
 8008066:	f7fe fb20 	bl	80066aa <ld_dword>
 800806a:	0003      	movs	r3, r0
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <find_volume+0x4d8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d113      	bne.n	800809a <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	3330      	adds	r3, #48	; 0x30
 8008076:	33e9      	adds	r3, #233	; 0xe9
 8008078:	33ff      	adds	r3, #255	; 0xff
 800807a:	0018      	movs	r0, r3
 800807c:	f7fe fb15 	bl	80066aa <ld_dword>
 8008080:	0002      	movs	r2, r0
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	3330      	adds	r3, #48	; 0x30
 800808a:	33ed      	adds	r3, #237	; 0xed
 800808c:	33ff      	adds	r3, #255	; 0xff
 800808e:	0018      	movs	r0, r3
 8008090:	f7fe fb0b 	bl	80066aa <ld_dword>
 8008094:	0002      	movs	r2, r0
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	2257      	movs	r2, #87	; 0x57
 800809e:	18ba      	adds	r2, r7, r2
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <find_volume+0x4dc>)
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	3301      	adds	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <find_volume+0x4dc>)
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <find_volume+0x4dc>)
 80080b2:	881a      	ldrh	r2, [r3, #0]
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	0018      	movs	r0, r3
 80080bc:	f7fe fd1e 	bl	8006afc <clear_lock>
#endif
	return FR_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b016      	add	sp, #88	; 0x58
 80080c8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	000001ff 	.word	0x000001ff
 80080d0:	0000aa55 	.word	0x0000aa55
 80080d4:	41615252 	.word	0x41615252
 80080d8:	61417272 	.word	0x61417272
 80080dc:	20000384 	.word	0x20000384

080080e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80080ea:	240f      	movs	r4, #15
 80080ec:	193b      	adds	r3, r7, r4
 80080ee:	2209      	movs	r2, #9
 80080f0:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01d      	beq.n	8008134 <validate+0x54>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <validate+0x54>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d014      	beq.n	8008134 <validate+0x54>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	889a      	ldrh	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	88db      	ldrh	r3, [r3, #6]
 8008114:	429a      	cmp	r2, r3
 8008116:	d10d      	bne.n	8008134 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	0018      	movs	r0, r3
 8008120:	f7fe f9de 	bl	80064e0 <disk_status>
 8008124:	0003      	movs	r3, r0
 8008126:	001a      	movs	r2, r3
 8008128:	2301      	movs	r3, #1
 800812a:	4013      	ands	r3, r2
 800812c:	d102      	bne.n	8008134 <validate+0x54>
			res = FR_OK;
 800812e:	193b      	adds	r3, r7, r4
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008134:	230f      	movs	r3, #15
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <validate+0x64>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	e000      	b.n	8008146 <validate+0x66>
 8008144:	2200      	movs	r2, #0
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	601a      	str	r2, [r3, #0]
	return res;
 800814a:	230f      	movs	r3, #15
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	781b      	ldrb	r3, [r3, #0]
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b005      	add	sp, #20
 8008156:	bd90      	pop	{r4, r7, pc}

08008158 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008158:	b5b0      	push	{r4, r5, r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800816a:	2310      	movs	r3, #16
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	0018      	movs	r0, r3
 8008170:	f7ff fcab 	bl	8007aca <get_ldnumber>
 8008174:	0003      	movs	r3, r0
 8008176:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da01      	bge.n	8008182 <f_mount+0x2a>
 800817e:	230b      	movs	r3, #11
 8008180:	e030      	b.n	80081e4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008182:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <f_mount+0x94>)
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	58d3      	ldr	r3, [r2, r3]
 800818a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	0018      	movs	r0, r3
 8008196:	f7fe fcb1 	bl	8006afc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <f_mount+0x94>)
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	0092      	lsls	r2, r2, #2
 80081b4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <f_mount+0x6c>
 80081bc:	1dfb      	adds	r3, r7, #7
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d001      	beq.n	80081c8 <f_mount+0x70>
 80081c4:	2300      	movs	r3, #0
 80081c6:	e00d      	b.n	80081e4 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081c8:	2517      	movs	r5, #23
 80081ca:	197c      	adds	r4, r7, r5
 80081cc:	230c      	movs	r3, #12
 80081ce:	18f9      	adds	r1, r7, r3
 80081d0:	2308      	movs	r3, #8
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	2200      	movs	r2, #0
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7ff fd12 	bl	8007c00 <find_volume>
 80081dc:	0003      	movs	r3, r0
 80081de:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80081e0:	197b      	adds	r3, r7, r5
 80081e2:	781b      	ldrb	r3, [r3, #0]
}
 80081e4:	0018      	movs	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b008      	add	sp, #32
 80081ea:	bdb0      	pop	{r4, r5, r7, pc}
 80081ec:	20000380 	.word	0x20000380

080081f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	b099      	sub	sp, #100	; 0x64
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	1dfb      	adds	r3, r7, #7
 80081fc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <f_open+0x18>
 8008204:	2309      	movs	r3, #9
 8008206:	e1e3      	b.n	80085d0 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008208:	1dfb      	adds	r3, r7, #7
 800820a:	1dfa      	adds	r2, r7, #7
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	213f      	movs	r1, #63	; 0x3f
 8008210:	400a      	ands	r2, r1
 8008212:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008214:	255f      	movs	r5, #95	; 0x5f
 8008216:	197c      	adds	r4, r7, r5
 8008218:	1dfb      	adds	r3, r7, #7
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	2310      	movs	r3, #16
 800821e:	18f9      	adds	r1, r7, r3
 8008220:	2308      	movs	r3, #8
 8008222:	18fb      	adds	r3, r7, r3
 8008224:	0018      	movs	r0, r3
 8008226:	f7ff fceb 	bl	8007c00 <find_volume>
 800822a:	0003      	movs	r3, r0
 800822c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800822e:	197b      	adds	r3, r7, r5
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d000      	beq.n	8008238 <f_open+0x48>
 8008236:	e1c0      	b.n	80085ba <f_open+0x3ca>
		dj.obj.fs = fs;
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	2614      	movs	r6, #20
 800823c:	19bb      	adds	r3, r7, r6
 800823e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	197c      	adds	r4, r7, r5
 8008244:	19bb      	adds	r3, r7, r6
 8008246:	0011      	movs	r1, r2
 8008248:	0018      	movs	r0, r3
 800824a:	f7ff fbb9 	bl	80079c0 <follow_path>
 800824e:	0003      	movs	r3, r0
 8008250:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008252:	0029      	movs	r1, r5
 8008254:	197b      	adds	r3, r7, r5
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11b      	bne.n	8008294 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800825c:	19bb      	adds	r3, r7, r6
 800825e:	222f      	movs	r2, #47	; 0x2f
 8008260:	5c9b      	ldrb	r3, [r3, r2]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da03      	bge.n	8008270 <f_open+0x80>
				res = FR_INVALID_NAME;
 8008268:	187b      	adds	r3, r7, r1
 800826a:	2206      	movs	r2, #6
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e011      	b.n	8008294 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008270:	1dfb      	adds	r3, r7, #7
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2201      	movs	r2, #1
 8008276:	4393      	bics	r3, r2
 8008278:	1e5a      	subs	r2, r3, #1
 800827a:	4193      	sbcs	r3, r2
 800827c:	b2db      	uxtb	r3, r3
 800827e:	001a      	movs	r2, r3
 8008280:	235f      	movs	r3, #95	; 0x5f
 8008282:	18fc      	adds	r4, r7, r3
 8008284:	2314      	movs	r3, #20
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	0011      	movs	r1, r2
 800828a:	0018      	movs	r0, r3
 800828c:	f7fe faec 	bl	8006868 <chk_lock>
 8008290:	0003      	movs	r3, r0
 8008292:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008294:	1dfb      	adds	r3, r7, #7
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	221c      	movs	r2, #28
 800829a:	4013      	ands	r3, r2
 800829c:	d100      	bne.n	80082a0 <f_open+0xb0>
 800829e:	e096      	b.n	80083ce <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80082a0:	225f      	movs	r2, #95	; 0x5f
 80082a2:	18bb      	adds	r3, r7, r2
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01a      	beq.n	80082e0 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082aa:	18bb      	adds	r3, r7, r2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d10f      	bne.n	80082d2 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082b2:	f7fe fb31 	bl	8006918 <enq_lock>
 80082b6:	1e03      	subs	r3, r0, #0
 80082b8:	d007      	beq.n	80082ca <f_open+0xda>
 80082ba:	2314      	movs	r3, #20
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	0018      	movs	r0, r3
 80082c0:	f7ff fa92 	bl	80077e8 <dir_register>
 80082c4:	0003      	movs	r3, r0
 80082c6:	001a      	movs	r2, r3
 80082c8:	e000      	b.n	80082cc <f_open+0xdc>
 80082ca:	2212      	movs	r2, #18
 80082cc:	235f      	movs	r3, #95	; 0x5f
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082d2:	1dfb      	adds	r3, r7, #7
 80082d4:	1dfa      	adds	r2, r7, #7
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	2108      	movs	r1, #8
 80082da:	430a      	orrs	r2, r1
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e014      	b.n	800830a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082e0:	2314      	movs	r3, #20
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	799b      	ldrb	r3, [r3, #6]
 80082e6:	001a      	movs	r2, r3
 80082e8:	2311      	movs	r3, #17
 80082ea:	4013      	ands	r3, r2
 80082ec:	d004      	beq.n	80082f8 <f_open+0x108>
					res = FR_DENIED;
 80082ee:	235f      	movs	r3, #95	; 0x5f
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	2207      	movs	r2, #7
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e008      	b.n	800830a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082f8:	1dfb      	adds	r3, r7, #7
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2204      	movs	r2, #4
 80082fe:	4013      	ands	r3, r2
 8008300:	d003      	beq.n	800830a <f_open+0x11a>
 8008302:	235f      	movs	r3, #95	; 0x5f
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	2208      	movs	r2, #8
 8008308:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800830a:	245f      	movs	r4, #95	; 0x5f
 800830c:	193b      	adds	r3, r7, r4
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d000      	beq.n	8008316 <f_open+0x126>
 8008314:	e07b      	b.n	800840e <f_open+0x21e>
 8008316:	1dfb      	adds	r3, r7, #7
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2208      	movs	r2, #8
 800831c:	4013      	ands	r3, r2
 800831e:	d100      	bne.n	8008322 <f_open+0x132>
 8008320:	e075      	b.n	800840e <f_open+0x21e>
				dw = GET_FATTIME();
 8008322:	f7fd fb05 	bl	8005930 <get_fattime>
 8008326:	0003      	movs	r3, r0
 8008328:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800832a:	2514      	movs	r5, #20
 800832c:	197b      	adds	r3, r7, r5
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	330e      	adds	r3, #14
 8008332:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008334:	0011      	movs	r1, r2
 8008336:	0018      	movs	r0, r3
 8008338:	f7fe f9f6 	bl	8006728 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800833c:	197b      	adds	r3, r7, r5
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	3316      	adds	r3, #22
 8008342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008344:	0011      	movs	r1, r2
 8008346:	0018      	movs	r0, r3
 8008348:	f7fe f9ee 	bl	8006728 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800834c:	197b      	adds	r3, r7, r5
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	330b      	adds	r3, #11
 8008352:	2220      	movs	r2, #32
 8008354:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	197b      	adds	r3, r7, r5
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	0019      	movs	r1, r3
 800835e:	0010      	movs	r0, r2
 8008360:	f7ff f99b 	bl	800769a <ld_clust>
 8008364:	0003      	movs	r3, r0
 8008366:	64fb      	str	r3, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008368:	6938      	ldr	r0, [r7, #16]
 800836a:	197b      	adds	r3, r7, r5
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	2200      	movs	r2, #0
 8008370:	0019      	movs	r1, r3
 8008372:	f7ff f9b1 	bl	80076d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008376:	197b      	adds	r3, r7, r5
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	331c      	adds	r3, #28
 800837c:	2100      	movs	r1, #0
 800837e:	0018      	movs	r0, r3
 8008380:	f7fe f9d2 	bl	8006728 <st_dword>
					fs->wflag = 1;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2201      	movs	r2, #1
 8008388:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d03e      	beq.n	800840e <f_open+0x21e>
						dw = fs->winsect;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008396:	0026      	movs	r6, r4
 8008398:	193c      	adds	r4, r7, r4
 800839a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800839c:	197b      	adds	r3, r7, r5
 800839e:	2200      	movs	r2, #0
 80083a0:	0018      	movs	r0, r3
 80083a2:	f7fe fe8d 	bl	80070c0 <remove_chain>
 80083a6:	0003      	movs	r3, r0
 80083a8:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80083aa:	19bb      	adds	r3, r7, r6
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d12d      	bne.n	800840e <f_open+0x21e>
							res = move_window(fs, dw);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	19bc      	adds	r4, r7, r6
 80083b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083b8:	0011      	movs	r1, r2
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7fe fc06 	bl	8006bcc <move_window>
 80083c0:	0003      	movs	r3, r0
 80083c2:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c8:	3a01      	subs	r2, #1
 80083ca:	60da      	str	r2, [r3, #12]
 80083cc:	e01f      	b.n	800840e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083ce:	215f      	movs	r1, #95	; 0x5f
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11a      	bne.n	800840e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083d8:	2314      	movs	r3, #20
 80083da:	18fb      	adds	r3, r7, r3
 80083dc:	799b      	ldrb	r3, [r3, #6]
 80083de:	001a      	movs	r2, r3
 80083e0:	2310      	movs	r3, #16
 80083e2:	4013      	ands	r3, r2
 80083e4:	d003      	beq.n	80083ee <f_open+0x1fe>
					res = FR_NO_FILE;
 80083e6:	187b      	adds	r3, r7, r1
 80083e8:	2204      	movs	r2, #4
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	e00f      	b.n	800840e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083ee:	1dfb      	adds	r3, r7, #7
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2202      	movs	r2, #2
 80083f4:	4013      	ands	r3, r2
 80083f6:	d00a      	beq.n	800840e <f_open+0x21e>
 80083f8:	2314      	movs	r3, #20
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	799b      	ldrb	r3, [r3, #6]
 80083fe:	001a      	movs	r2, r3
 8008400:	2301      	movs	r3, #1
 8008402:	4013      	ands	r3, r2
 8008404:	d003      	beq.n	800840e <f_open+0x21e>
						res = FR_DENIED;
 8008406:	235f      	movs	r3, #95	; 0x5f
 8008408:	18fb      	adds	r3, r7, r3
 800840a:	2207      	movs	r2, #7
 800840c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800840e:	235f      	movs	r3, #95	; 0x5f
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d12b      	bne.n	8008470 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008418:	1dfb      	adds	r3, r7, #7
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2208      	movs	r2, #8
 800841e:	4013      	ands	r3, r2
 8008420:	d005      	beq.n	800842e <f_open+0x23e>
				mode |= FA_MODIFIED;
 8008422:	1dfb      	adds	r3, r7, #7
 8008424:	1dfa      	adds	r2, r7, #7
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	430a      	orrs	r2, r1
 800842c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008436:	2114      	movs	r1, #20
 8008438:	187b      	adds	r3, r7, r1
 800843a:	6a1a      	ldr	r2, [r3, #32]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008440:	1dfb      	adds	r3, r7, #7
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2201      	movs	r2, #1
 8008446:	4393      	bics	r3, r2
 8008448:	1e5a      	subs	r2, r3, #1
 800844a:	4193      	sbcs	r3, r2
 800844c:	b2db      	uxtb	r3, r3
 800844e:	001a      	movs	r2, r3
 8008450:	187b      	adds	r3, r7, r1
 8008452:	0011      	movs	r1, r2
 8008454:	0018      	movs	r0, r3
 8008456:	f7fe fa7d 	bl	8006954 <inc_lock>
 800845a:	0002      	movs	r2, r0
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <f_open+0x280>
 8008468:	235f      	movs	r3, #95	; 0x5f
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	2202      	movs	r2, #2
 800846e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008470:	235f      	movs	r3, #95	; 0x5f
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d000      	beq.n	800847c <f_open+0x28c>
 800847a:	e09e      	b.n	80085ba <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	2414      	movs	r4, #20
 8008480:	193b      	adds	r3, r7, r4
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	0019      	movs	r1, r3
 8008486:	0010      	movs	r0, r2
 8008488:	f7ff f907 	bl	800769a <ld_clust>
 800848c:	0002      	movs	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008492:	193b      	adds	r3, r7, r4
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	331c      	adds	r3, #28
 8008498:	0018      	movs	r0, r3
 800849a:	f7fe f906 	bl	80066aa <ld_dword>
 800849e:	0002      	movs	r2, r0
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	88da      	ldrh	r2, [r3, #6]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1dfa      	adds	r2, r7, #7
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3330      	adds	r3, #48	; 0x30
 80084d6:	2280      	movs	r2, #128	; 0x80
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	2100      	movs	r1, #0
 80084dc:	0018      	movs	r0, r3
 80084de:	f7fe f96c 	bl	80067ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80084e2:	1dfb      	adds	r3, r7, #7
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2220      	movs	r2, #32
 80084e8:	4013      	ands	r3, r2
 80084ea:	d066      	beq.n	80085ba <f_open+0x3ca>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d062      	beq.n	80085ba <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	895b      	ldrh	r3, [r3, #10]
 8008500:	025b      	lsls	r3, r3, #9
 8008502:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	657b      	str	r3, [r7, #84]	; 0x54
 8008510:	e019      	b.n	8008546 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008516:	0011      	movs	r1, r2
 8008518:	0018      	movs	r0, r3
 800851a:	f7fe fc25 	bl	8006d68 <get_fat>
 800851e:	0003      	movs	r3, r0
 8008520:	65bb      	str	r3, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008524:	2b01      	cmp	r3, #1
 8008526:	d803      	bhi.n	8008530 <f_open+0x340>
 8008528:	235f      	movs	r3, #95	; 0x5f
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	2202      	movs	r2, #2
 800852e:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008532:	3301      	adds	r3, #1
 8008534:	d103      	bne.n	800853e <f_open+0x34e>
 8008536:	235f      	movs	r3, #95	; 0x5f
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	2201      	movs	r2, #1
 800853c:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800853e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	657b      	str	r3, [r7, #84]	; 0x54
 8008546:	235f      	movs	r3, #95	; 0x5f
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <f_open+0x368>
 8008550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008554:	429a      	cmp	r2, r3
 8008556:	d8dc      	bhi.n	8008512 <f_open+0x322>
				}
				fp->clust = clst;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800855c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800855e:	245f      	movs	r4, #95	; 0x5f
 8008560:	193b      	adds	r3, r7, r4
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d128      	bne.n	80085ba <f_open+0x3ca>
 8008568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856a:	05db      	lsls	r3, r3, #23
 800856c:	0ddb      	lsrs	r3, r3, #23
 800856e:	d024      	beq.n	80085ba <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008574:	0011      	movs	r1, r2
 8008576:	0018      	movs	r0, r3
 8008578:	f7fe fbda 	bl	8006d30 <clust2sect>
 800857c:	0003      	movs	r3, r0
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
 8008580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <f_open+0x39e>
						res = FR_INT_ERR;
 8008586:	193b      	adds	r3, r7, r4
 8008588:	2202      	movs	r2, #2
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e015      	b.n	80085ba <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800858e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008590:	0a5a      	lsrs	r2, r3, #9
 8008592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008594:	18d2      	adds	r2, r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	7858      	ldrb	r0, [r3, #1]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3330      	adds	r3, #48	; 0x30
 80085a2:	0019      	movs	r1, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1a      	ldr	r2, [r3, #32]
 80085a8:	2301      	movs	r3, #1
 80085aa:	f7fd ffeb 	bl	8006584 <disk_read>
 80085ae:	1e03      	subs	r3, r0, #0
 80085b0:	d003      	beq.n	80085ba <f_open+0x3ca>
 80085b2:	235f      	movs	r3, #95	; 0x5f
 80085b4:	18fb      	adds	r3, r7, r3
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085ba:	235f      	movs	r3, #95	; 0x5f
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <f_open+0x3da>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80085ca:	235f      	movs	r3, #95	; 0x5f
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	781b      	ldrb	r3, [r3, #0]
}
 80085d0:	0018      	movs	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b019      	add	sp, #100	; 0x64
 80085d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80085d8:	b5b0      	push	{r4, r5, r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	252f      	movs	r5, #47	; 0x2f
 80085f4:	197c      	adds	r4, r7, r5
 80085f6:	2210      	movs	r2, #16
 80085f8:	18ba      	adds	r2, r7, r2
 80085fa:	0011      	movs	r1, r2
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7ff fd6f 	bl	80080e0 <validate>
 8008602:	0003      	movs	r3, r0
 8008604:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008606:	197b      	adds	r3, r7, r5
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d107      	bne.n	800861e <f_write+0x46>
 800860e:	197b      	adds	r3, r7, r5
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	7d52      	ldrb	r2, [r2, #21]
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	197b      	adds	r3, r7, r5
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <f_write+0x4e>
 800861e:	232f      	movs	r3, #47	; 0x2f
 8008620:	18fb      	adds	r3, r7, r3
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	e14e      	b.n	80088c4 <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	7d1b      	ldrb	r3, [r3, #20]
 800862a:	001a      	movs	r2, r3
 800862c:	2302      	movs	r3, #2
 800862e:	4013      	ands	r3, r2
 8008630:	d101      	bne.n	8008636 <f_write+0x5e>
 8008632:	2307      	movs	r3, #7
 8008634:	e146      	b.n	80088c4 <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	18d2      	adds	r2, r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	429a      	cmp	r2, r3
 8008644:	d300      	bcc.n	8008648 <f_write+0x70>
 8008646:	e12f      	b.n	80088a8 <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	43db      	mvns	r3, r3
 800864e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008650:	e12a      	b.n	80088a8 <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	05db      	lsls	r3, r3, #23
 8008658:	0ddb      	lsrs	r3, r3, #23
 800865a:	d000      	beq.n	800865e <f_write+0x86>
 800865c:	e0e3      	b.n	8008826 <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	0a5b      	lsrs	r3, r3, #9
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	8952      	ldrh	r2, [r2, #10]
 8008668:	3a01      	subs	r2, #1
 800866a:	4013      	ands	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d146      	bne.n	8008702 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11e      	bne.n	80086c6 <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2100      	movs	r1, #0
 800868c:	0018      	movs	r0, r3
 800868e:	f7fe fd8a 	bl	80071a6 <create_chain>
 8008692:	0003      	movs	r3, r0
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
 8008696:	e016      	b.n	80086c6 <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	0011      	movs	r1, r2
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7fe fe22 	bl	80072f2 <clmt_clust>
 80086ae:	0003      	movs	r3, r0
 80086b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b2:	e008      	b.n	80086c6 <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	0019      	movs	r1, r3
 80086bc:	0010      	movs	r0, r2
 80086be:	f7fe fd72 	bl	80071a6 <create_chain>
 80086c2:	0003      	movs	r3, r0
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d100      	bne.n	80086ce <f_write+0xf6>
 80086cc:	e0f1      	b.n	80088b2 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d104      	bne.n	80086de <f_write+0x106>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2202      	movs	r2, #2
 80086d8:	755a      	strb	r2, [r3, #21]
 80086da:	2302      	movs	r3, #2
 80086dc:	e0f2      	b.n	80088c4 <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	3301      	adds	r3, #1
 80086e2:	d104      	bne.n	80086ee <f_write+0x116>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	755a      	strb	r2, [r3, #21]
 80086ea:	2301      	movs	r3, #1
 80086ec:	e0ea      	b.n	80088c4 <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <f_write+0x12a>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008700:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	7d1b      	ldrb	r3, [r3, #20]
 8008706:	b25b      	sxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	da17      	bge.n	800873c <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	7858      	ldrb	r0, [r3, #1]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3330      	adds	r3, #48	; 0x30
 8008714:	0019      	movs	r1, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	2301      	movs	r3, #1
 800871c:	f7fd ff5a 	bl	80065d4 <disk_write>
 8008720:	1e03      	subs	r3, r0, #0
 8008722:	d004      	beq.n	800872e <f_write+0x156>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	755a      	strb	r2, [r3, #21]
 800872a:	2301      	movs	r3, #1
 800872c:	e0ca      	b.n	80088c4 <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	7d1b      	ldrb	r3, [r3, #20]
 8008732:	227f      	movs	r2, #127	; 0x7f
 8008734:	4013      	ands	r3, r2
 8008736:	b2da      	uxtb	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	0019      	movs	r1, r3
 8008744:	0010      	movs	r0, r2
 8008746:	f7fe faf3 	bl	8006d30 <clust2sect>
 800874a:	0003      	movs	r3, r0
 800874c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <f_write+0x186>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	755a      	strb	r2, [r3, #21]
 800875a:	2302      	movs	r3, #2
 800875c:	e0b2      	b.n	80088c4 <f_write+0x2ec>
			sect += csect;
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	18d3      	adds	r3, r2, r3
 8008764:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0a5b      	lsrs	r3, r3, #9
 800876a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d03b      	beq.n	80087ea <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	18d3      	adds	r3, r2, r3
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	8952      	ldrh	r2, [r2, #10]
 800877c:	4293      	cmp	r3, r2
 800877e:	d905      	bls.n	800878c <f_write+0x1b4>
					cc = fs->csize - csect;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	895b      	ldrh	r3, [r3, #10]
 8008784:	001a      	movs	r2, r3
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	7858      	ldrb	r0, [r3, #1]
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	69f9      	ldr	r1, [r7, #28]
 8008796:	f7fd ff1d 	bl	80065d4 <disk_write>
 800879a:	1e03      	subs	r3, r0, #0
 800879c:	d004      	beq.n	80087a8 <f_write+0x1d0>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	755a      	strb	r2, [r3, #21]
 80087a4:	2301      	movs	r3, #1
 80087a6:	e08d      	b.n	80088c4 <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	6a3a      	ldr	r2, [r7, #32]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d915      	bls.n	80087e2 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3330      	adds	r3, #48	; 0x30
 80087ba:	0018      	movs	r0, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	025b      	lsls	r3, r3, #9
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	18d3      	adds	r3, r2, r3
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	0019      	movs	r1, r3
 80087d0:	f7fd ffd4 	bl	800677c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	7d1b      	ldrb	r3, [r3, #20]
 80087d8:	227f      	movs	r2, #127	; 0x7f
 80087da:	4013      	ands	r3, r2
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	025b      	lsls	r3, r3, #9
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80087e8:	e040      	b.n	800886c <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d015      	beq.n	8008820 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d20f      	bcs.n	8008820 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	7858      	ldrb	r0, [r3, #1]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3330      	adds	r3, #48	; 0x30
 8008808:	0019      	movs	r1, r3
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	2301      	movs	r3, #1
 800880e:	f7fd feb9 	bl	8006584 <disk_read>
 8008812:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8008814:	d004      	beq.n	8008820 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	755a      	strb	r2, [r3, #21]
 800881c:	2301      	movs	r3, #1
 800881e:	e051      	b.n	80088c4 <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	05db      	lsls	r3, r3, #23
 800882c:	0ddb      	lsrs	r3, r3, #23
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d901      	bls.n	8008842 <f_write+0x26a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3330      	adds	r3, #48	; 0x30
 8008846:	001a      	movs	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	05db      	lsls	r3, r3, #23
 800884e:	0ddb      	lsrs	r3, r3, #23
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008854:	69f9      	ldr	r1, [r7, #28]
 8008856:	0018      	movs	r0, r3
 8008858:	f7fd ff90 	bl	800677c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7d1b      	ldrb	r3, [r3, #20]
 8008860:	2280      	movs	r2, #128	; 0x80
 8008862:	4252      	negs	r2, r2
 8008864:	4313      	orrs	r3, r2
 8008866:	b2da      	uxtb	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	18d3      	adds	r3, r2, r3
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	699a      	ldr	r2, [r3, #24]
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	18d2      	adds	r2, r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	619a      	str	r2, [r3, #24]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68d9      	ldr	r1, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	699a      	ldr	r2, [r3, #24]
 8008888:	000b      	movs	r3, r1
 800888a:	4293      	cmp	r3, r2
 800888c:	d200      	bcs.n	8008890 <f_write+0x2b8>
 800888e:	0013      	movs	r3, r2
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	60d3      	str	r3, [r2, #12]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	18d2      	adds	r2, r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d000      	beq.n	80088b0 <f_write+0x2d8>
 80088ae:	e6d0      	b.n	8008652 <f_write+0x7a>
 80088b0:	e000      	b.n	80088b4 <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088b2:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	2240      	movs	r2, #64	; 0x40
 80088ba:	4313      	orrs	r3, r2
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b00c      	add	sp, #48	; 0x30
 80088ca:	bdb0      	pop	{r4, r5, r7, pc}

080088cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088cc:	b5b0      	push	{r4, r5, r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2517      	movs	r5, #23
 80088d8:	197c      	adds	r4, r7, r5
 80088da:	2208      	movs	r2, #8
 80088dc:	18ba      	adds	r2, r7, r2
 80088de:	0011      	movs	r1, r2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7ff fbfd 	bl	80080e0 <validate>
 80088e6:	0003      	movs	r3, r0
 80088e8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80088ea:	197b      	adds	r3, r7, r5
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d16e      	bne.n	80089d0 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	001a      	movs	r2, r3
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	4013      	ands	r3, r2
 80088fc:	d068      	beq.n	80089d0 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7d1b      	ldrb	r3, [r3, #20]
 8008902:	b25b      	sxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	da14      	bge.n	8008932 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	7858      	ldrb	r0, [r3, #1]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3330      	adds	r3, #48	; 0x30
 8008910:	0019      	movs	r1, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	2301      	movs	r3, #1
 8008918:	f7fd fe5c 	bl	80065d4 <disk_write>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d001      	beq.n	8008924 <f_sync+0x58>
 8008920:	2301      	movs	r3, #1
 8008922:	e058      	b.n	80089d6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7d1b      	ldrb	r3, [r3, #20]
 8008928:	227f      	movs	r2, #127	; 0x7f
 800892a:	4013      	ands	r3, r2
 800892c:	b2da      	uxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008932:	f7fc fffd 	bl	8005930 <get_fattime>
 8008936:	0003      	movs	r3, r0
 8008938:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2517      	movs	r5, #23
 8008942:	197c      	adds	r4, r7, r5
 8008944:	0019      	movs	r1, r3
 8008946:	0010      	movs	r0, r2
 8008948:	f7fe f940 	bl	8006bcc <move_window>
 800894c:	0003      	movs	r3, r0
 800894e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8008950:	002c      	movs	r4, r5
 8008952:	193b      	adds	r3, r7, r4
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d13a      	bne.n	80089d0 <f_sync+0x104>
					dir = fp->dir_ptr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	330b      	adds	r3, #11
 8008964:	781a      	ldrb	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	330b      	adds	r3, #11
 800896a:	2120      	movs	r1, #32
 800896c:	430a      	orrs	r2, r1
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	0019      	movs	r1, r3
 800897e:	f7fe feab 	bl	80076d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	331c      	adds	r3, #28
 8008986:	001a      	movs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	0019      	movs	r1, r3
 800898e:	0010      	movs	r0, r2
 8008990:	f7fd feca 	bl	8006728 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3316      	adds	r3, #22
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f7fd fec3 	bl	8006728 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3312      	adds	r3, #18
 80089a6:	2100      	movs	r1, #0
 80089a8:	0018      	movs	r0, r3
 80089aa:	f7fd fe9f 	bl	80066ec <st_word>
					fs->wflag = 1;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2201      	movs	r2, #1
 80089b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	193c      	adds	r4, r7, r4
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7fe f93d 	bl	8006c38 <sync_fs>
 80089be:	0003      	movs	r3, r0
 80089c0:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	2240      	movs	r2, #64	; 0x40
 80089c8:	4393      	bics	r3, r2
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089d0:	2317      	movs	r3, #23
 80089d2:	18fb      	adds	r3, r7, r3
 80089d4:	781b      	ldrb	r3, [r3, #0]
}
 80089d6:	0018      	movs	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	b006      	add	sp, #24
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}

080089de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089de:	b5b0      	push	{r4, r5, r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089e6:	250f      	movs	r5, #15
 80089e8:	197c      	adds	r4, r7, r5
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7ff ff6d 	bl	80088cc <f_sync>
 80089f2:	0003      	movs	r3, r0
 80089f4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80089f6:	197b      	adds	r3, r7, r5
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11c      	bne.n	8008a38 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	197c      	adds	r4, r7, r5
 8008a02:	2208      	movs	r2, #8
 8008a04:	18ba      	adds	r2, r7, r2
 8008a06:	0011      	movs	r1, r2
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f7ff fb69 	bl	80080e0 <validate>
 8008a0e:	0003      	movs	r3, r0
 8008a10:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008a12:	197b      	adds	r3, r7, r5
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10e      	bne.n	8008a38 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	197c      	adds	r4, r7, r5
 8008a20:	0018      	movs	r0, r3
 8008a22:	f7fe f821 	bl	8006a68 <dec_lock>
 8008a26:	0003      	movs	r3, r0
 8008a28:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008a2a:	197b      	adds	r3, r7, r5
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a38:	230f      	movs	r3, #15
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	781b      	ldrb	r3, [r3, #0]
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b004      	add	sp, #16
 8008a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008a48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	1dfb      	adds	r3, r7, #7
 8008a54:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008a56:	2417      	movs	r4, #23
 8008a58:	193b      	adds	r3, r7, r4
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008a5e:	2016      	movs	r0, #22
 8008a60:	183b      	adds	r3, r7, r0
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8008a66:	4b21      	ldr	r3, [pc, #132]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a68:	7a5b      	ldrb	r3, [r3, #9]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d136      	bne.n	8008ade <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a70:	4b1e      	ldr	r3, [pc, #120]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a72:	7a5b      	ldrb	r3, [r3, #9]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	001a      	movs	r2, r3
 8008a78:	4b1c      	ldr	r3, [pc, #112]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a80:	7a5b      	ldrb	r3, [r3, #9]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	4a19      	ldr	r2, [pc, #100]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8008a90:	4b16      	ldr	r3, [pc, #88]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a92:	7a5b      	ldrb	r3, [r3, #9]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	001a      	movs	r2, r3
 8008a98:	4b14      	ldr	r3, [pc, #80]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	1dfa      	adds	r2, r7, #7
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008aa4:	7a5b      	ldrb	r3, [r3, #9]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	b2d1      	uxtb	r1, r2
 8008aac:	4a0f      	ldr	r2, [pc, #60]	; (8008aec <FATFS_LinkDriverEx+0xa4>)
 8008aae:	7251      	strb	r1, [r2, #9]
 8008ab0:	183a      	adds	r2, r7, r0
 8008ab2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8008ab4:	183b      	adds	r3, r7, r0
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	3330      	adds	r3, #48	; 0x30
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	223a      	movs	r2, #58	; 0x3a
 8008ac6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3302      	adds	r3, #2
 8008acc:	222f      	movs	r2, #47	; 0x2f
 8008ace:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ad8:	193b      	adds	r3, r7, r4
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008ade:	2317      	movs	r3, #23
 8008ae0:	18fb      	adds	r3, r7, r3
 8008ae2:	781b      	ldrb	r3, [r3, #0]
}
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	b007      	add	sp, #28
 8008aea:	bd90      	pop	{r4, r7, pc}
 8008aec:	200003a8 	.word	0x200003a8

08008af0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7ff ffa1 	bl	8008a48 <FATFS_LinkDriverEx>
 8008b06:	0003      	movs	r3, r0
}
 8008b08:	0018      	movs	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <siprintf>:
 8008b10:	b40e      	push	{r1, r2, r3}
 8008b12:	b500      	push	{lr}
 8008b14:	490b      	ldr	r1, [pc, #44]	; (8008b44 <siprintf+0x34>)
 8008b16:	b09c      	sub	sp, #112	; 0x70
 8008b18:	ab1d      	add	r3, sp, #116	; 0x74
 8008b1a:	9002      	str	r0, [sp, #8]
 8008b1c:	9006      	str	r0, [sp, #24]
 8008b1e:	9107      	str	r1, [sp, #28]
 8008b20:	9104      	str	r1, [sp, #16]
 8008b22:	4809      	ldr	r0, [pc, #36]	; (8008b48 <siprintf+0x38>)
 8008b24:	4909      	ldr	r1, [pc, #36]	; (8008b4c <siprintf+0x3c>)
 8008b26:	cb04      	ldmia	r3!, {r2}
 8008b28:	9105      	str	r1, [sp, #20]
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	a902      	add	r1, sp, #8
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f000 f9ac 	bl	8008e8c <_svfiprintf_r>
 8008b34:	2200      	movs	r2, #0
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	b01c      	add	sp, #112	; 0x70
 8008b3c:	bc08      	pop	{r3}
 8008b3e:	b003      	add	sp, #12
 8008b40:	4718      	bx	r3
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	7fffffff 	.word	0x7fffffff
 8008b48:	20000074 	.word	0x20000074
 8008b4c:	ffff0208 	.word	0xffff0208

08008b50 <memset>:
 8008b50:	0003      	movs	r3, r0
 8008b52:	1882      	adds	r2, r0, r2
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	7019      	strb	r1, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <__errno>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	; (8008b68 <__errno+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	4770      	bx	lr
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	20000074 	.word	0x20000074

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	2600      	movs	r6, #0
 8008b70:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <__libc_init_array+0x38>)
 8008b72:	4d0d      	ldr	r5, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b74:	1b64      	subs	r4, r4, r5
 8008b76:	10a4      	asrs	r4, r4, #2
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	f000 fc6d 	bl	800945c <_init>
 8008b82:	4c0a      	ldr	r4, [pc, #40]	; (8008bac <__libc_init_array+0x40>)
 8008b84:	4d0a      	ldr	r5, [pc, #40]	; (8008bb0 <__libc_init_array+0x44>)
 8008b86:	1b64      	subs	r4, r4, r5
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	00b3      	lsls	r3, r6, #2
 8008b92:	58eb      	ldr	r3, [r5, r3]
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	00b3      	lsls	r3, r6, #2
 8008b9c:	58eb      	ldr	r3, [r5, r3]
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08009e00 	.word	0x08009e00
 8008ba8:	08009e00 	.word	0x08009e00
 8008bac:	08009e04 	.word	0x08009e04
 8008bb0:	08009e00 	.word	0x08009e00

08008bb4 <__retarget_lock_acquire_recursive>:
 8008bb4:	4770      	bx	lr

08008bb6 <__retarget_lock_release_recursive>:
 8008bb6:	4770      	bx	lr

08008bb8 <memcpy>:
 8008bb8:	2300      	movs	r3, #0
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d100      	bne.n	8008bc2 <memcpy+0xa>
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	5ccc      	ldrb	r4, [r1, r3]
 8008bc4:	54c4      	strb	r4, [r0, r3]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	e7f8      	b.n	8008bbc <memcpy+0x4>
	...

08008bcc <_free_r>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	0005      	movs	r5, r0
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d010      	beq.n	8008bf6 <_free_r+0x2a>
 8008bd4:	1f0c      	subs	r4, r1, #4
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da00      	bge.n	8008bde <_free_r+0x12>
 8008bdc:	18e4      	adds	r4, r4, r3
 8008bde:	0028      	movs	r0, r5
 8008be0:	f000 f8e2 	bl	8008da8 <__malloc_lock>
 8008be4:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <_free_r+0x90>)
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <_free_r+0x2c>
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	6014      	str	r4, [r2, #0]
 8008bf0:	0028      	movs	r0, r5
 8008bf2:	f000 f8e1 	bl	8008db8 <__malloc_unlock>
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d908      	bls.n	8008c0e <_free_r+0x42>
 8008bfc:	6820      	ldr	r0, [r4, #0]
 8008bfe:	1821      	adds	r1, r4, r0
 8008c00:	428b      	cmp	r3, r1
 8008c02:	d1f3      	bne.n	8008bec <_free_r+0x20>
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	1809      	adds	r1, r1, r0
 8008c0a:	6021      	str	r1, [r4, #0]
 8008c0c:	e7ee      	b.n	8008bec <_free_r+0x20>
 8008c0e:	001a      	movs	r2, r3
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <_free_r+0x4e>
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	d9f9      	bls.n	8008c0e <_free_r+0x42>
 8008c1a:	6811      	ldr	r1, [r2, #0]
 8008c1c:	1850      	adds	r0, r2, r1
 8008c1e:	42a0      	cmp	r0, r4
 8008c20:	d10b      	bne.n	8008c3a <_free_r+0x6e>
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	1809      	adds	r1, r1, r0
 8008c26:	1850      	adds	r0, r2, r1
 8008c28:	6011      	str	r1, [r2, #0]
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	d1e0      	bne.n	8008bf0 <_free_r+0x24>
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	1841      	adds	r1, r0, r1
 8008c34:	6011      	str	r1, [r2, #0]
 8008c36:	6053      	str	r3, [r2, #4]
 8008c38:	e7da      	b.n	8008bf0 <_free_r+0x24>
 8008c3a:	42a0      	cmp	r0, r4
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x78>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	e7d5      	b.n	8008bf0 <_free_r+0x24>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	d103      	bne.n	8008c54 <_free_r+0x88>
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	1809      	adds	r1, r1, r0
 8008c52:	6021      	str	r1, [r4, #0]
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6054      	str	r4, [r2, #4]
 8008c58:	e7ca      	b.n	8008bf0 <_free_r+0x24>
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	200004f4 	.word	0x200004f4

08008c60 <sbrk_aligned>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4e0f      	ldr	r6, [pc, #60]	; (8008ca0 <sbrk_aligned+0x40>)
 8008c64:	000d      	movs	r5, r1
 8008c66:	6831      	ldr	r1, [r6, #0]
 8008c68:	0004      	movs	r4, r0
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	d102      	bne.n	8008c74 <sbrk_aligned+0x14>
 8008c6e:	f000 fba1 	bl	80093b4 <_sbrk_r>
 8008c72:	6030      	str	r0, [r6, #0]
 8008c74:	0029      	movs	r1, r5
 8008c76:	0020      	movs	r0, r4
 8008c78:	f000 fb9c 	bl	80093b4 <_sbrk_r>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d00a      	beq.n	8008c96 <sbrk_aligned+0x36>
 8008c80:	2303      	movs	r3, #3
 8008c82:	1cc5      	adds	r5, r0, #3
 8008c84:	439d      	bics	r5, r3
 8008c86:	42a8      	cmp	r0, r5
 8008c88:	d007      	beq.n	8008c9a <sbrk_aligned+0x3a>
 8008c8a:	1a29      	subs	r1, r5, r0
 8008c8c:	0020      	movs	r0, r4
 8008c8e:	f000 fb91 	bl	80093b4 <_sbrk_r>
 8008c92:	3001      	adds	r0, #1
 8008c94:	d101      	bne.n	8008c9a <sbrk_aligned+0x3a>
 8008c96:	2501      	movs	r5, #1
 8008c98:	426d      	negs	r5, r5
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	200004f8 	.word	0x200004f8

08008ca4 <_malloc_r>:
 8008ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	1ccb      	adds	r3, r1, #3
 8008caa:	4393      	bics	r3, r2
 8008cac:	3308      	adds	r3, #8
 8008cae:	0006      	movs	r6, r0
 8008cb0:	001f      	movs	r7, r3
 8008cb2:	2b0c      	cmp	r3, #12
 8008cb4:	d238      	bcs.n	8008d28 <_malloc_r+0x84>
 8008cb6:	270c      	movs	r7, #12
 8008cb8:	42b9      	cmp	r1, r7
 8008cba:	d837      	bhi.n	8008d2c <_malloc_r+0x88>
 8008cbc:	0030      	movs	r0, r6
 8008cbe:	f000 f873 	bl	8008da8 <__malloc_lock>
 8008cc2:	4b38      	ldr	r3, [pc, #224]	; (8008da4 <_malloc_r+0x100>)
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	001c      	movs	r4, r3
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	d133      	bne.n	8008d36 <_malloc_r+0x92>
 8008cce:	0039      	movs	r1, r7
 8008cd0:	0030      	movs	r0, r6
 8008cd2:	f7ff ffc5 	bl	8008c60 <sbrk_aligned>
 8008cd6:	0004      	movs	r4, r0
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d15e      	bne.n	8008d9a <_malloc_r+0xf6>
 8008cdc:	9b00      	ldr	r3, [sp, #0]
 8008cde:	681c      	ldr	r4, [r3, #0]
 8008ce0:	0025      	movs	r5, r4
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	d14e      	bne.n	8008d84 <_malloc_r+0xe0>
 8008ce6:	2c00      	cmp	r4, #0
 8008ce8:	d051      	beq.n	8008d8e <_malloc_r+0xea>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	0029      	movs	r1, r5
 8008cee:	18e3      	adds	r3, r4, r3
 8008cf0:	0030      	movs	r0, r6
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	f000 fb5e 	bl	80093b4 <_sbrk_r>
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	d147      	bne.n	8008d8e <_malloc_r+0xea>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	0030      	movs	r0, r6
 8008d02:	1aff      	subs	r7, r7, r3
 8008d04:	0039      	movs	r1, r7
 8008d06:	f7ff ffab 	bl	8008c60 <sbrk_aligned>
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d03f      	beq.n	8008d8e <_malloc_r+0xea>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	19db      	adds	r3, r3, r7
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	9b00      	ldr	r3, [sp, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d040      	beq.n	8008d9e <_malloc_r+0xfa>
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	42a2      	cmp	r2, r4
 8008d20:	d133      	bne.n	8008d8a <_malloc_r+0xe6>
 8008d22:	2200      	movs	r2, #0
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	e014      	b.n	8008d52 <_malloc_r+0xae>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dac5      	bge.n	8008cb8 <_malloc_r+0x14>
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	2500      	movs	r5, #0
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	0028      	movs	r0, r5
 8008d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d36:	6821      	ldr	r1, [r4, #0]
 8008d38:	1bc9      	subs	r1, r1, r7
 8008d3a:	d420      	bmi.n	8008d7e <_malloc_r+0xda>
 8008d3c:	290b      	cmp	r1, #11
 8008d3e:	d918      	bls.n	8008d72 <_malloc_r+0xce>
 8008d40:	19e2      	adds	r2, r4, r7
 8008d42:	6027      	str	r7, [r4, #0]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d112      	bne.n	8008d6e <_malloc_r+0xca>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	6011      	str	r1, [r2, #0]
 8008d50:	6053      	str	r3, [r2, #4]
 8008d52:	0030      	movs	r0, r6
 8008d54:	0025      	movs	r5, r4
 8008d56:	f000 f82f 	bl	8008db8 <__malloc_unlock>
 8008d5a:	2207      	movs	r2, #7
 8008d5c:	350b      	adds	r5, #11
 8008d5e:	1d23      	adds	r3, r4, #4
 8008d60:	4395      	bics	r5, r2
 8008d62:	1aea      	subs	r2, r5, r3
 8008d64:	429d      	cmp	r5, r3
 8008d66:	d0e4      	beq.n	8008d32 <_malloc_r+0x8e>
 8008d68:	1b5b      	subs	r3, r3, r5
 8008d6a:	50a3      	str	r3, [r4, r2]
 8008d6c:	e7e1      	b.n	8008d32 <_malloc_r+0x8e>
 8008d6e:	605a      	str	r2, [r3, #4]
 8008d70:	e7ec      	b.n	8008d4c <_malloc_r+0xa8>
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d1d5      	bne.n	8008d24 <_malloc_r+0x80>
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	e7e9      	b.n	8008d52 <_malloc_r+0xae>
 8008d7e:	0023      	movs	r3, r4
 8008d80:	6864      	ldr	r4, [r4, #4]
 8008d82:	e7a2      	b.n	8008cca <_malloc_r+0x26>
 8008d84:	002c      	movs	r4, r5
 8008d86:	686d      	ldr	r5, [r5, #4]
 8008d88:	e7ab      	b.n	8008ce2 <_malloc_r+0x3e>
 8008d8a:	0013      	movs	r3, r2
 8008d8c:	e7c4      	b.n	8008d18 <_malloc_r+0x74>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	0030      	movs	r0, r6
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	f000 f810 	bl	8008db8 <__malloc_unlock>
 8008d98:	e7cb      	b.n	8008d32 <_malloc_r+0x8e>
 8008d9a:	6027      	str	r7, [r4, #0]
 8008d9c:	e7d9      	b.n	8008d52 <_malloc_r+0xae>
 8008d9e:	605b      	str	r3, [r3, #4]
 8008da0:	deff      	udf	#255	; 0xff
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	200004f4 	.word	0x200004f4

08008da8 <__malloc_lock>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	4802      	ldr	r0, [pc, #8]	; (8008db4 <__malloc_lock+0xc>)
 8008dac:	f7ff ff02 	bl	8008bb4 <__retarget_lock_acquire_recursive>
 8008db0:	bd10      	pop	{r4, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	200004f0 	.word	0x200004f0

08008db8 <__malloc_unlock>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	4802      	ldr	r0, [pc, #8]	; (8008dc4 <__malloc_unlock+0xc>)
 8008dbc:	f7ff fefb 	bl	8008bb6 <__retarget_lock_release_recursive>
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	200004f0 	.word	0x200004f0

08008dc8 <__ssputs_r>:
 8008dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	9203      	str	r2, [sp, #12]
 8008dd0:	688e      	ldr	r6, [r1, #8]
 8008dd2:	9a01      	ldr	r2, [sp, #4]
 8008dd4:	0007      	movs	r7, r0
 8008dd6:	000c      	movs	r4, r1
 8008dd8:	680b      	ldr	r3, [r1, #0]
 8008dda:	4296      	cmp	r6, r2
 8008ddc:	d831      	bhi.n	8008e42 <__ssputs_r+0x7a>
 8008dde:	898a      	ldrh	r2, [r1, #12]
 8008de0:	2190      	movs	r1, #144	; 0x90
 8008de2:	00c9      	lsls	r1, r1, #3
 8008de4:	420a      	tst	r2, r1
 8008de6:	d029      	beq.n	8008e3c <__ssputs_r+0x74>
 8008de8:	2003      	movs	r0, #3
 8008dea:	6921      	ldr	r1, [r4, #16]
 8008dec:	1a5b      	subs	r3, r3, r1
 8008dee:	9302      	str	r3, [sp, #8]
 8008df0:	6963      	ldr	r3, [r4, #20]
 8008df2:	4343      	muls	r3, r0
 8008df4:	0fdd      	lsrs	r5, r3, #31
 8008df6:	18ed      	adds	r5, r5, r3
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	9802      	ldr	r0, [sp, #8]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	181b      	adds	r3, r3, r0
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	42ab      	cmp	r3, r5
 8008e04:	d900      	bls.n	8008e08 <__ssputs_r+0x40>
 8008e06:	001d      	movs	r5, r3
 8008e08:	0552      	lsls	r2, r2, #21
 8008e0a:	d529      	bpl.n	8008e60 <__ssputs_r+0x98>
 8008e0c:	0029      	movs	r1, r5
 8008e0e:	0038      	movs	r0, r7
 8008e10:	f7ff ff48 	bl	8008ca4 <_malloc_r>
 8008e14:	1e06      	subs	r6, r0, #0
 8008e16:	d02d      	beq.n	8008e74 <__ssputs_r+0xac>
 8008e18:	9a02      	ldr	r2, [sp, #8]
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	f7ff fecc 	bl	8008bb8 <memcpy>
 8008e20:	89a2      	ldrh	r2, [r4, #12]
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <__ssputs_r+0xc0>)
 8008e24:	401a      	ands	r2, r3
 8008e26:	2380      	movs	r3, #128	; 0x80
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	6126      	str	r6, [r4, #16]
 8008e30:	18f6      	adds	r6, r6, r3
 8008e32:	6026      	str	r6, [r4, #0]
 8008e34:	6165      	str	r5, [r4, #20]
 8008e36:	9e01      	ldr	r6, [sp, #4]
 8008e38:	1aed      	subs	r5, r5, r3
 8008e3a:	60a5      	str	r5, [r4, #8]
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	d900      	bls.n	8008e44 <__ssputs_r+0x7c>
 8008e42:	9e01      	ldr	r6, [sp, #4]
 8008e44:	0032      	movs	r2, r6
 8008e46:	9903      	ldr	r1, [sp, #12]
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	f000 fa9f 	bl	800938c <memmove>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	1b9b      	subs	r3, r3, r6
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	199b      	adds	r3, r3, r6
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	b005      	add	sp, #20
 8008e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e60:	002a      	movs	r2, r5
 8008e62:	0038      	movs	r0, r7
 8008e64:	f000 fac3 	bl	80093ee <_realloc_r>
 8008e68:	1e06      	subs	r6, r0, #0
 8008e6a:	d1df      	bne.n	8008e2c <__ssputs_r+0x64>
 8008e6c:	0038      	movs	r0, r7
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	f7ff feac 	bl	8008bcc <_free_r>
 8008e74:	230c      	movs	r3, #12
 8008e76:	2001      	movs	r0, #1
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	89a2      	ldrh	r2, [r4, #12]
 8008e7c:	3334      	adds	r3, #52	; 0x34
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	4240      	negs	r0, r0
 8008e84:	e7ea      	b.n	8008e5c <__ssputs_r+0x94>
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	fffffb7f 	.word	0xfffffb7f

08008e8c <_svfiprintf_r>:
 8008e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e8e:	b0a1      	sub	sp, #132	; 0x84
 8008e90:	9003      	str	r0, [sp, #12]
 8008e92:	001d      	movs	r5, r3
 8008e94:	898b      	ldrh	r3, [r1, #12]
 8008e96:	000f      	movs	r7, r1
 8008e98:	0016      	movs	r6, r2
 8008e9a:	061b      	lsls	r3, r3, #24
 8008e9c:	d511      	bpl.n	8008ec2 <_svfiprintf_r+0x36>
 8008e9e:	690b      	ldr	r3, [r1, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10e      	bne.n	8008ec2 <_svfiprintf_r+0x36>
 8008ea4:	2140      	movs	r1, #64	; 0x40
 8008ea6:	f7ff fefd 	bl	8008ca4 <_malloc_r>
 8008eaa:	6038      	str	r0, [r7, #0]
 8008eac:	6138      	str	r0, [r7, #16]
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d105      	bne.n	8008ebe <_svfiprintf_r+0x32>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	9a03      	ldr	r2, [sp, #12]
 8008eb6:	3801      	subs	r0, #1
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	b021      	add	sp, #132	; 0x84
 8008ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ebe:	2340      	movs	r3, #64	; 0x40
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	ac08      	add	r4, sp, #32
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	3320      	adds	r3, #32
 8008eca:	7663      	strb	r3, [r4, #25]
 8008ecc:	3310      	adds	r3, #16
 8008ece:	76a3      	strb	r3, [r4, #26]
 8008ed0:	9507      	str	r5, [sp, #28]
 8008ed2:	0035      	movs	r5, r6
 8008ed4:	782b      	ldrb	r3, [r5, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <_svfiprintf_r+0x52>
 8008eda:	2b25      	cmp	r3, #37	; 0x25
 8008edc:	d148      	bne.n	8008f70 <_svfiprintf_r+0xe4>
 8008ede:	1bab      	subs	r3, r5, r6
 8008ee0:	9305      	str	r3, [sp, #20]
 8008ee2:	42b5      	cmp	r5, r6
 8008ee4:	d00b      	beq.n	8008efe <_svfiprintf_r+0x72>
 8008ee6:	0032      	movs	r2, r6
 8008ee8:	0039      	movs	r1, r7
 8008eea:	9803      	ldr	r0, [sp, #12]
 8008eec:	f7ff ff6c 	bl	8008dc8 <__ssputs_r>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d100      	bne.n	8008ef6 <_svfiprintf_r+0x6a>
 8008ef4:	e0af      	b.n	8009056 <_svfiprintf_r+0x1ca>
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	9a05      	ldr	r2, [sp, #20]
 8008efa:	189b      	adds	r3, r3, r2
 8008efc:	6163      	str	r3, [r4, #20]
 8008efe:	782b      	ldrb	r3, [r5, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d100      	bne.n	8008f06 <_svfiprintf_r+0x7a>
 8008f04:	e0a7      	b.n	8009056 <_svfiprintf_r+0x1ca>
 8008f06:	2201      	movs	r2, #1
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4252      	negs	r2, r2
 8008f0c:	6062      	str	r2, [r4, #4]
 8008f0e:	a904      	add	r1, sp, #16
 8008f10:	3254      	adds	r2, #84	; 0x54
 8008f12:	1852      	adds	r2, r2, r1
 8008f14:	1c6e      	adds	r6, r5, #1
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	60e3      	str	r3, [r4, #12]
 8008f1a:	60a3      	str	r3, [r4, #8]
 8008f1c:	7013      	strb	r3, [r2, #0]
 8008f1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f20:	4b55      	ldr	r3, [pc, #340]	; (8009078 <_svfiprintf_r+0x1ec>)
 8008f22:	2205      	movs	r2, #5
 8008f24:	0018      	movs	r0, r3
 8008f26:	7831      	ldrb	r1, [r6, #0]
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	f000 fa55 	bl	80093d8 <memchr>
 8008f2e:	1c75      	adds	r5, r6, #1
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d11f      	bne.n	8008f74 <_svfiprintf_r+0xe8>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	06d3      	lsls	r3, r2, #27
 8008f38:	d504      	bpl.n	8008f44 <_svfiprintf_r+0xb8>
 8008f3a:	2353      	movs	r3, #83	; 0x53
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	185b      	adds	r3, r3, r1
 8008f40:	2120      	movs	r1, #32
 8008f42:	7019      	strb	r1, [r3, #0]
 8008f44:	0713      	lsls	r3, r2, #28
 8008f46:	d504      	bpl.n	8008f52 <_svfiprintf_r+0xc6>
 8008f48:	2353      	movs	r3, #83	; 0x53
 8008f4a:	a904      	add	r1, sp, #16
 8008f4c:	185b      	adds	r3, r3, r1
 8008f4e:	212b      	movs	r1, #43	; 0x2b
 8008f50:	7019      	strb	r1, [r3, #0]
 8008f52:	7833      	ldrb	r3, [r6, #0]
 8008f54:	2b2a      	cmp	r3, #42	; 0x2a
 8008f56:	d016      	beq.n	8008f86 <_svfiprintf_r+0xfa>
 8008f58:	0035      	movs	r5, r6
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	200a      	movs	r0, #10
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	782a      	ldrb	r2, [r5, #0]
 8008f62:	1c6e      	adds	r6, r5, #1
 8008f64:	3a30      	subs	r2, #48	; 0x30
 8008f66:	2a09      	cmp	r2, #9
 8008f68:	d94e      	bls.n	8009008 <_svfiprintf_r+0x17c>
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d111      	bne.n	8008f92 <_svfiprintf_r+0x106>
 8008f6e:	e017      	b.n	8008fa0 <_svfiprintf_r+0x114>
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7af      	b.n	8008ed4 <_svfiprintf_r+0x48>
 8008f74:	9b05      	ldr	r3, [sp, #20]
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	1ac0      	subs	r0, r0, r3
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4083      	lsls	r3, r0
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	002e      	movs	r6, r5
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	e7cc      	b.n	8008f20 <_svfiprintf_r+0x94>
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9107      	str	r1, [sp, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	db01      	blt.n	8008f96 <_svfiprintf_r+0x10a>
 8008f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f94:	e004      	b.n	8008fa0 <_svfiprintf_r+0x114>
 8008f96:	425b      	negs	r3, r3
 8008f98:	60e3      	str	r3, [r4, #12]
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	782b      	ldrb	r3, [r5, #0]
 8008fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa4:	d10a      	bne.n	8008fbc <_svfiprintf_r+0x130>
 8008fa6:	786b      	ldrb	r3, [r5, #1]
 8008fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8008faa:	d135      	bne.n	8009018 <_svfiprintf_r+0x18c>
 8008fac:	9b07      	ldr	r3, [sp, #28]
 8008fae:	3502      	adds	r5, #2
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9207      	str	r2, [sp, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	db2b      	blt.n	8009012 <_svfiprintf_r+0x186>
 8008fba:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbc:	4e2f      	ldr	r6, [pc, #188]	; (800907c <_svfiprintf_r+0x1f0>)
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	0030      	movs	r0, r6
 8008fc2:	7829      	ldrb	r1, [r5, #0]
 8008fc4:	f000 fa08 	bl	80093d8 <memchr>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d006      	beq.n	8008fda <_svfiprintf_r+0x14e>
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	1b80      	subs	r0, r0, r6
 8008fd0:	4083      	lsls	r3, r0
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	7829      	ldrb	r1, [r5, #0]
 8008fdc:	2206      	movs	r2, #6
 8008fde:	4828      	ldr	r0, [pc, #160]	; (8009080 <_svfiprintf_r+0x1f4>)
 8008fe0:	1c6e      	adds	r6, r5, #1
 8008fe2:	7621      	strb	r1, [r4, #24]
 8008fe4:	f000 f9f8 	bl	80093d8 <memchr>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d03c      	beq.n	8009066 <_svfiprintf_r+0x1da>
 8008fec:	4b25      	ldr	r3, [pc, #148]	; (8009084 <_svfiprintf_r+0x1f8>)
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d125      	bne.n	800903e <_svfiprintf_r+0x1b2>
 8008ff2:	2207      	movs	r2, #7
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	3307      	adds	r3, #7
 8008ff8:	4393      	bics	r3, r2
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	6963      	ldr	r3, [r4, #20]
 8009000:	9a04      	ldr	r2, [sp, #16]
 8009002:	189b      	adds	r3, r3, r2
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	e764      	b.n	8008ed2 <_svfiprintf_r+0x46>
 8009008:	4343      	muls	r3, r0
 800900a:	0035      	movs	r5, r6
 800900c:	2101      	movs	r1, #1
 800900e:	189b      	adds	r3, r3, r2
 8009010:	e7a6      	b.n	8008f60 <_svfiprintf_r+0xd4>
 8009012:	2301      	movs	r3, #1
 8009014:	425b      	negs	r3, r3
 8009016:	e7d0      	b.n	8008fba <_svfiprintf_r+0x12e>
 8009018:	2300      	movs	r3, #0
 800901a:	200a      	movs	r0, #10
 800901c:	001a      	movs	r2, r3
 800901e:	3501      	adds	r5, #1
 8009020:	6063      	str	r3, [r4, #4]
 8009022:	7829      	ldrb	r1, [r5, #0]
 8009024:	1c6e      	adds	r6, r5, #1
 8009026:	3930      	subs	r1, #48	; 0x30
 8009028:	2909      	cmp	r1, #9
 800902a:	d903      	bls.n	8009034 <_svfiprintf_r+0x1a8>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0c5      	beq.n	8008fbc <_svfiprintf_r+0x130>
 8009030:	9209      	str	r2, [sp, #36]	; 0x24
 8009032:	e7c3      	b.n	8008fbc <_svfiprintf_r+0x130>
 8009034:	4342      	muls	r2, r0
 8009036:	0035      	movs	r5, r6
 8009038:	2301      	movs	r3, #1
 800903a:	1852      	adds	r2, r2, r1
 800903c:	e7f1      	b.n	8009022 <_svfiprintf_r+0x196>
 800903e:	aa07      	add	r2, sp, #28
 8009040:	9200      	str	r2, [sp, #0]
 8009042:	0021      	movs	r1, r4
 8009044:	003a      	movs	r2, r7
 8009046:	4b10      	ldr	r3, [pc, #64]	; (8009088 <_svfiprintf_r+0x1fc>)
 8009048:	9803      	ldr	r0, [sp, #12]
 800904a:	e000      	b.n	800904e <_svfiprintf_r+0x1c2>
 800904c:	bf00      	nop
 800904e:	9004      	str	r0, [sp, #16]
 8009050:	9b04      	ldr	r3, [sp, #16]
 8009052:	3301      	adds	r3, #1
 8009054:	d1d3      	bne.n	8008ffe <_svfiprintf_r+0x172>
 8009056:	89bb      	ldrh	r3, [r7, #12]
 8009058:	980d      	ldr	r0, [sp, #52]	; 0x34
 800905a:	065b      	lsls	r3, r3, #25
 800905c:	d400      	bmi.n	8009060 <_svfiprintf_r+0x1d4>
 800905e:	e72c      	b.n	8008eba <_svfiprintf_r+0x2e>
 8009060:	2001      	movs	r0, #1
 8009062:	4240      	negs	r0, r0
 8009064:	e729      	b.n	8008eba <_svfiprintf_r+0x2e>
 8009066:	aa07      	add	r2, sp, #28
 8009068:	9200      	str	r2, [sp, #0]
 800906a:	0021      	movs	r1, r4
 800906c:	003a      	movs	r2, r7
 800906e:	4b06      	ldr	r3, [pc, #24]	; (8009088 <_svfiprintf_r+0x1fc>)
 8009070:	9803      	ldr	r0, [sp, #12]
 8009072:	f000 f87b 	bl	800916c <_printf_i>
 8009076:	e7ea      	b.n	800904e <_svfiprintf_r+0x1c2>
 8009078:	08009dc4 	.word	0x08009dc4
 800907c:	08009dca 	.word	0x08009dca
 8009080:	08009dce 	.word	0x08009dce
 8009084:	00000000 	.word	0x00000000
 8009088:	08008dc9 	.word	0x08008dc9

0800908c <_printf_common>:
 800908c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800908e:	0016      	movs	r6, r2
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	688a      	ldr	r2, [r1, #8]
 8009094:	690b      	ldr	r3, [r1, #16]
 8009096:	000c      	movs	r4, r1
 8009098:	9000      	str	r0, [sp, #0]
 800909a:	4293      	cmp	r3, r2
 800909c:	da00      	bge.n	80090a0 <_printf_common+0x14>
 800909e:	0013      	movs	r3, r2
 80090a0:	0022      	movs	r2, r4
 80090a2:	6033      	str	r3, [r6, #0]
 80090a4:	3243      	adds	r2, #67	; 0x43
 80090a6:	7812      	ldrb	r2, [r2, #0]
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d001      	beq.n	80090b0 <_printf_common+0x24>
 80090ac:	3301      	adds	r3, #1
 80090ae:	6033      	str	r3, [r6, #0]
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	069b      	lsls	r3, r3, #26
 80090b4:	d502      	bpl.n	80090bc <_printf_common+0x30>
 80090b6:	6833      	ldr	r3, [r6, #0]
 80090b8:	3302      	adds	r3, #2
 80090ba:	6033      	str	r3, [r6, #0]
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	2306      	movs	r3, #6
 80090c0:	0015      	movs	r5, r2
 80090c2:	401d      	ands	r5, r3
 80090c4:	421a      	tst	r2, r3
 80090c6:	d027      	beq.n	8009118 <_printf_common+0x8c>
 80090c8:	0023      	movs	r3, r4
 80090ca:	3343      	adds	r3, #67	; 0x43
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	1e5a      	subs	r2, r3, #1
 80090d0:	4193      	sbcs	r3, r2
 80090d2:	6822      	ldr	r2, [r4, #0]
 80090d4:	0692      	lsls	r2, r2, #26
 80090d6:	d430      	bmi.n	800913a <_printf_common+0xae>
 80090d8:	0022      	movs	r2, r4
 80090da:	9901      	ldr	r1, [sp, #4]
 80090dc:	9800      	ldr	r0, [sp, #0]
 80090de:	9d08      	ldr	r5, [sp, #32]
 80090e0:	3243      	adds	r2, #67	; 0x43
 80090e2:	47a8      	blx	r5
 80090e4:	3001      	adds	r0, #1
 80090e6:	d025      	beq.n	8009134 <_printf_common+0xa8>
 80090e8:	2206      	movs	r2, #6
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	2500      	movs	r5, #0
 80090ee:	4013      	ands	r3, r2
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d105      	bne.n	8009100 <_printf_common+0x74>
 80090f4:	6833      	ldr	r3, [r6, #0]
 80090f6:	68e5      	ldr	r5, [r4, #12]
 80090f8:	1aed      	subs	r5, r5, r3
 80090fa:	43eb      	mvns	r3, r5
 80090fc:	17db      	asrs	r3, r3, #31
 80090fe:	401d      	ands	r5, r3
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	6922      	ldr	r2, [r4, #16]
 8009104:	4293      	cmp	r3, r2
 8009106:	dd01      	ble.n	800910c <_printf_common+0x80>
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	18ed      	adds	r5, r5, r3
 800910c:	2600      	movs	r6, #0
 800910e:	42b5      	cmp	r5, r6
 8009110:	d120      	bne.n	8009154 <_printf_common+0xc8>
 8009112:	2000      	movs	r0, #0
 8009114:	e010      	b.n	8009138 <_printf_common+0xac>
 8009116:	3501      	adds	r5, #1
 8009118:	68e3      	ldr	r3, [r4, #12]
 800911a:	6832      	ldr	r2, [r6, #0]
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	42ab      	cmp	r3, r5
 8009120:	ddd2      	ble.n	80090c8 <_printf_common+0x3c>
 8009122:	0022      	movs	r2, r4
 8009124:	2301      	movs	r3, #1
 8009126:	9901      	ldr	r1, [sp, #4]
 8009128:	9800      	ldr	r0, [sp, #0]
 800912a:	9f08      	ldr	r7, [sp, #32]
 800912c:	3219      	adds	r2, #25
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	d1f0      	bne.n	8009116 <_printf_common+0x8a>
 8009134:	2001      	movs	r0, #1
 8009136:	4240      	negs	r0, r0
 8009138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800913a:	2030      	movs	r0, #48	; 0x30
 800913c:	18e1      	adds	r1, r4, r3
 800913e:	3143      	adds	r1, #67	; 0x43
 8009140:	7008      	strb	r0, [r1, #0]
 8009142:	0021      	movs	r1, r4
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	3145      	adds	r1, #69	; 0x45
 8009148:	7809      	ldrb	r1, [r1, #0]
 800914a:	18a2      	adds	r2, r4, r2
 800914c:	3243      	adds	r2, #67	; 0x43
 800914e:	3302      	adds	r3, #2
 8009150:	7011      	strb	r1, [r2, #0]
 8009152:	e7c1      	b.n	80090d8 <_printf_common+0x4c>
 8009154:	0022      	movs	r2, r4
 8009156:	2301      	movs	r3, #1
 8009158:	9901      	ldr	r1, [sp, #4]
 800915a:	9800      	ldr	r0, [sp, #0]
 800915c:	9f08      	ldr	r7, [sp, #32]
 800915e:	321a      	adds	r2, #26
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	d0e6      	beq.n	8009134 <_printf_common+0xa8>
 8009166:	3601      	adds	r6, #1
 8009168:	e7d1      	b.n	800910e <_printf_common+0x82>
	...

0800916c <_printf_i>:
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	b08b      	sub	sp, #44	; 0x2c
 8009170:	9206      	str	r2, [sp, #24]
 8009172:	000a      	movs	r2, r1
 8009174:	3243      	adds	r2, #67	; 0x43
 8009176:	9307      	str	r3, [sp, #28]
 8009178:	9005      	str	r0, [sp, #20]
 800917a:	9204      	str	r2, [sp, #16]
 800917c:	7e0a      	ldrb	r2, [r1, #24]
 800917e:	000c      	movs	r4, r1
 8009180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009182:	2a78      	cmp	r2, #120	; 0x78
 8009184:	d809      	bhi.n	800919a <_printf_i+0x2e>
 8009186:	2a62      	cmp	r2, #98	; 0x62
 8009188:	d80b      	bhi.n	80091a2 <_printf_i+0x36>
 800918a:	2a00      	cmp	r2, #0
 800918c:	d100      	bne.n	8009190 <_printf_i+0x24>
 800918e:	e0be      	b.n	800930e <_printf_i+0x1a2>
 8009190:	497c      	ldr	r1, [pc, #496]	; (8009384 <_printf_i+0x218>)
 8009192:	9103      	str	r1, [sp, #12]
 8009194:	2a58      	cmp	r2, #88	; 0x58
 8009196:	d100      	bne.n	800919a <_printf_i+0x2e>
 8009198:	e093      	b.n	80092c2 <_printf_i+0x156>
 800919a:	0026      	movs	r6, r4
 800919c:	3642      	adds	r6, #66	; 0x42
 800919e:	7032      	strb	r2, [r6, #0]
 80091a0:	e022      	b.n	80091e8 <_printf_i+0x7c>
 80091a2:	0010      	movs	r0, r2
 80091a4:	3863      	subs	r0, #99	; 0x63
 80091a6:	2815      	cmp	r0, #21
 80091a8:	d8f7      	bhi.n	800919a <_printf_i+0x2e>
 80091aa:	f7f6 ffb5 	bl	8000118 <__gnu_thumb1_case_shi>
 80091ae:	0016      	.short	0x0016
 80091b0:	fff6001f 	.word	0xfff6001f
 80091b4:	fff6fff6 	.word	0xfff6fff6
 80091b8:	001ffff6 	.word	0x001ffff6
 80091bc:	fff6fff6 	.word	0xfff6fff6
 80091c0:	fff6fff6 	.word	0xfff6fff6
 80091c4:	003600a3 	.word	0x003600a3
 80091c8:	fff60083 	.word	0xfff60083
 80091cc:	00b4fff6 	.word	0x00b4fff6
 80091d0:	0036fff6 	.word	0x0036fff6
 80091d4:	fff6fff6 	.word	0xfff6fff6
 80091d8:	0087      	.short	0x0087
 80091da:	0026      	movs	r6, r4
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	3642      	adds	r6, #66	; 0x42
 80091e0:	1d11      	adds	r1, r2, #4
 80091e2:	6019      	str	r1, [r3, #0]
 80091e4:	6813      	ldr	r3, [r2, #0]
 80091e6:	7033      	strb	r3, [r6, #0]
 80091e8:	2301      	movs	r3, #1
 80091ea:	e0a2      	b.n	8009332 <_printf_i+0x1c6>
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	6809      	ldr	r1, [r1, #0]
 80091f0:	1d02      	adds	r2, r0, #4
 80091f2:	060d      	lsls	r5, r1, #24
 80091f4:	d50b      	bpl.n	800920e <_printf_i+0xa2>
 80091f6:	6805      	ldr	r5, [r0, #0]
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	da03      	bge.n	8009206 <_printf_i+0x9a>
 80091fe:	232d      	movs	r3, #45	; 0x2d
 8009200:	9a04      	ldr	r2, [sp, #16]
 8009202:	426d      	negs	r5, r5
 8009204:	7013      	strb	r3, [r2, #0]
 8009206:	4b5f      	ldr	r3, [pc, #380]	; (8009384 <_printf_i+0x218>)
 8009208:	270a      	movs	r7, #10
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	e01b      	b.n	8009246 <_printf_i+0xda>
 800920e:	6805      	ldr	r5, [r0, #0]
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	0649      	lsls	r1, r1, #25
 8009214:	d5f1      	bpl.n	80091fa <_printf_i+0x8e>
 8009216:	b22d      	sxth	r5, r5
 8009218:	e7ef      	b.n	80091fa <_printf_i+0x8e>
 800921a:	680d      	ldr	r5, [r1, #0]
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	1d08      	adds	r0, r1, #4
 8009220:	6018      	str	r0, [r3, #0]
 8009222:	062e      	lsls	r6, r5, #24
 8009224:	d501      	bpl.n	800922a <_printf_i+0xbe>
 8009226:	680d      	ldr	r5, [r1, #0]
 8009228:	e003      	b.n	8009232 <_printf_i+0xc6>
 800922a:	066d      	lsls	r5, r5, #25
 800922c:	d5fb      	bpl.n	8009226 <_printf_i+0xba>
 800922e:	680d      	ldr	r5, [r1, #0]
 8009230:	b2ad      	uxth	r5, r5
 8009232:	4b54      	ldr	r3, [pc, #336]	; (8009384 <_printf_i+0x218>)
 8009234:	2708      	movs	r7, #8
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	2a6f      	cmp	r2, #111	; 0x6f
 800923a:	d000      	beq.n	800923e <_printf_i+0xd2>
 800923c:	3702      	adds	r7, #2
 800923e:	0023      	movs	r3, r4
 8009240:	2200      	movs	r2, #0
 8009242:	3343      	adds	r3, #67	; 0x43
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	db03      	blt.n	8009256 <_printf_i+0xea>
 800924e:	2104      	movs	r1, #4
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	438a      	bics	r2, r1
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	2d00      	cmp	r5, #0
 8009258:	d102      	bne.n	8009260 <_printf_i+0xf4>
 800925a:	9e04      	ldr	r6, [sp, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <_printf_i+0x10e>
 8009260:	9e04      	ldr	r6, [sp, #16]
 8009262:	0028      	movs	r0, r5
 8009264:	0039      	movs	r1, r7
 8009266:	f7f6 ffe7 	bl	8000238 <__aeabi_uidivmod>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	3e01      	subs	r6, #1
 800926e:	5c5b      	ldrb	r3, [r3, r1]
 8009270:	7033      	strb	r3, [r6, #0]
 8009272:	002b      	movs	r3, r5
 8009274:	0005      	movs	r5, r0
 8009276:	429f      	cmp	r7, r3
 8009278:	d9f3      	bls.n	8009262 <_printf_i+0xf6>
 800927a:	2f08      	cmp	r7, #8
 800927c:	d109      	bne.n	8009292 <_printf_i+0x126>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d506      	bpl.n	8009292 <_printf_i+0x126>
 8009284:	6862      	ldr	r2, [r4, #4]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	dc02      	bgt.n	8009292 <_printf_i+0x126>
 800928c:	2330      	movs	r3, #48	; 0x30
 800928e:	3e01      	subs	r6, #1
 8009290:	7033      	strb	r3, [r6, #0]
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	1b9b      	subs	r3, r3, r6
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	0021      	movs	r1, r4
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	9805      	ldr	r0, [sp, #20]
 80092a0:	9b06      	ldr	r3, [sp, #24]
 80092a2:	aa09      	add	r2, sp, #36	; 0x24
 80092a4:	f7ff fef2 	bl	800908c <_printf_common>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d147      	bne.n	800933c <_printf_i+0x1d0>
 80092ac:	2001      	movs	r0, #1
 80092ae:	4240      	negs	r0, r0
 80092b0:	b00b      	add	sp, #44	; 0x2c
 80092b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b4:	2220      	movs	r2, #32
 80092b6:	6809      	ldr	r1, [r1, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	2278      	movs	r2, #120	; 0x78
 80092be:	4932      	ldr	r1, [pc, #200]	; (8009388 <_printf_i+0x21c>)
 80092c0:	9103      	str	r1, [sp, #12]
 80092c2:	0021      	movs	r1, r4
 80092c4:	3145      	adds	r1, #69	; 0x45
 80092c6:	700a      	strb	r2, [r1, #0]
 80092c8:	6819      	ldr	r1, [r3, #0]
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	c920      	ldmia	r1!, {r5}
 80092ce:	0610      	lsls	r0, r2, #24
 80092d0:	d402      	bmi.n	80092d8 <_printf_i+0x16c>
 80092d2:	0650      	lsls	r0, r2, #25
 80092d4:	d500      	bpl.n	80092d8 <_printf_i+0x16c>
 80092d6:	b2ad      	uxth	r5, r5
 80092d8:	6019      	str	r1, [r3, #0]
 80092da:	07d3      	lsls	r3, r2, #31
 80092dc:	d502      	bpl.n	80092e4 <_printf_i+0x178>
 80092de:	2320      	movs	r3, #32
 80092e0:	4313      	orrs	r3, r2
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	2710      	movs	r7, #16
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d1a9      	bne.n	800923e <_printf_i+0xd2>
 80092ea:	2220      	movs	r2, #32
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	4393      	bics	r3, r2
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	e7a4      	b.n	800923e <_printf_i+0xd2>
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	680d      	ldr	r5, [r1, #0]
 80092f8:	1d10      	adds	r0, r2, #4
 80092fa:	6949      	ldr	r1, [r1, #20]
 80092fc:	6018      	str	r0, [r3, #0]
 80092fe:	6813      	ldr	r3, [r2, #0]
 8009300:	062e      	lsls	r6, r5, #24
 8009302:	d501      	bpl.n	8009308 <_printf_i+0x19c>
 8009304:	6019      	str	r1, [r3, #0]
 8009306:	e002      	b.n	800930e <_printf_i+0x1a2>
 8009308:	066d      	lsls	r5, r5, #25
 800930a:	d5fb      	bpl.n	8009304 <_printf_i+0x198>
 800930c:	8019      	strh	r1, [r3, #0]
 800930e:	2300      	movs	r3, #0
 8009310:	9e04      	ldr	r6, [sp, #16]
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	e7c0      	b.n	8009298 <_printf_i+0x12c>
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	1d11      	adds	r1, r2, #4
 800931a:	6019      	str	r1, [r3, #0]
 800931c:	6816      	ldr	r6, [r2, #0]
 800931e:	2100      	movs	r1, #0
 8009320:	0030      	movs	r0, r6
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	f000 f858 	bl	80093d8 <memchr>
 8009328:	2800      	cmp	r0, #0
 800932a:	d001      	beq.n	8009330 <_printf_i+0x1c4>
 800932c:	1b80      	subs	r0, r0, r6
 800932e:	6060      	str	r0, [r4, #4]
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	2300      	movs	r3, #0
 8009336:	9a04      	ldr	r2, [sp, #16]
 8009338:	7013      	strb	r3, [r2, #0]
 800933a:	e7ad      	b.n	8009298 <_printf_i+0x12c>
 800933c:	0032      	movs	r2, r6
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	9906      	ldr	r1, [sp, #24]
 8009342:	9805      	ldr	r0, [sp, #20]
 8009344:	9d07      	ldr	r5, [sp, #28]
 8009346:	47a8      	blx	r5
 8009348:	3001      	adds	r0, #1
 800934a:	d0af      	beq.n	80092ac <_printf_i+0x140>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	d415      	bmi.n	800937e <_printf_i+0x212>
 8009352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	4298      	cmp	r0, r3
 8009358:	daaa      	bge.n	80092b0 <_printf_i+0x144>
 800935a:	0018      	movs	r0, r3
 800935c:	e7a8      	b.n	80092b0 <_printf_i+0x144>
 800935e:	0022      	movs	r2, r4
 8009360:	2301      	movs	r3, #1
 8009362:	9906      	ldr	r1, [sp, #24]
 8009364:	9805      	ldr	r0, [sp, #20]
 8009366:	9e07      	ldr	r6, [sp, #28]
 8009368:	3219      	adds	r2, #25
 800936a:	47b0      	blx	r6
 800936c:	3001      	adds	r0, #1
 800936e:	d09d      	beq.n	80092ac <_printf_i+0x140>
 8009370:	3501      	adds	r5, #1
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	42ab      	cmp	r3, r5
 800937a:	dcf0      	bgt.n	800935e <_printf_i+0x1f2>
 800937c:	e7e9      	b.n	8009352 <_printf_i+0x1e6>
 800937e:	2500      	movs	r5, #0
 8009380:	e7f7      	b.n	8009372 <_printf_i+0x206>
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	08009dd5 	.word	0x08009dd5
 8009388:	08009de6 	.word	0x08009de6

0800938c <memmove>:
 800938c:	b510      	push	{r4, lr}
 800938e:	4288      	cmp	r0, r1
 8009390:	d902      	bls.n	8009398 <memmove+0xc>
 8009392:	188b      	adds	r3, r1, r2
 8009394:	4298      	cmp	r0, r3
 8009396:	d303      	bcc.n	80093a0 <memmove+0x14>
 8009398:	2300      	movs	r3, #0
 800939a:	e007      	b.n	80093ac <memmove+0x20>
 800939c:	5c8b      	ldrb	r3, [r1, r2]
 800939e:	5483      	strb	r3, [r0, r2]
 80093a0:	3a01      	subs	r2, #1
 80093a2:	d2fb      	bcs.n	800939c <memmove+0x10>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	5ccc      	ldrb	r4, [r1, r3]
 80093a8:	54c4      	strb	r4, [r0, r3]
 80093aa:	3301      	adds	r3, #1
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d1fa      	bne.n	80093a6 <memmove+0x1a>
 80093b0:	e7f8      	b.n	80093a4 <memmove+0x18>
	...

080093b4 <_sbrk_r>:
 80093b4:	2300      	movs	r3, #0
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_sbrk_r+0x20>)
 80093ba:	0004      	movs	r4, r0
 80093bc:	0008      	movs	r0, r1
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	f7f7 fd08 	bl	8000dd4 <_sbrk>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d103      	bne.n	80093d0 <_sbrk_r+0x1c>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d000      	beq.n	80093d0 <_sbrk_r+0x1c>
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	200004ec 	.word	0x200004ec

080093d8 <memchr>:
 80093d8:	b2c9      	uxtb	r1, r1
 80093da:	1882      	adds	r2, r0, r2
 80093dc:	4290      	cmp	r0, r2
 80093de:	d101      	bne.n	80093e4 <memchr+0xc>
 80093e0:	2000      	movs	r0, #0
 80093e2:	4770      	bx	lr
 80093e4:	7803      	ldrb	r3, [r0, #0]
 80093e6:	428b      	cmp	r3, r1
 80093e8:	d0fb      	beq.n	80093e2 <memchr+0xa>
 80093ea:	3001      	adds	r0, #1
 80093ec:	e7f6      	b.n	80093dc <memchr+0x4>

080093ee <_realloc_r>:
 80093ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f0:	0007      	movs	r7, r0
 80093f2:	000e      	movs	r6, r1
 80093f4:	0014      	movs	r4, r2
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d105      	bne.n	8009406 <_realloc_r+0x18>
 80093fa:	0011      	movs	r1, r2
 80093fc:	f7ff fc52 	bl	8008ca4 <_malloc_r>
 8009400:	0005      	movs	r5, r0
 8009402:	0028      	movs	r0, r5
 8009404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009406:	2a00      	cmp	r2, #0
 8009408:	d103      	bne.n	8009412 <_realloc_r+0x24>
 800940a:	f7ff fbdf 	bl	8008bcc <_free_r>
 800940e:	0025      	movs	r5, r4
 8009410:	e7f7      	b.n	8009402 <_realloc_r+0x14>
 8009412:	f000 f81b 	bl	800944c <_malloc_usable_size_r>
 8009416:	9001      	str	r0, [sp, #4]
 8009418:	4284      	cmp	r4, r0
 800941a:	d803      	bhi.n	8009424 <_realloc_r+0x36>
 800941c:	0035      	movs	r5, r6
 800941e:	0843      	lsrs	r3, r0, #1
 8009420:	42a3      	cmp	r3, r4
 8009422:	d3ee      	bcc.n	8009402 <_realloc_r+0x14>
 8009424:	0021      	movs	r1, r4
 8009426:	0038      	movs	r0, r7
 8009428:	f7ff fc3c 	bl	8008ca4 <_malloc_r>
 800942c:	1e05      	subs	r5, r0, #0
 800942e:	d0e8      	beq.n	8009402 <_realloc_r+0x14>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	0022      	movs	r2, r4
 8009434:	429c      	cmp	r4, r3
 8009436:	d900      	bls.n	800943a <_realloc_r+0x4c>
 8009438:	001a      	movs	r2, r3
 800943a:	0031      	movs	r1, r6
 800943c:	0028      	movs	r0, r5
 800943e:	f7ff fbbb 	bl	8008bb8 <memcpy>
 8009442:	0031      	movs	r1, r6
 8009444:	0038      	movs	r0, r7
 8009446:	f7ff fbc1 	bl	8008bcc <_free_r>
 800944a:	e7da      	b.n	8009402 <_realloc_r+0x14>

0800944c <_malloc_usable_size_r>:
 800944c:	1f0b      	subs	r3, r1, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	1f18      	subs	r0, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	da01      	bge.n	800945a <_malloc_usable_size_r+0xe>
 8009456:	580b      	ldr	r3, [r1, r0]
 8009458:	18c0      	adds	r0, r0, r3
 800945a:	4770      	bx	lr

0800945c <_init>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr

08009468 <_fini>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr
