
Camera_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08004e2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004e2c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de47  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee0  00000000  00000000  0002dec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c3  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013823  00000000  00000000  000313e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8fc  00000000  00000000  00044c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077434  00000000  00000000  00054502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d28  00000000  00000000  000cb938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ce660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004698 	.word	0x08004698

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004698 	.word	0x08004698

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	4f0d      	ldr	r7, [pc, #52]	; (80004e0 <main+0x38>)
 80004ac:	44bd      	add	sp, r7
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fd56 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f818 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f926 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f8f4 	bl	80006a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004c0:	f000 f8ba 	bl	8000638 <MX_SPI1_Init>
  MX_I2C1_Init();
 80004c4:	f000 f878 	bl	80005b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <main+0x3c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	2120      	movs	r1, #32
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f804 	bl	80014dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ArduCAM_Init(OV2640);
 80004d4:	2005      	movs	r0, #5
 80004d6:	f000 faed 	bl	8000ab4 <ArduCAM_Init>
	  SingleCapTransfer();
 80004da:	f000 fb51 	bl	8000b80 <SingleCapTransfer>
	  while(1);
 80004de:	e7fe      	b.n	80004de <main+0x36>
 80004e0:	fffff000 	.word	0xfffff000
 80004e4:	50000800 	.word	0x50000800

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2438      	movs	r4, #56	; 0x38
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2338      	movs	r3, #56	; 0x38
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f004 f8a1 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f004 f899 	bl	8004640 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f004 f892 	bl	8004640 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <SystemClock_Config+0xc8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <SystemClock_Config+0xcc>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClock_Config+0xc8>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	22a0      	movs	r2, #160	; 0xa0
 8000538:	02d2      	lsls	r2, r2, #11
 800053a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	193b      	adds	r3, r7, r4
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fddb 	bl	8002100 <HAL_RCC_OscConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800054e:	f000 f963 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	2124      	movs	r1, #36	; 0x24
 8000554:	187b      	adds	r3, r7, r1
 8000556:	220f      	movs	r2, #15
 8000558:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2202      	movs	r2, #2
 800055e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f002 f986 	bl	8002888 <HAL_RCC_ClockConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000580:	f000 f94a 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000584:	003b      	movs	r3, r7
 8000586:	220a      	movs	r2, #10
 8000588:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800058a:	003b      	movs	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000590:	003b      	movs	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	f002 fb97 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005a2:	f000 f939 	bl	8000818 <Error_Handler>
  }
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b01d      	add	sp, #116	; 0x74
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40007000 	.word	0x40007000
 80005b4:	ffffe7ff 	.word	0xffffe7ff

080005b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_I2C1_Init+0x74>)
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <MX_I2C1_Init+0x78>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_I2C1_Init+0x74>)
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <MX_I2C1_Init+0x7c>)
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_I2C1_Init+0x74>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x74>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 ff8f 	bl	8001518 <HAL_I2C_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005fe:	f000 f90b 	bl	8000818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x74>)
 8000604:	2100      	movs	r1, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fce2 	bl	8001fd0 <HAL_I2CEx_ConfigAnalogFilter>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000610:	f000 f902 	bl	8000818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_I2C1_Init+0x74>)
 8000616:	2100      	movs	r1, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fd25 	bl	8002068 <HAL_I2CEx_ConfigDigitalFilter>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 f8f9 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000002c 	.word	0x2000002c
 8000630:	40005400 	.word	0x40005400
 8000634:	00303d5b 	.word	0x00303d5b

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <MX_SPI1_Init+0x6c>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000644:	2282      	movs	r2, #130	; 0x82
 8000646:	0052      	lsls	r2, r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_SPI1_Init+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_SPI1_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_SPI1_Init+0x68>)
 800066c:	2208      	movs	r2, #8
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_SPI1_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000684:	2207      	movs	r2, #7
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <MX_SPI1_Init+0x68>)
 800068a:	0018      	movs	r0, r3
 800068c:	f002 fcac 	bl	8002fe8 <HAL_SPI_Init>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f8c0 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000080 	.word	0x20000080
 80006a4:	40013000 	.word	0x40013000

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	22e1      	movs	r2, #225	; 0xe1
 80006b6:	0252      	lsls	r2, r2, #9
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f003 faa5 	bl	8003c3c <HAL_UART_Init>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f88f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000d8 	.word	0x200000d8
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	2414      	movs	r4, #20
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2314      	movs	r3, #20
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f003 ff91 	bl	8004640 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <MX_GPIO_Init+0x108>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x108>)
 8000724:	2104      	movs	r1, #4
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_GPIO_Init+0x108>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2204      	movs	r2, #4
 8000730:	4013      	ands	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_GPIO_Init+0x108>)
 8000738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <MX_GPIO_Init+0x108>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	430a      	orrs	r2, r1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <MX_GPIO_Init+0x108>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_GPIO_Init+0x108>)
 8000750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_GPIO_Init+0x108>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_GPIO_Init+0x108>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_GPIO_Init+0x108>)
 8000768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_GPIO_Init+0x108>)
 800076c:	2102      	movs	r1, #2
 800076e:	430a      	orrs	r2, r1
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_GPIO_Init+0x108>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	2202      	movs	r2, #2
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	23a0      	movs	r3, #160	; 0xa0
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fea8 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0x10c>)
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fea2 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0192      	lsls	r2, r2, #6
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2284      	movs	r2, #132	; 0x84
 80007a4:	0392      	lsls	r2, r2, #14
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x10c>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f000 fd1b 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2220      	movs	r2, #32
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	193a      	adds	r2, r7, r4
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fd08 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2220      	movs	r2, #32
 80007e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <MX_GPIO_Init+0x10c>)
 80007fe:	0019      	movs	r1, r3
 8000800:	0010      	movs	r0, r2
 8000802:	f000 fcf5 	bl	80011f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b00b      	add	sp, #44	; 0x2c
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000
 8000814:	50000800 	.word	0x50000800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_MspInit+0x24>)
 800082a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x24>)
 800082e:	2101      	movs	r1, #1
 8000830:	430a      	orrs	r2, r1
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_MspInit+0x24>)
 8000836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_MspInit+0x24>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	0549      	lsls	r1, r1, #21
 800083e:	430a      	orrs	r2, r1
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	240c      	movs	r4, #12
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	2314      	movs	r3, #20
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f003 feee 	bl	8004640 <memset>
  if(hi2c->Instance==I2C1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_I2C_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d128      	bne.n	80008c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_I2C_MspInit+0x80>)
 8000870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_I2C_MspInit+0x80>)
 8000874:	2102      	movs	r1, #2
 8000876:	430a      	orrs	r2, r1
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_I2C_MspInit+0x80>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	2202      	movs	r2, #2
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c0      	movs	r2, #192	; 0xc0
 800088c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2212      	movs	r2, #18
 8000892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2203      	movs	r2, #3
 800089e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2201      	movs	r2, #1
 80008a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_I2C_MspInit+0x84>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fc9f 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_I2C_MspInit+0x80>)
 80008b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_I2C_MspInit+0x80>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0389      	lsls	r1, r1, #14
 80008bc:	430a      	orrs	r2, r1
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b009      	add	sp, #36	; 0x24
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40005400 	.word	0x40005400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	50000400 	.word	0x50000400

080008d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2414      	movs	r4, #20
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f003 feaa 	bl	8004640 <memset>
  if(hspi->Instance==SPI1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <HAL_SPI_MspInit+0xc0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d14a      	bne.n	800098c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0149      	lsls	r1, r1, #5
 8000900:	430a      	orrs	r2, r1
 8000902:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 8000906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 800090a:	2101      	movs	r1, #1
 800090c:	430a      	orrs	r2, r1
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2201      	movs	r2, #1
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 800091e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 8000922:	2102      	movs	r1, #2
 8000924:	430a      	orrs	r2, r1
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_SPI_MspInit+0xc4>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	2202      	movs	r2, #2
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	22c0      	movs	r2, #192	; 0xc0
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2203      	movs	r2, #3
 800094a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	193a      	adds	r2, r7, r4
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fc48 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000960:	0021      	movs	r1, r4
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2208      	movs	r2, #8
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2203      	movs	r2, #3
 8000978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	187b      	adds	r3, r7, r1
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_SPI_MspInit+0xc8>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f000 fc32 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00b      	add	sp, #44	; 0x2c
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40013000 	.word	0x40013000
 8000998:	40021000 	.word	0x40021000
 800099c:	50000400 	.word	0x50000400

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	240c      	movs	r4, #12
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0018      	movs	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 fe44 	bl	8004640 <memset>
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d129      	bne.n	8000a16 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e0:	2201      	movs	r2, #1
 80009e2:	4013      	ands	r3, r2
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e8:	0021      	movs	r1, r4
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	220c      	movs	r2, #12
 80009ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2202      	movs	r2, #2
 80009f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2203      	movs	r2, #3
 8000a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2204      	movs	r2, #4
 8000a06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fbed 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b009      	add	sp, #36	; 0x24
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 fadc 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a64:	f7ff fff7 	bl	8000a56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f003 fddf 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd09 	bl	80004a8 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	2000016c 	.word	0x2000016c

08000ab0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_COMP_IRQHandler>
	...

08000ab4 <ArduCAM_Init>:

uint8_t vid, pid;


void ArduCAM_Init(byte model) 
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
	wrSensorReg8_8(0xff, 0x01);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	f000 f9a6 	bl	8000e14 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <ArduCAM_Init+0xac>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	200a      	movs	r0, #10
 8000ace:	f000 f9cb 	bl	8000e68 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <ArduCAM_Init+0xb0>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	200b      	movs	r0, #11
 8000ad8:	f000 f9c6 	bl	8000e68 <rdSensorReg8_8>
    if ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 ))){
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <ArduCAM_Init+0xac>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b26      	cmp	r3, #38	; 0x26
 8000ae2:	d00c      	beq.n	8000afe <ArduCAM_Init+0x4a>
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <ArduCAM_Init+0xb0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b41      	cmp	r3, #65	; 0x41
 8000aea:	d103      	bne.n	8000af4 <ArduCAM_Init+0x40>
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <ArduCAM_Init+0xb0>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b42      	cmp	r3, #66	; 0x42
 8000af2:	d004      	beq.n	8000afe <ArduCAM_Init+0x4a>
      //Serial.println(F("ACK CMD Can't find OV2640 module! END"));
    	HAL_Delay(1000);
 8000af4:	23fa      	movs	r3, #250	; 0xfa
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 faa1 	bl	8001040 <HAL_Delay>
    }
    else{
      //Serial.println(F("ACK CMD OV2640 detected. END"));break;
    }

    wrSensorReg8_8(0xff, 0x01);
 8000afe:	2101      	movs	r1, #1
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	f000 f987 	bl	8000e14 <wrSensorReg8_8>
	wrSensorReg8_8(0x12, 0x80);
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	2012      	movs	r0, #18
 8000b0a:	f000 f983 	bl	8000e14 <wrSensorReg8_8>
	HAL_Delay(100);
 8000b0e:	2064      	movs	r0, #100	; 0x64
 8000b10:	f000 fa96 	bl	8001040 <HAL_Delay>
	if (m_fmt == JPEG)
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <ArduCAM_Init+0xb4>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d118      	bne.n	8000b4e <ArduCAM_Init+0x9a>
	{
	  wrSensorRegs8_8(OV2640_JPEG_INIT);
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <ArduCAM_Init+0xb8>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f9dc 	bl	8000edc <wrSensorRegs8_8>
	  wrSensorRegs8_8(OV2640_YUV422);
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <ArduCAM_Init+0xbc>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 f9d8 	bl	8000edc <wrSensorRegs8_8>
	  wrSensorRegs8_8(OV2640_JPEG);
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <ArduCAM_Init+0xc0>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f9d4 	bl	8000edc <wrSensorRegs8_8>
	  wrSensorReg8_8(0xff, 0x01);
 8000b34:	2101      	movs	r1, #1
 8000b36:	20ff      	movs	r0, #255	; 0xff
 8000b38:	f000 f96c 	bl	8000e14 <wrSensorReg8_8>
	  wrSensorReg8_8(0x15, 0x00);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2015      	movs	r0, #21
 8000b40:	f000 f968 	bl	8000e14 <wrSensorReg8_8>
	  wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <ArduCAM_Init+0xc4>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f9c8 	bl	8000edc <wrSensorRegs8_8>
	}
	else
	{
	  wrSensorRegs8_8(OV2640_QVGA);
	}
 }
 8000b4c:	e003      	b.n	8000b56 <ArduCAM_Init+0xa2>
	  wrSensorRegs8_8(OV2640_QVGA);
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <ArduCAM_Init+0xc8>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 f9c3 	bl	8000edc <wrSensorRegs8_8>
 }
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000164 	.word	0x20000164
 8000b64:	20000165 	.word	0x20000165
 8000b68:	20000005 	.word	0x20000005
 8000b6c:	080049dc 	.word	0x080049dc
 8000b70:	08004cd8 	.word	0x08004cd8
 8000b74:	08004d00 	.word	0x08004d00
 8000b78:	08004d24 	.word	0x08004d24
 8000b7c:	080046d4 	.word	0x080046d4

08000b80 <SingleCapTransfer>:


void SingleCapTransfer(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	write_reg(0x07, 0x80);
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	2007      	movs	r0, #7
 8000b88:	f000 f8ca 	bl	8000d20 <write_reg>
	HAL_Delay(100);
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f000 fa57 	bl	8001040 <HAL_Delay>
	write_reg(0x07, 0x00);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2007      	movs	r0, #7
 8000b96:	f000 f8c3 	bl	8000d20 <write_reg>
	HAL_Delay(100);
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f000 fa50 	bl	8001040 <HAL_Delay>
	//read_reg(0x00);
	set_format(JPEG);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f82d 	bl	8000c00 <set_format>
	ArduCAM_Init(OV2640);
 8000ba6:	2005      	movs	r0, #5
 8000ba8:	f7ff ff84 	bl	8000ab4 <ArduCAM_Init>
//	write_reg(0x07, 0x00);
//	write_reg(0x00, 0x55);
//	read_reg(0x00);
	//wrSensorRegs8_8(OV2640_JPEG_INIT);
	//wrSensorRegs8_8(OV2640_320x240_JPEG);
	HAL_Delay(1000);
 8000bac:	23fa      	movs	r3, #250	; 0xfa
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fa45 	bl	8001040 <HAL_Delay>
	clear_fifo_flag();
 8000bb6:	f000 f8de 	bl	8000d76 <clear_fifo_flag>
//	read_reg(0x01);
	HAL_Delay(1000);
 8000bba:	23fa      	movs	r3, #250	; 0xfa
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fa3e 	bl	8001040 <HAL_Delay>

	flush_fifo();
 8000bc4:	f000 f8c5 	bl	8000d52 <flush_fifo>
	HAL_Delay(1000);
 8000bc8:	23fa      	movs	r3, #250	; 0xfa
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fa37 	bl	8001040 <HAL_Delay>
	flush_fifo();
 8000bd2:	f000 f8be 	bl	8000d52 <flush_fifo>
	clear_fifo_flag();
 8000bd6:	f000 f8ce 	bl	8000d76 <clear_fifo_flag>
	start_capture();
 8000bda:	f000 f8c3 	bl	8000d64 <start_capture>
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	2108      	movs	r1, #8
 8000be2:	2041      	movs	r0, #65	; 0x41
 8000be4:	f000 f8f6 	bl	8000dd4 <get_bit>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d0f9      	beq.n	8000be0 <SingleCapTransfer+0x60>
		//HAL_Delay(10);
	}
	length= read_fifo_length();
 8000bec:	f000 f8cc 	bl	8000d88 <read_fifo_length>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <SingleCapTransfer+0x7c>)
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000160 	.word	0x20000160

08000c00 <set_format>:
}



void set_format(byte fmt)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	701a      	strb	r2, [r3, #0]
  if (fmt == BMP)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d103      	bne.n	8000c1c <set_format+0x1c>
    m_fmt = BMP;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <set_format+0x2c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 8000c1a:	e002      	b.n	8000c22 <set_format+0x22>
    m_fmt = JPEG;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <set_format+0x2c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000005 	.word	0x20000005

08000c30 <bus_read>:
	write_reg(ARDUCHIP_FRAMES, nbr-1);
}


uint8_t bus_read(uint8_t address)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	701a      	strb	r2, [r3, #0]
    uint8_t txData = address;
 8000c3c:	250f      	movs	r5, #15
 8000c3e:	197b      	adds	r3, r7, r5
 8000c40:	1dfa      	adds	r2, r7, #7
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
    uint8_t rxData = 0x00;
 8000c46:	240e      	movs	r4, #14
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]

    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <bus_read+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	2120      	movs	r1, #32
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fc41 	bl	80014dc <HAL_GPIO_WritePin>

    // Envoi de l'adresse via SPI
    HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	1979      	adds	r1, r7, r5
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <bus_read+0x64>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	f002 fa54 	bl	8003110 <HAL_SPI_Transmit>

    //HAL_Delay(1);

    // Lecture de la donnée via SPI
    HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	1939      	adds	r1, r7, r4
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <bus_read+0x64>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	f002 fbab 	bl	80033cc <HAL_SPI_Receive>

    //HAL_Delay(1);

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <bus_read+0x60>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fc2d 	bl	80014dc <HAL_GPIO_WritePin>

    return rxData;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	781b      	ldrb	r3, [r3, #0]
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	50000800 	.word	0x50000800
 8000c94:	20000080 	.word	0x20000080

08000c98 <bus_write>:


uint8_t bus_write(uint8_t address, uint8_t value)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	1c0a      	adds	r2, r1, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    // Abaisse le signal CS (chip select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <bus_write+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 fc13 	bl	80014dc <HAL_GPIO_WritePin>

    // Attente de 10 millisecondes
    //HAL_Delay(1);

    // Envoi de l'adresse via SPI
    HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	425b      	negs	r3, r3
 8000cba:	1df9      	adds	r1, r7, #7
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <bus_write+0x54>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f002 fa26 	bl	8003110 <HAL_SPI_Transmit>

    // Envoi de la valeur via SPI
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1db9      	adds	r1, r7, #6
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <bus_write+0x54>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f002 fa1f 	bl	8003110 <HAL_SPI_Transmit>

    // Attente de 10 millisecondes
    //HAL_Delay(1);

    // Libère le signal CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <bus_write+0x50>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fbff 	bl	80014dc <HAL_GPIO_WritePin>

    return 1;  // Indique que l'opération s'est bien déroulée
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	50000800 	.word	0x50000800
 8000cec:	20000080 	.word	0x20000080

08000cf0 <read_reg>:


uint8_t read_reg(uint8_t addr)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	227f      	movs	r2, #127	; 0x7f
 8000d02:	4013      	ands	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	250f      	movs	r5, #15
 8000d08:	197c      	adds	r4, r7, r5
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff90 	bl	8000c30 <bus_read>
 8000d10:	0003      	movs	r3, r0
 8000d12:	7023      	strb	r3, [r4, #0]
	return data;
 8000d14:	197b      	adds	r3, r7, r5
 8000d16:	781b      	ldrb	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b004      	add	sp, #16
 8000d1e:	bdb0      	pop	{r4, r5, r7, pc}

08000d20 <write_reg>:


void write_reg(uint8_t addr, uint8_t data)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	1c0a      	adds	r2, r1, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	 bus_write(addr | 0x80, data); 
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	4252      	negs	r2, r2
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	1dbb      	adds	r3, r7, #6
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0019      	movs	r1, r3
 8000d44:	0010      	movs	r0, r2
 8000d46:	f7ff ffa7 	bl	8000c98 <bus_write>
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <flush_fifo>:
{
	SPI2_ReadWriteByte(BURST_FIFO_READ);
}

void flush_fifo(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000d56:	2101      	movs	r1, #1
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f7ff ffe1 	bl	8000d20 <write_reg>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <start_capture>:

void start_capture(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	2004      	movs	r0, #4
 8000d6c:	f7ff ffd8 	bl	8000d20 <write_reg>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f7ff ffcf 	bl	8000d20 <write_reg>
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <read_fifo_length>:

uint32_t read_fifo_length(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 8000d92:	2042      	movs	r0, #66	; 0x42
 8000d94:	f7ff ffac 	bl	8000cf0 <read_reg>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8000d9c:	2043      	movs	r0, #67	; 0x43
 8000d9e:	f7ff ffa7 	bl	8000cf0 <read_reg>
 8000da2:	0003      	movs	r3, r0
 8000da4:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8000da6:	2044      	movs	r0, #68	; 0x44
 8000da8:	f7ff ffa2 	bl	8000cf0 <read_reg>
 8000dac:	0003      	movs	r3, r0
 8000dae:	001a      	movs	r2, r3
 8000db0:	237f      	movs	r3, #127	; 0x7f
 8000db2:	4013      	ands	r3, r2
 8000db4:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	0a5b      	lsrs	r3, r3, #9
 8000dc8:	60fb      	str	r3, [r7, #12]
	return len;	
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <get_bit>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	1c0a      	adds	r2, r1, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  uint8_t temp;
  temp = read_reg(addr);
 8000de6:	250f      	movs	r5, #15
 8000de8:	197c      	adds	r4, r7, r5
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff ff7e 	bl	8000cf0 <read_reg>
 8000df4:	0003      	movs	r3, r0
 8000df6:	7023      	strb	r3, [r4, #0]
  temp = temp & bit;
 8000df8:	0028      	movs	r0, r5
 8000dfa:	183b      	adds	r3, r7, r0
 8000dfc:	183a      	adds	r2, r7, r0
 8000dfe:	1db9      	adds	r1, r7, #6
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	7809      	ldrb	r1, [r1, #0]
 8000e04:	400a      	ands	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
  return temp;
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	781b      	ldrb	r3, [r3, #0]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bdb0      	pop	{r4, r5, r7, pc}

08000e14 <wrSensorReg8_8>:
      break;
  }
}


byte wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	1c0a      	adds	r2, r1, #0
 8000e24:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);  // Temporisation en millisecondes pour laisser le temps au capteur
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 f90a 	bl	8001040 <HAL_Delay>
    uint8_t data[2] = {regID, regDat};
 8000e2c:	200c      	movs	r0, #12
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	1dfa      	adds	r2, r7, #7
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	1dba      	adds	r2, r7, #6
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	705a      	strb	r2, [r3, #1]
    //data[0] = regID; // Première valeur de 8 bits
    //data[1] = regDat; // Deuxième valeur de 8 bits

    // Démarre la transmission en envoyant l'adresse du capteur avec HAL I2C
    HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &data, 2, 1000);
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <wrSensorReg8_8+0x4c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b299      	uxth	r1, r3
 8000e44:	183a      	adds	r2, r7, r0
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <wrSensorReg8_8+0x50>)
 8000e48:	23fa      	movs	r3, #250	; 0xfa
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f000 fbf8 	bl	8001644 <HAL_I2C_Master_Transmit>

    // Envoie la valeur du registre au capteur
    //HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regDat, 1, HAL_MAX_DELAY);

    return 0;  // Succès
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000004 	.word	0x20000004
 8000e64:	2000002c 	.word	0x2000002c

08000e68 <rdSensorReg8_8>:


byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	0002      	movs	r2, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);  // Petit délai pour la stabilité du bus
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 f8e2 	bl	8001040 <HAL_Delay>

    // Envoi de l'adresse du capteur en mode écriture et ID du registre
    if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY) != HAL_OK)
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <rdSensorReg8_8+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b299      	uxth	r1, r3
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <rdSensorReg8_8+0x70>)
 8000e86:	2301      	movs	r3, #1
 8000e88:	425b      	negs	r3, r3
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f000 fbd9 	bl	8001644 <HAL_I2C_Master_Transmit>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <rdSensorReg8_8+0x32>
    {
        return 1;  // Erreur lors de l'écriture de l'adresse
 8000e96:	2301      	movs	r3, #1
 8000e98:	e018      	b.n	8000ecc <rdSensorReg8_8+0x64>
    }

    HAL_Delay(1);  // Délai pour la synchronisation du bus
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 f8d0 	bl	8001040 <HAL_Delay>

    // Relance de l'I2C avec l'adresse du capteur en mode lecture
    if (HAL_I2C_Master_Receive(&hi2c1, sensor_addr | 0x01, regDat, 1, HAL_MAX_DELAY) != HAL_OK)
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <rdSensorReg8_8+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <rdSensorReg8_8+0x70>)
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f000 fccc 	bl	8001854 <HAL_I2C_Master_Receive>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <rdSensorReg8_8+0x5c>
    {
        return 2;  // Erreur lors de la lecture
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e003      	b.n	8000ecc <rdSensorReg8_8+0x64>
    }

    HAL_Delay(1);  // Délai pour s'assurer de la bonne fin de la transaction
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 f8bb 	bl	8001040 <HAL_Delay>

    return 0;  // Lecture réussie
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	2000002c 	.word	0x2000002c

08000edc <wrSensorRegs8_8>:

// I2C Array Write 8-bit address, 8-bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    int err = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
    uint16_t reg_addr = 0;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	801a      	strh	r2, [r3, #0]
    uint16_t reg_val = 0;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
    const struct sensor_reg *next = reglist;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]

    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8000efc:	e020      	b.n	8000f40 <wrSensorRegs8_8+0x64>
    {
        reg_addr = next->reg;
 8000efe:	2112      	movs	r1, #18
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	801a      	strh	r2, [r3, #0]
        reg_val = next->val;
 8000f08:	2010      	movs	r0, #16
 8000f0a:	183b      	adds	r3, r7, r0
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	8852      	ldrh	r2, [r2, #2]
 8000f10:	801a      	strh	r2, [r3, #0]

        err = wrSensorReg8_8(reg_addr, reg_val); // Écriture dans le registre
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	0019      	movs	r1, r3
 8000f20:	0010      	movs	r0, r2
 8000f22:	f7ff ff77 	bl	8000e14 <wrSensorReg8_8>
 8000f26:	0003      	movs	r3, r0
 8000f28:	617b      	str	r3, [r7, #20]
        if (err != 0)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <wrSensorRegs8_8+0x58>
        {
            return err; // Retourne l'erreur immédiatement si une écriture échoue
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	e010      	b.n	8000f56 <wrSensorRegs8_8+0x7a>
        }

        HAL_Delay(1); // Pause de 1 ms pour garantir la stabilité du bus I2C
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f883 	bl	8001040 <HAL_Delay>

        next++; // Passe au prochain registre
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
    while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8000f40:	2312      	movs	r3, #18
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d1d9      	bne.n	8000efe <wrSensorRegs8_8+0x22>
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	2bff      	cmp	r3, #255	; 0xff
 8000f52:	d1d4      	bne.n	8000efe <wrSensorRegs8_8+0x22>
    }

    return err; // Retourne 0 si toutes les écritures sont réussies
 8000f54:	697b      	ldr	r3, [r7, #20]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b006      	add	sp, #24
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x3c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Init+0x3c>)
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f811 	bl	8000fa0 <HAL_InitTick>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e001      	b.n	8000f8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8a:	f7ff fc4b 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_InitTick+0x5c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_InitTick+0x60>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	; 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8a7 	bl	8000108 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f8a2 	bl	8000108 <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f905 	bl	80011d6 <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00f      	b.n	8000ff4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d80b      	bhi.n	8000ff2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 f8e2 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_InitTick+0x64>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000008 	.word	0x20000008

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	2000000c 	.word	0x2000000c
 8001028:	20000168 	.word	0x20000168

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000168 	.word	0x20000168

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	189b      	adds	r3, r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	2000000c 	.word	0x2000000c

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7f      	cmp	r3, #127	; 0x7f
 800109c:	d828      	bhi.n	80010f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	33c0      	adds	r3, #192	; 0xc0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	589b      	ldr	r3, [r3, r2]
 80010ae:	1dfa      	adds	r2, r7, #7
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	0011      	movs	r1, r2
 80010b4:	2203      	movs	r2, #3
 80010b6:	400a      	ands	r2, r1
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	21ff      	movs	r1, #255	; 0xff
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	43d2      	mvns	r2, r2
 80010c2:	401a      	ands	r2, r3
 80010c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	401a      	ands	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	0018      	movs	r0, r3
 80010d4:	2303      	movs	r3, #3
 80010d6:	4003      	ands	r3, r0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	33c0      	adds	r3, #192	; 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ee:	e031      	b.n	8001154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <__NVIC_SetPriority+0xd8>)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0019      	movs	r1, r3
 80010f8:	230f      	movs	r3, #15
 80010fa:	400b      	ands	r3, r1
 80010fc:	3b08      	subs	r3, #8
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <__NVIC_SetPriority+0xd8>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	001c      	movs	r4, r3
 8001140:	230f      	movs	r3, #15
 8001142:	4023      	ands	r3, r4
 8001144:	3b08      	subs	r3, #8
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	3306      	adds	r3, #6
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	18c3      	adds	r3, r0, r3
 8001150:	3304      	adds	r3, #4
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	045b      	lsls	r3, r3, #17
 8001174:	429a      	cmp	r2, r3
 8001176:	d301      	bcc.n	800117c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001178:	2301      	movs	r3, #1
 800117a:	e010      	b.n	800119e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SysTick_Config+0x44>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3a01      	subs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	2103      	movs	r1, #3
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff7c 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x44>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ffbf 	bl	8001164 <SysTick_Config>
 80011e6:	0003      	movs	r3, r0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001206:	e14f      	b.n	80014a8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <HAL_GPIO_Init+0x30>
 800121e:	e140      	b.n	80014a2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	2201      	movs	r2, #1
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	58d3      	ldr	r3, [r2, r3]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2207      	movs	r2, #7
 80012f4:	4013      	ands	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2107      	movs	r1, #7
 800130e:	400b      	ands	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	401a      	ands	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_GPIO_Init+0x17c>
 800136a:	e09a      	b.n	80014a2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <HAL_GPIO_Init+0x2d0>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001370:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <HAL_GPIO_Init+0x2d0>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	589b      	ldr	r3, [r3, r2]
 8001384:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x1ea>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <HAL_GPIO_Init+0x2d8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1e6>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1e2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a45      	ldr	r2, [pc, #276]	; (80014d0 <HAL_GPIO_Init+0x2e0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1de>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a44      	ldr	r2, [pc, #272]	; (80014d4 <HAL_GPIO_Init+0x2e4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1da>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	029b      	lsls	r3, r3, #10
 8001466:	4013      	ands	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	4013      	ands	r3, r2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	1e13      	subs	r3, r2, #0
 80014b2:	d000      	beq.n	80014b6 <HAL_GPIO_Init+0x2c6>
 80014b4:	e6a8      	b.n	8001208 <HAL_GPIO_Init+0x18>
  }
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b006      	add	sp, #24
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	50000400 	.word	0x50000400
 80014cc:	50000800 	.word	0x50000800
 80014d0:	50000c00 	.word	0x50000c00
 80014d4:	50001c00 	.word	0x50001c00
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	0008      	movs	r0, r1
 80014e6:	0011      	movs	r1, r2
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	1c02      	adds	r2, r0, #0
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	1c7b      	adds	r3, r7, #1
 80014f0:	1c0a      	adds	r2, r1, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	1c7b      	adds	r3, r7, #1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fc:	1cbb      	adds	r3, r7, #2
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	881a      	ldrh	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e082      	b.n	8001630 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff f983 	bl	800084c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	; 0x41
 800154a:	2124      	movs	r1, #36	; 0x24
 800154c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4934      	ldr	r1, [pc, #208]	; (8001638 <HAL_I2C_Init+0x120>)
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4931      	ldr	r1, [pc, #196]	; (800163c <HAL_I2C_Init+0x124>)
 8001578:	400a      	ands	r2, r1
 800157a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e007      	b.n	80015a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2184      	movs	r1, #132	; 0x84
 80015a0:	0209      	lsls	r1, r1, #8
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d104      	bne.n	80015b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <HAL_I2C_Init+0x128>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <HAL_I2C_Init+0x124>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69d9      	ldr	r1, [r3, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2241      	movs	r2, #65	; 0x41
 800161c:	2120      	movs	r1, #32
 800161e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	f0ffffff 	.word	0xf0ffffff
 800163c:	ffff7fff 	.word	0xffff7fff
 8001640:	02008000 	.word	0x02008000

08001644 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	0008      	movs	r0, r1
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	0019      	movs	r1, r3
 8001652:	230a      	movs	r3, #10
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	2308      	movs	r3, #8
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	1c0a      	adds	r2, r1, #0
 8001660:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	d000      	beq.n	8001670 <HAL_I2C_Master_Transmit+0x2c>
 800166e:	e0e7      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_I2C_Master_Transmit+0x3a>
 800167a:	2302      	movs	r3, #2
 800167c:	e0e1      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001686:	f7ff fcd1 	bl	800102c <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	0219      	lsls	r1, r3, #8
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2319      	movs	r3, #25
 800169a:	2201      	movs	r2, #1
 800169c:	f000 fa04 	bl	8001aa8 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2241      	movs	r2, #65	; 0x41
 80016ac:	2121      	movs	r1, #33	; 0x21
 80016ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2242      	movs	r2, #66	; 0x42
 80016b4:	2110      	movs	r1, #16
 80016b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2208      	movs	r2, #8
 80016c8:	18ba      	adds	r2, r7, r2
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d911      	bls.n	8001702 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	045c      	lsls	r4, r3, #17
 80016ee:	230a      	movs	r3, #10
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	8819      	ldrh	r1, [r3, #0]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_I2C_Master_Transmit+0x208>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0023      	movs	r3, r4
 80016fc:	f000 fc2e 	bl	8001f5c <I2C_TransferConfig>
 8001700:	e075      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049c      	lsls	r4, r3, #18
 8001716:	230a      	movs	r3, #10
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	8819      	ldrh	r1, [r3, #0]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_I2C_Master_Transmit+0x208>)
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	0023      	movs	r3, r4
 8001724:	f000 fc1a 	bl	8001f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001728:	e061      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0018      	movs	r0, r3
 8001732:	f000 fa07 	bl	8001b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e081      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03a      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d136      	bne.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	0013      	movs	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	f000 f98b 	bl	8001aa8 <I2C_WaitOnFlagUntilTimeout>
 8001792:	1e03      	subs	r3, r0, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e053      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2bff      	cmp	r3, #255	; 0xff
 80017a2:	d911      	bls.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	045c      	lsls	r4, r3, #17
 80017b4:	230a      	movs	r3, #10
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0023      	movs	r3, r4
 80017c2:	f000 fbcb 	bl	8001f5c <I2C_TransferConfig>
 80017c6:	e012      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049c      	lsls	r4, r3, #18
 80017dc:	230a      	movs	r3, #10
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0023      	movs	r3, r4
 80017ea:	f000 fbb7 	bl	8001f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d198      	bne.n	800172a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 f9e6 	bl	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2220      	movs	r2, #32
 8001812:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	490c      	ldr	r1, [pc, #48]	; (8001850 <HAL_I2C_Master_Transmit+0x20c>)
 8001820:	400a      	ands	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2241      	movs	r2, #65	; 0x41
 8001828:	2120      	movs	r1, #32
 800182a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2242      	movs	r2, #66	; 0x42
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b007      	add	sp, #28
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	80002000 	.word	0x80002000
 8001850:	fe00e800 	.word	0xfe00e800

08001854 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	0008      	movs	r0, r1
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	0019      	movs	r1, r3
 8001862:	230a      	movs	r3, #10
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	1c02      	adds	r2, r0, #0
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	2308      	movs	r3, #8
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	1c0a      	adds	r2, r1, #0
 8001870:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2241      	movs	r2, #65	; 0x41
 8001876:	5c9b      	ldrb	r3, [r3, r2]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	d000      	beq.n	8001880 <HAL_I2C_Master_Receive+0x2c>
 800187e:	e0e8      	b.n	8001a52 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	5c9b      	ldrb	r3, [r3, r2]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_I2C_Master_Receive+0x3a>
 800188a:	2302      	movs	r3, #2
 800188c:	e0e2      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001896:	f7ff fbc9 	bl	800102c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	0219      	lsls	r1, r3, #8
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2319      	movs	r3, #25
 80018aa:	2201      	movs	r2, #1
 80018ac:	f000 f8fc 	bl	8001aa8 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cd      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	2122      	movs	r1, #34	; 0x22
 80018be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2242      	movs	r2, #66	; 0x42
 80018c4:	2110      	movs	r1, #16
 80018c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2208      	movs	r2, #8
 80018d8:	18ba      	adds	r2, r7, r2
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d911      	bls.n	8001912 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	22ff      	movs	r2, #255	; 0xff
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	045c      	lsls	r4, r3, #17
 80018fe:	230a      	movs	r3, #10
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	8819      	ldrh	r1, [r3, #0]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_I2C_Master_Receive+0x208>)
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	0023      	movs	r3, r4
 800190c:	f000 fb26 	bl	8001f5c <I2C_TransferConfig>
 8001910:	e076      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049c      	lsls	r4, r3, #18
 8001926:	230a      	movs	r3, #10
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	8819      	ldrh	r1, [r3, #0]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_I2C_Master_Receive+0x208>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	0023      	movs	r3, r4
 8001934:	f000 fb12 	bl	8001f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001938:	e062      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 f989 	bl	8001c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e082      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03a      	beq.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d136      	bne.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	0013      	movs	r3, r2
 800199c:	2200      	movs	r2, #0
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	f000 f882 	bl	8001aa8 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e053      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d911      	bls.n	80019da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	045c      	lsls	r4, r3, #17
 80019c6:	230a      	movs	r3, #10
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	8819      	ldrh	r1, [r3, #0]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	0023      	movs	r3, r4
 80019d4:	f000 fac2 	bl	8001f5c <I2C_TransferConfig>
 80019d8:	e012      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049c      	lsls	r4, r3, #18
 80019ee:	230a      	movs	r3, #10
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	8819      	ldrh	r1, [r3, #0]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	0023      	movs	r3, r4
 80019fc:	f000 faae 	bl	8001f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d197      	bne.n	800193a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f8dd 	bl	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01a      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2220      	movs	r2, #32
 8001a24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <HAL_I2C_Master_Receive+0x20c>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2241      	movs	r2, #65	; 0x41
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2242      	movs	r2, #66	; 0x42
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
  }
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b007      	add	sp, #28
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	80002400 	.word	0x80002400
 8001a60:	fe00e800 	.word	0xfe00e800

08001a64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d103      	bne.n	8001a82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d007      	beq.n	8001aa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	619a      	str	r2, [r3, #24]
  }
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab8:	e030      	b.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	d02d      	beq.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac0:	f7ff fab4 	bl	800102c <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d122      	bne.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	425a      	negs	r2, r3
 8001ae6:	4153      	adcs	r3, r2
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	001a      	movs	r2, r3
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d113      	bne.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	2220      	movs	r2, #32
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2241      	movs	r2, #65	; 0x41
 8001b04:	2120      	movs	r1, #32
 8001b06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2242      	movs	r2, #66	; 0x42
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00f      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	425a      	negs	r2, r3
 8001b2c:	4153      	adcs	r3, r2
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	001a      	movs	r2, r3
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d0bf      	beq.n	8001aba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b50:	e032      	b.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f8ff 	bl	8001d5c <I2C_IsErrorOccurred>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e030      	b.n	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	d025      	beq.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6c:	f7ff fa5e 	bl	800102c <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d302      	bcc.n	8001b82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11a      	bne.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d013      	beq.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	2220      	movs	r2, #32
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2241      	movs	r2, #65	; 0x41
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2242      	movs	r2, #66	; 0x42
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e007      	b.n	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d1c5      	bne.n	8001b52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b004      	add	sp, #16
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bdc:	e02f      	b.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f8b9 	bl	8001d5c <I2C_IsErrorOccurred>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e02d      	b.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf2:	f7ff fa1b 	bl	800102c <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d302      	bcc.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d11a      	bne.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d013      	beq.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2241      	movs	r2, #65	; 0x41
 8001c26:	2120      	movs	r1, #32
 8001c28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2242      	movs	r2, #66	; 0x42
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e007      	b.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d1c8      	bne.n	8001bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c64:	e06b      	b.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f875 	bl	8001d5c <I2C_IsErrorOccurred>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e069      	b.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d138      	bne.n	8001cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d105      	bne.n	8001ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e055      	b.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d107      	bne.n	8001cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8001cbe:	e002      	b.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	491f      	ldr	r1, [pc, #124]	; (8001d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2241      	movs	r2, #65	; 0x41
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2242      	movs	r2, #66	; 0x42
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e029      	b.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7ff f997 	bl	800102c <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d116      	bne.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00f      	beq.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	2220      	movs	r2, #32
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	2120      	movs	r1, #32
 8001d30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	2100      	movs	r1, #0
 8001d38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e007      	b.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d18c      	bne.n	8001c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	fe00e800 	.word	0xfe00e800

08001d5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2327      	movs	r3, #39	; 0x27
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2210      	movs	r2, #16
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <I2C_IsErrorOccurred+0x2e>
 8001d88:	e082      	b.n	8001e90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d92:	e060      	b.n	8001e56 <I2C_IsErrorOccurred+0xfa>
 8001d94:	2427      	movs	r4, #39	; 0x27
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	193a      	adds	r2, r7, r4
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	d058      	beq.n	8001e56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001da4:	f7ff f942 	bl	800102c <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d306      	bcc.n	8001dc2 <I2C_IsErrorOccurred+0x66>
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	193a      	adds	r2, r7, r4
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d149      	bne.n	8001e56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	01db      	lsls	r3, r3, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dd0:	2013      	movs	r0, #19
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	2142      	movs	r1, #66	; 0x42
 8001dd8:	5c52      	ldrb	r2, [r2, r1]
 8001dda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	401a      	ands	r2, r3
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d126      	bne.n	8001e3e <I2C_IsErrorOccurred+0xe2>
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d021      	beq.n	8001e3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d01d      	beq.n	8001e3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	01c9      	lsls	r1, r1, #7
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e14:	f7ff f90a 	bl	800102c <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e1c:	e00f      	b.n	8001e3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e1e:	f7ff f905 	bl	800102c <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b19      	cmp	r3, #25
 8001e2a:	d908      	bls.n	8001e3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4313      	orrs	r3, r2
 8001e32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e34:	2327      	movs	r3, #39	; 0x27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]

              break;
 8001e3c:	e00b      	b.n	8001e56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2220      	movs	r2, #32
 8001e46:	4013      	ands	r3, r2
 8001e48:	2127      	movs	r1, #39	; 0x27
 8001e4a:	187a      	adds	r2, r7, r1
 8001e4c:	1879      	adds	r1, r7, r1
 8001e4e:	7809      	ldrb	r1, [r1, #0]
 8001e50:	7011      	strb	r1, [r2, #0]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d1e3      	bne.n	8001e1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d004      	beq.n	8001e6e <I2C_IsErrorOccurred+0x112>
 8001e64:	2327      	movs	r3, #39	; 0x27
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d092      	beq.n	8001d94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e6e:	2327      	movs	r3, #39	; 0x27
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4313      	orrs	r3, r2
 8001e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e88:	2327      	movs	r3, #39	; 0x27
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d00c      	beq.n	8001ebc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	0052      	lsls	r2, r2, #1
 8001eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb4:	2327      	movs	r3, #39	; 0x27
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d00c      	beq.n	8001ee0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	00d2      	lsls	r2, r2, #3
 8001ed6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed8:	2327      	movs	r3, #39	; 0x27
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00c      	beq.n	8001f04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001efc:	2327      	movs	r3, #39	; 0x27
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f04:	2327      	movs	r3, #39	; 0x27
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01d      	beq.n	8001f4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff fda7 	bl	8001a64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	490d      	ldr	r1, [pc, #52]	; (8001f58 <I2C_IsErrorOccurred+0x1fc>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2120      	movs	r1, #32
 8001f38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2242      	movs	r2, #66	; 0x42
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f4a:	2327      	movs	r3, #39	; 0x27
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b00b      	add	sp, #44	; 0x2c
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	fe00e800 	.word	0xfe00e800

08001f5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	0008      	movs	r0, r1
 8001f66:	0011      	movs	r1, r2
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	240a      	movs	r4, #10
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	1c02      	adds	r2, r0, #0
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	2009      	movs	r0, #9
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	1c0a      	adds	r2, r1, #0
 8001f78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	059b      	lsls	r3, r3, #22
 8001f80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0419      	lsls	r1, r3, #16
 8001f88:	23ff      	movs	r3, #255	; 0xff
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	4313      	orrs	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa6:	0d51      	lsrs	r1, r2, #21
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	00d2      	lsls	r2, r2, #3
 8001fac:	400a      	ands	r2, r1
 8001fae:	4907      	ldr	r1, [pc, #28]	; (8001fcc <I2C_TransferConfig+0x70>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	43d2      	mvns	r2, r2
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b007      	add	sp, #28
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	03ff63ff 	.word	0x03ff63ff

08001fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2241      	movs	r2, #65	; 0x41
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d138      	bne.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e032      	b.n	800205a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2241      	movs	r2, #65	; 0x41
 8002000:	2124      	movs	r1, #36	; 0x24
 8002002:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4911      	ldr	r1, [pc, #68]	; (8002064 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002020:	400a      	ands	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2241      	movs	r2, #65	; 0x41
 8002048:	2120      	movs	r1, #32
 800204a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	ffffefff 	.word	0xffffefff

08002068 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2241      	movs	r2, #65	; 0x41
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	d139      	bne.n	80020f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002088:	2302      	movs	r3, #2
 800208a:	e033      	b.n	80020f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2241      	movs	r2, #65	; 0x41
 8002098:	2124      	movs	r1, #36	; 0x24
 800209a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2241      	movs	r2, #65	; 0x41
 80020e2:	2120      	movs	r1, #32
 80020e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2240      	movs	r2, #64	; 0x40
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	fffff0ff 	.word	0xfffff0ff

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f000 fbaf 	bl	8002872 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002114:	4bcf      	ldr	r3, [pc, #828]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211e:	4bcd      	ldr	r3, [pc, #820]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4013      	ands	r3, r2
 8002128:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x36>
 8002134:	e07e      	b.n	8002234 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d007      	beq.n	800214c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x68>
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	429a      	cmp	r2, r3
 800214a:	d10d      	bne.n	8002168 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4bc1      	ldr	r3, [pc, #772]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4013      	ands	r3, r2
 8002156:	d100      	bne.n	800215a <HAL_RCC_OscConfig+0x5a>
 8002158:	e06b      	b.n	8002232 <HAL_RCC_OscConfig+0x132>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d167      	bne.n	8002232 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f000 fb85 	bl	8002872 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	429a      	cmp	r2, r3
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x84>
 8002174:	4bb7      	ldr	r3, [pc, #732]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4bb6      	ldr	r3, [pc, #728]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e027      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	23a0      	movs	r3, #160	; 0xa0
 800218a:	02db      	lsls	r3, r3, #11
 800218c:	429a      	cmp	r2, r3
 800218e:	d10e      	bne.n	80021ae <HAL_RCC_OscConfig+0xae>
 8002190:	4bb0      	ldr	r3, [pc, #704]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4baf      	ldr	r3, [pc, #700]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	02c9      	lsls	r1, r1, #11
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	4bad      	ldr	r3, [pc, #692]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4bac      	ldr	r3, [pc, #688]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0249      	lsls	r1, r1, #9
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e012      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021ae:	4ba9      	ldr	r3, [pc, #676]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4ba8      	ldr	r3, [pc, #672]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021b4:	49a8      	ldr	r1, [pc, #672]	; (8002458 <HAL_RCC_OscConfig+0x358>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	4ba6      	ldr	r3, [pc, #664]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4ba2      	ldr	r3, [pc, #648]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4ba1      	ldr	r3, [pc, #644]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021ce:	49a3      	ldr	r1, [pc, #652]	; (800245c <HAL_RCC_OscConfig+0x35c>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff26 	bl	800102c <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e4:	e009      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e6:	f7fe ff21 	bl	800102c <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d902      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f000 fb3c 	bl	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021fa:	4b96      	ldr	r3, [pc, #600]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d0ef      	beq.n	80021e6 <HAL_RCC_OscConfig+0xe6>
 8002206:	e015      	b.n	8002234 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff10 	bl	800102c <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002212:	f7fe ff0b 	bl	800102c <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b64      	cmp	r3, #100	; 0x64
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e326      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002224:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	4013      	ands	r3, r2
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x112>
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d100      	bne.n	8002240 <HAL_RCC_OscConfig+0x140>
 800223e:	e08b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d13e      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1d0>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d13b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002258:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_RCC_OscConfig+0x16c>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e302      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b79      	ldr	r3, [pc, #484]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a7b      	ldr	r2, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x360>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002282:	4b74      	ldr	r3, [pc, #464]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2209      	movs	r2, #9
 8002288:	4393      	bics	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002294:	f000 fc40 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002298:	0001      	movs	r1, r0
 800229a:	4b6e      	ldr	r3, [pc, #440]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	220f      	movs	r2, #15
 80022a2:	4013      	ands	r3, r2
 80022a4:	4a6f      	ldr	r2, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x364>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	000a      	movs	r2, r1
 80022aa:	40da      	lsrs	r2, r3
 80022ac:	4b6e      	ldr	r3, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x368>)
 80022ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022b0:	4b6e      	ldr	r3, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x36c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2513      	movs	r5, #19
 80022b6:	197c      	adds	r4, r7, r5
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7fe fe71 	bl	8000fa0 <HAL_InitTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80022c2:	197b      	adds	r3, r7, r5
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d046      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80022ca:	197b      	adds	r3, r7, r5
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	e2d0      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d027      	beq.n	8002326 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2209      	movs	r2, #9
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fea0 	bl	800102c <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe9b 	bl	800102c <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e2b6      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2204      	movs	r2, #4
 800230a:	4013      	ands	r3, r2
 800230c:	d0f1      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a53      	ldr	r2, [pc, #332]	; (8002460 <HAL_RCC_OscConfig+0x360>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	e018      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800232c:	2101      	movs	r1, #1
 800232e:	438a      	bics	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fe7b 	bl	800102c <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe fe76 	bl	800102c <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e291      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d1f1      	bne.n	800233c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	4013      	ands	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_RCC_OscConfig+0x264>
 8002362:	e0a1      	b.n	80024a8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d140      	bne.n	80023ec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x282>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e277      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002382:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4a3a      	ldr	r2, [pc, #232]	; (8002470 <HAL_RCC_OscConfig+0x370>)
 8002388:	4013      	ands	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	0a19      	lsrs	r1, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	061a      	lsls	r2, r3, #24
 80023a4:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	3301      	adds	r3, #1
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0212      	lsls	r2, r2, #8
 80023b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	210f      	movs	r1, #15
 80023c0:	400b      	ands	r3, r1
 80023c2:	4928      	ldr	r1, [pc, #160]	; (8002464 <HAL_RCC_OscConfig+0x364>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x368>)
 80023ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x36c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2513      	movs	r5, #19
 80023d2:	197c      	adds	r4, r7, r5
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7fe fde3 	bl	8000fa0 <HAL_InitTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80023de:	197b      	adds	r3, r7, r5
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d060      	beq.n	80024a8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80023e6:	197b      	adds	r3, r7, r5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	e242      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03f      	beq.n	8002474 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0049      	lsls	r1, r1, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fe13 	bl	800102c <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240c:	f7fe fe0e 	bl	800102c <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e229      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_RCC_OscConfig+0x370>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	0a19      	lsrs	r1, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	061a      	lsls	r2, r3, #24
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <HAL_RCC_OscConfig+0x354>)
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e029      	b.n	80024a8 <HAL_RCC_OscConfig+0x3a8>
 8002454:	40021000 	.word	0x40021000
 8002458:	fffeffff 	.word	0xfffeffff
 800245c:	fffbffff 	.word	0xfffbffff
 8002460:	ffffe0ff 	.word	0xffffe0ff
 8002464:	080046b0 	.word	0x080046b0
 8002468:	20000000 	.word	0x20000000
 800246c:	20000008 	.word	0x20000008
 8002470:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002474:	4bbd      	ldr	r3, [pc, #756]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4bbc      	ldr	r3, [pc, #752]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800247a:	49bd      	ldr	r1, [pc, #756]	; (8002770 <HAL_RCC_OscConfig+0x670>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fdd4 	bl	800102c <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248a:	f7fe fdcf 	bl	800102c <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1ea      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800249c:	4bb3      	ldr	r3, [pc, #716]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2208      	movs	r2, #8
 80024ae:	4013      	ands	r3, r2
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d019      	beq.n	80024ee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4bac      	ldr	r3, [pc, #688]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80024bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024be:	4bab      	ldr	r3, [pc, #684]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fdb1 	bl	800102c <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe fdac 	bl	800102c <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1c7      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024e2:	4ba2      	ldr	r3, [pc, #648]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0f1      	beq.n	80024d0 <HAL_RCC_OscConfig+0x3d0>
 80024ec:	e018      	b.n	8002520 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ee:	4b9f      	ldr	r3, [pc, #636]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80024f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f2:	4b9e      	ldr	r3, [pc, #632]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	438a      	bics	r2, r1
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fd97 	bl	800102c <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fd92 	bl	800102c <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ad      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002516:	4b95      	ldr	r3, [pc, #596]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d1f1      	bne.n	8002504 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_RCC_OscConfig+0x42c>
 800252a:	e0ae      	b.n	800268a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252c:	2027      	movs	r0, #39	; 0x27
 800252e:	183b      	adds	r3, r7, r0
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002534:	4b8d      	ldr	r3, [pc, #564]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	055b      	lsls	r3, r3, #21
 800253c:	4013      	ands	r3, r2
 800253e:	d109      	bne.n	8002554 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b8a      	ldr	r3, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002544:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0549      	lsls	r1, r1, #21
 800254a:	430a      	orrs	r2, r1
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800254e:	183b      	adds	r3, r7, r0
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b87      	ldr	r3, [pc, #540]	; (8002774 <HAL_RCC_OscConfig+0x674>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d11a      	bne.n	8002596 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002560:	4b84      	ldr	r3, [pc, #528]	; (8002774 <HAL_RCC_OscConfig+0x674>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b83      	ldr	r3, [pc, #524]	; (8002774 <HAL_RCC_OscConfig+0x674>)
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	0049      	lsls	r1, r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fd5d 	bl	800102c <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002578:	f7fe fd58 	bl	800102c <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e173      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x674>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	429a      	cmp	r2, r3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4b2>
 80025a2:	4b72      	ldr	r3, [pc, #456]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a6:	4b71      	ldr	r3, [pc, #452]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0049      	lsls	r1, r1, #1
 80025ac:	430a      	orrs	r2, r1
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50
 80025b0:	e031      	b.n	8002616 <HAL_RCC_OscConfig+0x516>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4d4>
 80025ba:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025be:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025c0:	496b      	ldr	r1, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x670>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
 80025c6:	4b69      	ldr	r3, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ca:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025cc:	496a      	ldr	r1, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x678>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	651a      	str	r2, [r3, #80]	; 0x50
 80025d2:	e020      	b.n	8002616 <HAL_RCC_OscConfig+0x516>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	23a0      	movs	r3, #160	; 0xa0
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10e      	bne.n	80025fe <HAL_RCC_OscConfig+0x4fe>
 80025e0:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	00c9      	lsls	r1, r1, #3
 80025ea:	430a      	orrs	r2, r1
 80025ec:	651a      	str	r2, [r3, #80]	; 0x50
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0049      	lsls	r1, r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	651a      	str	r2, [r3, #80]	; 0x50
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x516>
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002602:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002604:	495a      	ldr	r1, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x670>)
 8002606:	400a      	ands	r2, r1
 8002608:	651a      	str	r2, [r3, #80]	; 0x50
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800260c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800260e:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002610:	4959      	ldr	r1, [pc, #356]	; (8002778 <HAL_RCC_OscConfig+0x678>)
 8002612:	400a      	ands	r2, r1
 8002614:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd05 	bl	800102c <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002626:	e009      	b.n	800263c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fd00 	bl	800102c <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x67c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e11a      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800263c:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800263e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x528>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe fcef 	bl	800102c <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002652:	e009      	b.n	8002668 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fcea 	bl	800102c <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x67c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e104      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800266a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d1ef      	bne.n	8002654 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002674:	2327      	movs	r3, #39	; 0x27
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002684:	493e      	ldr	r1, [pc, #248]	; (8002780 <HAL_RCC_OscConfig+0x680>)
 8002686:	400a      	ands	r2, r1
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d049      	beq.n	8002728 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d026      	beq.n	80026ea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	430a      	orrs	r2, r1
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x684>)
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x684>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0189      	lsls	r1, r1, #6
 80026be:	430a      	orrs	r2, r1
 80026c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe fcb3 	bl	800102c <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026cc:	f7fe fcae 	bl	800102c <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0c9      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0f1      	beq.n	80026cc <HAL_RCC_OscConfig+0x5cc>
 80026e8:	e01e      	b.n	8002728 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	438a      	bics	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCC_OscConfig+0x684>)
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_OscConfig+0x684>)
 80026fc:	4922      	ldr	r1, [pc, #136]	; (8002788 <HAL_RCC_OscConfig+0x688>)
 80026fe:	400a      	ands	r2, r1
 8002700:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fc93 	bl	800102c <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800270c:	f7fe fc8e 	bl	800102c <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0a9      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2202      	movs	r2, #2
 8002724:	4013      	ands	r3, r2
 8002726:	d1f1      	bne.n	800270c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x632>
 8002730:	e09e      	b.n	8002870 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d100      	bne.n	800273a <HAL_RCC_OscConfig+0x63a>
 8002738:	e077      	b.n	800282a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	2b02      	cmp	r3, #2
 8002740:	d158      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_OscConfig+0x66c>)
 8002748:	4910      	ldr	r1, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x68c>)
 800274a:	400a      	ands	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe fc6d 	bl	800102c <HAL_GetTick>
 8002752:	0003      	movs	r3, r0
 8002754:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc68 	bl	800102c <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d914      	bls.n	8002790 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e083      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	40021000 	.word	0x40021000
 8002770:	fffffeff 	.word	0xfffffeff
 8002774:	40007000 	.word	0x40007000
 8002778:	fffffbff 	.word	0xfffffbff
 800277c:	00001388 	.word	0x00001388
 8002780:	efffffff 	.word	0xefffffff
 8002784:	40010000 	.word	0x40010000
 8002788:	ffffdfff 	.word	0xffffdfff
 800278c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002790:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	049b      	lsls	r3, r3, #18
 8002798:	4013      	ands	r3, r2
 800279a:	d1dd      	bne.n	8002758 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_RCC_OscConfig+0x780>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	431a      	orrs	r2, r3
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	0449      	lsls	r1, r1, #17
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fc2f 	bl	800102c <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fc2a 	bl	800102c <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e045      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	049b      	lsls	r3, r3, #18
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x6d4>
 80027f2:	e03d      	b.n	8002870 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_RCC_OscConfig+0x784>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fc14 	bl	800102c <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fc0f 	bl	800102c <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e02a      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	049b      	lsls	r3, r3, #18
 8002824:	4013      	ands	r3, r2
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x70a>
 8002828:	e022      	b.n	8002870 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01d      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	429a      	cmp	r2, r3
 800284a:	d10f      	bne.n	800286c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	23f0      	movs	r3, #240	; 0xf0
 8002850:	039b      	lsls	r3, r3, #14
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	23c0      	movs	r3, #192	; 0xc0
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b00a      	add	sp, #40	; 0x28
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	40021000 	.word	0x40021000
 8002880:	ff02ffff 	.word	0xff02ffff
 8002884:	feffffff 	.word	0xfeffffff

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e128      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d91e      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b93      	ldr	r3, [pc, #588]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fbb6 	bl	800102c <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7fe fbb1 	bl	800102c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a8a      	ldr	r2, [pc, #552]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e109      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	22f0      	movs	r2, #240	; 0xf0
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d100      	bne.n	8002912 <HAL_RCC_ClockConfig+0x8a>
 8002910:	e089      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291a:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	4013      	ands	r3, r2
 8002924:	d120      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0e1      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002932:	4b73      	ldr	r3, [pc, #460]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	049b      	lsls	r3, r3, #18
 800293a:	4013      	ands	r3, r2
 800293c:	d114      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0d5      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d106      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d109      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ca      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002958:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0c2      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2203      	movs	r2, #3
 800296e:	4393      	bics	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fe fb56 	bl	800102c <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	e009      	b.n	80029a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7fe fb4d 	bl	800102c <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0a5      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a2:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	220c      	movs	r2, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_ClockConfig+0x106>
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	e009      	b.n	80029ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe fb37 	bl	800102c <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e08f      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	220c      	movs	r2, #12
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x132>
 80029da:	e024      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d11b      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe fb21 	bl	800102c <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a42      	ldr	r2, [pc, #264]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e079      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	220c      	movs	r2, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x15e>
 8002a06:	e00e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fb10 	bl	800102c <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e068      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a1c:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	220c      	movs	r2, #12
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d21e      	bcs.n	8002a72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a46:	f7fe faf1 	bl	800102c <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	e009      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe faec 	bl	800102c <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e044      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d1ee      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_RCC_ClockConfig+0x27c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_RCC_ClockConfig+0x280>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00da      	lsls	r2, r3, #3
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab0:	f000 f832 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	220f      	movs	r2, #15
 8002abe:	4013      	ands	r3, r2
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x284>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	40da      	lsrs	r2, r3
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_ClockConfig+0x288>)
 8002aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_RCC_ClockConfig+0x28c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	250b      	movs	r5, #11
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe fa63 	bl	8000fa0 <HAL_InitTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002ade:	197b      	adds	r3, r7, r5
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002ae6:	197b      	adds	r3, r7, r5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	e000      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40022000 	.word	0x40022000
 8002afc:	00001388 	.word	0x00001388
 8002b00:	40021000 	.word	0x40021000
 8002b04:	fffff8ff 	.word	0xfffff8ff
 8002b08:	ffffc7ff 	.word	0xffffc7ff
 8002b0c:	080046b0 	.word	0x080046b0
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000008 	.word	0x20000008

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	230c      	movs	r3, #12
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d014      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2e:	d900      	bls.n	8002b32 <HAL_RCC_GetSysClockFreq+0x1a>
 8002b30:	e07b      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x112>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x24>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3a:	e076      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b3c:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b4a:	e07c      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b50:	e079      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b56:	e076      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	0c9a      	lsrs	r2, r3, #18
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	401a      	ands	r2, r3
 8002b60:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	0d9a      	lsrs	r2, r3, #22
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	3301      	adds	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d01a      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	69b8      	ldr	r0, [r7, #24]
 8002b8c:	69f9      	ldr	r1, [r7, #28]
 8002b8e:	f7fd fb67 	bl	8000260 <__aeabi_lmul>
 8002b92:	0002      	movs	r2, r0
 8002b94:	000b      	movs	r3, r1
 8002b96:	0010      	movs	r0, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f7fd fb3b 	bl	8000220 <__aeabi_uldivmod>
 8002baa:	0002      	movs	r2, r0
 8002bac:	000b      	movs	r3, r1
 8002bae:	0013      	movs	r3, r2
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb2:	e037      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	f7fd fb47 	bl	8000260 <__aeabi_lmul>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	000b      	movs	r3, r1
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f7fd fb1b 	bl	8000220 <__aeabi_uldivmod>
 8002bea:	0002      	movs	r2, r0
 8002bec:	000b      	movs	r3, r1
 8002bee:	0013      	movs	r3, r2
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e017      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f7fd fb2e 	bl	8000260 <__aeabi_lmul>
 8002c04:	0002      	movs	r2, r0
 8002c06:	000b      	movs	r3, r1
 8002c08:	0010      	movs	r0, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	001c      	movs	r4, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	001d      	movs	r5, r3
 8002c14:	0022      	movs	r2, r4
 8002c16:	002b      	movs	r3, r5
 8002c18:	f7fd fb02 	bl	8000220 <__aeabi_uldivmod>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	000b      	movs	r3, r1
 8002c20:	0013      	movs	r3, r2
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c28:	e00d      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	2207      	movs	r2, #7
 8002c32:	4013      	ands	r3, r2
 8002c34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b00e      	add	sp, #56	; 0x38
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	003d0900 	.word	0x003d0900
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	080046c8 	.word	0x080046c8

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff2 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c7c:	0001      	movs	r1, r0
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	2207      	movs	r2, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	40d9      	lsrs	r1, r3
 8002c8e:	000b      	movs	r3, r1
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	080046c0 	.word	0x080046c0

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffdc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca8:	0001      	movs	r1, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	40d9      	lsrs	r1, r3
 8002cba:	000b      	movs	r3, r1
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	080046c0 	.word	0x080046c0

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d100      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002cf2:	e104      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf4:	4bb1      	ldr	r3, [pc, #708]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d10a      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4bae      	ldr	r3, [pc, #696]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d04:	4bad      	ldr	r3, [pc, #692]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0549      	lsls	r1, r1, #21
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d0e:	2317      	movs	r3, #23
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4baa      	ldr	r3, [pc, #680]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4ba7      	ldr	r3, [pc, #668]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4ba6      	ldr	r3, [pc, #664]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	0049      	lsls	r1, r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d30:	f7fe f97c 	bl	800102c <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe f977 	bl	800102c <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e133      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b9c      	ldr	r3, [pc, #624]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d58:	4b98      	ldr	r3, [pc, #608]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	23c0      	movs	r3, #192	; 0xc0
 8002d5e:	039b      	lsls	r3, r3, #14
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	23c0      	movs	r3, #192	; 0xc0
 8002d6a:	039b      	lsls	r3, r3, #14
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	23c0      	movs	r3, #192	; 0xc0
 8002d7a:	039b      	lsls	r3, r3, #14
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d013      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	23c0      	movs	r3, #192	; 0xc0
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	23c0      	movs	r3, #192	; 0xc0
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10a      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	401a      	ands	r2, r3
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d101      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e103      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002dac:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002db0:	23c0      	movs	r3, #192	; 0xc0
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d049      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d004      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	23c0      	movs	r3, #192	; 0xc0
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d034      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	d02e      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002df4:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e02:	4b6e      	ldr	r3, [pc, #440]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	0309      	lsls	r1, r1, #12
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e12:	496d      	ldr	r1, [pc, #436]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d014      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe f900 	bl	800102c <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e30:	e009      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f8fb 	bl	800102c <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0b6      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e46:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d0ef      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d01f      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	23c0      	movs	r3, #192	; 0xc0
 8002e64:	029b      	lsls	r3, r3, #10
 8002e66:	401a      	ands	r2, r3
 8002e68:	23c0      	movs	r3, #192	; 0xc0
 8002e6a:	029b      	lsls	r3, r3, #10
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002e70:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	23c0      	movs	r3, #192	; 0xc0
 8002e80:	039b      	lsls	r3, r3, #14
 8002e82:	401a      	ands	r2, r3
 8002e84:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	401a      	ands	r2, r3
 8002e98:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	029b      	lsls	r3, r3, #10
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	23c0      	movs	r3, #192	; 0xc0
 8002eb4:	029b      	lsls	r3, r3, #10
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	23c0      	movs	r3, #192	; 0xc0
 8002eca:	039b      	lsls	r3, r3, #14
 8002ecc:	401a      	ands	r2, r3
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	23c0      	movs	r3, #192	; 0xc0
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef6:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ef8:	4936      	ldr	r1, [pc, #216]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f36:	430a      	orrs	r2, r1
 8002f38:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	fffcffff 	.word	0xfffcffff
 8002fc8:	fff7ffff 	.word	0xfff7ffff
 8002fcc:	00001388 	.word	0x00001388
 8002fd0:	ffcfffff 	.word	0xffcfffff
 8002fd4:	efffffff 	.word	0xefffffff
 8002fd8:	fffff3ff 	.word	0xfffff3ff
 8002fdc:	ffffcfff 	.word	0xffffcfff
 8002fe0:	fbffffff 	.word	0xfbffffff
 8002fe4:	fff3ffff 	.word	0xfff3ffff

08002fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e083      	b.n	8003102 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	2382      	movs	r3, #130	; 0x82
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	429a      	cmp	r2, r3
 800300c:	d009      	beq.n	8003022 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
 8003014:	e005      	b.n	8003022 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2251      	movs	r2, #81	; 0x51
 800302c:	5c9b      	ldrb	r3, [r3, r2]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2250      	movs	r2, #80	; 0x50
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f7fd fc48 	bl	80008d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2251      	movs	r2, #81	; 0x51
 8003048:	2102      	movs	r1, #2
 800304a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	438a      	bics	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	2382      	movs	r3, #130	; 0x82
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	401a      	ands	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	2384      	movs	r3, #132	; 0x84
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	400b      	ands	r3, r1
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68d9      	ldr	r1, [r3, #12]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	400b      	ands	r3, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2102      	movs	r1, #2
 8003084:	400b      	ands	r3, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2101      	movs	r1, #1
 800308e:	400b      	ands	r3, r1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	400b      	ands	r3, r1
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2138      	movs	r1, #56	; 0x38
 80030a4:	400b      	ands	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	0011      	movs	r1, r2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	019b      	lsls	r3, r3, #6
 80030bc:	401a      	ands	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	2204      	movs	r2, #4
 80030ce:	4013      	ands	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2210      	movs	r2, #16
 80030d8:	401a      	ands	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <HAL_SPI_Init+0x124>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2251      	movs	r2, #81	; 0x51
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	fffff7ff 	.word	0xfffff7ff

08003110 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	1dbb      	adds	r3, r7, #6
 800311e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003120:	231f      	movs	r3, #31
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2250      	movs	r2, #80	; 0x50
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_SPI_Transmit+0x26>
 8003132:	2302      	movs	r3, #2
 8003134:	e145      	b.n	80033c2 <HAL_SPI_Transmit+0x2b2>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2250      	movs	r2, #80	; 0x50
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313e:	f7fd ff75 	bl	800102c <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003146:	2316      	movs	r3, #22
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	1dba      	adds	r2, r7, #6
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2251      	movs	r2, #81	; 0x51
 8003154:	5c9b      	ldrb	r3, [r3, r2]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d004      	beq.n	8003166 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]
    goto error;
 8003164:	e126      	b.n	80033b4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_SPI_Transmit+0x64>
 800316c:	1dbb      	adds	r3, r7, #6
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003174:	231f      	movs	r3, #31
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    goto error;
 800317c:	e11a      	b.n	80033b4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2251      	movs	r2, #81	; 0x51
 8003182:	2103      	movs	r1, #3
 8003184:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1dba      	adds	r2, r7, #6
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1dba      	adds	r2, r7, #6
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d110      	bne.n	80031ee <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	01c9      	lsls	r1, r1, #7
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d007      	beq.n	800320c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	429a      	cmp	r2, r3
 8003216:	d152      	bne.n	80032be <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_SPI_Transmit+0x11a>
 8003220:	2316      	movs	r3, #22
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d143      	bne.n	80032b2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	881a      	ldrh	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	1c9a      	adds	r2, r3, #2
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800324e:	e030      	b.n	80032b2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2202      	movs	r2, #2
 8003258:	4013      	ands	r3, r2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d112      	bne.n	8003284 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	86da      	strh	r2, [r3, #54]	; 0x36
 8003282:	e016      	b.n	80032b2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003284:	f7fd fed2 	bl	800102c <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d802      	bhi.n	800329a <HAL_SPI_Transmit+0x18a>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_SPI_Transmit+0x190>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80032a0:	231f      	movs	r3, #31
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2203      	movs	r2, #3
 80032a6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2251      	movs	r2, #81	; 0x51
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]
          goto error;
 80032b0:	e080      	b.n	80033b4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1c9      	bne.n	8003250 <HAL_SPI_Transmit+0x140>
 80032bc:	e053      	b.n	8003366 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_SPI_Transmit+0x1c0>
 80032c6:	2316      	movs	r3, #22
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d145      	bne.n	800335c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032f6:	e031      	b.n	800335c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d113      	bne.n	800332e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	86da      	strh	r2, [r3, #54]	; 0x36
 800332c:	e016      	b.n	800335c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800332e:	f7fd fe7d 	bl	800102c <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d802      	bhi.n	8003344 <HAL_SPI_Transmit+0x234>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_SPI_Transmit+0x23a>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2203      	movs	r2, #3
 8003350:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2251      	movs	r2, #81	; 0x51
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
          goto error;
 800335a:	e02b      	b.n	80033b4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1c8      	bne.n	80032f8 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fc1f 	bl	8003bb0 <SPI_EndRxTxTransaction>
 8003372:	1e03      	subs	r3, r0, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80033a2:	231f      	movs	r3, #31
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e003      	b.n	80033b4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2251      	movs	r2, #81	; 0x51
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2250      	movs	r2, #80	; 0x50
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80033bc:	231f      	movs	r3, #31
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b008      	add	sp, #32
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033dc:	2117      	movs	r1, #23
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2251      	movs	r2, #81	; 0x51
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80033f6:	e109      	b.n	800360c <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	2382      	movs	r3, #130	; 0x82
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	429a      	cmp	r2, r3
 8003402:	d113      	bne.n	800342c <HAL_SPI_Receive+0x60>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2251      	movs	r2, #81	; 0x51
 8003410:	2104      	movs	r1, #4
 8003412:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	881c      	ldrh	r4, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	0023      	movs	r3, r4
 8003424:	f000 f900 	bl	8003628 <HAL_SPI_TransmitReceive>
 8003428:	0003      	movs	r3, r0
 800342a:	e0f6      	b.n	800361a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2250      	movs	r2, #80	; 0x50
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_SPI_Receive+0x6e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ef      	b.n	800361a <HAL_SPI_Receive+0x24e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2250      	movs	r2, #80	; 0x50
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003442:	f7fd fdf3 	bl	800102c <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_SPI_Receive+0x8c>
 8003450:	1dbb      	adds	r3, r7, #6
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003458:	2317      	movs	r3, #23
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003460:	e0d4      	b.n	800360c <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2251      	movs	r2, #81	; 0x51
 8003466:	2104      	movs	r1, #4
 8003468:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1dba      	adds	r2, r7, #6
 800347a:	8812      	ldrh	r2, [r2, #0]
 800347c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1dba      	adds	r2, r7, #6
 8003482:	8812      	ldrh	r2, [r2, #0]
 8003484:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10f      	bne.n	80034d0 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4956      	ldr	r1, [pc, #344]	; (8003624 <HAL_SPI_Receive+0x258>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	4013      	ands	r3, r2
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d007      	beq.n	80034ee <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d000      	beq.n	80034f8 <HAL_SPI_Receive+0x12c>
 80034f6:	e06c      	b.n	80035d2 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034f8:	e033      	b.n	8003562 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2201      	movs	r2, #1
 8003502:	4013      	ands	r3, r2
 8003504:	2b01      	cmp	r3, #1
 8003506:	d115      	bne.n	8003534 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	001a      	movs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003532:	e016      	b.n	8003562 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003534:	f7fd fd7a 	bl	800102c <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d802      	bhi.n	800354a <HAL_SPI_Receive+0x17e>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_SPI_Receive+0x184>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8003550:	2317      	movs	r3, #23
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2203      	movs	r2, #3
 8003556:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2251      	movs	r2, #81	; 0x51
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003560:	e054      	b.n	800360c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1c6      	bne.n	80034fa <HAL_SPI_Receive+0x12e>
 800356c:	e036      	b.n	80035dc <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	2b01      	cmp	r3, #1
 800357a:	d113      	bne.n	80035a4 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	b292      	uxth	r2, r2
 8003588:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a2:	e016      	b.n	80035d2 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a4:	f7fd fd42 	bl	800102c <HAL_GetTick>
 80035a8:	0002      	movs	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d802      	bhi.n	80035ba <HAL_SPI_Receive+0x1ee>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_SPI_Receive+0x1f4>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80035c0:	2317      	movs	r3, #23
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2203      	movs	r2, #3
 80035c6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2251      	movs	r2, #81	; 0x51
 80035cc:	2101      	movs	r1, #1
 80035ce:	5499      	strb	r1, [r3, r2]
          goto error;
 80035d0:	e01c      	b.n	800360c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1c8      	bne.n	800356e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fa7a 	bl	8003adc <SPI_EndRxTransaction>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80035fa:	2317      	movs	r3, #23
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e003      	b.n	800360c <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2251      	movs	r2, #81	; 0x51
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2250      	movs	r2, #80	; 0x50
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003614:	2317      	movs	r3, #23
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781b      	ldrb	r3, [r3, #0]
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b007      	add	sp, #28
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	ffffbfff 	.word	0xffffbfff

08003628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	001a      	movs	r2, r3
 8003636:	1cbb      	adds	r3, r7, #2
 8003638:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800363a:	2301      	movs	r3, #1
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800363e:	232b      	movs	r3, #43	; 0x2b
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2250      	movs	r2, #80	; 0x50
 800364a:	5c9b      	ldrb	r3, [r3, r2]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_SPI_TransmitReceive+0x2c>
 8003650:	2302      	movs	r3, #2
 8003652:	e1b0      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x38e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2250      	movs	r2, #80	; 0x50
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800365c:	f7fd fce6 	bl	800102c <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003664:	2023      	movs	r0, #35	; 0x23
 8003666:	183b      	adds	r3, r7, r0
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	2151      	movs	r1, #81	; 0x51
 800366c:	5c52      	ldrb	r2, [r2, r1]
 800366e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003676:	231a      	movs	r3, #26
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	1cba      	adds	r2, r7, #2
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003680:	183b      	adds	r3, r7, r0
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d011      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x84>
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	2382      	movs	r3, #130	; 0x82
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	429a      	cmp	r2, r3
 8003690:	d107      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x7a>
 800369a:	183b      	adds	r3, r7, r0
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d004      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80036a2:	232b      	movs	r3, #43	; 0x2b
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2202      	movs	r2, #2
 80036a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80036aa:	e17d      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x98>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x98>
 80036b8:	1cbb      	adds	r3, r7, #2
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80036c0:	232b      	movs	r3, #43	; 0x2b
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80036c8:	e16e      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2251      	movs	r2, #81	; 0x51
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d003      	beq.n	80036de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2251      	movs	r2, #81	; 0x51
 80036da:	2105      	movs	r1, #5
 80036dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1cba      	adds	r2, r7, #2
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1cba      	adds	r2, r7, #2
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1cba      	adds	r2, r7, #2
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1cba      	adds	r2, r7, #2
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	4013      	ands	r3, r2
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d007      	beq.n	800373a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	429a      	cmp	r2, r3
 8003744:	d000      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x120>
 8003746:	e07f      	b.n	8003848 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_SPI_TransmitReceive+0x134>
 8003750:	231a      	movs	r3, #26
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d000      	beq.n	800375c <HAL_SPI_TransmitReceive+0x134>
 800375a:	e06a      	b.n	8003832 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003780:	e057      	b.n	8003832 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x1a0>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x1a0>
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d113      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d119      	bne.n	800380a <HAL_SPI_TransmitReceive+0x1e2>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d014      	beq.n	800380a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	b292      	uxth	r2, r2
 80037ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003806:	2301      	movs	r3, #1
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800380a:	f7fd fc0f 	bl	800102c <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003816:	429a      	cmp	r2, r3
 8003818:	d80b      	bhi.n	8003832 <HAL_SPI_TransmitReceive+0x20a>
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	3301      	adds	r3, #1
 800381e:	d008      	beq.n	8003832 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003820:	232b      	movs	r3, #43	; 0x2b
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	2203      	movs	r2, #3
 8003826:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2251      	movs	r2, #81	; 0x51
 800382c:	2101      	movs	r1, #1
 800382e:	5499      	strb	r1, [r3, r2]
        goto error;
 8003830:	e0ba      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1a2      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x15a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d19d      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x15a>
 8003846:	e083      	b.n	8003950 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_SPI_TransmitReceive+0x234>
 8003850:	231a      	movs	r3, #26
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d000      	beq.n	800385c <HAL_SPI_TransmitReceive+0x234>
 800385a:	e06f      	b.n	800393c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003882:	e05b      	b.n	800393c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11c      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x2a4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x2a4>
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d114      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d119      	bne.n	800390e <HAL_SPI_TransmitReceive+0x2e6>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800390e:	f7fd fb8d 	bl	800102c <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800391a:	429a      	cmp	r2, r3
 800391c:	d802      	bhi.n	8003924 <HAL_SPI_TransmitReceive+0x2fc>
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	3301      	adds	r3, #1
 8003922:	d102      	bne.n	800392a <HAL_SPI_TransmitReceive+0x302>
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800392a:	232b      	movs	r3, #43	; 0x2b
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2203      	movs	r2, #3
 8003930:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2251      	movs	r2, #81	; 0x51
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
        goto error;
 800393a:	e035      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d19e      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x25c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d199      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f92a 	bl	8003bb0 <SPI_EndRxTxTransaction>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d007      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003960:	232b      	movs	r3, #43	; 0x2b
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800396e:	e01b      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003996:	232b      	movs	r3, #43	; 0x2b
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e003      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2251      	movs	r2, #81	; 0x51
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2250      	movs	r2, #80	; 0x50
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80039b0:	232b      	movs	r3, #43	; 0x2b
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	781b      	ldrb	r3, [r3, #0]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b00c      	add	sp, #48	; 0x30
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d0:	f7fd fb2c 	bl	800102c <HAL_GetTick>
 80039d4:	0002      	movs	r2, r0
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e0:	f7fd fb24 	bl	800102c <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e8:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	0d1b      	lsrs	r3, r3, #20
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	4353      	muls	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f6:	e058      	b.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d055      	beq.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fe:	f7fd fb15 	bl	800102c <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d902      	bls.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d142      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	21e0      	movs	r1, #224	; 0xe0
 8003a20:	438a      	bics	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2382      	movs	r3, #130	; 0x82
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d113      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	438a      	bics	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	019b      	lsls	r3, r3, #6
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d110      	bne.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	491a      	ldr	r1, [pc, #104]	; (8003ad8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a70:	400a      	ands	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	0189      	lsls	r1, r1, #6
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2251      	movs	r2, #81	; 0x51
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2250      	movs	r2, #80	; 0x50
 8003a92:	2100      	movs	r1, #0
 8003a94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e017      	b.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	425a      	negs	r2, r3
 8003aba:	4153      	adcs	r3, r2
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	001a      	movs	r2, r3
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d197      	bne.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b008      	add	sp, #32
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	ffffdfff 	.word	0xffffdfff

08003adc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	2382      	movs	r3, #130	; 0x82
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d113      	bne.n	8003b1c <SPI_EndRxTransaction+0x40>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d005      	beq.n	8003b0c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	438a      	bics	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	2382      	movs	r3, #130	; 0x82
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d12b      	bne.n	8003b80 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d012      	beq.n	8003b5a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	f7ff ff3d 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d02d      	beq.n	8003ba6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	2220      	movs	r2, #32
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e026      	b.n	8003ba8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0013      	movs	r3, r2
 8003b64:	2200      	movs	r2, #0
 8003b66:	2101      	movs	r1, #1
 8003b68:	f7ff ff2a 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d01a      	beq.n	8003ba6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	2220      	movs	r2, #32
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e013      	b.n	8003ba8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	0013      	movs	r3, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	f7ff ff17 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d007      	beq.n	8003ba6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e000      	b.n	8003ba8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <SPI_EndRxTxTransaction+0x84>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	491d      	ldr	r1, [pc, #116]	; (8003c38 <SPI_EndRxTxTransaction+0x88>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7fc faa0 	bl	8000108 <__udivsi3>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	001a      	movs	r2, r3
 8003bcc:	0013      	movs	r3, r2
 8003bce:	015b      	lsls	r3, r3, #5
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	2382      	movs	r3, #130	; 0x82
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d112      	bne.n	8003c0c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	0013      	movs	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	f7ff fee4 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d016      	beq.n	8003c2a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	2220      	movs	r2, #32
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e00f      	b.n	8003c2c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d0f2      	beq.n	8003c0c <SPI_EndRxTxTransaction+0x5c>
 8003c26:	e000      	b.n	8003c2a <SPI_EndRxTxTransaction+0x7a>
        break;
 8003c28:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b006      	add	sp, #24
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000000 	.word	0x20000000
 8003c38:	016e3600 	.word	0x016e3600

08003c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e044      	b.n	8003cd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2278      	movs	r2, #120	; 0x78
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fc fe9d 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2101      	movs	r1, #1
 8003c78:	438a      	bics	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f830 	bl	8003ce4 <UART_SetConfig>
 8003c84:	0003      	movs	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e024      	b.n	8003cd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 faa7 	bl	80041ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <HAL_UART_Init+0xa4>)
 8003caa:	400a      	ands	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	212a      	movs	r1, #42	; 0x2a
 8003cba:	438a      	bics	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 fb3f 	bl	8004354 <UART_CheckIdleState>
 8003cd6:	0003      	movs	r3, r0
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	ffffb7ff 	.word	0xffffb7ff

08003ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b08e      	sub	sp, #56	; 0x38
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cec:	231a      	movs	r3, #26
 8003cee:	2218      	movs	r2, #24
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4ac6      	ldr	r2, [pc, #792]	; (8004030 <UART_SetConfig+0x34c>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4ac1      	ldr	r2, [pc, #772]	; (8004034 <UART_SetConfig+0x350>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4abb      	ldr	r2, [pc, #748]	; (8004038 <UART_SetConfig+0x354>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d54:	4313      	orrs	r3, r2
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	4ab7      	ldr	r2, [pc, #732]	; (800403c <UART_SetConfig+0x358>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4ab3      	ldr	r2, [pc, #716]	; (8004040 <UART_SetConfig+0x35c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d131      	bne.n	8003ddc <UART_SetConfig+0xf8>
 8003d78:	4bb2      	ldr	r3, [pc, #712]	; (8004044 <UART_SetConfig+0x360>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d01d      	beq.n	8003dc0 <UART_SetConfig+0xdc>
 8003d84:	d823      	bhi.n	8003dce <UART_SetConfig+0xea>
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d00c      	beq.n	8003da4 <UART_SetConfig+0xc0>
 8003d8a:	d820      	bhi.n	8003dce <UART_SetConfig+0xea>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <UART_SetConfig+0xb2>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d00e      	beq.n	8003db2 <UART_SetConfig+0xce>
 8003d94:	e01b      	b.n	8003dce <UART_SetConfig+0xea>
 8003d96:	231b      	movs	r3, #27
 8003d98:	2218      	movs	r2, #24
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e09c      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003da4:	231b      	movs	r3, #27
 8003da6:	2218      	movs	r2, #24
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	19db      	adds	r3, r3, r7
 8003dac:	2202      	movs	r2, #2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e095      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003db2:	231b      	movs	r3, #27
 8003db4:	2218      	movs	r2, #24
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	19db      	adds	r3, r3, r7
 8003dba:	2204      	movs	r2, #4
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e08e      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003dc0:	231b      	movs	r3, #27
 8003dc2:	2218      	movs	r2, #24
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	19db      	adds	r3, r3, r7
 8003dc8:	2208      	movs	r2, #8
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e087      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003dce:	231b      	movs	r3, #27
 8003dd0:	2218      	movs	r2, #24
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	19db      	adds	r3, r3, r7
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e080      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a99      	ldr	r2, [pc, #612]	; (8004048 <UART_SetConfig+0x364>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d131      	bne.n	8003e4a <UART_SetConfig+0x166>
 8003de6:	4b97      	ldr	r3, [pc, #604]	; (8004044 <UART_SetConfig+0x360>)
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	220c      	movs	r2, #12
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d01d      	beq.n	8003e2e <UART_SetConfig+0x14a>
 8003df2:	d823      	bhi.n	8003e3c <UART_SetConfig+0x158>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00c      	beq.n	8003e12 <UART_SetConfig+0x12e>
 8003df8:	d820      	bhi.n	8003e3c <UART_SetConfig+0x158>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x120>
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d00e      	beq.n	8003e20 <UART_SetConfig+0x13c>
 8003e02:	e01b      	b.n	8003e3c <UART_SetConfig+0x158>
 8003e04:	231b      	movs	r3, #27
 8003e06:	2218      	movs	r2, #24
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	19db      	adds	r3, r3, r7
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e065      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e12:	231b      	movs	r3, #27
 8003e14:	2218      	movs	r2, #24
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e05e      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e20:	231b      	movs	r3, #27
 8003e22:	2218      	movs	r2, #24
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2204      	movs	r2, #4
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e057      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e2e:	231b      	movs	r3, #27
 8003e30:	2218      	movs	r2, #24
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2208      	movs	r2, #8
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e050      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e3c:	231b      	movs	r3, #27
 8003e3e:	2218      	movs	r2, #24
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	19db      	adds	r3, r3, r7
 8003e44:	2210      	movs	r2, #16
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e049      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <UART_SetConfig+0x354>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d13e      	bne.n	8003ed2 <UART_SetConfig+0x1ee>
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <UART_SetConfig+0x360>)
 8003e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	22c0      	movs	r2, #192	; 0xc0
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <UART_SetConfig+0x1d2>
 8003e66:	22c0      	movs	r2, #192	; 0xc0
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d82a      	bhi.n	8003ec4 <UART_SetConfig+0x1e0>
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d011      	beq.n	8003e9a <UART_SetConfig+0x1b6>
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d822      	bhi.n	8003ec4 <UART_SetConfig+0x1e0>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <UART_SetConfig+0x1a8>
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	00d2      	lsls	r2, r2, #3
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <UART_SetConfig+0x1c4>
 8003e8a:	e01b      	b.n	8003ec4 <UART_SetConfig+0x1e0>
 8003e8c:	231b      	movs	r3, #27
 8003e8e:	2218      	movs	r2, #24
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e021      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003e9a:	231b      	movs	r3, #27
 8003e9c:	2218      	movs	r2, #24
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	19db      	adds	r3, r3, r7
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e01a      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003ea8:	231b      	movs	r3, #27
 8003eaa:	2218      	movs	r2, #24
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e013      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003eb6:	231b      	movs	r3, #27
 8003eb8:	2218      	movs	r2, #24
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e00c      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	2210      	movs	r2, #16
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	e005      	b.n	8003ede <UART_SetConfig+0x1fa>
 8003ed2:	231b      	movs	r3, #27
 8003ed4:	2218      	movs	r2, #24
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	2210      	movs	r2, #16
 8003edc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a55      	ldr	r2, [pc, #340]	; (8004038 <UART_SetConfig+0x354>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d000      	beq.n	8003eea <UART_SetConfig+0x206>
 8003ee8:	e084      	b.n	8003ff4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eea:	231b      	movs	r3, #27
 8003eec:	2218      	movs	r2, #24
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	19db      	adds	r3, r3, r7
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d01d      	beq.n	8003f34 <UART_SetConfig+0x250>
 8003ef8:	dc20      	bgt.n	8003f3c <UART_SetConfig+0x258>
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d015      	beq.n	8003f2a <UART_SetConfig+0x246>
 8003efe:	dc1d      	bgt.n	8003f3c <UART_SetConfig+0x258>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <UART_SetConfig+0x226>
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0x230>
 8003f08:	e018      	b.n	8003f3c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0a:	f7fe feb3 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f12:	e01c      	b.n	8003f4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <UART_SetConfig+0x360>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d002      	beq.n	8003f24 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f1e:	4b4b      	ldr	r3, [pc, #300]	; (800404c <UART_SetConfig+0x368>)
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f22:	e014      	b.n	8003f4e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <UART_SetConfig+0x36c>)
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f28:	e011      	b.n	8003f4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe fdf5 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f32:	e00c      	b.n	8003f4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f3a:	e008      	b.n	8003f4e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f40:	231a      	movs	r3, #26
 8003f42:	2218      	movs	r2, #24
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
        break;
 8003f4c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d100      	bne.n	8003f56 <UART_SetConfig+0x272>
 8003f54:	e132      	b.n	80041bc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	0013      	movs	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d305      	bcc.n	8003f72 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d906      	bls.n	8003f80 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003f72:	231a      	movs	r3, #26
 8003f74:	2218      	movs	r2, #24
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e11d      	b.n	80041bc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	000b      	movs	r3, r1
 8003f8e:	0e1b      	lsrs	r3, r3, #24
 8003f90:	0010      	movs	r0, r2
 8003f92:	0205      	lsls	r5, r0, #8
 8003f94:	431d      	orrs	r5, r3
 8003f96:	000b      	movs	r3, r1
 8003f98:	021c      	lsls	r4, r3, #8
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68b8      	ldr	r0, [r7, #8]
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	1900      	adds	r0, r0, r4
 8003fac:	4169      	adcs	r1, r5
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f7fc f930 	bl	8000220 <__aeabi_uldivmod>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	23c0      	movs	r3, #192	; 0xc0
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d309      	bcc.n	8003fe6 <UART_SetConfig+0x302>
 8003fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	035b      	lsls	r3, r3, #13
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d204      	bcs.n	8003fe6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	e0ea      	b.n	80041bc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003fe6:	231a      	movs	r3, #26
 8003fe8:	2218      	movs	r2, #24
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e0e3      	b.n	80041bc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d000      	beq.n	8004002 <UART_SetConfig+0x31e>
 8004000:	e085      	b.n	800410e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004002:	231b      	movs	r3, #27
 8004004:	2218      	movs	r2, #24
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d837      	bhi.n	8004080 <UART_SetConfig+0x39c>
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <UART_SetConfig+0x370>)
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7fe fe2b 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800401e:	0003      	movs	r3, r0
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004022:	e036      	b.n	8004092 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fe3c 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004028:	0003      	movs	r3, r0
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800402c:	e031      	b.n	8004092 <UART_SetConfig+0x3ae>
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	efff69f3 	.word	0xefff69f3
 8004034:	ffffcfff 	.word	0xffffcfff
 8004038:	40004800 	.word	0x40004800
 800403c:	fffff4ff 	.word	0xfffff4ff
 8004040:	40013800 	.word	0x40013800
 8004044:	40021000 	.word	0x40021000
 8004048:	40004400 	.word	0x40004400
 800404c:	003d0900 	.word	0x003d0900
 8004050:	00f42400 	.word	0x00f42400
 8004054:	08004dc4 	.word	0x08004dc4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004058:	4b60      	ldr	r3, [pc, #384]	; (80041dc <UART_SetConfig+0x4f8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2210      	movs	r2, #16
 800405e:	4013      	ands	r3, r2
 8004060:	d002      	beq.n	8004068 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <UART_SetConfig+0x4fc>)
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004066:	e014      	b.n	8004092 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004068:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <UART_SetConfig+0x500>)
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800406c:	e011      	b.n	8004092 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe fd53 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004072:	0003      	movs	r3, r0
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004076:	e00c      	b.n	8004092 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800407e:	e008      	b.n	8004092 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004084:	231a      	movs	r3, #26
 8004086:	2218      	movs	r2, #24
 8004088:	189b      	adds	r3, r3, r2
 800408a:	19db      	adds	r3, r3, r7
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
        break;
 8004090:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d100      	bne.n	800409a <UART_SetConfig+0x3b6>
 8004098:	e090      	b.n	80041bc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	005a      	lsls	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	18d2      	adds	r2, r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	0019      	movs	r1, r3
 80040ac:	0010      	movs	r0, r2
 80040ae:	f7fc f82b 	bl	8000108 <__udivsi3>
 80040b2:	0003      	movs	r3, r0
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d921      	bls.n	8004100 <UART_SetConfig+0x41c>
 80040bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	025b      	lsls	r3, r3, #9
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d21c      	bcs.n	8004100 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	200e      	movs	r0, #14
 80040cc:	2418      	movs	r4, #24
 80040ce:	1903      	adds	r3, r0, r4
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	210f      	movs	r1, #15
 80040d4:	438a      	bics	r2, r1
 80040d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2207      	movs	r2, #7
 80040e0:	4013      	ands	r3, r2
 80040e2:	b299      	uxth	r1, r3
 80040e4:	1903      	adds	r3, r0, r4
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	1902      	adds	r2, r0, r4
 80040ea:	19d2      	adds	r2, r2, r7
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1902      	adds	r2, r0, r4
 80040f8:	19d2      	adds	r2, r2, r7
 80040fa:	8812      	ldrh	r2, [r2, #0]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e05d      	b.n	80041bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	231a      	movs	r3, #26
 8004102:	2218      	movs	r2, #24
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e056      	b.n	80041bc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410e:	231b      	movs	r3, #27
 8004110:	2218      	movs	r2, #24
 8004112:	189b      	adds	r3, r3, r2
 8004114:	19db      	adds	r3, r3, r7
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d822      	bhi.n	8004162 <UART_SetConfig+0x47e>
 800411c:	009a      	lsls	r2, r3, #2
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <UART_SetConfig+0x504>)
 8004120:	18d3      	adds	r3, r2, r3
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004126:	f7fe fda5 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800412a:	0003      	movs	r3, r0
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800412e:	e021      	b.n	8004174 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe fdb6 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004134:	0003      	movs	r3, r0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004138:	e01c      	b.n	8004174 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <UART_SetConfig+0x4f8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2210      	movs	r2, #16
 8004140:	4013      	ands	r3, r2
 8004142:	d002      	beq.n	800414a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004144:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <UART_SetConfig+0x4fc>)
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004148:	e014      	b.n	8004174 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <UART_SetConfig+0x500>)
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800414e:	e011      	b.n	8004174 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004150:	f7fe fce2 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004154:	0003      	movs	r3, r0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004158:	e00c      	b.n	8004174 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004166:	231a      	movs	r3, #26
 8004168:	2218      	movs	r2, #24
 800416a:	189b      	adds	r3, r3, r2
 800416c:	19db      	adds	r3, r3, r7
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
        break;
 8004172:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d020      	beq.n	80041bc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085a      	lsrs	r2, r3, #1
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	18d2      	adds	r2, r2, r3
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0019      	movs	r1, r3
 800418a:	0010      	movs	r0, r2
 800418c:	f7fb ffbc 	bl	8000108 <__udivsi3>
 8004190:	0003      	movs	r3, r0
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d90a      	bls.n	80041b0 <UART_SetConfig+0x4cc>
 800419a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d205      	bcs.n	80041b0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e005      	b.n	80041bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80041b0:	231a      	movs	r3, #26
 80041b2:	2218      	movs	r2, #24
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2200      	movs	r2, #0
 80041c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2200      	movs	r2, #0
 80041c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041c8:	231a      	movs	r3, #26
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	781b      	ldrb	r3, [r3, #0]
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b00e      	add	sp, #56	; 0x38
 80041d8:	bdb0      	pop	{r4, r5, r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	40021000 	.word	0x40021000
 80041e0:	003d0900 	.word	0x003d0900
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	08004de8 	.word	0x08004de8

080041ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d00b      	beq.n	8004216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <UART_AdvFeatureConfig+0x144>)
 8004206:	4013      	ands	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2202      	movs	r2, #2
 800421c:	4013      	ands	r3, r2
 800421e:	d00b      	beq.n	8004238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a43      	ldr	r2, [pc, #268]	; (8004334 <UART_AdvFeatureConfig+0x148>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2204      	movs	r2, #4
 800423e:	4013      	ands	r3, r2
 8004240:	d00b      	beq.n	800425a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <UART_AdvFeatureConfig+0x14c>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2208      	movs	r2, #8
 8004260:	4013      	ands	r3, r2
 8004262:	d00b      	beq.n	800427c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a34      	ldr	r2, [pc, #208]	; (800433c <UART_AdvFeatureConfig+0x150>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2210      	movs	r2, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d00b      	beq.n	800429e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <UART_AdvFeatureConfig+0x154>)
 800428e:	4013      	ands	r3, r2
 8004290:	0019      	movs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2220      	movs	r2, #32
 80042a4:	4013      	ands	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4a25      	ldr	r2, [pc, #148]	; (8004344 <UART_AdvFeatureConfig+0x158>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2240      	movs	r2, #64	; 0x40
 80042c6:	4013      	ands	r3, r2
 80042c8:	d01d      	beq.n	8004306 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <UART_AdvFeatureConfig+0x15c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	035b      	lsls	r3, r3, #13
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d10b      	bne.n	8004306 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <UART_AdvFeatureConfig+0x160>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2280      	movs	r2, #128	; 0x80
 800430c:	4013      	ands	r3, r2
 800430e:	d00b      	beq.n	8004328 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <UART_AdvFeatureConfig+0x164>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}
 8004330:	fffdffff 	.word	0xfffdffff
 8004334:	fffeffff 	.word	0xfffeffff
 8004338:	fffbffff 	.word	0xfffbffff
 800433c:	ffff7fff 	.word	0xffff7fff
 8004340:	ffffefff 	.word	0xffffefff
 8004344:	ffffdfff 	.word	0xffffdfff
 8004348:	ffefffff 	.word	0xffefffff
 800434c:	ff9fffff 	.word	0xff9fffff
 8004350:	fff7ffff 	.word	0xfff7ffff

08004354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b092      	sub	sp, #72	; 0x48
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2284      	movs	r2, #132	; 0x84
 8004360:	2100      	movs	r1, #0
 8004362:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004364:	f7fc fe62 	bl	800102c <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2208      	movs	r2, #8
 8004374:	4013      	ands	r3, r2
 8004376:	2b08      	cmp	r3, #8
 8004378:	d12c      	bne.n	80043d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	0391      	lsls	r1, r2, #14
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4a46      	ldr	r2, [pc, #280]	; (800449c <UART_CheckIdleState+0x148>)
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	f000 f88c 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d021      	beq.n	80043d4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
 800439a:	2301      	movs	r3, #1
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	438a      	bics	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2278      	movs	r2, #120	; 0x78
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e05f      	b.n	8004494 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d146      	bne.n	8004470 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	03d1      	lsls	r1, r2, #15
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <UART_CheckIdleState+0x148>)
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f000 f858 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d03b      	beq.n	8004470 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f8:	f3ef 8310 	mrs	r3, PRIMASK
 80043fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80043fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
 8004402:	2301      	movs	r3, #1
 8004404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4921      	ldr	r1, [pc, #132]	; (80044a0 <UART_CheckIdleState+0x14c>)
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8310 	mrs	r3, PRIMASK
 800442e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004430:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
 8004434:	2301      	movs	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f383 8810 	msr	PRIMASK, r3
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	438a      	bics	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f383 8810 	msr	PRIMASK, r3
}
 800445a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	2120      	movs	r1, #32
 8004462:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2278      	movs	r2, #120	; 0x78
 8004468:	2100      	movs	r1, #0
 800446a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e011      	b.n	8004494 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2280      	movs	r2, #128	; 0x80
 800447a:	2120      	movs	r1, #32
 800447c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2278      	movs	r2, #120	; 0x78
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b010      	add	sp, #64	; 0x40
 800449a:	bd80      	pop	{r7, pc}
 800449c:	01ffffff 	.word	0x01ffffff
 80044a0:	fffffedf 	.word	0xfffffedf

080044a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b4:	e04b      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3301      	adds	r3, #1
 80044ba:	d048      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fc fdb6 	bl	800102c <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e04b      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2204      	movs	r2, #4
 80044de:	4013      	ands	r3, r2
 80044e0:	d035      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2208      	movs	r2, #8
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d111      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2208      	movs	r2, #8
 80044f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f83c 	bl	8004578 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2284      	movs	r2, #132	; 0x84
 8004504:	2108      	movs	r1, #8
 8004506:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2278      	movs	r2, #120	; 0x78
 800450c:	2100      	movs	r1, #0
 800450e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e02c      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	401a      	ands	r2, r3
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	429a      	cmp	r2, r3
 8004526:	d112      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f81f 	bl	8004578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2284      	movs	r2, #132	; 0x84
 800453e:	2120      	movs	r1, #32
 8004540:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2278      	movs	r2, #120	; 0x78
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e00f      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	425a      	negs	r2, r3
 800455e:	4153      	adcs	r3, r2
 8004560:	b2db      	uxtb	r3, r3
 8004562:	001a      	movs	r2, r3
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d0a4      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	; 0x38
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	617b      	str	r3, [r7, #20]
  return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4926      	ldr	r1, [pc, #152]	; (800463c <UART_EndRxTransfer+0xc4>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	623b      	str	r3, [r7, #32]
  return(result);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	633b      	str	r3, [r7, #48]	; 0x30
 80045bc:	2301      	movs	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d118      	bne.n	800461e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	2301      	movs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2110      	movs	r1, #16
 800460e:	438a      	bics	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	2120      	movs	r1, #32
 8004624:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b00e      	add	sp, #56	; 0x38
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	fffffedf 	.word	0xfffffedf

08004640 <memset>:
 8004640:	0003      	movs	r3, r0
 8004642:	1882      	adds	r2, r0, r2
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	7019      	strb	r1, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	2600      	movs	r6, #0
 8004654:	4c0c      	ldr	r4, [pc, #48]	; (8004688 <__libc_init_array+0x38>)
 8004656:	4d0d      	ldr	r5, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	2600      	movs	r6, #0
 8004662:	f000 f819 	bl	8004698 <_init>
 8004666:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x40>)
 8004668:	4d0a      	ldr	r5, [pc, #40]	; (8004694 <__libc_init_array+0x44>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	00b3      	lsls	r3, r6, #2
 8004676:	58eb      	ldr	r3, [r5, r3]
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	00b3      	lsls	r3, r6, #2
 8004680:	58eb      	ldr	r3, [r5, r3]
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	08004e14 	.word	0x08004e14
 800468c:	08004e14 	.word	0x08004e14
 8004690:	08004e18 	.word	0x08004e18
 8004694:	08004e14 	.word	0x08004e14

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
