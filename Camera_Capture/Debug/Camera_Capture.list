
Camera_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c994  0800c994  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c994  0800c994  0001c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c99c  0800c99c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f70  20000078  0800ca1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  0800ca1c  00020fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191f1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a5e  00000000  00000000  000392d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0003cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001287  00000000  00000000  0003e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018156  00000000  00000000  0003f77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f938  00000000  00000000  000578d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008895d  00000000  00000000  0007720d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b34  00000000  00000000  000ffb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001056a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bbe0 	.word	0x0800bbe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800bbe0 	.word	0x0800bbe0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <Start_DMA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Start_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t len) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	// 1. Mettre le CS à LOW pour commencer la communication
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <Start_DMA+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fe9e 	bl	8003220 <HAL_GPIO_WritePin>

	// 2. Configuration du SPI en mode réception DMA
	if (HAL_SPI_Receive_DMA(hspi, pData, len) != HAL_OK) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	0018      	movs	r0, r3
 80004ee:	f005 f97f 	bl	80057f0 <HAL_SPI_Receive_DMA>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <Start_DMA+0x2e>
		Error_Handler();
 80004f6:	f000 fe63 	bl	80011c0 <Error_Handler>
	}
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	0018      	movs	r0, r3
 800051a:	f002 fe81 	bl	8003220 <HAL_GPIO_WritePin>
	adc_flag = 1;
 800051e:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_ADC_ConvCpltCallback+0x24>)
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200007d8 	.word	0x200007d8

08000530 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == B1_Pin){
 800053c:	1dbb      	adds	r3, r7, #6
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	019b      	lsls	r3, r3, #6
 8000544:	429a      	cmp	r2, r3
 8000546:	d102      	bne.n	800054e <HAL_GPIO_EXTI_Callback+0x1e>
		capture_trigger_flag = true;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_GPIO_EXTI_Callback+0x28>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
	}
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	200007db 	.word	0x200007db

0800055c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(tim == &htim21){
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000568:	429a      	cmp	r2, r3
 800056a:	d102      	bne.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x16>
		timer_interupt_flag = true;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
	}
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	2000030c 	.word	0x2000030c
 8000580:	200007de 	.word	0x200007de

08000584 <Capture_SD>:

void Capture_SD(uint32_t length) {
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	4c80      	ldr	r4, [pc, #512]	; (8000788 <Capture_SD+0x204>)
 8000588:	44a5      	add	sp, r4
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	uint8_t temp_last;
	uint8_t SD_Buffer[BURST_SIZE];
	uint8_t DMA_Buffer[BURST_SIZE];
	uint8_t is_header = false;
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <Capture_SD+0x208>)
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	char filename[25] = "Image";
 8000596:	4b7e      	ldr	r3, [pc, #504]	; (8000790 <Capture_SD+0x20c>)
 8000598:	2286      	movs	r2, #134	; 0x86
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	189b      	adds	r3, r3, r2
 800059e:	19d9      	adds	r1, r3, r7
 80005a0:	4a7c      	ldr	r2, [pc, #496]	; (8000794 <Capture_SD+0x210>)
 80005a2:	000b      	movs	r3, r1
 80005a4:	6810      	ldr	r0, [r2, #0]
 80005a6:	6018      	str	r0, [r3, #0]
 80005a8:	8892      	ldrh	r2, [r2, #4]
 80005aa:	809a      	strh	r2, [r3, #4]
 80005ac:	2306      	movs	r3, #6
 80005ae:	18cb      	adds	r3, r1, r3
 80005b0:	2213      	movs	r2, #19
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f00a fe8d 	bl	800b2d4 <memset>
	sprintf(filename, "Image%u.jpg", capture_index);
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <Capture_SD+0x214>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	001a      	movs	r2, r3
 80005c0:	4976      	ldr	r1, [pc, #472]	; (800079c <Capture_SD+0x218>)
 80005c2:	230c      	movs	r3, #12
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	f00a fe64 	bl	800b294 <siprintf>


	while (SD_Card_Open(filename)) {
 80005cc:	e002      	b.n	80005d4 <Capture_SD+0x50>
		HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f001 fc74 	bl	8001ebc <HAL_Delay>
	while (SD_Card_Open(filename)) {
 80005d4:	230c      	movs	r3, #12
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fbc3 	bl	8001d64 <SD_Card_Open>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d1f5      	bne.n	80005ce <Capture_SD+0x4a>
	}

	capture_index++;
 80005e2:	4b6d      	ldr	r3, [pc, #436]	; (8000798 <Capture_SD+0x214>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b6b      	ldr	r3, [pc, #428]	; (8000798 <Capture_SD+0x214>)
 80005ec:	801a      	strh	r2, [r3, #0]

	while (length > 0) {
 80005ee:	e0c0      	b.n	8000772 <Capture_SD+0x1ee>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005f0:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <Capture_SD+0x21c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fe12 	bl	8003220 <HAL_GPIO_WritePin>
		set_fifo_burst();
 80005fc:	f001 fa74 	bl	8001ae8 <set_fifo_burst>
		DMA_Complet = 0;
 8000600:	4b68      	ldr	r3, [pc, #416]	; (80007a4 <Capture_SD+0x220>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]

		length = length - BURST_SIZE;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a67      	ldr	r2, [pc, #412]	; (80007a8 <Capture_SD+0x224>)
 800060a:	4694      	mov	ip, r2
 800060c:	4463      	add	r3, ip
 800060e:	607b      	str	r3, [r7, #4]
		if (length > BURST_SIZE) {
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	429a      	cmp	r2, r3
 8000618:	d908      	bls.n	800062c <Capture_SD+0xa8>
			Start_DMA(&hspi1, DMA_Buffer, BURST_SIZE);
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	009a      	lsls	r2, r3, #2
 800061e:	2328      	movs	r3, #40	; 0x28
 8000620:	18f9      	adds	r1, r7, r3
 8000622:	4b62      	ldr	r3, [pc, #392]	; (80007ac <Capture_SD+0x228>)
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff ff51 	bl	80004cc <Start_DMA>
 800062a:	e009      	b.n	8000640 <Capture_SD+0xbc>
		} else {
			Start_DMA(&hspi1, DMA_Buffer, BURST_SIZE);
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	009a      	lsls	r2, r3, #2
 8000630:	2328      	movs	r3, #40	; 0x28
 8000632:	18f9      	adds	r1, r7, r3
 8000634:	4b5d      	ldr	r3, [pc, #372]	; (80007ac <Capture_SD+0x228>)
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff ff48 	bl	80004cc <Start_DMA>
			length = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
		}
		while (!DMA_Complet) {
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	4b58      	ldr	r3, [pc, #352]	; (80007a4 <Capture_SD+0x220>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0fb      	beq.n	8000642 <Capture_SD+0xbe>
		};
		uint16_t i;
		uint16_t index = 0;
 800064a:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <Capture_SD+0x22c>)
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	2200      	movs	r2, #0
 8000650:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < BURST_SIZE; i++) {
 8000652:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <Capture_SD+0x230>)
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	2200      	movs	r2, #0
 8000658:	801a      	strh	r2, [r3, #0]
 800065a:	e075      	b.n	8000748 <Capture_SD+0x1c4>
			if (is_header == true) {
 800065c:	4b4b      	ldr	r3, [pc, #300]	; (800078c <Capture_SD+0x208>)
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d115      	bne.n	8000692 <Capture_SD+0x10e>
				SD_Buffer[index] = DMA_Buffer[i];
 8000666:	4b53      	ldr	r3, [pc, #332]	; (80007b4 <Capture_SD+0x230>)
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	4850      	ldr	r0, [pc, #320]	; (80007b0 <Capture_SD+0x22c>)
 800066e:	183b      	adds	r3, r7, r0
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	4951      	ldr	r1, [pc, #324]	; (80007b8 <Capture_SD+0x234>)
 8000674:	2486      	movs	r4, #134	; 0x86
 8000676:	00e4      	lsls	r4, r4, #3
 8000678:	1909      	adds	r1, r1, r4
 800067a:	19c9      	adds	r1, r1, r7
 800067c:	5c89      	ldrb	r1, [r1, r2]
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <Capture_SD+0x238>)
 8000680:	1912      	adds	r2, r2, r4
 8000682:	19d2      	adds	r2, r2, r7
 8000684:	54d1      	strb	r1, [r2, r3]
				index++;
 8000686:	183b      	adds	r3, r7, r0
 8000688:	881a      	ldrh	r2, [r3, #0]
 800068a:	183b      	adds	r3, r7, r0
 800068c:	3201      	adds	r2, #1
 800068e:	801a      	strh	r2, [r3, #0]
 8000690:	e034      	b.n	80006fc <Capture_SD+0x178>

			} else if ((DMA_Buffer[i] == 0xD8) & (temp_last == 0xFF)) {	//If find the start
 8000692:	4d48      	ldr	r5, [pc, #288]	; (80007b4 <Capture_SD+0x230>)
 8000694:	197b      	adds	r3, r7, r5
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4a47      	ldr	r2, [pc, #284]	; (80007b8 <Capture_SD+0x234>)
 800069a:	2086      	movs	r0, #134	; 0x86
 800069c:	00c0      	lsls	r0, r0, #3
 800069e:	1812      	adds	r2, r2, r0
 80006a0:	19d2      	adds	r2, r2, r7
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	3bd8      	subs	r3, #216	; 0xd8
 80006a6:	425a      	negs	r2, r3
 80006a8:	4153      	adcs	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4e44      	ldr	r6, [pc, #272]	; (80007c0 <Capture_SD+0x23c>)
 80006ae:	19ba      	adds	r2, r7, r6
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	3aff      	subs	r2, #255	; 0xff
 80006b4:	4251      	negs	r1, r2
 80006b6:	414a      	adcs	r2, r1
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	4013      	ands	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d01c      	beq.n	80006fc <Capture_SD+0x178>
				SD_Buffer[index] = temp_last;
 80006c2:	4c3b      	ldr	r4, [pc, #236]	; (80007b0 <Capture_SD+0x22c>)
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <Capture_SD+0x238>)
 80006ca:	1812      	adds	r2, r2, r0
 80006cc:	19d2      	adds	r2, r2, r7
 80006ce:	19b9      	adds	r1, r7, r6
 80006d0:	7809      	ldrb	r1, [r1, #0]
 80006d2:	54d1      	strb	r1, [r2, r3]
				SD_Buffer[index + 1] = DMA_Buffer[i];
 80006d4:	197b      	adds	r3, r7, r5
 80006d6:	881a      	ldrh	r2, [r3, #0]
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4936      	ldr	r1, [pc, #216]	; (80007b8 <Capture_SD+0x234>)
 80006e0:	1809      	adds	r1, r1, r0
 80006e2:	19c9      	adds	r1, r1, r7
 80006e4:	5c89      	ldrb	r1, [r1, r2]
 80006e6:	4a35      	ldr	r2, [pc, #212]	; (80007bc <Capture_SD+0x238>)
 80006e8:	1812      	adds	r2, r2, r0
 80006ea:	19d2      	adds	r2, r2, r7
 80006ec:	54d1      	strb	r1, [r2, r3]
				index = 2;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2202      	movs	r2, #2
 80006f2:	801a      	strh	r2, [r3, #0]
				is_header = true;
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <Capture_SD+0x208>)
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
			}
			if ((DMA_Buffer[i] == 0xD9) && (temp_last == 0xFF)) { //If find the end ,break while,
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <Capture_SD+0x230>)
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <Capture_SD+0x234>)
 8000704:	2186      	movs	r1, #134	; 0x86
 8000706:	00c9      	lsls	r1, r1, #3
 8000708:	1852      	adds	r2, r2, r1
 800070a:	19d2      	adds	r2, r2, r7
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	2bd9      	cmp	r3, #217	; 0xd9
 8000710:	d109      	bne.n	8000726 <Capture_SD+0x1a2>
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <Capture_SD+0x23c>)
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2bff      	cmp	r3, #255	; 0xff
 800071a:	d104      	bne.n	8000726 <Capture_SD+0x1a2>
				is_header = false;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <Capture_SD+0x208>)
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
				break;
 8000724:	e018      	b.n	8000758 <Capture_SD+0x1d4>
			}
			temp_last = DMA_Buffer[i];
 8000726:	4823      	ldr	r0, [pc, #140]	; (80007b4 <Capture_SD+0x230>)
 8000728:	183b      	adds	r3, r7, r0
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <Capture_SD+0x23c>)
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	4921      	ldr	r1, [pc, #132]	; (80007b8 <Capture_SD+0x234>)
 8000732:	2486      	movs	r4, #134	; 0x86
 8000734:	00e4      	lsls	r4, r4, #3
 8000736:	1909      	adds	r1, r1, r4
 8000738:	19c9      	adds	r1, r1, r7
 800073a:	5c8a      	ldrb	r2, [r1, r2]
 800073c:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < BURST_SIZE; i++) {
 800073e:	183b      	adds	r3, r7, r0
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	183b      	adds	r3, r7, r0
 8000744:	3201      	adds	r2, #1
 8000746:	801a      	strh	r2, [r3, #0]
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <Capture_SD+0x230>)
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	429a      	cmp	r2, r3
 8000754:	d200      	bcs.n	8000758 <Capture_SD+0x1d4>
 8000756:	e781      	b.n	800065c <Capture_SD+0xd8>
		}
		uint8_t BW = SD_Card_Write(&SD_Buffer, BURST_SIZE);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	009a      	lsls	r2, r3, #2
 800075c:	238a      	movs	r3, #138	; 0x8a
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fb15 	bl	8001d94 <SD_Card_Write>
 800076a:	0002      	movs	r2, r0
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <Capture_SD+0x240>)
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	701a      	strb	r2, [r3, #0]
	while (length > 0) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d000      	beq.n	800077a <Capture_SD+0x1f6>
 8000778:	e73a      	b.n	80005f0 <Capture_SD+0x6c>
	}
	SD_Card_Close();
 800077a:	f001 fb23 	bl	8001dc4 <SD_Card_Close>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <Capture_SD+0x244>)
 8000784:	449d      	add	sp, r3
 8000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000788:	fffffbcc 	.word	0xfffffbcc
 800078c:	0000042e 	.word	0x0000042e
 8000790:	fffffbdc 	.word	0xfffffbdc
 8000794:	0800bc04 	.word	0x0800bc04
 8000798:	200007dc 	.word	0x200007dc
 800079c:	0800bbf8 	.word	0x0800bbf8
 80007a0:	50000800 	.word	0x50000800
 80007a4:	200003d4 	.word	0x200003d4
 80007a8:	fffffe00 	.word	0xfffffe00
 80007ac:	2000018c 	.word	0x2000018c
 80007b0:	0000042c 	.word	0x0000042c
 80007b4:	0000042a 	.word	0x0000042a
 80007b8:	fffffbf8 	.word	0xfffffbf8
 80007bc:	fffffdf8 	.word	0xfffffdf8
 80007c0:	0000042f 	.word	0x0000042f
 80007c4:	00000429 	.word	0x00000429
 80007c8:	00000434 	.word	0x00000434

080007cc <Corriger_Offset_ADC>:

/**
 *  Corrige l'offset de 1.25V sur les données ADC 8 bits.
 */
void Corriger_Offset_ADC(uint8_t *input_data, int8_t *output_data, uint16_t length) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80007da:	2316      	movs	r3, #22
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	2200      	movs	r2, #0
 80007e0:	801a      	strh	r2, [r3, #0]
 80007e2:	e02d      	b.n	8000840 <Corriger_Offset_ADC+0x74>
        // Suppression de l'offset
        int16_t valeur_corrigee = (int16_t)input_data[i] + 28;
 80007e4:	2316      	movs	r3, #22
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	331c      	adds	r3, #28
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	2114      	movs	r1, #20
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	801a      	strh	r2, [r3, #0]

        // Saturation des valeurs entre -128 et 127 (format audio 8 bits signé)
        if (valeur_corrigee > 255) {
 80007fc:	000a      	movs	r2, r1
 80007fe:	18bb      	adds	r3, r7, r2
 8000800:	2100      	movs	r1, #0
 8000802:	5e5b      	ldrsh	r3, [r3, r1]
 8000804:	2bff      	cmp	r3, #255	; 0xff
 8000806:	dd03      	ble.n	8000810 <Corriger_Offset_ADC+0x44>
            valeur_corrigee = 255;
 8000808:	18bb      	adds	r3, r7, r2
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	801a      	strh	r2, [r3, #0]
 800080e:	e008      	b.n	8000822 <Corriger_Offset_ADC+0x56>
        } else if (valeur_corrigee < 0) {
 8000810:	2214      	movs	r2, #20
 8000812:	18bb      	adds	r3, r7, r2
 8000814:	2100      	movs	r1, #0
 8000816:	5e5b      	ldrsh	r3, [r3, r1]
 8000818:	2b00      	cmp	r3, #0
 800081a:	da02      	bge.n	8000822 <Corriger_Offset_ADC+0x56>
            valeur_corrigee = 0;
 800081c:	18bb      	adds	r3, r7, r2
 800081e:	2200      	movs	r2, #0
 8000820:	801a      	strh	r2, [r3, #0]
        }

        output_data[i] = (int8_t)valeur_corrigee;
 8000822:	2116      	movs	r1, #22
 8000824:	187b      	adds	r3, r7, r1
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	2214      	movs	r2, #20
 800082e:	18ba      	adds	r2, r7, r2
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	b252      	sxtb	r2, r2
 8000834:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8000836:	187b      	adds	r3, r7, r1
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	187b      	adds	r3, r7, r1
 800083c:	3201      	adds	r2, #1
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	2316      	movs	r3, #22
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3ca      	bcc.n	80007e4 <Corriger_Offset_ADC+0x18>
    }
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b006      	add	sp, #24
 8000856:	bd80      	pop	{r7, pc}

08000858 <Save_Audio>:

void Save_Audio(uint8_t len, uint16_t buf){
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	1c0a      	adds	r2, r1, #0
 8000868:	801a      	strh	r2, [r3, #0]
	uint8_t header[44] = {0x52, 0x49, 0x46, 0x46, 0x00, 0xA8, 0x55, 0x20, 0x57, 0x41, 0x56,
 800086a:	250c      	movs	r5, #12
 800086c:	197b      	adds	r3, r7, r5
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <Save_Audio+0x64>)
 8000870:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000872:	c313      	stmia	r3!, {r0, r1, r4}
 8000874:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000876:	c313      	stmia	r3!, {r0, r1, r4}
 8000878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800087a:	c313      	stmia	r3!, {r0, r1, r4}
 800087c:	ca03      	ldmia	r2!, {r0, r1}
 800087e:	c303      	stmia	r3!, {r0, r1}
					   0x45, 0x66, 0x6d, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00,
					   0x01, 0x00, 0x10, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x01,
					   0x00, 0x08, 0x00, 0x64, 0x61, 0x74, 0x61, 0x55, 0xd7, 0xff, 0xff};

	if (!audio_header_flag){
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <Save_Audio+0x68>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <Save_Audio+0x40>
		SD_Card_Write(&header, 44);
 8000888:	197b      	adds	r3, r7, r5
 800088a:	212c      	movs	r1, #44	; 0x2c
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fa81 	bl	8001d94 <SD_Card_Write>
		audio_header_flag = true;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <Save_Audio+0x68>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
	}
	Corriger_Offset_ADC(&adc_buffer, &adc_buffer_offset, BURST_SIZE_ADC);
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	009a      	lsls	r2, r3, #2
 800089c:	4909      	ldr	r1, [pc, #36]	; (80008c4 <Save_Audio+0x6c>)
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <Save_Audio+0x70>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff ff93 	bl	80007cc <Corriger_Offset_ADC>
	SD_Card_Write(&adc_buffer_offset, BURST_SIZE_ADC);
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	009a      	lsls	r2, r3, #2
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <Save_Audio+0x6c>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fa70 	bl	8001d94 <SD_Card_Write>
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b00e      	add	sp, #56	; 0x38
 80008ba:	bdb0      	pop	{r4, r5, r7, pc}
 80008bc:	0800bc20 	.word	0x0800bc20
 80008c0:	200007d9 	.word	0x200007d9
 80008c4:	200005d8 	.word	0x200005d8
 80008c8:	200003d8 	.word	0x200003d8

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f001 fa83 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f933 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 fbad 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 80008de:	f000 fb85 	bl	8000fec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008e2:	f000 fb53 	bl	8000f8c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80008e6:	f000 fa37 	bl	8000d58 <MX_SPI1_Init>
  MX_I2C1_Init();
 80008ea:	f000 f9f5 	bl	8000cd8 <MX_I2C1_Init>
  MX_FATFS_Init();
 80008ee:	f006 fe5d 	bl	80075ac <MX_FATFS_Init>
  MX_ADC_Init();
 80008f2:	f000 f98d 	bl	8000c10 <MX_ADC_Init>
  MX_TIM2_Init();
 80008f6:	f000 fa9f 	bl	8000e38 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008fa:	f000 fa65 	bl	8000dc8 <MX_SPI2_Init>
  MX_TIM21_Init();
 80008fe:	f000 faed 	bl	8000edc <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000902:	4b79      	ldr	r3, [pc, #484]	; (8000ae8 <main+0x21c>)
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	0018      	movs	r0, r3
 800090a:	f002 fc89 	bl	8003220 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800090e:	2064      	movs	r0, #100	; 0x64
 8000910:	f001 fad4 	bl	8001ebc <HAL_Delay>

	uint8_t SD_Status = 1;
 8000914:	2325      	movs	r3, #37	; 0x25
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]

	while (1) {
		SD_Status = SD_Card_Init();
 800091c:	f001 fa00 	bl	8001d20 <SD_Card_Init>
 8000920:	0002      	movs	r2, r0
 8000922:	2125      	movs	r1, #37	; 0x25
 8000924:	187b      	adds	r3, r7, r1
 8000926:	701a      	strb	r2, [r3, #0]
		if (!SD_Status) {
 8000928:	187b      	adds	r3, r7, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d004      	beq.n	800093a <main+0x6e>
			break;
		}
		Debug_Print("No SD Card\r\n");
 8000930:	4b6e      	ldr	r3, [pc, #440]	; (8000aec <main+0x220>)
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fc10 	bl	8001158 <Debug_Print>
		SD_Status = SD_Card_Init();
 8000938:	e7f0      	b.n	800091c <main+0x50>
			break;
 800093a:	46c0      	nop			; (mov r8, r8)
	}

	Debug_Print("SD Card Mounted Successfully! \r\n");
 800093c:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <main+0x224>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fc0a 	bl	8001158 <Debug_Print>

	ArduCAM_Init(OV2640);
 8000944:	2005      	movs	r0, #5
 8000946:	f000 ff65 	bl	8001814 <ArduCAM_Init>
	Debug_Print("ArduCAM Ready! \r\n");
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <main+0x228>)
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fc03 	bl	8001158 <Debug_Print>

	while(SD_Card_Open("temp.wav")) {
 8000952:	e002      	b.n	800095a <main+0x8e>
		HAL_Delay(100);
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f001 fab1 	bl	8001ebc <HAL_Delay>
	while(SD_Card_Open("temp.wav")) {
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <main+0x22c>)
 800095c:	0018      	movs	r0, r3
 800095e:	f001 fa01 	bl	8001d64 <SD_Card_Open>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d1f6      	bne.n	8000954 <main+0x88>
	}

	char audio_filename[25] = "Audio";
 8000966:	1d39      	adds	r1, r7, #4
 8000968:	4a64      	ldr	r2, [pc, #400]	; (8000afc <main+0x230>)
 800096a:	000b      	movs	r3, r1
 800096c:	6810      	ldr	r0, [r2, #0]
 800096e:	6018      	str	r0, [r3, #0]
 8000970:	8892      	ldrh	r2, [r2, #4]
 8000972:	809a      	strh	r2, [r3, #4]
 8000974:	2306      	movs	r3, #6
 8000976:	18cb      	adds	r3, r1, r3
 8000978:	2213      	movs	r2, #19
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f00a fca9 	bl	800b2d4 <memset>

	HAL_ADC_Start_DMA(&hadc, &adc_buffer, BURST_SIZE_ADC);
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	009a      	lsls	r2, r3, #2
 8000986:	495e      	ldr	r1, [pc, #376]	; (8000b00 <main+0x234>)
 8000988:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <main+0x238>)
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fc4a 	bl	8002224 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8000990:	4b5d      	ldr	r3, [pc, #372]	; (8000b08 <main+0x23c>)
 8000992:	0018      	movs	r0, r3
 8000994:	f005 fc90 	bl	80062b8 <HAL_TIM_Base_Start>

	uint32_t len;
	uint16_t audio_size = 0;
 8000998:	2326      	movs	r3, #38	; 0x26
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (capture_trigger_flag == true) {
 80009a0:	4b5a      	ldr	r3, [pc, #360]	; (8000b0c <main+0x240>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d11d      	bne.n	80009e4 <main+0x118>
			set_power_up();
 80009a8:	f001 f803 	bl	80019b2 <set_power_up>
			ArduCAM_Init(OV2640);
 80009ac:	2005      	movs	r0, #5
 80009ae:	f000 ff31 	bl	8001814 <ArduCAM_Init>
			Debug_Print("Capture Start! \r\n");
 80009b2:	4b57      	ldr	r3, [pc, #348]	; (8000b10 <main+0x244>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fbcf 	bl	8001158 <Debug_Print>
			len = SingleCapTransfer();
 80009ba:	f000 ffa1 	bl	8001900 <SingleCapTransfer>
 80009be:	0003      	movs	r3, r0
 80009c0:	623b      	str	r3, [r7, #32]
			Debug_Print("Capture Done! \r\n");
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <main+0x248>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fbc7 	bl	8001158 <Debug_Print>
			Capture_SD(len);
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fdd9 	bl	8000584 <Capture_SD>
			Debug_Print("Capture Save! \r\n");
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <main+0x24c>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fbbf 	bl	8001158 <Debug_Print>
			set_power_down();
 80009da:	f000 ffe1 	bl	80019a0 <set_power_down>
			capture_trigger_flag = false;
 80009de:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <main+0x240>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		}
		if(adc_flag == true && audio_done_flag == false){
 80009e4:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <main+0x250>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d13b      	bne.n	8000a64 <main+0x198>
 80009ec:	4b4c      	ldr	r3, [pc, #304]	; (8000b20 <main+0x254>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d137      	bne.n	8000a64 <main+0x198>
			if(audio_size >= 20 * AUDIO_REC_SEC){
 80009f4:	2426      	movs	r4, #38	; 0x26
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	2bc7      	cmp	r3, #199	; 0xc7
 80009fc:	d919      	bls.n	8000a32 <main+0x166>
				Save_Audio(audio_size, adc_buffer);
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <main+0x234>)
 8000a06:	b292      	uxth	r2, r2
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff24 	bl	8000858 <Save_Audio>
				SD_Card_Close();
 8000a10:	f001 f9d8 	bl	8001dc4 <SD_Card_Close>
				//SD_Card_Unmount();
				Debug_Print("Record Finish! \r\n");
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <main+0x258>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fb9e 	bl	8001158 <Debug_Print>
				HAL_ADC_Stop_DMA(&hadc);
 8000a1c:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <main+0x238>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fc82 	bl	8002328 <HAL_ADC_Stop_DMA>
				audio_size = 0;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
				audio_done_flag = true;
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <main+0x254>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e00e      	b.n	8000a50 <main+0x184>
			}else{
				Save_Audio(audio_size, adc_buffer);
 8000a32:	2426      	movs	r4, #38	; 0x26
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <main+0x234>)
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff09 	bl	8000858 <Save_Audio>
				audio_size++;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	881a      	ldrh	r2, [r3, #0]
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	801a      	strh	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2200      	movs	r2, #0
 8000a56:	2120      	movs	r1, #32
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fbe1 	bl	8003220 <HAL_GPIO_WritePin>
			adc_flag = 0;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <main+0x250>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
		}
		if(audio_done_flag){
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <main+0x254>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d099      	beq.n	80009a0 <main+0xd4>
			HAL_TIM_Base_Start_IT(&htim21);
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <main+0x25c>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f005 fc66 	bl	8006340 <HAL_TIM_Base_Start_IT>
			timer_interupt_flag = false;
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <main+0x260>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
			Debug_Print("Going to sleep... \r\n");
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <main+0x264>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fb6b 	bl	8001158 <Debug_Print>
			HAL_SuspendTick();
 8000a82:	f001 fa3f 	bl	8001f04 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000a86:	2102      	movs	r1, #2
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f003 f9f7 	bl	8003e7c <HAL_PWR_EnterSLEEPMode>
			Debug_Print("Wake up \r\n");
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <main+0x268>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fb61 	bl	8001158 <Debug_Print>
			HAL_ResumeTick();
 8000a96:	f001 fa43 	bl	8001f20 <HAL_ResumeTick>

			if (timer_interupt_flag == true){
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <main+0x260>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d000      	beq.n	8000aa4 <main+0x1d8>
 8000aa2:	e77d      	b.n	80009a0 <main+0xd4>
				audio_done_flag = false;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <main+0x254>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_DMA(&hadc, &adc_buffer, BURST_SIZE_ADC);
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	009a      	lsls	r2, r3, #2
 8000aae:	4914      	ldr	r1, [pc, #80]	; (8000b00 <main+0x234>)
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <main+0x238>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fbb6 	bl	8002224 <HAL_ADC_Start_DMA>
				HAL_TIM_Base_Stop_IT(&htim21);
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <main+0x25c>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f005 fc8c 	bl	80063d8 <HAL_TIM_Base_Stop_IT>
				sprintf(audio_filename, "Auido%u.wav", capture_index);
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <main+0x26c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <main+0x270>)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	0018      	movs	r0, r3
 8000acc:	f00a fbe2 	bl	800b294 <siprintf>
				SD_Card_Open(audio_filename);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 f946 	bl	8001d64 <SD_Card_Open>
				capture_index++;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <main+0x26c>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <main+0x26c>)
 8000ae2:	801a      	strh	r2, [r3, #0]
		if (capture_trigger_flag == true) {
 8000ae4:	e75c      	b.n	80009a0 <main+0xd4>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	50000800 	.word	0x50000800
 8000aec:	0800bc4c 	.word	0x0800bc4c
 8000af0:	0800bc5c 	.word	0x0800bc5c
 8000af4:	0800bc80 	.word	0x0800bc80
 8000af8:	0800bc94 	.word	0x0800bc94
 8000afc:	0800bd20 	.word	0x0800bd20
 8000b00:	200003d8 	.word	0x200003d8
 8000b04:	20000094 	.word	0x20000094
 8000b08:	200002cc 	.word	0x200002cc
 8000b0c:	200007db 	.word	0x200007db
 8000b10:	0800bca0 	.word	0x0800bca0
 8000b14:	0800bcb4 	.word	0x0800bcb4
 8000b18:	0800bcc8 	.word	0x0800bcc8
 8000b1c:	200007d8 	.word	0x200007d8
 8000b20:	200007da 	.word	0x200007da
 8000b24:	0800bcdc 	.word	0x0800bcdc
 8000b28:	2000030c 	.word	0x2000030c
 8000b2c:	200007de 	.word	0x200007de
 8000b30:	0800bcf0 	.word	0x0800bcf0
 8000b34:	0800bd08 	.word	0x0800bd08
 8000b38:	200007dc 	.word	0x200007dc
 8000b3c:	0800bd14 	.word	0x0800bd14

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b09d      	sub	sp, #116	; 0x74
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	2438      	movs	r4, #56	; 0x38
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2338      	movs	r3, #56	; 0x38
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f00a fbbf 	bl	800b2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b56:	2324      	movs	r3, #36	; 0x24
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	2314      	movs	r3, #20
 8000b5e:	001a      	movs	r2, r3
 8000b60:	2100      	movs	r1, #0
 8000b62:	f00a fbb7 	bl	800b2d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b66:	003b      	movs	r3, r7
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2324      	movs	r3, #36	; 0x24
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f00a fbb0 	bl	800b2d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a24      	ldr	r2, [pc, #144]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0109      	lsls	r1, r1, #4
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	22a0      	movs	r2, #160	; 0xa0
 8000b90:	02d2      	lsls	r2, r2, #11
 8000b92:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f003 f9c5 	bl	8003f2c <HAL_RCC_OscConfig>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 fb0b 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	2124      	movs	r1, #36	; 0x24
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	220f      	movs	r2, #15
 8000bb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2290      	movs	r2, #144	; 0x90
 8000bbc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2100      	movs	r1, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 fd70 	bl	80046b4 <HAL_RCC_ClockConfig>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd8:	f000 faf2 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	220a      	movs	r2, #10
 8000be0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	003b      	movs	r3, r7
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 ff83 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000bfa:	f000 fae1 	bl	80011c0 <Error_Handler>
  }
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b01d      	add	sp, #116	; 0x74
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	ffffe7ff 	.word	0xffffe7ff

08000c10 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	003b      	movs	r3, r7
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f00a fb58 	bl	800b2d4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c26:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <MX_ADC_Init+0xc4>)
 8000c28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c32:	22c0      	movs	r2, #192	; 0xc0
 8000c34:	0612      	lsls	r2, r2, #24
 8000c36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c52:	2220      	movs	r2, #32
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c5a:	2221      	movs	r2, #33	; 0x21
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c70:	222c      	movs	r2, #44	; 0x2c
 8000c72:	2101      	movs	r1, #1
 8000c74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 f950 	bl	8001f3c <HAL_ADC_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ca0:	f000 fa8e 	bl	80011c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000caa:	003b      	movs	r3, r7
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0152      	lsls	r2, r2, #5
 8000cb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cb2:	003a      	movs	r2, r7
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_ADC_Init+0xc0>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 fbbb 	bl	8002434 <HAL_ADC_ConfigChannel>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000cc2:	f000 fa7d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000094 	.word	0x20000094
 8000cd4:	40012400 	.word	0x40012400

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <MX_I2C1_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x7c>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 fabd 	bl	8003294 <HAL_I2C_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1e:	f000 fa4f 	bl	80011c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f003 f810 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fa46 	bl	80011c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f003 f853 	bl	8003de4 <HAL_I2CEx_ConfigDigitalFilter>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fa3d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000138 	.word	0x20000138
 8000d50:	40005400 	.word	0x40005400
 8000d54:	00000509 	.word	0x00000509

08000d58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MX_SPI1_Init+0x6c>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d64:	2282      	movs	r2, #130	; 0x82
 8000d66:	0052      	lsls	r2, r2, #1
 8000d68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MX_SPI1_Init+0x68>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f004 f834 	bl	8004e18 <HAL_SPI_Init>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db4:	f000 fa04 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	2000018c 	.word	0x2000018c
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <MX_SPI2_Init+0x6c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000dd4:	2282      	movs	r2, #130	; 0x82
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f003 fffc 	bl	8004e18 <HAL_SPI_Init>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e24:	f000 f9cc 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	200001e4 	.word	0x200001e4
 8000e34:	40003800 	.word	0x40003800

08000e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	2308      	movs	r3, #8
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	0018      	movs	r0, r3
 8000e44:	2310      	movs	r3, #16
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f00a fa43 	bl	800b2d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	003b      	movs	r3, r7
 8000e50:	0018      	movs	r0, r3
 8000e52:	2308      	movs	r3, #8
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f00a fa3c 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	05d2      	lsls	r2, r2, #23
 8000e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e72:	22c7      	movs	r2, #199	; 0xc7
 8000e74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f005 f9d7 	bl	8006238 <HAL_TIM_Base_Init>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e8e:	f000 f997 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e92:	2108      	movs	r1, #8
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	0152      	lsls	r2, r2, #5
 8000e9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	187a      	adds	r2, r7, r1
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f005 fba6 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000eac:	f000 f988 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebc:	003a      	movs	r2, r7
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_TIM2_Init+0xa0>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f005 fd78 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ecc:	f000 f978 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200002cc 	.word	0x200002cc

08000edc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2310      	movs	r3, #16
 8000eea:	001a      	movs	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f00a f9f1 	bl	800b2d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f00a f9ea 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <MX_TIM21_Init+0xa4>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1831;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f08:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <MX_TIM21_Init+0xa8>)
 8000f0a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65501;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_TIM21_Init+0xac>)
 8000f16:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f005 f986 	bl	8006238 <HAL_TIM_Base_Init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 f946 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	2108      	movs	r1, #8
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0152      	lsls	r2, r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f005 fb55 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000f4e:	f000 f937 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	003b      	movs	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	003b      	movs	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000f5e:	003a      	movs	r2, r7
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_TIM21_Init+0xa0>)
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f005 fd27 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000f6e:	f000 f927 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b006      	add	sp, #24
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	2000030c 	.word	0x2000030c
 8000f80:	40010800 	.word	0x40010800
 8000f84:	00000727 	.word	0x00000727
 8000f88:	0000ffdd 	.word	0x0000ffdd

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_USART2_UART_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f98:	22e1      	movs	r2, #225	; 0xe1
 8000f9a:	0252      	lsls	r2, r2, #9
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f005 fd49 	bl	8006a68 <HAL_UART_Init>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 f8f1 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000034c 	.word	0x2000034c
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_DMA_Init+0x48>)
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_DMA_Init+0x48>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_DMA_Init+0x48>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2009      	movs	r0, #9
 8001010:	f001 fd1c 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001014:	2009      	movs	r0, #9
 8001016:	f001 fd2e 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fd14 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001024:	200a      	movs	r0, #10
 8001026:	f001 fd26 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40021000 	.word	0x40021000

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	2414      	movs	r4, #20
 8001040:	193b      	adds	r3, r7, r4
 8001042:	0018      	movs	r0, r3
 8001044:	2314      	movs	r3, #20
 8001046:	001a      	movs	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f00a f943 	bl	800b2d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <MX_GPIO_Init+0x118>)
 8001050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <MX_GPIO_Init+0x118>)
 8001054:	2104      	movs	r1, #4
 8001056:	430a      	orrs	r2, r1
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <MX_GPIO_Init+0x118>)
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <MX_GPIO_Init+0x118>)
 8001068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <MX_GPIO_Init+0x118>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	430a      	orrs	r2, r1
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <MX_GPIO_Init+0x118>)
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <MX_GPIO_Init+0x118>)
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <MX_GPIO_Init+0x118>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <MX_GPIO_Init+0x118>)
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	2201      	movs	r2, #1
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_GPIO_Init+0x118>)
 8001098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <MX_GPIO_Init+0x118>)
 800109c:	2102      	movs	r1, #2
 800109e:	430a      	orrs	r2, r1
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <MX_GPIO_Init+0x118>)
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin|SPI_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_GPIO_Init+0x11c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	21a2      	movs	r1, #162	; 0xa2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 f8b3 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ba:	23a0      	movs	r3, #160	; 0xa0
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	0018      	movs	r0, r3
 80010c4:	f002 f8ac 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	0192      	lsls	r2, r2, #6
 80010ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2284      	movs	r2, #132	; 0x84
 80010d4:	0392      	lsls	r2, r2, #14
 80010d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_GPIO_Init+0x11c>)
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f001 ff25 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI_CS_Pin|SD_CS_Pin;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	22a2      	movs	r2, #162	; 0xa2
 80010ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2201      	movs	r2, #1
 80010f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	193b      	adds	r3, r7, r4
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_GPIO_Init+0x11c>)
 8001106:	0019      	movs	r1, r3
 8001108:	0010      	movs	r0, r2
 800110a:	f001 ff13 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	0021      	movs	r1, r4
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2220      	movs	r2, #32
 8001114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001128:	187a      	adds	r2, r7, r1
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f001 feff 	bl	8002f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2007      	movs	r0, #7
 800113c:	f001 fc86 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001140:	2007      	movs	r0, #7
 8001142:	f001 fc98 	bl	8002a76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b00b      	add	sp, #44	; 0x2c
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	50000800 	.word	0x50000800

08001158 <Debug_Print>:

/* USER CODE BEGIN 4 */

void Debug_Print(const char *message) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b0c3      	sub	sp, #268	; 0x10c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	uint8_t TxBuffer[256];

	sprintf(TxBuffer, message);
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	2408      	movs	r4, #8
 8001164:	193b      	adds	r3, r7, r4
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f00a f893 	bl	800b294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) TxBuffer, strlen(TxBuffer),
 800116e:	193b      	adds	r3, r7, r4
 8001170:	0018      	movs	r0, r3
 8001172:	f7fe ffc9 	bl	8000108 <strlen>
 8001176:	0003      	movs	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	2301      	movs	r3, #1
 800117c:	425b      	negs	r3, r3
 800117e:	1939      	adds	r1, r7, r4
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <Debug_Print+0x38>)
 8001182:	f005 fcc5 	bl	8006b10 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b043      	add	sp, #268	; 0x10c
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	2000034c 	.word	0x2000034c

08001194 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET); // Exemple avec GPIOB et PIN 12
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_SPI_RxCpltCallback+0x24>)
 800119e:	2201      	movs	r2, #1
 80011a0:	2120      	movs	r1, #32
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 f83c 	bl	8003220 <HAL_GPIO_WritePin>
	DMA_Complet = 1;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_SPI_RxCpltCallback+0x28>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	50000800 	.word	0x50000800
 80011bc:	200003d4 	.word	0x200003d4

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_MspInit+0x24>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x24>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_MspInit+0x24>)
 80011de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_MspInit+0x24>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0549      	lsls	r1, r1, #21
 80011e6:	430a      	orrs	r2, r1
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	240c      	movs	r4, #12
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f00a f864 	bl	800b2d4 <memset>
  if(hadc->Instance==ADC1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <HAL_ADC_MspInit+0xc4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d14b      	bne.n	80012ae <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ADC_MspInit+0xc8>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_ADC_MspInit+0xc8>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0089      	lsls	r1, r1, #2
 8001220:	430a      	orrs	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_ADC_MspInit+0xc8>)
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_ADC_MspInit+0xc8>)
 800122a:	2101      	movs	r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_ADC_MspInit+0xc8>)
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2201      	movs	r2, #1
 8001236:	4013      	ands	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	193b      	adds	r3, r7, r4
 8001244:	2203      	movs	r2, #3
 8001246:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	193a      	adds	r2, r7, r4
 8001250:	23a0      	movs	r3, #160	; 0xa0
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f001 fe6c 	bl	8002f34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_ADC_MspInit+0xd0>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001288:	2220      	movs	r2, #32
 800128a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 8001294:	0018      	movs	r0, r3
 8001296:	f001 fc0b 	bl	8002ab0 <HAL_DMA_Init>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800129e:	f7ff ff8f 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 80012a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_ADC_MspInit+0xcc>)
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b009      	add	sp, #36	; 0x24
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40012400 	.word	0x40012400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	200000f0 	.word	0x200000f0
 80012c4:	40020008 	.word	0x40020008

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	240c      	movs	r4, #12
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	0018      	movs	r0, r3
 80012d6:	2314      	movs	r3, #20
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f009 fffa 	bl	800b2d4 <memset>
  if(hi2c->Instance==I2C1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_I2C_MspInit+0x7c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d128      	bne.n	800133c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_I2C_MspInit+0x80>)
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_I2C_MspInit+0x80>)
 80012f0:	2102      	movs	r1, #2
 80012f2:	430a      	orrs	r2, r1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_I2C_MspInit+0x80>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001302:	0021      	movs	r1, r4
 8001304:	187b      	adds	r3, r7, r1
 8001306:	22c0      	movs	r2, #192	; 0xc0
 8001308:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2212      	movs	r2, #18
 800130e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2203      	movs	r2, #3
 800131a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2201      	movs	r2, #1
 8001320:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	187b      	adds	r3, r7, r1
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_I2C_MspInit+0x84>)
 8001326:	0019      	movs	r1, r3
 8001328:	0010      	movs	r0, r2
 800132a:	f001 fe03 	bl	8002f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_I2C_MspInit+0x80>)
 8001330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_I2C_MspInit+0x80>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0389      	lsls	r1, r1, #14
 8001338:	430a      	orrs	r2, r1
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b009      	add	sp, #36	; 0x24
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	40005400 	.word	0x40005400
 8001348:	40021000 	.word	0x40021000
 800134c:	50000400 	.word	0x50000400

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b08d      	sub	sp, #52	; 0x34
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	241c      	movs	r4, #28
 800135a:	193b      	adds	r3, r7, r4
 800135c:	0018      	movs	r0, r3
 800135e:	2314      	movs	r3, #20
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f009 ffb6 	bl	800b2d4 <memset>
  if(hspi->Instance==SPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a7f      	ldr	r2, [pc, #508]	; (800156c <HAL_SPI_MspInit+0x21c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d000      	beq.n	8001374 <HAL_SPI_MspInit+0x24>
 8001372:	e0a5      	b.n	80014c0 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001374:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <HAL_SPI_MspInit+0x220>)
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <HAL_SPI_MspInit+0x220>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	0149      	lsls	r1, r1, #5
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <HAL_SPI_MspInit+0x220>)
 8001384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <HAL_SPI_MspInit+0x220>)
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_SPI_MspInit+0x220>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_SPI_MspInit+0x220>)
 800139c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80013a0:	2102      	movs	r1, #2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	22c0      	movs	r2, #192	; 0xc0
 80013b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2202      	movs	r2, #2
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2203      	movs	r2, #3
 80013c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	193a      	adds	r2, r7, r4
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fdab 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013de:	0021      	movs	r1, r4
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2208      	movs	r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2203      	movs	r2, #3
 80013f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	4a5c      	ldr	r2, [pc, #368]	; (8001574 <HAL_SPI_MspInit+0x224>)
 8001402:	0019      	movs	r1, r3
 8001404:	0010      	movs	r0, r2
 8001406:	f001 fd95 	bl	8002f34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800140a:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <HAL_SPI_MspInit+0x228>)
 800140c:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_SPI_MspInit+0x22c>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001410:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001412:	2201      	movs	r2, #1
 8001414:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001416:	4b58      	ldr	r3, [pc, #352]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_SPI_MspInit+0x228>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001428:	4b53      	ldr	r3, [pc, #332]	; (8001578 <HAL_SPI_MspInit+0x228>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <HAL_SPI_MspInit+0x228>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001442:	0018      	movs	r0, r3
 8001444:	f001 fb34 	bl	8002ab0 <HAL_DMA_Init>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 800144c:	f7ff feb8 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_SPI_MspInit+0x228>)
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <HAL_SPI_MspInit+0x230>)
 800145e:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_SPI_MspInit+0x234>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001464:	2201      	movs	r2, #1
 8001466:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_SPI_MspInit+0x230>)
 800146a:	2210      	movs	r2, #16
 800146c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_SPI_MspInit+0x230>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <HAL_SPI_MspInit+0x230>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_SPI_MspInit+0x230>)
 8001494:	0018      	movs	r0, r3
 8001496:	f001 fb0b 	bl	8002ab0 <HAL_DMA_Init>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 800149e:	f7ff fe8f 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_SPI_MspInit+0x230>)
 80014a6:	649a      	str	r2, [r3, #72]	; 0x48
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_SPI_MspInit+0x230>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2019      	movs	r0, #25
 80014b4:	f001 faca 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014b8:	2019      	movs	r0, #25
 80014ba:	f001 fadc 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014be:	e050      	b.n	8001562 <HAL_SPI_MspInit+0x212>
  else if(hspi->Instance==SPI2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a30      	ldr	r2, [pc, #192]	; (8001588 <HAL_SPI_MspInit+0x238>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d14b      	bne.n	8001562 <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	01c9      	lsls	r1, r1, #7
 80014d4:	430a      	orrs	r2, r1
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014de:	2104      	movs	r1, #4
 80014e0:	430a      	orrs	r2, r1
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014f6:	2102      	movs	r1, #2
 80014f8:	430a      	orrs	r2, r1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_SPI_MspInit+0x220>)
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001508:	241c      	movs	r4, #28
 800150a:	193b      	adds	r3, r7, r4
 800150c:	220c      	movs	r2, #12
 800150e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2202      	movs	r2, #2
 8001514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2203      	movs	r2, #3
 8001520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2202      	movs	r2, #2
 8001526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	193b      	adds	r3, r7, r4
 800152a:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_SPI_MspInit+0x23c>)
 800152c:	0019      	movs	r1, r3
 800152e:	0010      	movs	r0, r2
 8001530:	f001 fd00 	bl	8002f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001534:	0021      	movs	r1, r4
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2202      	movs	r2, #2
 8001542:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2203      	movs	r2, #3
 800154e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2205      	movs	r2, #5
 8001554:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	187b      	adds	r3, r7, r1
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_SPI_MspInit+0x224>)
 800155a:	0019      	movs	r1, r3
 800155c:	0010      	movs	r0, r2
 800155e:	f001 fce9 	bl	8002f34 <HAL_GPIO_Init>
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b00d      	add	sp, #52	; 0x34
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40013000 	.word	0x40013000
 8001570:	40021000 	.word	0x40021000
 8001574:	50000400 	.word	0x50000400
 8001578:	2000023c 	.word	0x2000023c
 800157c:	4002001c 	.word	0x4002001c
 8001580:	20000284 	.word	0x20000284
 8001584:	40020030 	.word	0x40020030
 8001588:	40003800 	.word	0x40003800
 800158c:	50000800 	.word	0x50000800

08001590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	05db      	lsls	r3, r3, #23
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10e      	bne.n	80015c2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_TIM_Base_MspInit+0x60>)
 80015a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_TIM_Base_MspInit+0x60>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	200f      	movs	r0, #15
 80015b6:	f001 fa49 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f001 fa5b 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80015c0:	e012      	b.n	80015e8 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_TIM_Base_MspInit+0x64>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d10d      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_TIM_Base_MspInit+0x60>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x60>)
 80015d2:	2104      	movs	r1, #4
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2014      	movs	r0, #20
 80015de:	f001 fa35 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80015e2:	2014      	movs	r0, #20
 80015e4:	f001 fa47 	bl	8002a76 <HAL_NVIC_EnableIRQ>
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	240c      	movs	r4, #12
 8001602:	193b      	adds	r3, r7, r4
 8001604:	0018      	movs	r0, r3
 8001606:	2314      	movs	r3, #20
 8001608:	001a      	movs	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	f009 fe62 	bl	800b2d4 <memset>
  if(huart->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a18      	ldr	r2, [pc, #96]	; (8001678 <HAL_UART_MspInit+0x80>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d129      	bne.n	800166e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0x84>)
 800161c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_UART_MspInit+0x84>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0289      	lsls	r1, r1, #10
 8001624:	430a      	orrs	r2, r1
 8001626:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_UART_MspInit+0x84>)
 800162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_UART_MspInit+0x84>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0x84>)
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001640:	0021      	movs	r1, r4
 8001642:	187b      	adds	r3, r7, r1
 8001644:	220c      	movs	r2, #12
 8001646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2202      	movs	r2, #2
 800164c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2203      	movs	r2, #3
 8001658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2204      	movs	r2, #4
 800165e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	187a      	adds	r2, r7, r1
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	0011      	movs	r1, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f001 fc63 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b009      	add	sp, #36	; 0x24
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	40004400 	.word	0x40004400
 800167c:	40021000 	.word	0x40021000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fbee 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	0018      	movs	r0, r3
 80016b8:	f001 fdd0 	bl	800325c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <DMA1_Channel1_IRQHandler+0x14>)
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 fb55 	bl	8002d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	200000f0 	.word	0x200000f0

080016dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 fb49 	bl	8002d7a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <DMA1_Channel2_3_IRQHandler+0x20>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 fb45 	bl	8002d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	2000023c 	.word	0x2000023c
 80016fc:	20000284 	.word	0x20000284

08001700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <TIM2_IRQHandler+0x14>)
 8001706:	0018      	movs	r0, r3
 8001708:	f004 fe8c 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200002cc 	.word	0x200002cc

08001718 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <TIM21_IRQHandler+0x14>)
 800171e:	0018      	movs	r0, r3
 8001720:	f004 fe80 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	2000030c 	.word	0x2000030c

08001730 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <SPI1_IRQHandler+0x14>)
 8001736:	0018      	movs	r0, r3
 8001738:	f004 fa40 	bl	8005bbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	2000018c 	.word	0x2000018c

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f009 fdb4 	bl	800b2e4 <__errno>
 800177c:	0003      	movs	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	2301      	movs	r3, #1
 8001784:	425b      	negs	r3, r3
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	18d2      	adds	r2, r2, r3
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20002000 	.word	0x20002000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	200007e0 	.word	0x200007e0
 80017b0:	20000fe8 	.word	0x20000fe8

080017b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <Reset_Handler>:
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopForever+0x2>)
 80017c2:	4685      	mov	sp, r0
 80017c4:	f7ff fff6 	bl	80017b4 <SystemInit>
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopForever+0x6>)
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopForever+0xa>)
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopForever+0xe>)
 80017ce:	2300      	movs	r3, #0
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:
 80017d2:	58d4      	ldr	r4, [r2, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:
 80017d8:	18c4      	adds	r4, r0, r3
 80017da:	428c      	cmp	r4, r1
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopForever+0x16>)
 80017e2:	2300      	movs	r3, #0
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:
 80017ea:	42a2      	cmp	r2, r4
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>
 80017ee:	f009 fd7f 	bl	800b2f0 <__libc_init_array>
 80017f2:	f7ff f86b 	bl	80008cc <main>

080017f6 <LoopForever>:
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
 80017f8:	20002000 	.word	0x20002000
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000078 	.word	0x20000078
 8001804:	0800c9a4 	.word	0x0800c9a4
 8001808:	20000078 	.word	0x20000078
 800180c:	20000fe8 	.word	0x20000fe8

08001810 <ADC1_COMP_IRQHandler>:
 8001810:	e7fe      	b.n	8001810 <ADC1_COMP_IRQHandler>
	...

08001814 <ArduCAM_Init>:
byte sensor_addr = 0x60;
byte m_fmt = JPEG;

uint8_t vid, pid;

void ArduCAM_Init(byte model) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
	write_reg(0x07, 0x80);
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	2007      	movs	r0, #7
 8001824:	f000 f946 	bl	8001ab4 <write_reg>
	HAL_Delay(100);
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	f000 fb47 	bl	8001ebc <HAL_Delay>
	write_reg(0x07, 0x00);
 800182e:	2100      	movs	r1, #0
 8001830:	2007      	movs	r0, #7
 8001832:	f000 f93f 	bl	8001ab4 <write_reg>
	HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f000 fb40 	bl	8001ebc <HAL_Delay>

	set_format(JPEG);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 f885 	bl	800194c <set_format>

	wrSensorReg8_8(0xff, 0x01);
 8001842:	2101      	movs	r1, #1
 8001844:	20ff      	movs	r0, #255	; 0xff
 8001846:	f000 f9c5 	bl	8001bd4 <wrSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <ArduCAM_Init+0xcc>)
 800184c:	0019      	movs	r1, r3
 800184e:	200a      	movs	r0, #10
 8001850:	f000 f9ea 	bl	8001c28 <rdSensorReg8_8>
	rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <ArduCAM_Init+0xd0>)
 8001856:	0019      	movs	r1, r3
 8001858:	200b      	movs	r0, #11
 800185a:	f000 f9e5 	bl	8001c28 <rdSensorReg8_8>
	if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <ArduCAM_Init+0xcc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b26      	cmp	r3, #38	; 0x26
 8001864:	d00c      	beq.n	8001880 <ArduCAM_Init+0x6c>
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <ArduCAM_Init+0xd0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b41      	cmp	r3, #65	; 0x41
 800186c:	d103      	bne.n	8001876 <ArduCAM_Init+0x62>
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <ArduCAM_Init+0xd0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b42      	cmp	r3, #66	; 0x42
 8001874:	d004      	beq.n	8001880 <ArduCAM_Init+0x6c>
		//Serial.println(F("ACK CMD Can't find OV2640 module! END"));
		HAL_Delay(1000);
 8001876:	23fa      	movs	r3, #250	; 0xfa
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fb1e 	bl	8001ebc <HAL_Delay>
	} else {
		//Serial.println(F("ACK CMD OV2640 detected. END"));break;
	}

	wrSensorReg8_8(0xff, 0x01);
 8001880:	2101      	movs	r1, #1
 8001882:	20ff      	movs	r0, #255	; 0xff
 8001884:	f000 f9a6 	bl	8001bd4 <wrSensorReg8_8>
	wrSensorReg8_8(0x12, 0x80);
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	2012      	movs	r0, #18
 800188c:	f000 f9a2 	bl	8001bd4 <wrSensorReg8_8>
	HAL_Delay(100);
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	f000 fb13 	bl	8001ebc <HAL_Delay>
	if (m_fmt == JPEG) {
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <ArduCAM_Init+0xd4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d118      	bne.n	80018d0 <ArduCAM_Init+0xbc>
		wrSensorRegs8_8(OV2640_JPEG_INIT);
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <ArduCAM_Init+0xd8>)
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f9fb 	bl	8001c9c <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_YUV422);
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <ArduCAM_Init+0xdc>)
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 f9f7 	bl	8001c9c <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_JPEG);
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <ArduCAM_Init+0xe0>)
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f9f3 	bl	8001c9c <wrSensorRegs8_8>
		wrSensorReg8_8(0xff, 0x01);
 80018b6:	2101      	movs	r1, #1
 80018b8:	20ff      	movs	r0, #255	; 0xff
 80018ba:	f000 f98b 	bl	8001bd4 <wrSensorReg8_8>
		wrSensorReg8_8(0x15, 0x00);
 80018be:	2100      	movs	r1, #0
 80018c0:	2015      	movs	r0, #21
 80018c2:	f000 f987 	bl	8001bd4 <wrSensorReg8_8>
		wrSensorRegs8_8(OV2640_800x600_JPEG);
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <ArduCAM_Init+0xe4>)
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f9e7 	bl	8001c9c <wrSensorRegs8_8>
		//wrSensorReg8_8(0xff, 0x00);
		//wrSensorReg8_8(0x44, 0x32);
	} else {
		wrSensorRegs8_8(OV2640_QVGA);
	}
}
 80018ce:	e003      	b.n	80018d8 <ArduCAM_Init+0xc4>
		wrSensorRegs8_8(OV2640_QVGA);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <ArduCAM_Init+0xe8>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f9e2 	bl	8001c9c <wrSensorRegs8_8>
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200007e4 	.word	0x200007e4
 80018e4:	200007e5 	.word	0x200007e5
 80018e8:	20000005 	.word	0x20000005
 80018ec:	0800c0c8 	.word	0x0800c0c8
 80018f0:	0800c3c4 	.word	0x0800c3c4
 80018f4:	0800c3ec 	.word	0x0800c3ec
 80018f8:	0800c410 	.word	0x0800c410
 80018fc:	0800bdc0 	.word	0x0800bdc0

08001900 <SingleCapTransfer>:

uint32_t SingleCapTransfer(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	uint32_t length = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]

	set_frame(1);
 800190a:	2001      	movs	r0, #1
 800190c:	f000 f836 	bl	800197c <set_frame>

	flush_fifo();
 8001910:	f000 f8fe 	bl	8001b10 <flush_fifo>
	HAL_Delay(100);
 8001914:	2064      	movs	r0, #100	; 0x64
 8001916:	f000 fad1 	bl	8001ebc <HAL_Delay>
	flush_fifo();
 800191a:	f000 f8f9 	bl	8001b10 <flush_fifo>
	clear_fifo_flag();
 800191e:	f000 f909 	bl	8001b34 <clear_fifo_flag>
	start_capture();
 8001922:	f000 f8fe 	bl	8001b22 <start_capture>
	while (!get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK));
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	2108      	movs	r1, #8
 800192a:	2041      	movs	r0, #65	; 0x41
 800192c:	f000 f931 	bl	8001b92 <get_bit>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d0f9      	beq.n	8001928 <SingleCapTransfer+0x28>

	length = (int) read_fifo_length();
 8001934:	f000 f907 	bl	8001b46 <read_fifo_length>
 8001938:	0003      	movs	r3, r0
 800193a:	607b      	str	r3, [r7, #4]
	length--;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
	return length;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <set_format>:

void set_format(byte fmt) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	0002      	movs	r2, r0
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	701a      	strb	r2, [r3, #0]
	if (fmt == BMP)
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <set_format+0x1c>
		m_fmt = BMP;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <set_format+0x2c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
	else
		m_fmt = JPEG;
}
 8001966:	e002      	b.n	800196e <set_format+0x22>
		m_fmt = JPEG;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <set_format+0x2c>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000005 	.word	0x20000005

0800197c <set_frame>:

void set_frame(byte nbr) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	0002      	movs	r2, r0
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	701a      	strb	r2, [r3, #0]
	write_reg(ARDUCHIP_FRAMES, nbr - 1);
 8001988:	1dfb      	adds	r3, r7, #7
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	0019      	movs	r1, r3
 8001992:	2001      	movs	r0, #1
 8001994:	f000 f88e 	bl	8001ab4 <write_reg>
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <set_power_down>:

void set_power_down(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	write_reg(0x06, 0x02);
 80019a4:	2102      	movs	r1, #2
 80019a6:	2006      	movs	r0, #6
 80019a8:	f000 f884 	bl	8001ab4 <write_reg>
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <set_power_up>:

void set_power_up(){
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
	write_reg(0x06, 0x01);
 80019b6:	2101      	movs	r1, #1
 80019b8:	2006      	movs	r0, #6
 80019ba:	f000 f87b 	bl	8001ab4 <write_reg>
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <bus_read>:

uint8_t bus_read(uint8_t address) {
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	0002      	movs	r2, r0
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	701a      	strb	r2, [r3, #0]
	uint8_t txData = address;
 80019d0:	250f      	movs	r5, #15
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	1dfa      	adds	r2, r7, #7
 80019d6:	7812      	ldrb	r2, [r2, #0]
 80019d8:	701a      	strb	r2, [r3, #0]
	uint8_t rxData = 0x00;
 80019da:	240e      	movs	r4, #14
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

	// Abaisse le signal CS (chip select)
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <bus_read+0x60>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	2120      	movs	r1, #32
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 fc19 	bl	8003220 <HAL_GPIO_WritePin>

	// Envoi de l'adresse via SPI
	HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 80019ee:	2301      	movs	r3, #1
 80019f0:	425b      	negs	r3, r3
 80019f2:	1979      	adds	r1, r7, r5
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <bus_read+0x64>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	f003 faa2 	bl	8004f40 <HAL_SPI_Transmit>

	//HAL_Delay(1);

	// Lecture de la donnée via SPI
	HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 80019fc:	2301      	movs	r3, #1
 80019fe:	425b      	negs	r3, r3
 8001a00:	1939      	adds	r1, r7, r4
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <bus_read+0x64>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	f003 fbf9 	bl	80051fc <HAL_SPI_Receive>

	//HAL_Delay(1);

	// Libère le signal CS
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <bus_read+0x60>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2120      	movs	r1, #32
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 fc05 	bl	8003220 <HAL_GPIO_WritePin>

	return rxData;
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	50000800 	.word	0x50000800
 8001a28:	2000018c 	.word	0x2000018c

08001a2c <bus_write>:

uint8_t bus_write(uint8_t address, uint8_t value) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	0002      	movs	r2, r0
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	1dbb      	adds	r3, r7, #6
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	// Abaisse le signal CS (chip select)
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <bus_write+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	2120      	movs	r1, #32
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 fbeb 	bl	8003220 <HAL_GPIO_WritePin>

	// Attente de 10 millisecondes
	//HAL_Delay(1);

	// Envoi de l'adresse via SPI
	HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	1df9      	adds	r1, r7, #7
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <bus_write+0x54>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	f003 fa74 	bl	8004f40 <HAL_SPI_Transmit>

	// Envoi de la valeur via SPI
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	1db9      	adds	r1, r7, #6
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <bus_write+0x54>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f003 fa6d 	bl	8004f40 <HAL_SPI_Transmit>

	// Attente de 10 millisecondes
	//HAL_Delay(1);

	// Libère le signal CS
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <bus_write+0x50>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f001 fbd7 	bl	8003220 <HAL_GPIO_WritePin>

	return 1;  // Indique que l'opération s'est bien déroulée
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	50000800 	.word	0x50000800
 8001a80:	2000018c 	.word	0x2000018c

08001a84 <read_reg>:

uint8_t read_reg(uint8_t addr) {
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	227f      	movs	r2, #127	; 0x7f
 8001a96:	4013      	ands	r3, r2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	250f      	movs	r5, #15
 8001a9c:	197c      	adds	r4, r7, r5
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff ff90 	bl	80019c4 <bus_read>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	7023      	strb	r3, [r4, #0]
	return data;
 8001aa8:	197b      	adds	r3, r7, r5
 8001aaa:	781b      	ldrb	r3, [r3, #0]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}

08001ab4 <write_reg>:

void write_reg(uint8_t addr, uint8_t data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	1c0a      	adds	r2, r1, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
	bus_write(addr | 0x80, data);
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	4252      	negs	r2, r2
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	1dbb      	adds	r3, r7, #6
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	0010      	movs	r0, r2
 8001ada:	f7ff ffa7 	bl	8001a2c <bus_write>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <set_fifo_burst>:
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}

void set_fifo_burst() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	uint8_t value = 0x3C;
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	223c      	movs	r2, #60	; 0x3c
 8001af2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001af4:	2301      	movs	r3, #1
 8001af6:	425b      	negs	r3, r3
 8001af8:	1df9      	adds	r1, r7, #7
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <set_fifo_burst+0x24>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	f003 fa1f 	bl	8004f40 <HAL_SPI_Transmit>
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	2000018c 	.word	0x2000018c

08001b10 <flush_fifo>:

void flush_fifo(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001b14:	2101      	movs	r1, #1
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff ffcc 	bl	8001ab4 <write_reg>
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <start_capture>:

void start_capture(void) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8001b26:	2102      	movs	r1, #2
 8001b28:	2004      	movs	r0, #4
 8001b2a:	f7ff ffc3 	bl	8001ab4 <write_reg>
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <clear_fifo_flag>:

void clear_fifo_flag(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2004      	movs	r0, #4
 8001b3c:	f7ff ffba 	bl	8001ab4 <write_reg>
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <read_fifo_length>:

uint32_t read_fifo_length(void) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
	uint32_t len1, len2, len3, len = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 8001b50:	2042      	movs	r0, #66	; 0x42
 8001b52:	f7ff ff97 	bl	8001a84 <read_reg>
 8001b56:	0003      	movs	r3, r0
 8001b58:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8001b5a:	2043      	movs	r0, #67	; 0x43
 8001b5c:	f7ff ff92 	bl	8001a84 <read_reg>
 8001b60:	0003      	movs	r3, r0
 8001b62:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 8001b64:	2044      	movs	r0, #68	; 0x44
 8001b66:	f7ff ff8d 	bl	8001a84 <read_reg>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	237f      	movs	r3, #127	; 0x7f
 8001b70:	4013      	ands	r3, r2
 8001b72:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	041a      	lsls	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	025b      	lsls	r3, r3, #9
 8001b84:	0a5b      	lsrs	r3, r3, #9
 8001b86:	60fb      	str	r3, [r7, #12]
	return len;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <get_bit>:
	temp = read_reg(addr);
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit) {
 8001b92:	b5b0      	push	{r4, r5, r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	0002      	movs	r2, r0
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	1dbb      	adds	r3, r7, #6
 8001ba0:	1c0a      	adds	r2, r1, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = read_reg(addr);
 8001ba4:	250f      	movs	r5, #15
 8001ba6:	197c      	adds	r4, r7, r5
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff ff69 	bl	8001a84 <read_reg>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	7023      	strb	r3, [r4, #0]
	temp = temp & bit;
 8001bb6:	0028      	movs	r0, r5
 8001bb8:	183b      	adds	r3, r7, r0
 8001bba:	183a      	adds	r2, r7, r0
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	7809      	ldrb	r1, [r1, #0]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
	return temp;
 8001bc6:	183b      	adds	r3, r7, r0
 8001bc8:	781b      	ldrb	r3, [r3, #0]
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b004      	add	sp, #16
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bd4 <wrSensorReg8_8>:
		wrSensorRegs16_8(ov5642_320x240);
		break;
	}
}

byte wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	0002      	movs	r2, r0
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	1c0a      	adds	r2, r1, #0
 8001be4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1); // Temporisation en millisecondes pour laisser le temps au capteur
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 f968 	bl	8001ebc <HAL_Delay>
	uint8_t data[2] = { regID, regDat };
 8001bec:	200c      	movs	r0, #12
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	1dfa      	adds	r2, r7, #7
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	1dba      	adds	r2, r7, #6
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	705a      	strb	r2, [r3, #1]
	//data[0] = regID; // Première valeur de 8 bits
	//data[1] = regDat; // Deuxième valeur de 8 bits

	// Démarre la transmission en envoyant l'adresse du capteur avec HAL I2C
	HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &data, 2, 1000);
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <wrSensorReg8_8+0x4c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b299      	uxth	r1, r3
 8001c04:	183a      	adds	r2, r7, r0
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <wrSensorReg8_8+0x50>)
 8001c08:	23fa      	movs	r3, #250	; 0xfa
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f001 fbd6 	bl	80033c0 <HAL_I2C_Master_Transmit>

	// Envoie la valeur du registre au capteur
	//HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regDat, 1, HAL_MAX_DELAY);

	return 0;  // Succès
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000138 	.word	0x20000138

08001c28 <rdSensorReg8_8>:

byte rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	0002      	movs	r2, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);  // Petit délai pour la stabilité du bus
 8001c36:	200a      	movs	r0, #10
 8001c38:	f000 f940 	bl	8001ebc <HAL_Delay>

	// Envoi de l'adresse du capteur en mode écriture et ID du registre
	if (HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, &regID, 1, HAL_MAX_DELAY)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <rdSensorReg8_8+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b299      	uxth	r1, r3
 8001c42:	1dfa      	adds	r2, r7, #7
 8001c44:	4814      	ldr	r0, [pc, #80]	; (8001c98 <rdSensorReg8_8+0x70>)
 8001c46:	2301      	movs	r3, #1
 8001c48:	425b      	negs	r3, r3
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f001 fbb7 	bl	80033c0 <HAL_I2C_Master_Transmit>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <rdSensorReg8_8+0x32>
			!= HAL_OK) {
		return 1;  // Erreur lors de l'écriture de l'adresse
 8001c56:	2301      	movs	r3, #1
 8001c58:	e018      	b.n	8001c8c <rdSensorReg8_8+0x64>
	}

	HAL_Delay(1);  // Délai pour la synchronisation du bus
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 f92e 	bl	8001ebc <HAL_Delay>

	// Relance de l'I2C avec l'adresse du capteur en mode lecture
	if (HAL_I2C_Master_Receive(&hi2c1, sensor_addr | 0x01, regDat, 1,
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <rdSensorReg8_8+0x6c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	b299      	uxth	r1, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	480a      	ldr	r0, [pc, #40]	; (8001c98 <rdSensorReg8_8+0x70>)
 8001c70:	2301      	movs	r3, #1
 8001c72:	425b      	negs	r3, r3
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	f001 fcaa 	bl	80035d0 <HAL_I2C_Master_Receive>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d001      	beq.n	8001c84 <rdSensorReg8_8+0x5c>
			HAL_MAX_DELAY) != HAL_OK) {
		return 2;  // Erreur lors de la lecture
 8001c80:	2302      	movs	r3, #2
 8001c82:	e003      	b.n	8001c8c <rdSensorReg8_8+0x64>
	}

	HAL_Delay(1);  // Délai pour s'assurer de la bonne fin de la transaction
 8001c84:	2001      	movs	r0, #1
 8001c86:	f000 f919 	bl	8001ebc <HAL_Delay>

	return 0;  // Lecture réussie
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000004 	.word	0x20000004
 8001c98:	20000138 	.word	0x20000138

08001c9c <wrSensorRegs8_8>:

// I2C Array Write 8-bit address, 8-bit data
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	int err = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
	uint16_t reg_addr = 0;
 8001ca8:	2312      	movs	r3, #18
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	801a      	strh	r2, [r3, #0]
	uint16_t reg_val = 0;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
	const struct sensor_reg *next = reglist;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60fb      	str	r3, [r7, #12]

	while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001cbc:	e020      	b.n	8001d00 <wrSensorRegs8_8+0x64>
	{
		reg_addr = next->reg;
 8001cbe:	2112      	movs	r1, #18
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	8812      	ldrh	r2, [r2, #0]
 8001cc6:	801a      	strh	r2, [r3, #0]
		reg_val = next->val;
 8001cc8:	2010      	movs	r0, #16
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	8852      	ldrh	r2, [r2, #2]
 8001cd0:	801a      	strh	r2, [r3, #0]

		err = wrSensorReg8_8(reg_addr, reg_val); // Écriture dans le registre
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	0019      	movs	r1, r3
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	f7ff ff77 	bl	8001bd4 <wrSensorReg8_8>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	617b      	str	r3, [r7, #20]
		if (err != 0) {
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <wrSensorRegs8_8+0x58>
			return err; // Retourne l'erreur immédiatement si une écriture échoue
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	e010      	b.n	8001d16 <wrSensorRegs8_8+0x7a>
		}

		HAL_Delay(1); // Pause de 1 ms pour garantir la stabilité du bus I2C
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f000 f8e1 	bl	8001ebc <HAL_Delay>

		next++; // Passe au prochain registre
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
	while ((reg_addr != 0xFF) || (reg_val != 0xFF)) // Utilisation de || pour une condition correcte
 8001d00:	2312      	movs	r3, #18
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d1d9      	bne.n	8001cbe <wrSensorRegs8_8+0x22>
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2bff      	cmp	r3, #255	; 0xff
 8001d12:	d1d4      	bne.n	8001cbe <wrSensorRegs8_8+0x22>
	}

	return err; // Retourne 0 si toutes les écritures sont réussies
 8001d14:	697b      	ldr	r3, [r7, #20]
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b006      	add	sp, #24
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <SD_Card_Init>:
UINT RWC, WWC; // Read/Write Word Counter
DWORD FreeClusters;
uint32_t TotalSize, FreeSpace;
char RW_Buffer[1024];

int SD_Card_Init(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, "", 1);
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <SD_Card_Init+0x38>)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <SD_Card_Init+0x3c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f008 fcd4 	bl	800a6d8 <f_mount>
 8001d30:	0003      	movs	r3, r0
 8001d32:	001a      	movs	r2, r3
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <SD_Card_Init+0x40>)
 8001d36:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8001d38:	23fa      	movs	r3, #250	; 0xfa
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f8bd 	bl	8001ebc <HAL_Delay>
	if (FR_Status != FR_OK) {
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <SD_Card_Init+0x40>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SD_Card_Init+0x2e>
		return 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <SD_Card_Init+0x30>
	} else {
		return 0;
 8001d4e:	2300      	movs	r3, #0
	}
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	0800bd3c 	.word	0x0800bd3c
 8001d5c:	200007e8 	.word	0x200007e8
 8001d60:	20000c4c 	.word	0x20000c4c

08001d64 <SD_Card_Open>:
	f_write(&Fil, buf, sizeof(buf), &WWC);
	f_close(&Fil);
	return 0;
}

int SD_Card_Open(const char *file) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	FR_Status = f_open(&Fil, file, FA_WRITE | FA_OPEN_APPEND);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <SD_Card_Open+0x28>)
 8001d70:	2232      	movs	r2, #50	; 0x32
 8001d72:	0018      	movs	r0, r3
 8001d74:	f008 fcfc 	bl	800a770 <f_open>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SD_Card_Open+0x2c>)
 8001d7e:	701a      	strb	r2, [r3, #0]
	return FR_Status;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <SD_Card_Open+0x2c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000a1c 	.word	0x20000a1c
 8001d90:	20000c4c 	.word	0x20000c4c

08001d94 <SD_Card_Write>:

int SD_Card_Write(uint8_t* buf, uint16_t len) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	1cbb      	adds	r3, r7, #2
 8001da0:	801a      	strh	r2, [r3, #0]
	// Write Data To The Text File
	f_write(&Fil, buf, len, &WWC);
 8001da2:	1cbb      	adds	r3, r7, #2
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SD_Card_Write+0x28>)
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <SD_Card_Write+0x2c>)
 8001dac:	f008 fed4 	bl	800ab58 <f_write>
	return WWC;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <SD_Card_Write+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000c50 	.word	0x20000c50
 8001dc0:	20000a1c 	.word	0x20000a1c

08001dc4 <SD_Card_Close>:
    f_getfree("", &FreeClusters, &FS_Ptr);
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
    return FreeSpace;
}
void SD_Card_Close(void){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	// Close The File
	f_close(&Fil);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <SD_Card_Close+0x14>)
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f009 f8c7 	bl	800af5e <f_close>
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	20000a1c 	.word	0x20000a1c

08001ddc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_Init+0x3c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Init+0x3c>)
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f811 	bl	8001e1c <HAL_InitTick>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e001      	b.n	8001e0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e06:	f7ff f9e1 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e26:	681c      	ldr	r4, [r3, #0]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_InitTick+0x60>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	23fa      	movs	r3, #250	; 0xfa
 8001e30:	0098      	lsls	r0, r3, #2
 8001e32:	f7fe f97b 	bl	800012c <__udivsi3>
 8001e36:	0003      	movs	r3, r0
 8001e38:	0019      	movs	r1, r3
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f7fe f976 	bl	800012c <__udivsi3>
 8001e40:	0003      	movs	r3, r0
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fe27 	bl	8002a96 <HAL_SYSTICK_Config>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00f      	b.n	8001e70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d80b      	bhi.n	8001e6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	425b      	negs	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fdf4 	bl	8002a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_InitTick+0x64>)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b003      	add	sp, #12
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_IncTick+0x1c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	18d2      	adds	r2, r2, r3
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000c54 	.word	0x20000c54

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <HAL_GetTick+0x10>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	20000c54 	.word	0x20000c54

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	001a      	movs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	189b      	adds	r3, r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	f7ff ffe0 	bl	8001ea8 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_SuspendTick+0x18>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_SuspendTick+0x18>)
 8001f0e:	2102      	movs	r1, #2
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_ResumeTick+0x18>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_ResumeTick+0x18>)
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e159      	b.n	8002202 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2250      	movs	r2, #80	; 0x50
 8001f60:	2100      	movs	r1, #0
 8001f62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff f944 	bl	80011f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	2210      	movs	r2, #16
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d005      	beq.n	8001f84 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001f82:	d00b      	beq.n	8001f9c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	2210      	movs	r2, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2250      	movs	r2, #80	; 0x50
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e132      	b.n	8002202 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	4a9a      	ldr	r2, [pc, #616]	; (800220c <HAL_ADC_Init+0x2d0>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d108      	bne.n	8001fcc <HAL_ADC_Init+0x90>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_Init+0x90>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_ADC_Init+0x92>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d149      	bne.n	8002066 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_ADC_Init+0xba>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d005      	beq.n	8001ff6 <HAL_ADC_Init+0xba>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d111      	bne.n	800201a <HAL_ADC_Init+0xde>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	0892      	lsrs	r2, r2, #2
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	e014      	b.n	8002044 <HAL_ADC_Init+0x108>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	0892      	lsrs	r2, r2, #2
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_ADC_Init+0x2d4>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b78      	ldr	r3, [pc, #480]	; (8002210 <HAL_ADC_Init+0x2d4>)
 8002030:	4978      	ldr	r1, [pc, #480]	; (8002214 <HAL_ADC_Init+0x2d8>)
 8002032:	400a      	ands	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_ADC_Init+0x2d4>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_ADC_Init+0x2d4>)
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2118      	movs	r1, #24
 8002050:	438a      	bics	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_ADC_Init+0x2d4>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_ADC_Init+0x2d4>)
 800206c:	496a      	ldr	r1, [pc, #424]	; (8002218 <HAL_ADC_Init+0x2dc>)
 800206e:	400a      	ands	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_ADC_Init+0x2d4>)
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	065a      	lsls	r2, r3, #25
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_ADC_Init+0x2d4>)
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	d108      	bne.n	80020a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0549      	lsls	r1, r1, #21
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	495b      	ldr	r1, [pc, #364]	; (800221c <HAL_ADC_Init+0x2e0>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Init+0x18c>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e000      	b.n	80020ca <HAL_ADC_Init+0x18e>
 80020c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80020ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2020      	movs	r0, #32
 80020d0:	5c1b      	ldrb	r3, [r3, r0]
 80020d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80020d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	202c      	movs	r0, #44	; 0x2c
 80020da:	5c1b      	ldrb	r3, [r3, r0]
 80020dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80020e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80020ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80020f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002102:	23c2      	movs	r3, #194	; 0xc2
 8002104:	33ff      	adds	r3, #255	; 0xff
 8002106:	429a      	cmp	r2, r3
 8002108:	d00b      	beq.n	8002122 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68d9      	ldr	r1, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2221      	movs	r2, #33	; 0x21
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11a      	bne.n	8002162 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0249      	lsls	r1, r1, #9
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	e00b      	b.n	8002162 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	2220      	movs	r2, #32
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	2201      	movs	r2, #1
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d11f      	bne.n	80021aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	492a      	ldr	r1, [pc, #168]	; (8002220 <HAL_ADC_Init+0x2e4>)
 8002176:	400a      	ands	r2, r1
 8002178:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002188:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800218e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2101      	movs	r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	e00e      	b.n	80021c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	438a      	bics	r2, r1
 80021c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2107      	movs	r1, #7
 80021d4:	438a      	bics	r2, r1
 80021d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	2203      	movs	r2, #3
 80021f6:	4393      	bics	r3, r2
 80021f8:	2201      	movs	r2, #1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	fffffefd 	.word	0xfffffefd
 8002210:	40012708 	.word	0x40012708
 8002214:	ffc3ffff 	.word	0xffc3ffff
 8002218:	fdffffff 	.word	0xfdffffff
 800221c:	fffe0219 	.word	0xfffe0219
 8002220:	fffffc03 	.word	0xfffffc03

08002224 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2317      	movs	r3, #23
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2204      	movs	r2, #4
 8002240:	4013      	ands	r3, r2
 8002242:	d15e      	bne.n	8002302 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2250      	movs	r2, #80	; 0x50
 8002248:	5c9b      	ldrb	r3, [r3, r2]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Start_DMA+0x2e>
 800224e:	2302      	movs	r3, #2
 8002250:	e05e      	b.n	8002310 <HAL_ADC_Start_DMA+0xec>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2250      	movs	r2, #80	; 0x50
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d007      	beq.n	8002282 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002272:	2317      	movs	r3, #23
 8002274:	18fc      	adds	r4, r7, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f97b 	bl	8002574 <ADC_Enable>
 800227e:	0003      	movs	r3, r0
 8002280:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002282:	2317      	movs	r3, #23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d13e      	bne.n	800230a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_ADC_Start_DMA+0xf4>)
 8002292:	4013      	ands	r3, r2
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	0052      	lsls	r2, r2, #1
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2250      	movs	r2, #80	; 0x50
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_ADC_Start_DMA+0xf8>)
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_ADC_Start_DMA+0xfc>)
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_ADC_Start_DMA+0x100>)
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	221c      	movs	r2, #28
 80022ca:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2110      	movs	r1, #16
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	0019      	movs	r1, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f000 fc58 	bl	8002ba0 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2104      	movs	r1, #4
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e003      	b.n	800230a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002302:	2317      	movs	r3, #23
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800230a:	2317      	movs	r3, #23
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	781b      	ldrb	r3, [r3, #0]
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b007      	add	sp, #28
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	fffff0fe 	.word	0xfffff0fe
 800231c:	080027ad 	.word	0x080027ad
 8002320:	08002861 	.word	0x08002861
 8002324:	0800287f 	.word	0x0800287f

08002328 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	230f      	movs	r3, #15
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2250      	movs	r2, #80	; 0x50
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Stop_DMA+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e05f      	b.n	8002406 <HAL_ADC_Stop_DMA+0xde>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2250      	movs	r2, #80	; 0x50
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800234e:	250f      	movs	r5, #15
 8002350:	197c      	adds	r4, r7, r5
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f9dc 	bl	8002712 <ADC_ConversionStop>
 800235a:	0003      	movs	r3, r0
 800235c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800235e:	0028      	movs	r0, r5
 8002360:	183b      	adds	r3, r7, r0
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d147      	bne.n	80023f8 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	438a      	bics	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	2225      	movs	r2, #37	; 0x25
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d112      	bne.n	80023ac <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	0005      	movs	r5, r0
 800238c:	183c      	adds	r4, r7, r0
 800238e:	0018      	movs	r0, r3
 8002390:	f000 fc6c 	bl	8002c6c <HAL_DMA_Abort>
 8002394:	0003      	movs	r3, r0
 8002396:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2110      	movs	r1, #16
 80023b8:	438a      	bics	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80023bc:	220f      	movs	r2, #15
 80023be:	18bb      	adds	r3, r7, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80023c6:	18bc      	adds	r4, r7, r2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f93a 	bl	8002644 <ADC_Disable>
 80023d0:	0003      	movs	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]
 80023d4:	e003      	b.n	80023de <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f933 	bl	8002644 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023de:	230f      	movs	r3, #15
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_ADC_Stop_DMA+0xe8>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	2201      	movs	r2, #1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2250      	movs	r2, #80	; 0x50
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002400:	230f      	movs	r3, #15
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bdb0      	pop	{r4, r5, r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	fffffefe 	.word	0xfffffefe

08002414 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2250      	movs	r2, #80	; 0x50
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e085      	b.n	8002558 <HAL_ADC_ConfigChannel+0x124>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2250      	movs	r2, #80	; 0x50
 8002450:	2101      	movs	r1, #1
 8002452:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2204      	movs	r2, #4
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2220      	movs	r2, #32
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2250      	movs	r2, #80	; 0x50
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e06f      	b.n	8002558 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_ADC_ConfigChannel+0x12c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d035      	beq.n	80024ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	035b      	lsls	r3, r3, #13
 800248e:	0b5a      	lsrs	r2, r3, #13
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	02db      	lsls	r3, r3, #11
 80024a0:	4013      	ands	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0409      	lsls	r1, r1, #16
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80024b2:	200a      	movs	r0, #10
 80024b4:	f000 f9fe 	bl	80028b4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	4013      	ands	r3, r2
 80024c2:	d006      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	03c9      	lsls	r1, r1, #15
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	d037      	beq.n	800254e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	0449      	lsls	r1, r1, #17
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e02f      	b.n	800254e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	035b      	lsls	r3, r3, #13
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	43d9      	mvns	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	400a      	ands	r2, r1
 8002504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	02db      	lsls	r3, r3, #11
 800250e:	4013      	ands	r3, r2
 8002510:	d005      	beq.n	800251e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 8002518:	4913      	ldr	r1, [pc, #76]	; (8002568 <HAL_ADC_ConfigChannel+0x134>)
 800251a:	400a      	ands	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4013      	ands	r3, r2
 8002528:	d005      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_ADC_ConfigChannel+0x138>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	025b      	lsls	r3, r3, #9
 800253e:	4013      	ands	r3, r2
 8002540:	d005      	beq.n	800254e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_ADC_ConfigChannel+0x130>)
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <HAL_ADC_ConfigChannel+0x13c>)
 800254a:	400a      	ands	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2250      	movs	r2, #80	; 0x50
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00001001 	.word	0x00001001
 8002564:	40012708 	.word	0x40012708
 8002568:	ff7fffff 	.word	0xff7fffff
 800256c:	ffbfffff 	.word	0xffbfffff
 8002570:	feffffff 	.word	0xfeffffff

08002574 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2203      	movs	r2, #3
 8002588:	4013      	ands	r3, r2
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <ADC_Enable+0x2c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <ADC_Enable+0x2c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <ADC_Enable+0x2e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d146      	bne.n	8002634 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a24      	ldr	r2, [pc, #144]	; (8002640 <ADC_Enable+0xcc>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00d      	beq.n	80025ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	2210      	movs	r2, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	2201      	movs	r2, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e033      	b.n	8002636 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 f968 	bl	80028b4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80025e4:	f7ff fc60 	bl	8001ea8 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ec:	e01b      	b.n	8002626 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ee:	f7ff fc5b 	bl	8001ea8 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b0a      	cmp	r3, #10
 80025fa:	d914      	bls.n	8002626 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00d      	beq.n	8002626 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	2210      	movs	r2, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	2201      	movs	r2, #1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e007      	b.n	8002636 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2201      	movs	r2, #1
 800262e:	4013      	ands	r3, r2
 8002630:	2b01      	cmp	r3, #1
 8002632:	d1dc      	bne.n	80025ee <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	80000017 	.word	0x80000017

08002644 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2203      	movs	r2, #3
 8002658:	4013      	ands	r3, r2
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <ADC_Disable+0x2c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <ADC_Disable+0x2c>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <ADC_Disable+0x2e>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d048      	beq.n	8002708 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2205      	movs	r2, #5
 800267e:	4013      	ands	r3, r2
 8002680:	2b01      	cmp	r3, #1
 8002682:	d110      	bne.n	80026a6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2102      	movs	r1, #2
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2203      	movs	r2, #3
 800269a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269c:	f7ff fc04 	bl	8001ea8 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026a4:	e029      	b.n	80026fa <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	2210      	movs	r2, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	2201      	movs	r2, #1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e023      	b.n	800270a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c2:	f7ff fbf1 	bl	8001ea8 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b0a      	cmp	r3, #10
 80026ce:	d914      	bls.n	80026fa <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10d      	bne.n	80026fa <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	2210      	movs	r2, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	2201      	movs	r2, #1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	2b01      	cmp	r3, #1
 8002706:	d0dc      	beq.n	80026c2 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}

08002712 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2204      	movs	r2, #4
 8002726:	4013      	ands	r3, r2
 8002728:	d03a      	beq.n	80027a0 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2204      	movs	r2, #4
 8002732:	4013      	ands	r3, r2
 8002734:	2b04      	cmp	r3, #4
 8002736:	d10d      	bne.n	8002754 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002742:	d107      	bne.n	8002754 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2110      	movs	r1, #16
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002754:	f7ff fba8 	bl	8001ea8 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800275c:	e01a      	b.n	8002794 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800275e:	f7ff fba3 	bl	8001ea8 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b0a      	cmp	r3, #10
 800276a:	d913      	bls.n	8002794 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d00d      	beq.n	8002794 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	2210      	movs	r2, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	2201      	movs	r2, #1
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e006      	b.n	80027a2 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2204      	movs	r2, #4
 800279c:	4013      	ands	r3, r2
 800279e:	d1de      	bne.n	800275e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	2250      	movs	r2, #80	; 0x50
 80027c0:	4013      	ands	r3, r2
 80027c2:	d141      	bne.n	8002848 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d12e      	bne.n	800283e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d129      	bne.n	800283e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d122      	bne.n	800283e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	d110      	bne.n	8002826 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	210c      	movs	r1, #12
 8002810:	438a      	bics	r2, r1
 8002812:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	4a10      	ldr	r2, [pc, #64]	; (800285c <ADC_DMAConvCplt+0xb0>)
 800281a:	4013      	ands	r3, r2
 800281c:	2201      	movs	r2, #1
 800281e:	431a      	orrs	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
 8002824:	e00b      	b.n	800283e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	2220      	movs	r2, #32
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	2201      	movs	r2, #1
 8002838:	431a      	orrs	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0018      	movs	r0, r3
 8002842:	f7fd fe61 	bl	8000508 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002846:	e005      	b.n	8002854 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	0010      	movs	r0, r2
 8002852:	4798      	blx	r3
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b004      	add	sp, #16
 800285a:	bd80      	pop	{r7, pc}
 800285c:	fffffefe 	.word	0xfffffefe

08002860 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff fdcf 	bl	8002414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}

0800287e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	431a      	orrs	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	2204      	movs	r2, #4
 800289e:	431a      	orrs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff fdbc 	bl	8002424 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <ADC_DelayMicroSecond+0x38>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	490b      	ldr	r1, [pc, #44]	; (80028f0 <ADC_DelayMicroSecond+0x3c>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fd fc32 	bl	800012c <__udivsi3>
 80028c8:	0003      	movs	r3, r0
 80028ca:	001a      	movs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4353      	muls	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80028d2:	e002      	b.n	80028da <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f9      	bne.n	80028d4 <ADC_DelayMicroSecond+0x20>
  }
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	20000000 	.word	0x20000000
 80028f0:	000f4240 	.word	0x000f4240

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	0002      	movs	r2, r0
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b7f      	cmp	r3, #127	; 0x7f
 8002906:	d809      	bhi.n	800291c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	231f      	movs	r3, #31
 8002910:	401a      	ands	r2, r3
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_EnableIRQ+0x30>)
 8002914:	2101      	movs	r1, #1
 8002916:	4091      	lsls	r1, r2
 8002918:	000a      	movs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
  }
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	0002      	movs	r2, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b7f      	cmp	r3, #127	; 0x7f
 800293c:	d828      	bhi.n	8002990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <__NVIC_SetPriority+0xd4>)
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	33c0      	adds	r3, #192	; 0xc0
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	589b      	ldr	r3, [r3, r2]
 800294e:	1dfa      	adds	r2, r7, #7
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	0011      	movs	r1, r2
 8002954:	2203      	movs	r2, #3
 8002956:	400a      	ands	r2, r1
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	21ff      	movs	r1, #255	; 0xff
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	43d2      	mvns	r2, r2
 8002962:	401a      	ands	r2, r3
 8002964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	401a      	ands	r2, r3
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0018      	movs	r0, r3
 8002974:	2303      	movs	r3, #3
 8002976:	4003      	ands	r3, r0
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800297c:	481f      	ldr	r0, [pc, #124]	; (80029fc <__NVIC_SetPriority+0xd4>)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	430a      	orrs	r2, r1
 8002988:	33c0      	adds	r3, #192	; 0xc0
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800298e:	e031      	b.n	80029f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	0019      	movs	r1, r3
 8002998:	230f      	movs	r3, #15
 800299a:	400b      	ands	r3, r1
 800299c:	3b08      	subs	r3, #8
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3306      	adds	r3, #6
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	18d3      	adds	r3, r2, r3
 80029a6:	3304      	adds	r3, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1dfa      	adds	r2, r7, #7
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	0011      	movs	r1, r2
 80029b0:	2203      	movs	r2, #3
 80029b2:	400a      	ands	r2, r1
 80029b4:	00d2      	lsls	r2, r2, #3
 80029b6:	21ff      	movs	r1, #255	; 0xff
 80029b8:	4091      	lsls	r1, r2
 80029ba:	000a      	movs	r2, r1
 80029bc:	43d2      	mvns	r2, r2
 80029be:	401a      	ands	r2, r3
 80029c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	401a      	ands	r2, r3
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	0018      	movs	r0, r3
 80029d0:	2303      	movs	r3, #3
 80029d2:	4003      	ands	r3, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	001c      	movs	r4, r3
 80029e0:	230f      	movs	r3, #15
 80029e2:	4023      	ands	r3, r4
 80029e4:	3b08      	subs	r3, #8
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	430a      	orrs	r2, r1
 80029ea:	3306      	adds	r3, #6
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	18c3      	adds	r3, r0, r3
 80029f0:	3304      	adds	r3, #4
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b003      	add	sp, #12
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	045b      	lsls	r3, r3, #17
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d301      	bcc.n	8002a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e010      	b.n	8002a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <SysTick_Config+0x44>)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	3a01      	subs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a24:	2301      	movs	r3, #1
 8002a26:	425b      	negs	r3, r3
 8002a28:	2103      	movs	r1, #3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ff7c 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x44>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x44>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	210f      	movs	r1, #15
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	1c02      	adds	r2, r0, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ff5d 	bl	8002928 <__NVIC_SetPriority>
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff33 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ffaf 	bl	8002a04 <SysTick_Config>
 8002aa6:	0003      	movs	r3, r0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e061      	b.n	8002b86 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a32      	ldr	r2, [pc, #200]	; (8002b90 <HAL_DMA_Init+0xe0>)
 8002ac8:	4694      	mov	ip, r2
 8002aca:	4463      	add	r3, ip
 8002acc:	2114      	movs	r1, #20
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fb2c 	bl	800012c <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_DMA_Init+0xe4>)
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2225      	movs	r2, #37	; 0x25
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <HAL_DMA_Init+0xe8>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_DMA_Init+0xec>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	211c      	movs	r1, #28
 8002b46:	400b      	ands	r3, r1
 8002b48:	210f      	movs	r1, #15
 8002b4a:	4099      	lsls	r1, r3
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_DMA_Init+0xec>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_DMA_Init+0xec>)
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	201c      	movs	r0, #28
 8002b64:	4003      	ands	r3, r0
 8002b66:	409a      	lsls	r2, r3
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_DMA_Init+0xec>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2225      	movs	r2, #37	; 0x25
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	bffdfff8 	.word	0xbffdfff8
 8002b94:	40020000 	.word	0x40020000
 8002b98:	ffff800f 	.word	0xffff800f
 8002b9c:	400200a8 	.word	0x400200a8

08002ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2224      	movs	r2, #36	; 0x24
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_DMA_Start_IT+0x24>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e04f      	b.n	8002c64 <HAL_DMA_Start_IT+0xc4>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2225      	movs	r2, #37	; 0x25
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d13a      	bne.n	8002c4e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2225      	movs	r2, #37	; 0x25
 8002bdc:	2102      	movs	r1, #2
 8002bde:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f96a 	bl	8002ed6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	210e      	movs	r1, #14
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e00f      	b.n	8002c3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	210a      	movs	r1, #10
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2224      	movs	r2, #36	; 0x24
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c56:	2317      	movs	r3, #23
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002c5e:	2317      	movs	r3, #23
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	230f      	movs	r3, #15
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2225      	movs	r2, #37	; 0x25
 8002c80:	5c9b      	ldrb	r3, [r3, r2]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d008      	beq.n	8002c9a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2224      	movs	r2, #36	; 0x24
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e024      	b.n	8002ce4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	210e      	movs	r1, #14
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	438a      	bics	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	221c      	movs	r2, #28
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4091      	lsls	r1, r2
 8002cca:	000a      	movs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2225      	movs	r2, #37	; 0x25
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2224      	movs	r2, #36	; 0x24
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

    return status;
 8002cde:	230f      	movs	r3, #15
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2225      	movs	r2, #37	; 0x25
 8002d00:	5c9b      	ldrb	r3, [r3, r2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d006      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e02a      	b.n	8002d6c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	210e      	movs	r1, #14
 8002d22:	438a      	bics	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	438a      	bics	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	221c      	movs	r2, #28
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2101      	movs	r1, #1
 8002d44:	4091      	lsls	r1, r2
 8002d46:	000a      	movs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2225      	movs	r2, #37	; 0x25
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2224      	movs	r2, #36	; 0x24
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	0010      	movs	r0, r2
 8002d6a:	4798      	blx	r3
    }
  }
  return status;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	221c      	movs	r2, #28
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0013      	movs	r3, r2
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	d026      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x7a>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2204      	movs	r2, #4
 8002daa:	4013      	ands	r3, r2
 8002dac:	d022      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d107      	bne.n	8002dca <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	221c      	movs	r2, #28
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	4091      	lsls	r1, r2
 8002dda:	000a      	movs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x6e>
 8002de6:	e071      	b.n	8002ecc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	0010      	movs	r0, r2
 8002df0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	e06b      	b.n	8002ecc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	221c      	movs	r2, #28
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	0013      	movs	r3, r2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	d02d      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xea>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d029      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2220      	movs	r2, #32
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d10b      	bne.n	8002e34 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	210a      	movs	r1, #10
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2225      	movs	r2, #37	; 0x25
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	221c      	movs	r2, #28
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2102      	movs	r1, #2
 8002e42:	4091      	lsls	r1, r2
 8002e44:	000a      	movs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d039      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	0010      	movs	r0, r2
 8002e60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e62:	e033      	b.n	8002ecc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	221c      	movs	r2, #28
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	0013      	movs	r3, r2
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	d02a      	beq.n	8002ece <HAL_DMA_IRQHandler+0x154>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d026      	beq.n	8002ece <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	210e      	movs	r1, #14
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	221c      	movs	r2, #28
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4091      	lsls	r1, r2
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2225      	movs	r2, #37	; 0x25
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2224      	movs	r2, #36	; 0x24
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	0010      	movs	r0, r2
 8002eca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46c0      	nop			; (mov r8, r8)
}
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	221c      	movs	r2, #28
 8002eea:	401a      	ands	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4091      	lsls	r1, r2
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d108      	bne.n	8002f1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f18:	e007      	b.n	8002f2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f4a:	e14f      	b.n	80031ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4091      	lsls	r1, r2
 8002f56:	000a      	movs	r2, r1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d100      	bne.n	8002f64 <HAL_GPIO_Init+0x30>
 8002f62:	e140      	b.n	80031e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d005      	beq.n	8002f7c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d130      	bne.n	8002fde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	2201      	movs	r2, #1
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	0013      	movs	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d017      	beq.n	800301a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	0013      	movs	r3, r2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2203      	movs	r2, #3
 8003020:	4013      	ands	r3, r2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d123      	bne.n	800306e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	58d3      	ldr	r3, [r2, r3]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2207      	movs	r2, #7
 8003038:	4013      	ands	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	43da      	mvns	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2107      	movs	r1, #7
 8003052:	400b      	ands	r3, r1
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	409a      	lsls	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	6939      	ldr	r1, [r7, #16]
 800306c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	409a      	lsls	r2, r3
 800307c:	0013      	movs	r3, r2
 800307e:	43da      	mvns	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	401a      	ands	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	0013      	movs	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	23c0      	movs	r3, #192	; 0xc0
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	4013      	ands	r3, r2
 80030ac:	d100      	bne.n	80030b0 <HAL_GPIO_Init+0x17c>
 80030ae:	e09a      	b.n	80031e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b0:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80030b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_GPIO_Init+0x2d4>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	589b      	ldr	r3, [r3, r2]
 80030c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2203      	movs	r2, #3
 80030ce:	4013      	ands	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	43da      	mvns	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	23a0      	movs	r3, #160	; 0xa0
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x1ea>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_GPIO_Init+0x2d8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x1e6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a46      	ldr	r2, [pc, #280]	; (8003210 <HAL_GPIO_Init+0x2dc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x1e2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_GPIO_Init+0x2e0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x1de>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a44      	ldr	r2, [pc, #272]	; (8003218 <HAL_GPIO_Init+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x1da>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x1ec>
 800310e:	2306      	movs	r3, #6
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x1ec>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x1ec>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x1ec>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x1ec>
 800311e:	2300      	movs	r3, #0
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	2103      	movs	r1, #3
 8003124:	400a      	ands	r2, r1
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x2d4>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_GPIO_Init+0x2e8>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	035b      	lsls	r3, r3, #13
 8003156:	4013      	ands	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_GPIO_Init+0x2e8>)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_GPIO_Init+0x2e8>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43da      	mvns	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	039b      	lsls	r3, r3, #14
 8003180:	4013      	ands	r3, r2
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_GPIO_Init+0x2e8>)
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_GPIO_Init+0x2e8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	029b      	lsls	r3, r3, #10
 80031aa:	4013      	ands	r3, r2
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_GPIO_Init+0x2e8>)
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_GPIO_Init+0x2e8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	025b      	lsls	r3, r3, #9
 80031d4:	4013      	ands	r3, r2
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_GPIO_Init+0x2e8>)
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	40da      	lsrs	r2, r3
 80031f4:	1e13      	subs	r3, r2, #0
 80031f6:	d000      	beq.n	80031fa <HAL_GPIO_Init+0x2c6>
 80031f8:	e6a8      	b.n	8002f4c <HAL_GPIO_Init+0x18>
  }
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b006      	add	sp, #24
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	40010000 	.word	0x40010000
 800320c:	50000400 	.word	0x50000400
 8003210:	50000800 	.word	0x50000800
 8003214:	50000c00 	.word	0x50000c00
 8003218:	50001c00 	.word	0x50001c00
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	0008      	movs	r0, r1
 800322a:	0011      	movs	r1, r2
 800322c:	1cbb      	adds	r3, r7, #2
 800322e:	1c02      	adds	r2, r0, #0
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	1c7b      	adds	r3, r7, #1
 8003234:	1c0a      	adds	r2, r1, #0
 8003236:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003238:	1c7b      	adds	r3, r7, #1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003240:	1cbb      	adds	r3, r7, #2
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800324a:	1cbb      	adds	r3, r7, #2
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	0002      	movs	r2, r0
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	1dba      	adds	r2, r7, #6
 800326e:	8812      	ldrh	r2, [r2, #0]
 8003270:	4013      	ands	r3, r2
 8003272:	d008      	beq.n	8003286 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003276:	1dba      	adds	r2, r7, #6
 8003278:	8812      	ldrh	r2, [r2, #0]
 800327a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800327c:	1dbb      	adds	r3, r7, #6
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	0018      	movs	r0, r3
 8003282:	f7fd f955 	bl	8000530 <HAL_GPIO_EXTI_Callback>
  }
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e082      	b.n	80033ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2241      	movs	r2, #65	; 0x41
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fe f803 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2241      	movs	r2, #65	; 0x41
 80032c6:	2124      	movs	r1, #36	; 0x24
 80032c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	438a      	bics	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_I2C_Init+0x120>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4931      	ldr	r1, [pc, #196]	; (80033b8 <HAL_I2C_Init+0x124>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0209      	lsls	r1, r1, #8
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e007      	b.n	8003322 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2184      	movs	r1, #132	; 0x84
 800331c:	0209      	lsls	r1, r1, #8
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d104      	bne.n	8003334 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	491f      	ldr	r1, [pc, #124]	; (80033bc <HAL_I2C_Init+0x128>)
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	491a      	ldr	r1, [pc, #104]	; (80033b8 <HAL_I2C_Init+0x124>)
 8003350:	400a      	ands	r2, r1
 8003352:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	431a      	orrs	r2, r3
 800335e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69d9      	ldr	r1, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2241      	movs	r2, #65	; 0x41
 8003398:	2120      	movs	r1, #32
 800339a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2242      	movs	r2, #66	; 0x42
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	f0ffffff 	.word	0xf0ffffff
 80033b8:	ffff7fff 	.word	0xffff7fff
 80033bc:	02008000 	.word	0x02008000

080033c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	0008      	movs	r0, r1
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	0019      	movs	r1, r3
 80033ce:	230a      	movs	r3, #10
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	1c02      	adds	r2, r0, #0
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	2308      	movs	r3, #8
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	1c0a      	adds	r2, r1, #0
 80033dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2241      	movs	r2, #65	; 0x41
 80033e2:	5c9b      	ldrb	r3, [r3, r2]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d000      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x2c>
 80033ea:	e0e7      	b.n	80035bc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Master_Transmit+0x3a>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e1      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003402:	f7fe fd51 	bl	8001ea8 <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	0219      	lsls	r1, r3, #8
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	f000 fa04 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0cc      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2241      	movs	r2, #65	; 0x41
 8003428:	2121      	movs	r1, #33	; 0x21
 800342a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2242      	movs	r2, #66	; 0x42
 8003430:	2110      	movs	r1, #16
 8003432:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2208      	movs	r2, #8
 8003444:	18ba      	adds	r2, r7, r2
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2bff      	cmp	r3, #255	; 0xff
 8003458:	d911      	bls.n	800347e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	b2da      	uxtb	r2, r3
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	045c      	lsls	r4, r3, #17
 800346a:	230a      	movs	r3, #10
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	8819      	ldrh	r1, [r3, #0]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <HAL_I2C_Master_Transmit+0x208>)
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	0023      	movs	r3, r4
 8003478:	f000 fc2e 	bl	8003cd8 <I2C_TransferConfig>
 800347c:	e075      	b.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	b2da      	uxtb	r2, r3
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	049c      	lsls	r4, r3, #18
 8003492:	230a      	movs	r3, #10
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	8819      	ldrh	r1, [r3, #0]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <HAL_I2C_Master_Transmit+0x208>)
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	0023      	movs	r3, r4
 80034a0:	f000 fc1a 	bl	8003cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034a4:	e061      	b.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fa07 	bl	80038c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80034b2:	1e03      	subs	r3, r0, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03a      	beq.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d136      	bne.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	0013      	movs	r3, r2
 8003506:	2200      	movs	r2, #0
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	f000 f98b 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e053      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2bff      	cmp	r3, #255	; 0xff
 800351e:	d911      	bls.n	8003544 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	b2da      	uxtb	r2, r3
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	045c      	lsls	r4, r3, #17
 8003530:	230a      	movs	r3, #10
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	8819      	ldrh	r1, [r3, #0]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	2300      	movs	r3, #0
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	0023      	movs	r3, r4
 800353e:	f000 fbcb 	bl	8003cd8 <I2C_TransferConfig>
 8003542:	e012      	b.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	b2da      	uxtb	r2, r3
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	049c      	lsls	r4, r3, #18
 8003558:	230a      	movs	r3, #10
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	8819      	ldrh	r1, [r3, #0]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	2300      	movs	r3, #0
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	0023      	movs	r3, r4
 8003566:	f000 fbb7 	bl	8003cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d198      	bne.n	80034a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f9e6 	bl	800394c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e01a      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2220      	movs	r2, #32
 800358e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	490c      	ldr	r1, [pc, #48]	; (80035cc <HAL_I2C_Master_Transmit+0x20c>)
 800359c:	400a      	ands	r2, r1
 800359e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2241      	movs	r2, #65	; 0x41
 80035a4:	2120      	movs	r1, #32
 80035a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2242      	movs	r2, #66	; 0x42
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b007      	add	sp, #28
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	80002000 	.word	0x80002000
 80035cc:	fe00e800 	.word	0xfe00e800

080035d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	0008      	movs	r0, r1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	0019      	movs	r1, r3
 80035de:	230a      	movs	r3, #10
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	1c02      	adds	r2, r0, #0
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	2308      	movs	r3, #8
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	1c0a      	adds	r2, r1, #0
 80035ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d000      	beq.n	80035fc <HAL_I2C_Master_Receive+0x2c>
 80035fa:	e0e8      	b.n	80037ce <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	5c9b      	ldrb	r3, [r3, r2]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Master_Receive+0x3a>
 8003606:	2302      	movs	r3, #2
 8003608:	e0e2      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003612:	f7fe fc49 	bl	8001ea8 <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	0219      	lsls	r1, r3, #8
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	f000 f8fc 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0cd      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2241      	movs	r2, #65	; 0x41
 8003638:	2122      	movs	r1, #34	; 0x22
 800363a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2242      	movs	r2, #66	; 0x42
 8003640:	2110      	movs	r1, #16
 8003642:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2208      	movs	r2, #8
 8003654:	18ba      	adds	r2, r7, r2
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	2bff      	cmp	r3, #255	; 0xff
 8003668:	d911      	bls.n	800368e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	22ff      	movs	r2, #255	; 0xff
 800366e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	b2da      	uxtb	r2, r3
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	045c      	lsls	r4, r3, #17
 800367a:	230a      	movs	r3, #10
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	8819      	ldrh	r1, [r3, #0]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <HAL_I2C_Master_Receive+0x208>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	0023      	movs	r3, r4
 8003688:	f000 fb26 	bl	8003cd8 <I2C_TransferConfig>
 800368c:	e076      	b.n	800377c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	b2da      	uxtb	r2, r3
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	049c      	lsls	r4, r3, #18
 80036a2:	230a      	movs	r3, #10
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	8819      	ldrh	r1, [r3, #0]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <HAL_I2C_Master_Receive+0x208>)
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	0023      	movs	r3, r4
 80036b0:	f000 fb12 	bl	8003cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036b4:	e062      	b.n	800377c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f989 	bl	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e082      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03a      	beq.n	800377c <HAL_I2C_Master_Receive+0x1ac>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d136      	bne.n	800377c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	0013      	movs	r3, r2
 8003718:	2200      	movs	r2, #0
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	f000 f882 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e053      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d911      	bls.n	8003756 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	b2da      	uxtb	r2, r3
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	045c      	lsls	r4, r3, #17
 8003742:	230a      	movs	r3, #10
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	8819      	ldrh	r1, [r3, #0]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	0023      	movs	r3, r4
 8003750:	f000 fac2 	bl	8003cd8 <I2C_TransferConfig>
 8003754:	e012      	b.n	800377c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	b2da      	uxtb	r2, r3
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	049c      	lsls	r4, r3, #18
 800376a:	230a      	movs	r3, #10
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	8819      	ldrh	r1, [r3, #0]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	0023      	movs	r3, r4
 8003778:	f000 faae 	bl	8003cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d197      	bne.n	80036b6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	0018      	movs	r0, r3
 800378e:	f000 f8dd 	bl	800394c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e01a      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2220      	movs	r2, #32
 80037a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	490b      	ldr	r1, [pc, #44]	; (80037dc <HAL_I2C_Master_Receive+0x20c>)
 80037ae:	400a      	ands	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2241      	movs	r2, #65	; 0x41
 80037b6:	2120      	movs	r1, #32
 80037b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2242      	movs	r2, #66	; 0x42
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b007      	add	sp, #28
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	80002400 	.word	0x80002400
 80037dc:	fe00e800 	.word	0xfe00e800

080037e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d103      	bne.n	80037fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2201      	movs	r2, #1
 8003806:	4013      	ands	r3, r2
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
  }
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003834:	e030      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	d02d      	beq.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7fe fb34 	bl	8001ea8 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d122      	bne.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d113      	bne.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	2220      	movs	r2, #32
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2241      	movs	r2, #65	; 0x41
 8003880:	2120      	movs	r1, #32
 8003882:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2242      	movs	r2, #66	; 0x42
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e00f      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	425a      	negs	r2, r3
 80038a8:	4153      	adcs	r3, r2
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	001a      	movs	r2, r3
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d0bf      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038cc:	e032      	b.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f8ff 	bl	8003ad8 <I2C_IsErrorOccurred>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e030      	b.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	d025      	beq.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fade 	bl	8001ea8 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11a      	bne.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2202      	movs	r2, #2
 8003906:	4013      	ands	r3, r2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d013      	beq.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	2220      	movs	r2, #32
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	; 0x42
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d1c5      	bne.n	80038ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003958:	e02f      	b.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 f8b9 	bl	8003ad8 <I2C_IsErrorOccurred>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fe fa9b 	bl	8001ea8 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	2b20      	cmp	r3, #32
 8003990:	d013      	beq.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	2220      	movs	r2, #32
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2241      	movs	r2, #65	; 0x41
 80039a2:	2120      	movs	r1, #32
 80039a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2242      	movs	r2, #66	; 0x42
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2240      	movs	r2, #64	; 0x40
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2220      	movs	r2, #32
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d1c8      	bne.n	800395a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039e0:	e06b      	b.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 f875 	bl	8003ad8 <I2C_IsErrorOccurred>
 80039ee:	1e03      	subs	r3, r0, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e069      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2220      	movs	r2, #32
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d138      	bne.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d105      	bne.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e055      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2210      	movs	r2, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d107      	bne.n	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2204      	movs	r2, #4
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
 8003a3a:	e002      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2241      	movs	r2, #65	; 0x41
 8003a5e:	2120      	movs	r1, #32
 8003a60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2242      	movs	r2, #66	; 0x42
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e029      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe fa17 	bl	8001ea8 <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d00f      	beq.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2241      	movs	r2, #65	; 0x41
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e007      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d18c      	bne.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	fe00e800 	.word	0xfe00e800

08003ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b08b      	sub	sp, #44	; 0x2c
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2327      	movs	r3, #39	; 0x27
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2210      	movs	r2, #16
 8003b00:	4013      	ands	r3, r2
 8003b02:	d100      	bne.n	8003b06 <I2C_IsErrorOccurred+0x2e>
 8003b04:	e082      	b.n	8003c0c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b0e:	e060      	b.n	8003bd2 <I2C_IsErrorOccurred+0xfa>
 8003b10:	2427      	movs	r4, #39	; 0x27
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	193a      	adds	r2, r7, r4
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	d058      	beq.n	8003bd2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7fe f9c2 	bl	8001ea8 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d306      	bcc.n	8003b3e <I2C_IsErrorOccurred+0x66>
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	193a      	adds	r2, r7, r4
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d149      	bne.n	8003bd2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	01db      	lsls	r3, r3, #7
 8003b48:	4013      	ands	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b4c:	2013      	movs	r0, #19
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	2142      	movs	r1, #66	; 0x42
 8003b54:	5c52      	ldrb	r2, [r2, r1]
 8003b56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	401a      	ands	r2, r3
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d126      	bne.n	8003bba <I2C_IsErrorOccurred+0xe2>
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	01db      	lsls	r3, r3, #7
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d021      	beq.n	8003bba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003b76:	183b      	adds	r3, r7, r0
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d01d      	beq.n	8003bba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	01c9      	lsls	r1, r1, #7
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b90:	f7fe f98a 	bl	8001ea8 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b98:	e00f      	b.n	8003bba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b9a:	f7fe f985 	bl	8001ea8 <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b19      	cmp	r3, #25
 8003ba6:	d908      	bls.n	8003bba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	2220      	movs	r2, #32
 8003bac:	4313      	orrs	r3, r2
 8003bae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bb0:	2327      	movs	r3, #39	; 0x27
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]

              break;
 8003bb8:	e00b      	b.n	8003bd2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2127      	movs	r1, #39	; 0x27
 8003bc6:	187a      	adds	r2, r7, r1
 8003bc8:	1879      	adds	r1, r7, r1
 8003bca:	7809      	ldrb	r1, [r1, #0]
 8003bcc:	7011      	strb	r1, [r2, #0]
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d1e3      	bne.n	8003b9a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d004      	beq.n	8003bea <I2C_IsErrorOccurred+0x112>
 8003be0:	2327      	movs	r3, #39	; 0x27
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d092      	beq.n	8003b10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bea:	2327      	movs	r3, #39	; 0x27
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4313      	orrs	r3, r2
 8003c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c04:	2327      	movs	r3, #39	; 0x27
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00c      	beq.n	8003c38 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	0052      	lsls	r2, r2, #1
 8003c2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c30:	2327      	movs	r3, #39	; 0x27
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d00c      	beq.n	8003c5c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2208      	movs	r2, #8
 8003c46:	4313      	orrs	r3, r2
 8003c48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	00d2      	lsls	r2, r2, #3
 8003c52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c54:	2327      	movs	r3, #39	; 0x27
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00c      	beq.n	8003c80 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	0092      	lsls	r2, r2, #2
 8003c76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c78:	2327      	movs	r3, #39	; 0x27
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003c80:	2327      	movs	r3, #39	; 0x27
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01d      	beq.n	8003cc6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff fda7 	bl	80037e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <I2C_IsErrorOccurred+0x1fc>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2241      	movs	r2, #65	; 0x41
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2242      	movs	r2, #66	; 0x42
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2240      	movs	r2, #64	; 0x40
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003cc6:	2327      	movs	r3, #39	; 0x27
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	781b      	ldrb	r3, [r3, #0]
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b00b      	add	sp, #44	; 0x2c
 8003cd2:	bd90      	pop	{r4, r7, pc}
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	240a      	movs	r4, #10
 8003ce8:	193b      	adds	r3, r7, r4
 8003cea:	1c02      	adds	r2, r0, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	2009      	movs	r0, #9
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	1c0a      	adds	r2, r1, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	059b      	lsls	r3, r3, #22
 8003cfc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0419      	lsls	r1, r3, #16
 8003d04:	23ff      	movs	r3, #255	; 0xff
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	4313      	orrs	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d22:	0d51      	lsrs	r1, r2, #21
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	00d2      	lsls	r2, r2, #3
 8003d28:	400a      	ands	r2, r1
 8003d2a:	4907      	ldr	r1, [pc, #28]	; (8003d48 <I2C_TransferConfig+0x70>)
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	43d2      	mvns	r2, r2
 8003d30:	401a      	ands	r2, r3
 8003d32:	0011      	movs	r1, r2
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b007      	add	sp, #28
 8003d44:	bd90      	pop	{r4, r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	03ff63ff 	.word	0x03ff63ff

08003d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2241      	movs	r2, #65	; 0x41
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d138      	bne.n	8003dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e032      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2241      	movs	r2, #65	; 0x41
 8003d7c:	2124      	movs	r1, #36	; 0x24
 8003d7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4911      	ldr	r1, [pc, #68]	; (8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2241      	movs	r2, #65	; 0x41
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffffefff 	.word	0xffffefff

08003de4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2241      	movs	r2, #65	; 0x41
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d139      	bne.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e033      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2241      	movs	r2, #65	; 0x41
 8003e14:	2124      	movs	r1, #36	; 0x24
 8003e16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2241      	movs	r2, #65	; 0x41
 8003e5e:	2120      	movs	r1, #32
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2240      	movs	r2, #64	; 0x40
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	fffff0ff 	.word	0xfffff0ff

08003e7c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cfb      	adds	r3, r7, #3
 8003e88:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_PWR_EnterSLEEPMode+0x40>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003eb6:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_PWR_EnterSLEEPMode+0xac>)
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_PWR_EnterSLEEPMode+0xac>)
 8003ede:	2104      	movs	r1, #4
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003ee4:	1cfb      	adds	r3, r7, #3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003eec:	bf30      	wfi
 8003eee:	e002      	b.n	8003ef6 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003ef0:	bf40      	sev
    __WFE();
 8003ef2:	bf20      	wfe
    __WFE();
 8003ef4:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_PWR_EnterSLEEPMode+0x94>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	0089      	lsls	r1, r1, #2
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003f10:	46c0      	nop			; (mov r8, r8)

}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b006      	add	sp, #24
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	40010000 	.word	0x40010000
 8003f24:	fffffdff 	.word	0xfffffdff
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b5b0      	push	{r4, r5, r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 fbaf 	bl	800469e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	4bcf      	ldr	r3, [pc, #828]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	220c      	movs	r2, #12
 8003f46:	4013      	ands	r3, r2
 8003f48:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4a:	4bcd      	ldr	r3, [pc, #820]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	025b      	lsls	r3, r3, #9
 8003f52:	4013      	ands	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <HAL_RCC_OscConfig+0x36>
 8003f60:	e07e      	b.n	8004060 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x68>
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	025b      	lsls	r3, r3, #9
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4bc1      	ldr	r3, [pc, #772]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	4013      	ands	r3, r2
 8003f82:	d100      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5a>
 8003f84:	e06b      	b.n	800405e <HAL_RCC_OscConfig+0x132>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d167      	bne.n	800405e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f000 fb85 	bl	800469e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	025b      	lsls	r3, r3, #9
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x84>
 8003fa0:	4bb7      	ldr	r3, [pc, #732]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4bb6      	ldr	r3, [pc, #728]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	0249      	lsls	r1, r1, #9
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e027      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	23a0      	movs	r3, #160	; 0xa0
 8003fb6:	02db      	lsls	r3, r3, #11
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d10e      	bne.n	8003fda <HAL_RCC_OscConfig+0xae>
 8003fbc:	4bb0      	ldr	r3, [pc, #704]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4baf      	ldr	r3, [pc, #700]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	02c9      	lsls	r1, r1, #11
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4bad      	ldr	r3, [pc, #692]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4bac      	ldr	r3, [pc, #688]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	0249      	lsls	r1, r1, #9
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e012      	b.n	8004000 <HAL_RCC_OscConfig+0xd4>
 8003fda:	4ba9      	ldr	r3, [pc, #676]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4ba8      	ldr	r3, [pc, #672]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fe0:	49a8      	ldr	r1, [pc, #672]	; (8004284 <HAL_RCC_OscConfig+0x358>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	4ba6      	ldr	r3, [pc, #664]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	025b      	lsls	r3, r3, #9
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4ba2      	ldr	r3, [pc, #648]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4ba1      	ldr	r3, [pc, #644]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8003ffa:	49a3      	ldr	r1, [pc, #652]	; (8004288 <HAL_RCC_OscConfig+0x35c>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd ff4e 	bl	8001ea8 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004010:	e009      	b.n	8004026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004012:	f7fd ff49 	bl	8001ea8 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b64      	cmp	r3, #100	; 0x64
 800401e:	d902      	bls.n	8004026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	f000 fb3c 	bl	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004026:	4b96      	ldr	r3, [pc, #600]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	4013      	ands	r3, r2
 8004030:	d0ef      	beq.n	8004012 <HAL_RCC_OscConfig+0xe6>
 8004032:	e015      	b.n	8004060 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd ff38 	bl	8001ea8 <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403e:	f7fd ff33 	bl	8001ea8 <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e326      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004050:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	4013      	ands	r3, r2
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x112>
 800405c:	e000      	b.n	8004060 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d100      	bne.n	800406c <HAL_RCC_OscConfig+0x140>
 800406a:	e08b      	b.n	8004184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d13e      	bne.n	80040fc <HAL_RCC_OscConfig+0x1d0>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13b      	bne.n	80040fc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004084:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2204      	movs	r2, #4
 800408a:	4013      	ands	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_RCC_OscConfig+0x16c>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e302      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b79      	ldr	r3, [pc, #484]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a7b      	ldr	r2, [pc, #492]	; (800428c <HAL_RCC_OscConfig+0x360>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	4b75      	ldr	r3, [pc, #468]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040ae:	4b74      	ldr	r3, [pc, #464]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2209      	movs	r2, #9
 80040b4:	4393      	bics	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	4b71      	ldr	r3, [pc, #452]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c0:	f000 fc40 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 80040c4:	0001      	movs	r1, r0
 80040c6:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	220f      	movs	r2, #15
 80040ce:	4013      	ands	r3, r2
 80040d0:	4a6f      	ldr	r2, [pc, #444]	; (8004290 <HAL_RCC_OscConfig+0x364>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	000a      	movs	r2, r1
 80040d6:	40da      	lsrs	r2, r3
 80040d8:	4b6e      	ldr	r3, [pc, #440]	; (8004294 <HAL_RCC_OscConfig+0x368>)
 80040da:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x36c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2513      	movs	r5, #19
 80040e2:	197c      	adds	r4, r7, r5
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fd fe99 	bl	8001e1c <HAL_InitTick>
 80040ea:	0003      	movs	r3, r0
 80040ec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80040ee:	197b      	adds	r3, r7, r5
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d046      	beq.n	8004184 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80040f6:	197b      	adds	r3, r7, r5
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	e2d0      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d027      	beq.n	8004152 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004102:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2209      	movs	r2, #9
 8004108:	4393      	bics	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fd fec8 	bl	8001ea8 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411e:	f7fd fec3 	bl	8001ea8 <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e2b6      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2204      	movs	r2, #4
 8004136:	4013      	ands	r3, r2
 8004138:	d0f1      	beq.n	800411e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413a:	4b51      	ldr	r3, [pc, #324]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a53      	ldr	r2, [pc, #332]	; (800428c <HAL_RCC_OscConfig+0x360>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	e018      	b.n	8004184 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004152:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004158:	2101      	movs	r1, #1
 800415a:	438a      	bics	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fd fea3 	bl	8001ea8 <HAL_GetTick>
 8004162:	0003      	movs	r3, r0
 8004164:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004168:	f7fd fe9e 	bl	8001ea8 <HAL_GetTick>
 800416c:	0002      	movs	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e291      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800417a:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2204      	movs	r2, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d1f1      	bne.n	8004168 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2210      	movs	r2, #16
 800418a:	4013      	ands	r3, r2
 800418c:	d100      	bne.n	8004190 <HAL_RCC_OscConfig+0x264>
 800418e:	e0a1      	b.n	80042d4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d140      	bne.n	8004218 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x282>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e277      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a3a      	ldr	r2, [pc, #232]	; (800429c <HAL_RCC_OscConfig+0x370>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041bc:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c2:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	0a19      	lsrs	r1, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	061a      	lsls	r2, r3, #24
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	0b5b      	lsrs	r3, r3, #13
 80041dc:	3301      	adds	r3, #1
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	0212      	lsls	r2, r2, #8
 80041e2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	210f      	movs	r1, #15
 80041ec:	400b      	ands	r3, r1
 80041ee:	4928      	ldr	r1, [pc, #160]	; (8004290 <HAL_RCC_OscConfig+0x364>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x368>)
 80041f6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x36c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2513      	movs	r5, #19
 80041fe:	197c      	adds	r4, r7, r5
 8004200:	0018      	movs	r0, r3
 8004202:	f7fd fe0b 	bl	8001e1c <HAL_InitTick>
 8004206:	0003      	movs	r3, r0
 8004208:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800420a:	197b      	adds	r3, r7, r5
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d060      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004212:	197b      	adds	r3, r7, r5
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	e242      	b.n	800469e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d03f      	beq.n	80042a0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b16      	ldr	r3, [pc, #88]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	0049      	lsls	r1, r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd fe3b 	bl	8001ea8 <HAL_GetTick>
 8004232:	0003      	movs	r3, r0
 8004234:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004238:	f7fd fe36 	bl	8001ea8 <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e229      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x370>)
 800425c:	4013      	ands	r3, r2
 800425e:	0019      	movs	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	0a19      	lsrs	r1, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	061a      	lsls	r2, r3, #24
 8004278:	4b01      	ldr	r3, [pc, #4]	; (8004280 <HAL_RCC_OscConfig+0x354>)
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e029      	b.n	80042d4 <HAL_RCC_OscConfig+0x3a8>
 8004280:	40021000 	.word	0x40021000
 8004284:	fffeffff 	.word	0xfffeffff
 8004288:	fffbffff 	.word	0xfffbffff
 800428c:	ffffe0ff 	.word	0xffffe0ff
 8004290:	0800bd9c 	.word	0x0800bd9c
 8004294:	20000000 	.word	0x20000000
 8004298:	20000008 	.word	0x20000008
 800429c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042a0:	4bbd      	ldr	r3, [pc, #756]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4bbc      	ldr	r3, [pc, #752]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80042a6:	49bd      	ldr	r1, [pc, #756]	; (800459c <HAL_RCC_OscConfig+0x670>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd fdfc 	bl	8001ea8 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042b6:	f7fd fdf7 	bl	8001ea8 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1ea      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80042c8:	4bb3      	ldr	r3, [pc, #716]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	4013      	ands	r3, r2
 80042dc:	d036      	beq.n	800434c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d019      	beq.n	800431a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4bac      	ldr	r3, [pc, #688]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80042e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ea:	4bab      	ldr	r3, [pc, #684]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fdd9 	bl	8001ea8 <HAL_GetTick>
 80042f6:	0003      	movs	r3, r0
 80042f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fd fdd4 	bl	8001ea8 <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e1c7      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800430e:	4ba2      	ldr	r3, [pc, #648]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	2202      	movs	r2, #2
 8004314:	4013      	ands	r3, r2
 8004316:	d0f1      	beq.n	80042fc <HAL_RCC_OscConfig+0x3d0>
 8004318:	e018      	b.n	800434c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431a:	4b9f      	ldr	r3, [pc, #636]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800431c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800431e:	4b9e      	ldr	r3, [pc, #632]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004320:	2101      	movs	r1, #1
 8004322:	438a      	bics	r2, r1
 8004324:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fd fdbf 	bl	8001ea8 <HAL_GetTick>
 800432a:	0003      	movs	r3, r0
 800432c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004330:	f7fd fdba 	bl	8001ea8 <HAL_GetTick>
 8004334:	0002      	movs	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1ad      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004342:	4b95      	ldr	r3, [pc, #596]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	2202      	movs	r2, #2
 8004348:	4013      	ands	r3, r2
 800434a:	d1f1      	bne.n	8004330 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2204      	movs	r2, #4
 8004352:	4013      	ands	r3, r2
 8004354:	d100      	bne.n	8004358 <HAL_RCC_OscConfig+0x42c>
 8004356:	e0ae      	b.n	80044b6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004358:	2027      	movs	r0, #39	; 0x27
 800435a:	183b      	adds	r3, r7, r0
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004360:	4b8d      	ldr	r3, [pc, #564]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	055b      	lsls	r3, r3, #21
 8004368:	4013      	ands	r3, r2
 800436a:	d109      	bne.n	8004380 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436c:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800436e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004370:	4b89      	ldr	r3, [pc, #548]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	0549      	lsls	r1, r1, #21
 8004376:	430a      	orrs	r2, r1
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800437a:	183b      	adds	r3, r7, r0
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <HAL_RCC_OscConfig+0x674>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d11a      	bne.n	80043c2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438c:	4b84      	ldr	r3, [pc, #528]	; (80045a0 <HAL_RCC_OscConfig+0x674>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b83      	ldr	r3, [pc, #524]	; (80045a0 <HAL_RCC_OscConfig+0x674>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0049      	lsls	r1, r1, #1
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fd fd85 	bl	8001ea8 <HAL_GetTick>
 800439e:	0003      	movs	r3, r0
 80043a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a4:	f7fd fd80 	bl	8001ea8 <HAL_GetTick>
 80043a8:	0002      	movs	r2, r0
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e173      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <HAL_RCC_OscConfig+0x674>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <HAL_RCC_OscConfig+0x4b2>
 80043ce:	4b72      	ldr	r3, [pc, #456]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043d2:	4b71      	ldr	r3, [pc, #452]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	0049      	lsls	r1, r1, #1
 80043d8:	430a      	orrs	r2, r1
 80043da:	651a      	str	r2, [r3, #80]	; 0x50
 80043dc:	e031      	b.n	8004442 <HAL_RCC_OscConfig+0x516>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x4d4>
 80043e6:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ea:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043ec:	496b      	ldr	r1, [pc, #428]	; (800459c <HAL_RCC_OscConfig+0x670>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	651a      	str	r2, [r3, #80]	; 0x50
 80043f2:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043f6:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80043f8:	496a      	ldr	r1, [pc, #424]	; (80045a4 <HAL_RCC_OscConfig+0x678>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50
 80043fe:	e020      	b.n	8004442 <HAL_RCC_OscConfig+0x516>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	23a0      	movs	r3, #160	; 0xa0
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	429a      	cmp	r2, r3
 800440a:	d10e      	bne.n	800442a <HAL_RCC_OscConfig+0x4fe>
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800440e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004410:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	00c9      	lsls	r1, r1, #3
 8004416:	430a      	orrs	r2, r1
 8004418:	651a      	str	r2, [r3, #80]	; 0x50
 800441a:	4b5f      	ldr	r3, [pc, #380]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800441c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800441e:	4b5e      	ldr	r3, [pc, #376]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0049      	lsls	r1, r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x516>
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800442c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800442e:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004430:	495a      	ldr	r1, [pc, #360]	; (800459c <HAL_RCC_OscConfig+0x670>)
 8004432:	400a      	ands	r2, r1
 8004434:	651a      	str	r2, [r3, #80]	; 0x50
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800443a:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800443c:	4959      	ldr	r1, [pc, #356]	; (80045a4 <HAL_RCC_OscConfig+0x678>)
 800443e:	400a      	ands	r2, r1
 8004440:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d015      	beq.n	8004476 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fd fd2d 	bl	8001ea8 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004452:	e009      	b.n	8004468 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd fd28 	bl	8001ea8 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	4a52      	ldr	r2, [pc, #328]	; (80045a8 <HAL_RCC_OscConfig+0x67c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e11a      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800446a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d0ef      	beq.n	8004454 <HAL_RCC_OscConfig+0x528>
 8004474:	e014      	b.n	80044a0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fd fd17 	bl	8001ea8 <HAL_GetTick>
 800447a:	0003      	movs	r3, r0
 800447c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800447e:	e009      	b.n	8004494 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd fd12 	bl	8001ea8 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	4a47      	ldr	r2, [pc, #284]	; (80045a8 <HAL_RCC_OscConfig+0x67c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e104      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d1ef      	bne.n	8004480 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a0:	2327      	movs	r3, #39	; 0x27
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044b0:	493e      	ldr	r1, [pc, #248]	; (80045ac <HAL_RCC_OscConfig+0x680>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2220      	movs	r2, #32
 80044bc:	4013      	ands	r3, r2
 80044be:	d049      	beq.n	8004554 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d026      	beq.n	8004516 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80044c8:	4b33      	ldr	r3, [pc, #204]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	4b32      	ldr	r3, [pc, #200]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044ce:	2101      	movs	r1, #1
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 80044da:	2101      	movs	r1, #1
 80044dc:	430a      	orrs	r2, r1
 80044de:	635a      	str	r2, [r3, #52]	; 0x34
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_OscConfig+0x684>)
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <HAL_RCC_OscConfig+0x684>)
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	0189      	lsls	r1, r1, #6
 80044ea:	430a      	orrs	r2, r1
 80044ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ee:	f7fd fcdb 	bl	8001ea8 <HAL_GetTick>
 80044f2:	0003      	movs	r3, r0
 80044f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f8:	f7fd fcd6 	bl	8001ea8 <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0c9      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d0f1      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5cc>
 8004514:	e01e      	b.n	8004554 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800451c:	2101      	movs	r1, #1
 800451e:	438a      	bics	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCC_OscConfig+0x684>)
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x684>)
 8004528:	4922      	ldr	r1, [pc, #136]	; (80045b4 <HAL_RCC_OscConfig+0x688>)
 800452a:	400a      	ands	r2, r1
 800452c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd fcbb 	bl	8001ea8 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004538:	f7fd fcb6 	bl	8001ea8 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0a9      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d1f1      	bne.n	8004538 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <HAL_RCC_OscConfig+0x632>
 800455c:	e09e      	b.n	800469c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d100      	bne.n	8004566 <HAL_RCC_OscConfig+0x63a>
 8004564:	e077      	b.n	8004656 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	2b02      	cmp	r3, #2
 800456c:	d158      	bne.n	8004620 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_OscConfig+0x66c>)
 8004574:	4910      	ldr	r1, [pc, #64]	; (80045b8 <HAL_RCC_OscConfig+0x68c>)
 8004576:	400a      	ands	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fc95 	bl	8001ea8 <HAL_GetTick>
 800457e:	0003      	movs	r3, r0
 8004580:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004582:	e01b      	b.n	80045bc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fc90 	bl	8001ea8 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d914      	bls.n	80045bc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e083      	b.n	800469e <HAL_RCC_OscConfig+0x772>
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	40021000 	.word	0x40021000
 800459c:	fffffeff 	.word	0xfffffeff
 80045a0:	40007000 	.word	0x40007000
 80045a4:	fffffbff 	.word	0xfffffbff
 80045a8:	00001388 	.word	0x00001388
 80045ac:	efffffff 	.word	0xefffffff
 80045b0:	40010000 	.word	0x40010000
 80045b4:	ffffdfff 	.word	0xffffdfff
 80045b8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	049b      	lsls	r3, r3, #18
 80045c4:	4013      	ands	r3, r2
 80045c6:	d1dd      	bne.n	8004584 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a37      	ldr	r2, [pc, #220]	; (80046ac <HAL_RCC_OscConfig+0x780>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	431a      	orrs	r2, r3
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	0449      	lsls	r1, r1, #17
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd fc57 	bl	8001ea8 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd fc52 	bl	8001ea8 <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e045      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004612:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	049b      	lsls	r3, r3, #18
 800461a:	4013      	ands	r3, r2
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x6d4>
 800461e:	e03d      	b.n	800469c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004626:	4922      	ldr	r1, [pc, #136]	; (80046b0 <HAL_RCC_OscConfig+0x784>)
 8004628:	400a      	ands	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fd fc3c 	bl	8001ea8 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd fc37 	bl	8001ea8 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e02a      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	049b      	lsls	r3, r3, #18
 8004650:	4013      	ands	r3, r2
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x70a>
 8004654:	e022      	b.n	800469c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e01d      	b.n	800469e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	025b      	lsls	r3, r3, #9
 800466e:	401a      	ands	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	429a      	cmp	r2, r3
 8004676:	d10f      	bne.n	8004698 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	23f0      	movs	r3, #240	; 0xf0
 800467c:	039b      	lsls	r3, r3, #14
 800467e:	401a      	ands	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	23c0      	movs	r3, #192	; 0xc0
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	401a      	ands	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b00a      	add	sp, #40	; 0x28
 80046a4:	bdb0      	pop	{r4, r5, r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	40021000 	.word	0x40021000
 80046ac:	ff02ffff 	.word	0xff02ffff
 80046b0:	feffffff 	.word	0xfeffffff

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e128      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b96      	ldr	r3, [pc, #600]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d91e      	bls.n	8004714 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b93      	ldr	r3, [pc, #588]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	4393      	bics	r3, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	4b90      	ldr	r3, [pc, #576]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046e8:	f7fd fbde 	bl	8001ea8 <HAL_GetTick>
 80046ec:	0003      	movs	r3, r0
 80046ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f0:	e009      	b.n	8004706 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f2:	f7fd fbd9 	bl	8001ea8 <HAL_GetTick>
 80046f6:	0002      	movs	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	4a8a      	ldr	r2, [pc, #552]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e109      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b87      	ldr	r3, [pc, #540]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	4013      	ands	r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d1ee      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2202      	movs	r2, #2
 800471a:	4013      	ands	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471e:	4b83      	ldr	r3, [pc, #524]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	22f0      	movs	r2, #240	; 0xf0
 8004724:	4393      	bics	r3, r2
 8004726:	0019      	movs	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	4b7f      	ldr	r3, [pc, #508]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 800472e:	430a      	orrs	r2, r1
 8004730:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d100      	bne.n	800473e <HAL_RCC_ClockConfig+0x8a>
 800473c:	e089      	b.n	8004852 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004746:	4b79      	ldr	r3, [pc, #484]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	4013      	ands	r3, r2
 8004750:	d120      	bne.n	8004794 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0e1      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	049b      	lsls	r3, r3, #18
 8004766:	4013      	ands	r3, r2
 8004768:	d114      	bne.n	8004794 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0d5      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d106      	bne.n	8004784 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004776:	4b6d      	ldr	r3, [pc, #436]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2204      	movs	r2, #4
 800477c:	4013      	ands	r3, r2
 800477e:	d109      	bne.n	8004794 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0ca      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004784:	4b69      	ldr	r3, [pc, #420]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0c2      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004794:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2203      	movs	r2, #3
 800479a:	4393      	bics	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a8:	f7fd fb7e 	bl	8001ea8 <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b8:	e009      	b.n	80047ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7fd fb75 	bl	8001ea8 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0a5      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ce:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	220c      	movs	r2, #12
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d1ef      	bne.n	80047ba <HAL_RCC_ClockConfig+0x106>
 80047da:	e03a      	b.n	8004852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d111      	bne.n	8004808 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e4:	e009      	b.n	80047fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e6:	f7fd fb5f 	bl	8001ea8 <HAL_GetTick>
 80047ea:	0002      	movs	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	4a4d      	ldr	r2, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e08f      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047fa:	4b4c      	ldr	r3, [pc, #304]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	220c      	movs	r2, #12
 8004800:	4013      	ands	r3, r2
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d1ef      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x132>
 8004806:	e024      	b.n	8004852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d11b      	bne.n	8004848 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004810:	e009      	b.n	8004826 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004812:	f7fd fb49 	bl	8001ea8 <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e079      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	220c      	movs	r2, #12
 800482c:	4013      	ands	r3, r2
 800482e:	2b04      	cmp	r3, #4
 8004830:	d1ef      	bne.n	8004812 <HAL_RCC_ClockConfig+0x15e>
 8004832:	e00e      	b.n	8004852 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fd fb38 	bl	8001ea8 <HAL_GetTick>
 8004838:	0002      	movs	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	4a3a      	ldr	r2, [pc, #232]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e068      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004848:	4b38      	ldr	r3, [pc, #224]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	220c      	movs	r2, #12
 800484e:	4013      	ands	r3, r2
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004852:	4b34      	ldr	r3, [pc, #208]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	4013      	ands	r3, r2
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d21e      	bcs.n	800489e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004860:	4b30      	ldr	r3, [pc, #192]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	4393      	bics	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004872:	f7fd fb19 	bl	8001ea8 <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	e009      	b.n	8004890 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fd fb14 	bl	8001ea8 <HAL_GetTick>
 8004880:	0002      	movs	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_RCC_ClockConfig+0x274>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e044      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004890:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCC_ClockConfig+0x270>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	4013      	ands	r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d1ee      	bne.n	800487c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2204      	movs	r2, #4
 80048a4:	4013      	ands	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_RCC_ClockConfig+0x27c>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	0019      	movs	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80048b8:	430a      	orrs	r2, r1
 80048ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00a      	beq.n	80048dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048c6:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_RCC_ClockConfig+0x280>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00da      	lsls	r2, r3, #3
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80048d8:	430a      	orrs	r2, r1
 80048da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048dc:	f000 f832 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 80048e0:	0001      	movs	r1, r0
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x278>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	220f      	movs	r2, #15
 80048ea:	4013      	ands	r3, r2
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <HAL_RCC_ClockConfig+0x284>)
 80048ee:	5cd3      	ldrb	r3, [r2, r3]
 80048f0:	000a      	movs	r2, r1
 80048f2:	40da      	lsrs	r2, r3
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_RCC_ClockConfig+0x288>)
 80048f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <HAL_RCC_ClockConfig+0x28c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	250b      	movs	r5, #11
 80048fe:	197c      	adds	r4, r7, r5
 8004900:	0018      	movs	r0, r3
 8004902:	f7fd fa8b 	bl	8001e1c <HAL_InitTick>
 8004906:	0003      	movs	r3, r0
 8004908:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800490a:	197b      	adds	r3, r7, r5
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004912:	197b      	adds	r3, r7, r5
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	e000      	b.n	800491a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bdb0      	pop	{r4, r5, r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	40022000 	.word	0x40022000
 8004928:	00001388 	.word	0x00001388
 800492c:	40021000 	.word	0x40021000
 8004930:	fffff8ff 	.word	0xfffff8ff
 8004934:	ffffc7ff 	.word	0xffffc7ff
 8004938:	0800bd9c 	.word	0x0800bd9c
 800493c:	20000000 	.word	0x20000000
 8004940:	20000008 	.word	0x20000008

08004944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800494a:	4b4c      	ldr	r3, [pc, #304]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x138>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004952:	230c      	movs	r3, #12
 8004954:	4013      	ands	r3, r2
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d014      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x40>
 800495a:	d900      	bls.n	800495e <HAL_RCC_GetSysClockFreq+0x1a>
 800495c:	e07b      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x112>
 800495e:	2b04      	cmp	r3, #4
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x24>
 8004962:	2b08      	cmp	r3, #8
 8004964:	d00b      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x3a>
 8004966:	e076      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004968:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x138>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2210      	movs	r2, #16
 800496e:	4013      	ands	r3, r2
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004976:	e07c      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004978:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x140>)
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800497c:	e079      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800497e:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x144>)
 8004980:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004982:	e076      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	0c9a      	lsrs	r2, r3, #18
 8004988:	230f      	movs	r3, #15
 800498a:	401a      	ands	r2, r3
 800498c:	4b3f      	ldr	r3, [pc, #252]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x148>)
 800498e:	5c9b      	ldrb	r3, [r3, r2]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	0d9a      	lsrs	r2, r3, #22
 8004996:	2303      	movs	r3, #3
 8004998:	4013      	ands	r3, r2
 800499a:	3301      	adds	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x138>)
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	025b      	lsls	r3, r3, #9
 80049a6:	4013      	ands	r3, r2
 80049a8:	d01a      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x144>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	69b8      	ldr	r0, [r7, #24]
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	f7fb fc63 	bl	8000284 <__aeabi_lmul>
 80049be:	0002      	movs	r2, r0
 80049c0:	000b      	movs	r3, r1
 80049c2:	0010      	movs	r0, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f7fb fc37 	bl	8000244 <__aeabi_uldivmod>
 80049d6:	0002      	movs	r2, r0
 80049d8:	000b      	movs	r3, r1
 80049da:	0013      	movs	r3, r2
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
 80049de:	e037      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x138>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2210      	movs	r2, #16
 80049e6:	4013      	ands	r3, r2
 80049e8:	d01a      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	f7fb fc43 	bl	8000284 <__aeabi_lmul>
 80049fe:	0002      	movs	r2, r0
 8004a00:	000b      	movs	r3, r1
 8004a02:	0010      	movs	r0, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f7fb fc17 	bl	8000244 <__aeabi_uldivmod>
 8004a16:	0002      	movs	r2, r0
 8004a18:	000b      	movs	r3, r1
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	e017      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	0018      	movs	r0, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	0019      	movs	r1, r3
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x140>)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f7fb fc2a 	bl	8000284 <__aeabi_lmul>
 8004a30:	0002      	movs	r2, r0
 8004a32:	000b      	movs	r3, r1
 8004a34:	0010      	movs	r0, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	001c      	movs	r4, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	001d      	movs	r5, r3
 8004a40:	0022      	movs	r2, r4
 8004a42:	002b      	movs	r3, r5
 8004a44:	f7fb fbfe 	bl	8000244 <__aeabi_uldivmod>
 8004a48:	0002      	movs	r2, r0
 8004a4a:	000b      	movs	r3, r1
 8004a4c:	0013      	movs	r3, r2
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a54:	e00d      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x138>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0b5b      	lsrs	r3, r3, #13
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	4013      	ands	r3, r2
 8004a60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	3301      	adds	r3, #1
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	0212      	lsls	r2, r2, #8
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b00e      	add	sp, #56	; 0x38
 8004a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200
 8004a8c:	0800bdb4 	.word	0x0800bdb4

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	f7ff fff2 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004aac:	0001      	movs	r1, r0
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	40d9      	lsrs	r1, r3
 8004abe:	000b      	movs	r3, r1
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	0800bdac 	.word	0x0800bdac

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffdc 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ad8:	0001      	movs	r1, r0
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	0adb      	lsrs	r3, r3, #11
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	40d9      	lsrs	r1, r3
 8004aea:	000b      	movs	r3, r1
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800bdac 	.word	0x0800bdac

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004b04:	2317      	movs	r3, #23
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4013      	ands	r3, r2
 8004b14:	d106      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d100      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004b22:	e104      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b24:	4bb1      	ldr	r3, [pc, #708]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	055b      	lsls	r3, r3, #21
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d10a      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b30:	4bae      	ldr	r3, [pc, #696]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b34:	4bad      	ldr	r3, [pc, #692]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	0549      	lsls	r1, r1, #21
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004b3e:	2317      	movs	r3, #23
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b46:	4baa      	ldr	r3, [pc, #680]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d11a      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b52:	4ba7      	ldr	r3, [pc, #668]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	0049      	lsls	r1, r1, #1
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b60:	f7fd f9a2 	bl	8001ea8 <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fd f99d 	bl	8001ea8 <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b64      	cmp	r3, #100	; 0x64
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e133      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b9c      	ldr	r3, [pc, #624]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4013      	ands	r3, r2
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	23c0      	movs	r3, #192	; 0xc0
 8004b8e:	039b      	lsls	r3, r3, #14
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	23c0      	movs	r3, #192	; 0xc0
 8004b9a:	039b      	lsls	r3, r3, #14
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	23c0      	movs	r3, #192	; 0xc0
 8004baa:	039b      	lsls	r3, r3, #14
 8004bac:	4013      	ands	r3, r2
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d013      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	23c0      	movs	r3, #192	; 0xc0
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	23c0      	movs	r3, #192	; 0xc0
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10a      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	401a      	ands	r2, r3
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e103      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004bdc:	4b83      	ldr	r3, [pc, #524]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004be0:	23c0      	movs	r3, #192	; 0xc0
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d049      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	23c0      	movs	r3, #192	; 0xc0
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d004      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2220      	movs	r2, #32
 8004c04:	4013      	ands	r3, r2
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	23c0      	movs	r3, #192	; 0xc0
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	4013      	ands	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d034      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4013      	ands	r3, r2
 8004c22:	d02e      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c24:	4b71      	ldr	r3, [pc, #452]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	4a72      	ldr	r2, [pc, #456]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c32:	4b6e      	ldr	r3, [pc, #440]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	0309      	lsls	r1, r1, #12
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c40:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c42:	496d      	ldr	r1, [pc, #436]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c44:	400a      	ands	r2, r1
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004c48:	4b68      	ldr	r3, [pc, #416]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	d014      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fd f926 	bl	8001ea8 <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd f921 	bl	8001ea8 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a63      	ldr	r2, [pc, #396]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0b6      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c76:	4b5d      	ldr	r3, [pc, #372]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d0ef      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d01f      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	23c0      	movs	r3, #192	; 0xc0
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	401a      	ands	r2, r3
 8004c98:	23c0      	movs	r3, #192	; 0xc0
 8004c9a:	029b      	lsls	r3, r3, #10
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004ca0:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a56      	ldr	r2, [pc, #344]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	23c0      	movs	r3, #192	; 0xc0
 8004cb0:	039b      	lsls	r3, r3, #14
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	4b4c      	ldr	r3, [pc, #304]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	23c0      	movs	r3, #192	; 0xc0
 8004cc4:	029b      	lsls	r3, r3, #10
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d01f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	23c0      	movs	r3, #192	; 0xc0
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	23c0      	movs	r3, #192	; 0xc0
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a44      	ldr	r2, [pc, #272]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	23c0      	movs	r3, #192	; 0xc0
 8004cfa:	039b      	lsls	r3, r3, #14
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d06:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	23c0      	movs	r3, #192	; 0xc0
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	401a      	ands	r2, r3
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d18:	2317      	movs	r3, #23
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d105      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d28:	4936      	ldr	r1, [pc, #216]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d38:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	4393      	bics	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d56:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	220c      	movs	r2, #12
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d66:	430a      	orrs	r2, r1
 8004d68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4013      	ands	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d84:	430a      	orrs	r2, r1
 8004d86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	4013      	ands	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2280      	movs	r2, #128	; 0x80
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dde:	430a      	orrs	r2, r1
 8004de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b006      	add	sp, #24
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
 8004df4:	fffcffff 	.word	0xfffcffff
 8004df8:	fff7ffff 	.word	0xfff7ffff
 8004dfc:	00001388 	.word	0x00001388
 8004e00:	ffcfffff 	.word	0xffcfffff
 8004e04:	efffffff 	.word	0xefffffff
 8004e08:	fffff3ff 	.word	0xfffff3ff
 8004e0c:	ffffcfff 	.word	0xffffcfff
 8004e10:	fbffffff 	.word	0xfbffffff
 8004e14:	fff3ffff 	.word	0xfff3ffff

08004e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e083      	b.n	8004f32 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	2382      	movs	r3, #130	; 0x82
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d009      	beq.n	8004e52 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	61da      	str	r2, [r3, #28]
 8004e44:	e005      	b.n	8004e52 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2251      	movs	r2, #81	; 0x51
 8004e5c:	5c9b      	ldrb	r3, [r3, r2]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2250      	movs	r2, #80	; 0x50
 8004e68:	2100      	movs	r1, #0
 8004e6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7fc fa6e 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2251      	movs	r2, #81	; 0x51
 8004e78:	2102      	movs	r1, #2
 8004e7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2140      	movs	r1, #64	; 0x40
 8004e88:	438a      	bics	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	2382      	movs	r3, #130	; 0x82
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6899      	ldr	r1, [r3, #8]
 8004e9a:	2384      	movs	r3, #132	; 0x84
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	400b      	ands	r3, r1
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	400b      	ands	r3, r1
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6999      	ldr	r1, [r3, #24]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	400b      	ands	r3, r1
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2138      	movs	r1, #56	; 0x38
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	400b      	ands	r3, r1
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	019b      	lsls	r3, r3, #6
 8004eec:	401a      	ands	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2210      	movs	r2, #16
 8004f08:	401a      	ands	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4907      	ldr	r1, [pc, #28]	; (8004f3c <HAL_SPI_Init+0x124>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2251      	movs	r2, #81	; 0x51
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	0018      	movs	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b002      	add	sp, #8
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	fffff7ff 	.word	0xfffff7ff

08004f40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	1dbb      	adds	r3, r7, #6
 8004f4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f50:	231f      	movs	r3, #31
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2250      	movs	r2, #80	; 0x50
 8004f5c:	5c9b      	ldrb	r3, [r3, r2]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_SPI_Transmit+0x26>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e145      	b.n	80051f2 <HAL_SPI_Transmit+0x2b2>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2250      	movs	r2, #80	; 0x50
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f6e:	f7fc ff9b 	bl	8001ea8 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f76:	2316      	movs	r3, #22
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	1dba      	adds	r2, r7, #6
 8004f7c:	8812      	ldrh	r2, [r2, #0]
 8004f7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2251      	movs	r2, #81	; 0x51
 8004f84:	5c9b      	ldrb	r3, [r3, r2]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d004      	beq.n	8004f96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004f8c:	231f      	movs	r3, #31
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	2202      	movs	r2, #2
 8004f92:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f94:	e126      	b.n	80051e4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_SPI_Transmit+0x64>
 8004f9c:	1dbb      	adds	r3, r7, #6
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004fa4:	231f      	movs	r3, #31
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fac:	e11a      	b.n	80051e4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2251      	movs	r2, #81	; 0x51
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1dba      	adds	r2, r7, #6
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1dba      	adds	r2, r7, #6
 8004fce:	8812      	ldrh	r2, [r2, #0]
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d110      	bne.n	800501e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2140      	movs	r1, #64	; 0x40
 8005008:	438a      	bics	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2180      	movs	r1, #128	; 0x80
 8005018:	01c9      	lsls	r1, r1, #7
 800501a:	430a      	orrs	r2, r1
 800501c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	4013      	ands	r3, r2
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d007      	beq.n	800503c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2140      	movs	r1, #64	; 0x40
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	429a      	cmp	r2, r3
 8005046:	d152      	bne.n	80050ee <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_SPI_Transmit+0x11a>
 8005050:	2316      	movs	r3, #22
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d143      	bne.n	80050e2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	881a      	ldrh	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800507e:	e030      	b.n	80050e2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2202      	movs	r2, #2
 8005088:	4013      	ands	r3, r2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d112      	bne.n	80050b4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80050b2:	e016      	b.n	80050e2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b4:	f7fc fef8 	bl	8001ea8 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d802      	bhi.n	80050ca <HAL_SPI_Transmit+0x18a>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	d102      	bne.n	80050d0 <HAL_SPI_Transmit+0x190>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80050d0:	231f      	movs	r3, #31
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	2203      	movs	r2, #3
 80050d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2251      	movs	r2, #81	; 0x51
 80050dc:	2101      	movs	r1, #1
 80050de:	5499      	strb	r1, [r3, r2]
          goto error;
 80050e0:	e080      	b.n	80051e4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1c9      	bne.n	8005080 <HAL_SPI_Transmit+0x140>
 80050ec:	e053      	b.n	8005196 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <HAL_SPI_Transmit+0x1c0>
 80050f6:	2316      	movs	r3, #22
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d145      	bne.n	800518c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005126:	e031      	b.n	800518c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2202      	movs	r2, #2
 8005130:	4013      	ands	r3, r2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d113      	bne.n	800515e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	7812      	ldrb	r2, [r2, #0]
 8005142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	86da      	strh	r2, [r3, #54]	; 0x36
 800515c:	e016      	b.n	800518c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800515e:	f7fc fea3 	bl	8001ea8 <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d802      	bhi.n	8005174 <HAL_SPI_Transmit+0x234>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_SPI_Transmit+0x23a>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800517a:	231f      	movs	r3, #31
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2203      	movs	r2, #3
 8005180:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2251      	movs	r2, #81	; 0x51
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
          goto error;
 800518a:	e02b      	b.n	80051e4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1c8      	bne.n	8005128 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	0018      	movs	r0, r3
 800519e:	f001 f805 	bl	80061ac <SPI_EndRxTxTransaction>
 80051a2:	1e03      	subs	r3, r0, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80051d2:	231f      	movs	r3, #31
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e003      	b.n	80051e4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2251      	movs	r2, #81	; 0x51
 80051e0:	2101      	movs	r1, #1
 80051e2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2250      	movs	r2, #80	; 0x50
 80051e8:	2100      	movs	r1, #0
 80051ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80051ec:	231f      	movs	r3, #31
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b008      	add	sp, #32
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	1dbb      	adds	r3, r7, #6
 800520a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800520c:	2117      	movs	r1, #23
 800520e:	187b      	adds	r3, r7, r1
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2251      	movs	r2, #81	; 0x51
 8005218:	5c9b      	ldrb	r3, [r3, r2]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d003      	beq.n	8005228 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8005220:	187b      	adds	r3, r7, r1
 8005222:	2202      	movs	r2, #2
 8005224:	701a      	strb	r2, [r3, #0]
    goto error;
 8005226:	e109      	b.n	800543c <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	2382      	movs	r3, #130	; 0x82
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	429a      	cmp	r2, r3
 8005232:	d113      	bne.n	800525c <HAL_SPI_Receive+0x60>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2251      	movs	r2, #81	; 0x51
 8005240:	2104      	movs	r1, #4
 8005242:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005244:	1dbb      	adds	r3, r7, #6
 8005246:	881c      	ldrh	r4, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	0023      	movs	r3, r4
 8005254:	f000 f900 	bl	8005458 <HAL_SPI_TransmitReceive>
 8005258:	0003      	movs	r3, r0
 800525a:	e0f6      	b.n	800544a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2250      	movs	r2, #80	; 0x50
 8005260:	5c9b      	ldrb	r3, [r3, r2]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_SPI_Receive+0x6e>
 8005266:	2302      	movs	r3, #2
 8005268:	e0ef      	b.n	800544a <HAL_SPI_Receive+0x24e>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2250      	movs	r2, #80	; 0x50
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005272:	f7fc fe19 	bl	8001ea8 <HAL_GetTick>
 8005276:	0003      	movs	r3, r0
 8005278:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_SPI_Receive+0x8c>
 8005280:	1dbb      	adds	r3, r7, #6
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005288:	2317      	movs	r3, #23
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005290:	e0d4      	b.n	800543c <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2251      	movs	r2, #81	; 0x51
 8005296:	2104      	movs	r1, #4
 8005298:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1dba      	adds	r2, r7, #6
 80052aa:	8812      	ldrh	r2, [r2, #0]
 80052ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1dba      	adds	r2, r7, #6
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	429a      	cmp	r2, r3
 80052de:	d10f      	bne.n	8005300 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2140      	movs	r1, #64	; 0x40
 80052ec:	438a      	bics	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4956      	ldr	r1, [pc, #344]	; (8005454 <HAL_SPI_Receive+0x258>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	4013      	ands	r3, r2
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d007      	beq.n	800531e <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d000      	beq.n	8005328 <HAL_SPI_Receive+0x12c>
 8005326:	e06c      	b.n	8005402 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005328:	e033      	b.n	8005392 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2201      	movs	r2, #1
 8005332:	4013      	ands	r3, r2
 8005334:	2b01      	cmp	r3, #1
 8005336:	d115      	bne.n	8005364 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	001a      	movs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005362:	e016      	b.n	8005392 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005364:	f7fc fda0 	bl	8001ea8 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d802      	bhi.n	800537a <HAL_SPI_Receive+0x17e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Receive+0x184>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005380:	2317      	movs	r3, #23
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2203      	movs	r2, #3
 8005386:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2251      	movs	r2, #81	; 0x51
 800538c:	2101      	movs	r1, #1
 800538e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005390:	e054      	b.n	800543c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1c6      	bne.n	800532a <HAL_SPI_Receive+0x12e>
 800539c:	e036      	b.n	800540c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2201      	movs	r2, #1
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d113      	bne.n	80053d4 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d2:	e016      	b.n	8005402 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d4:	f7fc fd68 	bl	8001ea8 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d802      	bhi.n	80053ea <HAL_SPI_Receive+0x1ee>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Receive+0x1f4>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2317      	movs	r3, #23
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2203      	movs	r2, #3
 80053f6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2251      	movs	r2, #81	; 0x51
 80053fc:	2101      	movs	r1, #1
 80053fe:	5499      	strb	r1, [r3, r2]
          goto error;
 8005400:	e01c      	b.n	800543c <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1c8      	bne.n	800539e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	0018      	movs	r0, r3
 8005414:	f000 fe60 	bl	80060d8 <SPI_EndRxTransaction>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 800542a:	2317      	movs	r3, #23
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e003      	b.n	800543c <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2251      	movs	r2, #81	; 0x51
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2250      	movs	r2, #80	; 0x50
 8005440:	2100      	movs	r1, #0
 8005442:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005444:	2317      	movs	r3, #23
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	781b      	ldrb	r3, [r3, #0]
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b007      	add	sp, #28
 8005450:	bd90      	pop	{r4, r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	ffffbfff 	.word	0xffffbfff

08005458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	001a      	movs	r2, r3
 8005466:	1cbb      	adds	r3, r7, #2
 8005468:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800546a:	2301      	movs	r3, #1
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800546e:	232b      	movs	r3, #43	; 0x2b
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2250      	movs	r2, #80	; 0x50
 800547a:	5c9b      	ldrb	r3, [r3, r2]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x2c>
 8005480:	2302      	movs	r3, #2
 8005482:	e1b0      	b.n	80057e6 <HAL_SPI_TransmitReceive+0x38e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2250      	movs	r2, #80	; 0x50
 8005488:	2101      	movs	r1, #1
 800548a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800548c:	f7fc fd0c 	bl	8001ea8 <HAL_GetTick>
 8005490:	0003      	movs	r3, r0
 8005492:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005494:	2023      	movs	r0, #35	; 0x23
 8005496:	183b      	adds	r3, r7, r0
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	2151      	movs	r1, #81	; 0x51
 800549c:	5c52      	ldrb	r2, [r2, r1]
 800549e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054a6:	231a      	movs	r3, #26
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	1cba      	adds	r2, r7, #2
 80054ac:	8812      	ldrh	r2, [r2, #0]
 80054ae:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054b0:	183b      	adds	r3, r7, r0
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d011      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x84>
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	2382      	movs	r3, #130	; 0x82
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	429a      	cmp	r2, r3
 80054c0:	d107      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x7a>
 80054ca:	183b      	adds	r3, r7, r0
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d004      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80054d2:	232b      	movs	r3, #43	; 0x2b
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2202      	movs	r2, #2
 80054d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80054da:	e17d      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x98>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x98>
 80054e8:	1cbb      	adds	r3, r7, #2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80054f0:	232b      	movs	r3, #43	; 0x2b
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80054f8:	e16e      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2251      	movs	r2, #81	; 0x51
 80054fe:	5c9b      	ldrb	r3, [r3, r2]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b04      	cmp	r3, #4
 8005504:	d003      	beq.n	800550e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2251      	movs	r2, #81	; 0x51
 800550a:	2105      	movs	r1, #5
 800550c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1cba      	adds	r2, r7, #2
 800551e:	8812      	ldrh	r2, [r2, #0]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1cba      	adds	r2, r7, #2
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1cba      	adds	r2, r7, #2
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1cba      	adds	r2, r7, #2
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	4013      	ands	r3, r2
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d007      	beq.n	800556a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	429a      	cmp	r2, r3
 8005574:	d000      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x120>
 8005576:	e07f      	b.n	8005678 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_SPI_TransmitReceive+0x134>
 8005580:	231a      	movs	r3, #26
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d000      	beq.n	800558c <HAL_SPI_TransmitReceive+0x134>
 800558a:	e06a      	b.n	8005662 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b0:	e057      	b.n	8005662 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2202      	movs	r2, #2
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d11b      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x1a0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d016      	beq.n	80055f8 <HAL_SPI_TransmitReceive+0x1a0>
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d113      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	881a      	ldrh	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2201      	movs	r2, #1
 8005600:	4013      	ands	r3, r2
 8005602:	2b01      	cmp	r3, #1
 8005604:	d119      	bne.n	800563a <HAL_SPI_TransmitReceive+0x1e2>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d014      	beq.n	800563a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005636:	2301      	movs	r3, #1
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800563a:	f7fc fc35 	bl	8001ea8 <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005646:	429a      	cmp	r2, r3
 8005648:	d80b      	bhi.n	8005662 <HAL_SPI_TransmitReceive+0x20a>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	3301      	adds	r3, #1
 800564e:	d008      	beq.n	8005662 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8005650:	232b      	movs	r3, #43	; 0x2b
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2203      	movs	r2, #3
 8005656:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2251      	movs	r2, #81	; 0x51
 800565c:	2101      	movs	r1, #1
 800565e:	5499      	strb	r1, [r3, r2]
        goto error;
 8005660:	e0ba      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1a2      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0x15a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d19d      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0x15a>
 8005676:	e083      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_SPI_TransmitReceive+0x234>
 8005680:	231a      	movs	r3, #26
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d000      	beq.n	800568c <HAL_SPI_TransmitReceive+0x234>
 800568a:	e06f      	b.n	800576c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b2:	e05b      	b.n	800576c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2202      	movs	r2, #2
 80056bc:	4013      	ands	r3, r2
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d11c      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x2a4>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x2a4>
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d114      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2201      	movs	r2, #1
 8005704:	4013      	ands	r3, r2
 8005706:	2b01      	cmp	r3, #1
 8005708:	d119      	bne.n	800573e <HAL_SPI_TransmitReceive+0x2e6>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d014      	beq.n	800573e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800573a:	2301      	movs	r3, #1
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800573e:	f7fc fbb3 	bl	8001ea8 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800574a:	429a      	cmp	r2, r3
 800574c:	d802      	bhi.n	8005754 <HAL_SPI_TransmitReceive+0x2fc>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	3301      	adds	r3, #1
 8005752:	d102      	bne.n	800575a <HAL_SPI_TransmitReceive+0x302>
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800575a:	232b      	movs	r3, #43	; 0x2b
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	2203      	movs	r2, #3
 8005760:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2251      	movs	r2, #81	; 0x51
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]
        goto error;
 800576a:	e035      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d19e      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x25c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d199      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	0018      	movs	r0, r3
 8005788:	f000 fd10 	bl	80061ac <SPI_EndRxTxTransaction>
 800578c:	1e03      	subs	r3, r0, #0
 800578e:	d007      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005790:	232b      	movs	r3, #43	; 0x2b
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800579e:	e01b      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80057c6:	232b      	movs	r3, #43	; 0x2b
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2251      	movs	r2, #81	; 0x51
 80057d4:	2101      	movs	r1, #1
 80057d6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2250      	movs	r2, #80	; 0x50
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057e0:	232b      	movs	r3, #43	; 0x2b
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	781b      	ldrb	r3, [r3, #0]
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b00c      	add	sp, #48	; 0x30
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	1dbb      	adds	r3, r7, #6
 80057fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057fe:	2117      	movs	r1, #23
 8005800:	187b      	adds	r3, r7, r1
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2251      	movs	r2, #81	; 0x51
 800580a:	5c9b      	ldrb	r3, [r3, r2]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d003      	beq.n	800581a <HAL_SPI_Receive_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2202      	movs	r2, #2
 8005816:	701a      	strb	r2, [r3, #0]
    goto error;
 8005818:	e0ab      	b.n	8005972 <HAL_SPI_Receive_DMA+0x182>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d112      	bne.n	8005848 <HAL_SPI_Receive_DMA+0x58>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	2382      	movs	r3, #130	; 0x82
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	429a      	cmp	r2, r3
 800582c:	d10c      	bne.n	8005848 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2251      	movs	r2, #81	; 0x51
 8005832:	2104      	movs	r1, #4
 8005834:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005836:	1dbb      	adds	r3, r7, #6
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f8aa 	bl	8005998 <HAL_SPI_TransmitReceive_DMA>
 8005844:	0003      	movs	r3, r0
 8005846:	e09b      	b.n	8005980 <HAL_SPI_Receive_DMA+0x190>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2250      	movs	r2, #80	; 0x50
 800584c:	5c9b      	ldrb	r3, [r3, r2]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Receive_DMA+0x66>
 8005852:	2302      	movs	r3, #2
 8005854:	e094      	b.n	8005980 <HAL_SPI_Receive_DMA+0x190>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2250      	movs	r2, #80	; 0x50
 800585a:	2101      	movs	r1, #1
 800585c:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_SPI_Receive_DMA+0x7c>
 8005864:	1dbb      	adds	r3, r7, #6
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <HAL_SPI_Receive_DMA+0x86>
  {
    errorcode = HAL_ERROR;
 800586c:	2317      	movs	r3, #23
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
    goto error;
 8005874:	e07d      	b.n	8005972 <HAL_SPI_Receive_DMA+0x182>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2251      	movs	r2, #81	; 0x51
 800587a:	2104      	movs	r1, #4
 800587c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1dba      	adds	r2, r7, #6
 800588e:	8812      	ldrh	r2, [r2, #0]
 8005890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1dba      	adds	r2, r7, #6
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d10f      	bne.n	80058de <HAL_SPI_Receive_DMA+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	438a      	bics	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	492b      	ldr	r1, [pc, #172]	; (8005988 <HAL_SPI_Receive_DMA+0x198>)
 80058da:	400a      	ands	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <HAL_SPI_Receive_DMA+0x19c>)
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	4a29      	ldr	r2, [pc, #164]	; (8005990 <HAL_SPI_Receive_DMA+0x1a0>)
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f2:	4a28      	ldr	r2, [pc, #160]	; (8005994 <HAL_SPI_Receive_DMA+0x1a4>)
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fa:	2200      	movs	r2, #0
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	0019      	movs	r1, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005916:	f7fd f943 	bl	8002ba0 <HAL_DMA_Start_IT>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d00a      	beq.n	8005934 <HAL_SPI_Receive_DMA+0x144>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	2210      	movs	r2, #16
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800592a:	2317      	movs	r3, #23
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]

    goto error;
 8005932:	e01e      	b.n	8005972 <HAL_SPI_Receive_DMA+0x182>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	4013      	ands	r3, r2
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d007      	beq.n	8005952 <HAL_SPI_Receive_DMA+0x162>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2120      	movs	r1, #32
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2250      	movs	r2, #80	; 0x50
 8005976:	2100      	movs	r1, #0
 8005978:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800597a:	2317      	movs	r3, #23
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b006      	add	sp, #24
 8005986:	bd80      	pop	{r7, pc}
 8005988:	ffffbfff 	.word	0xffffbfff
 800598c:	08005f13 	.word	0x08005f13
 8005990:	08005dd1 	.word	0x08005dd1
 8005994:	08005f4f 	.word	0x08005f4f

08005998 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	001a      	movs	r2, r3
 80059a6:	1cbb      	adds	r3, r7, #2
 80059a8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059aa:	2317      	movs	r3, #23
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2250      	movs	r2, #80	; 0x50
 80059b6:	5c9b      	ldrb	r3, [r3, r2]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_SPI_TransmitReceive_DMA+0x28>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0ee      	b.n	8005b9e <HAL_SPI_TransmitReceive_DMA+0x206>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2250      	movs	r2, #80	; 0x50
 80059c4:	2101      	movs	r1, #1
 80059c6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059c8:	2016      	movs	r0, #22
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	2151      	movs	r1, #81	; 0x51
 80059d0:	5c52      	ldrb	r2, [r2, r1]
 80059d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80059da:	0001      	movs	r1, r0
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d011      	beq.n	8005a08 <HAL_SPI_TransmitReceive_DMA+0x70>
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	2382      	movs	r3, #130	; 0x82
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d107      	bne.n	80059fe <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_SPI_TransmitReceive_DMA+0x66>
 80059f6:	187b      	adds	r3, r7, r1
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d004      	beq.n	8005a08 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80059fe:	2317      	movs	r3, #23
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	2202      	movs	r2, #2
 8005a04:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a06:	e0c3      	b.n	8005b90 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_SPI_TransmitReceive_DMA+0x84>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_SPI_TransmitReceive_DMA+0x84>
 8005a14:	1cbb      	adds	r3, r7, #2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8005a1c:	2317      	movs	r3, #23
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a24:	e0b4      	b.n	8005b90 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2251      	movs	r2, #81	; 0x51
 8005a2a:	5c9b      	ldrb	r3, [r3, r2]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d003      	beq.n	8005a3a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2251      	movs	r2, #81	; 0x51
 8005a36:	2105      	movs	r1, #5
 8005a38:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1cba      	adds	r2, r7, #2
 8005a4a:	8812      	ldrh	r2, [r2, #0]
 8005a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1cba      	adds	r2, r7, #2
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1cba      	adds	r2, r7, #2
 8005a60:	8812      	ldrh	r2, [r2, #0]
 8005a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1cba      	adds	r2, r7, #2
 8005a68:	8812      	ldrh	r2, [r2, #0]
 8005a6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2251      	movs	r2, #81	; 0x51
 8005a7c:	5c9b      	ldrb	r3, [r3, r2]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d108      	bne.n	8005a96 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a88:	4a47      	ldr	r2, [pc, #284]	; (8005ba8 <HAL_SPI_TransmitReceive_DMA+0x210>)
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a90:	4a46      	ldr	r2, [pc, #280]	; (8005bac <HAL_SPI_TransmitReceive_DMA+0x214>)
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a94:	e007      	b.n	8005aa6 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9a:	4a45      	ldr	r2, [pc, #276]	; (8005bb0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa2:	4a44      	ldr	r2, [pc, #272]	; (8005bb4 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005acc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005ace:	f7fd f867 	bl	8002ba0 <HAL_DMA_Start_IT>
 8005ad2:	1e03      	subs	r3, r0, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_SPI_TransmitReceive_DMA+0x154>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	2210      	movs	r2, #16
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005ae2:	2317      	movs	r3, #23
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]

    goto error;
 8005aea:	e051      	b.n	8005b90 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2101      	movs	r1, #1
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	2200      	movs	r2, #0
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	2200      	movs	r2, #0
 8005b12:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b18:	2200      	movs	r2, #0
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	0019      	movs	r1, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b34:	f7fd f834 	bl	8002ba0 <HAL_DMA_Start_IT>
 8005b38:	1e03      	subs	r3, r0, #0
 8005b3a:	d00a      	beq.n	8005b52 <HAL_SPI_TransmitReceive_DMA+0x1ba>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	2210      	movs	r2, #16
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005b48:	2317      	movs	r3, #23
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]

    goto error;
 8005b50:	e01e      	b.n	8005b90 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2240      	movs	r2, #64	; 0x40
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d007      	beq.n	8005b70 <HAL_SPI_TransmitReceive_DMA+0x1d8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2250      	movs	r2, #80	; 0x50
 8005b94:	2100      	movs	r1, #0
 8005b96:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b98:	2317      	movs	r3, #23
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	08005f13 	.word	0x08005f13
 8005bac:	08005dd1 	.word	0x08005dd1
 8005bb0:	08005f31 	.word	0x08005f31
 8005bb4:	08005e7f 	.word	0x08005e7f
 8005bb8:	08005f4f 	.word	0x08005f4f

08005bbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d10d      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2201      	movs	r2, #1
 8005be0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be2:	d009      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	4013      	ands	r3, r2
 8005bea:	d005      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	0010      	movs	r0, r2
 8005bf4:	4798      	blx	r3
    return;
 8005bf6:	e0c5      	b.n	8005d84 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_SPI_IRQHandler+0x58>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	4013      	ands	r3, r2
 8005c06:	d005      	beq.n	8005c14 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	0010      	movs	r0, r2
 8005c10:	4798      	blx	r3
    return;
 8005c12:	e0b7      	b.n	8005d84 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2220      	movs	r2, #32
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d109      	bne.n	8005c30 <HAL_SPI_IRQHandler+0x74>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2240      	movs	r2, #64	; 0x40
 8005c20:	4013      	ands	r3, r2
 8005c22:	d105      	bne.n	8005c30 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d100      	bne.n	8005c30 <HAL_SPI_IRQHandler+0x74>
 8005c2e:	e0a9      	b.n	8005d84 <HAL_SPI_IRQHandler+0x1c8>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2220      	movs	r2, #32
 8005c34:	4013      	ands	r3, r2
 8005c36:	d100      	bne.n	8005c3a <HAL_SPI_IRQHandler+0x7e>
 8005c38:	e0a4      	b.n	8005d84 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2240      	movs	r2, #64	; 0x40
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d023      	beq.n	8005c8a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2251      	movs	r2, #81	; 0x51
 8005c46:	5c9b      	ldrb	r3, [r3, r2]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d011      	beq.n	8005c72 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	2204      	movs	r2, #4
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	e00b      	b.n	8005c8a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	693b      	ldr	r3, [r7, #16]
        return;
 8005c88:	e07c      	b.n	8005d84 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d014      	beq.n	8005cbc <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	2201      	movs	r2, #1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	438a      	bics	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	2208      	movs	r2, #8
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d04c      	beq.n	8005d82 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	21e0      	movs	r1, #224	; 0xe0
 8005cf4:	438a      	bics	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2251      	movs	r2, #81	; 0x51
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	2202      	movs	r2, #2
 8005d04:	4013      	ands	r3, r2
 8005d06:	d103      	bne.n	8005d10 <HAL_SPI_IRQHandler+0x154>
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d032      	beq.n	8005d76 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2103      	movs	r1, #3
 8005d1c:	438a      	bics	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_SPI_IRQHandler+0x1d0>)
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7fc ffd9 	bl	8002cec <HAL_DMA_Abort_IT>
 8005d3a:	1e03      	subs	r3, r0, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	2240      	movs	r2, #64	; 0x40
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d56:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <HAL_SPI_IRQHandler+0x1d0>)
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f7fc ffc4 	bl	8002cec <HAL_DMA_Abort_IT>
 8005d64:	1e03      	subs	r3, r0, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	2240      	movs	r2, #64	; 0x40
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d74:	e004      	b.n	8005d80 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 f821 	bl	8005dc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d7e:	e000      	b.n	8005d82 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8005d80:	46c0      	nop			; (mov r8, r8)
    return;
 8005d82:	46c0      	nop			; (mov r8, r8)
  }
}
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b008      	add	sp, #32
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	08005f91 	.word	0x08005f91

08005d90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005da8:	46c0      	nop			; (mov r8, r8)
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b002      	add	sp, #8
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dde:	f7fc f863 	bl	8001ea8 <HAL_GetTick>
 8005de2:	0003      	movs	r3, r0
 8005de4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2220      	movs	r2, #32
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d03d      	beq.n	8005e70 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2120      	movs	r1, #32
 8005e00:	438a      	bics	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10e      	bne.n	8005e2a <SPI_DMAReceiveCplt+0x5a>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	2382      	movs	r3, #130	; 0x82
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d108      	bne.n	8005e2a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2103      	movs	r1, #3
 8005e24:	438a      	bics	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	e007      	b.n	8005e3a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2101      	movs	r1, #1
 8005e36:	438a      	bics	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2164      	movs	r1, #100	; 0x64
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 f949 	bl	80060d8 <SPI_EndRxTransaction>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d002      	beq.n	8005e50 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2251      	movs	r2, #81	; 0x51
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7ff ffa9 	bl	8005dc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e6e:	e003      	b.n	8005e78 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f7fb f98e 	bl	8001194 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b004      	add	sp, #16
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8c:	f7fc f80c 	bl	8001ea8 <HAL_GetTick>
 8005e90:	0003      	movs	r3, r0
 8005e92:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d030      	beq.n	8005f04 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2120      	movs	r1, #32
 8005eae:	438a      	bics	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 f977 	bl	80061ac <SPI_EndRxTxTransaction>
 8005ebe:	1e03      	subs	r3, r0, #0
 8005ec0:	d005      	beq.n	8005ece <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2103      	movs	r1, #3
 8005eda:	438a      	bics	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2251      	movs	r2, #81	; 0x51
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff ff5f 	bl	8005dc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f02:	e003      	b.n	8005f0c <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7ff ff42 	bl	8005d90 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b004      	add	sp, #16
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7ff ff3c 	bl	8005da0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f7ff ff35 	bl	8005db0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b004      	add	sp, #16
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2103      	movs	r1, #3
 8005f68:	438a      	bics	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	2210      	movs	r2, #16
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2251      	movs	r2, #81	; 0x51
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7ff ff1c 	bl	8005dc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f88:	46c0      	nop			; (mov r8, r8)
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b004      	add	sp, #16
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f7ff ff07 	bl	8005dc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b004      	add	sp, #16
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	1dfb      	adds	r3, r7, #7
 8005fca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fcc:	f7fb ff6c 	bl	8001ea8 <HAL_GetTick>
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fdc:	f7fb ff64 	bl	8001ea8 <HAL_GetTick>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fe4:	4b3a      	ldr	r3, [pc, #232]	; (80060d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	015b      	lsls	r3, r3, #5
 8005fea:	0d1b      	lsrs	r3, r3, #20
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	4353      	muls	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ff2:	e058      	b.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	d055      	beq.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ffa:	f7fb ff55 	bl	8001ea8 <HAL_GetTick>
 8005ffe:	0002      	movs	r2, r0
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	429a      	cmp	r2, r3
 8006008:	d902      	bls.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x54>
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d142      	bne.n	8006096 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	21e0      	movs	r1, #224	; 0xe0
 800601c:	438a      	bics	r2, r1
 800601e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	2382      	movs	r3, #130	; 0x82
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	429a      	cmp	r2, r3
 800602a:	d113      	bne.n	8006054 <SPI_WaitFlagStateUntilTimeout+0x98>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	429a      	cmp	r2, r3
 8006036:	d005      	beq.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	429a      	cmp	r2, r3
 8006042:	d107      	bne.n	8006054 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2140      	movs	r1, #64	; 0x40
 8006050:	438a      	bics	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	019b      	lsls	r3, r3, #6
 800605c:	429a      	cmp	r2, r3
 800605e:	d110      	bne.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	491a      	ldr	r1, [pc, #104]	; (80060d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800606c:	400a      	ands	r2, r1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	0189      	lsls	r1, r1, #6
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2251      	movs	r2, #81	; 0x51
 8006086:	2101      	movs	r1, #1
 8006088:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2250      	movs	r2, #80	; 0x50
 800608e:	2100      	movs	r1, #0
 8006090:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e017      	b.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	4013      	ands	r3, r2
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	425a      	negs	r2, r3
 80060b6:	4153      	adcs	r3, r2
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	001a      	movs	r2, r3
 80060bc:	1dfb      	adds	r3, r7, #7
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d197      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	0018      	movs	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b008      	add	sp, #32
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	20000000 	.word	0x20000000
 80060d4:	ffffdfff 	.word	0xffffdfff

080060d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	2382      	movs	r3, #130	; 0x82
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d113      	bne.n	8006118 <SPI_EndRxTransaction+0x40>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	429a      	cmp	r2, r3
 8006106:	d107      	bne.n	8006118 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2140      	movs	r1, #64	; 0x40
 8006114:	438a      	bics	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	2382      	movs	r3, #130	; 0x82
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	429a      	cmp	r2, r3
 8006122:	d12b      	bne.n	800617c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	429a      	cmp	r2, r3
 800612e:	d012      	beq.n	8006156 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	0013      	movs	r3, r2
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	f7ff ff3d 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d02d      	beq.n	80061a2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	2220      	movs	r2, #32
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e026      	b.n	80061a4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	0013      	movs	r3, r2
 8006160:	2200      	movs	r2, #0
 8006162:	2101      	movs	r1, #1
 8006164:	f7ff ff2a 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 8006168:	1e03      	subs	r3, r0, #0
 800616a:	d01a      	beq.n	80061a2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	2220      	movs	r2, #32
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e013      	b.n	80061a4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	0013      	movs	r3, r2
 8006186:	2200      	movs	r2, #0
 8006188:	2101      	movs	r1, #1
 800618a:	f7ff ff17 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d007      	beq.n	80061a2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	2220      	movs	r2, #32
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e000      	b.n	80061a4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b004      	add	sp, #16
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <SPI_EndRxTxTransaction+0x84>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	491d      	ldr	r1, [pc, #116]	; (8006234 <SPI_EndRxTxTransaction+0x88>)
 80061be:	0018      	movs	r0, r3
 80061c0:	f7f9 ffb4 	bl	800012c <__udivsi3>
 80061c4:	0003      	movs	r3, r0
 80061c6:	001a      	movs	r2, r3
 80061c8:	0013      	movs	r3, r2
 80061ca:	015b      	lsls	r3, r3, #5
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	2382      	movs	r3, #130	; 0x82
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	d112      	bne.n	8006208 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	0013      	movs	r3, r2
 80061ec:	2200      	movs	r2, #0
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	f7ff fee4 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 80061f4:	1e03      	subs	r3, r0, #0
 80061f6:	d016      	beq.n	8006226 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2220      	movs	r2, #32
 80061fe:	431a      	orrs	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e00f      	b.n	8006228 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	3b01      	subs	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2280      	movs	r2, #128	; 0x80
 800621c:	4013      	ands	r3, r2
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d0f2      	beq.n	8006208 <SPI_EndRxTxTransaction+0x5c>
 8006222:	e000      	b.n	8006226 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006224:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b006      	add	sp, #24
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000000 	.word	0x20000000
 8006234:	016e3600 	.word	0x016e3600

08006238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e032      	b.n	80062b0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2239      	movs	r2, #57	; 0x39
 800624e:	5c9b      	ldrb	r3, [r3, r2]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2238      	movs	r2, #56	; 0x38
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f7fb f995 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2239      	movs	r2, #57	; 0x39
 800626a:	2102      	movs	r1, #2
 800626c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	0019      	movs	r1, r3
 8006278:	0010      	movs	r0, r2
 800627a:	f000 faaf 	bl	80067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	223e      	movs	r2, #62	; 0x3e
 8006282:	2101      	movs	r1, #1
 8006284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	223a      	movs	r2, #58	; 0x3a
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	223b      	movs	r2, #59	; 0x3b
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	223c      	movs	r2, #60	; 0x3c
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	223d      	movs	r2, #61	; 0x3d
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2239      	movs	r2, #57	; 0x39
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2239      	movs	r2, #57	; 0x39
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d001      	beq.n	80062d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02e      	b.n	800632e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2239      	movs	r2, #57	; 0x39
 80062d4:	2102      	movs	r1, #2
 80062d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	05db      	lsls	r3, r3, #23
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d009      	beq.n	80062f8 <HAL_TIM_Base_Start+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a13      	ldr	r2, [pc, #76]	; (8006338 <HAL_TIM_Base_Start+0x80>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIM_Base_Start+0x40>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a12      	ldr	r2, [pc, #72]	; (800633c <HAL_TIM_Base_Start+0x84>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d111      	bne.n	800631c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2207      	movs	r2, #7
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b06      	cmp	r3, #6
 8006308:	d010      	beq.n	800632c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2101      	movs	r1, #1
 8006316:	430a      	orrs	r2, r1
 8006318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	e007      	b.n	800632c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2101      	movs	r1, #1
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	0018      	movs	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	b004      	add	sp, #16
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	40010800 	.word	0x40010800
 800633c:	40011400 	.word	0x40011400

08006340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2239      	movs	r2, #57	; 0x39
 800634c:	5c9b      	ldrb	r3, [r3, r2]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d001      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e036      	b.n	80063c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2239      	movs	r2, #57	; 0x39
 800635c:	2102      	movs	r1, #2
 800635e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2101      	movs	r1, #1
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	05db      	lsls	r3, r3, #23
 8006378:	429a      	cmp	r2, r3
 800637a:	d009      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x50>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <HAL_TIM_Base_Start_IT+0x90>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x50>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <HAL_TIM_Base_Start_IT+0x94>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d111      	bne.n	80063b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2207      	movs	r2, #7
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d010      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2101      	movs	r1, #1
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	e007      	b.n	80063c4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2101      	movs	r1, #1
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b004      	add	sp, #16
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	40010800 	.word	0x40010800
 80063d4:	40011400 	.word	0x40011400

080063d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <HAL_TIM_Base_Stop_IT+0x48>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	d107      	bne.n	800640c <HAL_TIM_Base_Stop_IT+0x34>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2101      	movs	r1, #1
 8006408:	438a      	bics	r2, r1
 800640a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2239      	movs	r2, #57	; 0x39
 8006410:	2101      	movs	r1, #1
 8006412:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	00001111 	.word	0x00001111

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2202      	movs	r2, #2
 8006434:	4013      	ands	r3, r2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d124      	bne.n	8006484 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2202      	movs	r2, #2
 8006442:	4013      	ands	r3, r2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11d      	bne.n	8006484 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2203      	movs	r2, #3
 800644e:	4252      	negs	r2, r2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2203      	movs	r2, #3
 8006460:	4013      	ands	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0018      	movs	r0, r3
 8006468:	f000 f9a0 	bl	80067ac <HAL_TIM_IC_CaptureCallback>
 800646c:	e007      	b.n	800647e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0018      	movs	r0, r3
 8006472:	f000 f993 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f000 f99f 	bl	80067bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2204      	movs	r2, #4
 800648c:	4013      	ands	r3, r2
 800648e:	2b04      	cmp	r3, #4
 8006490:	d125      	bne.n	80064de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2204      	movs	r2, #4
 800649a:	4013      	ands	r3, r2
 800649c:	2b04      	cmp	r3, #4
 800649e:	d11e      	bne.n	80064de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2205      	movs	r2, #5
 80064a6:	4252      	negs	r2, r2
 80064a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	23c0      	movs	r3, #192	; 0xc0
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4013      	ands	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 f973 	bl	80067ac <HAL_TIM_IC_CaptureCallback>
 80064c6:	e007      	b.n	80064d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 f966 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f972 	bl	80067bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2208      	movs	r2, #8
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d124      	bne.n	8006536 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2208      	movs	r2, #8
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d11d      	bne.n	8006536 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2209      	movs	r2, #9
 8006500:	4252      	negs	r2, r2
 8006502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2204      	movs	r2, #4
 8006508:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2203      	movs	r2, #3
 8006512:	4013      	ands	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	0018      	movs	r0, r3
 800651a:	f000 f947 	bl	80067ac <HAL_TIM_IC_CaptureCallback>
 800651e:	e007      	b.n	8006530 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f000 f93a 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f000 f946 	bl	80067bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	2b10      	cmp	r3, #16
 8006542:	d125      	bne.n	8006590 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2210      	movs	r2, #16
 800654c:	4013      	ands	r3, r2
 800654e:	2b10      	cmp	r3, #16
 8006550:	d11e      	bne.n	8006590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2211      	movs	r2, #17
 8006558:	4252      	negs	r2, r2
 800655a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2208      	movs	r2, #8
 8006560:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	23c0      	movs	r3, #192	; 0xc0
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4013      	ands	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	0018      	movs	r0, r3
 8006574:	f000 f91a 	bl	80067ac <HAL_TIM_IC_CaptureCallback>
 8006578:	e007      	b.n	800658a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f000 f90d 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f919 	bl	80067bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2201      	movs	r2, #1
 8006598:	4013      	ands	r3, r2
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10f      	bne.n	80065be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d108      	bne.n	80065be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2202      	movs	r2, #2
 80065b2:	4252      	negs	r2, r2
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7f9 ffcf 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2240      	movs	r2, #64	; 0x40
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b40      	cmp	r3, #64	; 0x40
 80065ca:	d10f      	bne.n	80065ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d108      	bne.n	80065ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2241      	movs	r2, #65	; 0x41
 80065e0:	4252      	negs	r2, r2
 80065e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 f8f0 	bl	80067cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b002      	add	sp, #8
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	230f      	movs	r3, #15
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2238      	movs	r2, #56	; 0x38
 800660a:	5c9b      	ldrb	r3, [r3, r2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x20>
 8006610:	2302      	movs	r3, #2
 8006612:	e0bc      	b.n	800678e <HAL_TIM_ConfigClockSource+0x19a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2238      	movs	r2, #56	; 0x38
 8006618:	2101      	movs	r1, #1
 800661a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2239      	movs	r2, #57	; 0x39
 8006620:	2102      	movs	r1, #2
 8006622:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2277      	movs	r2, #119	; 0x77
 8006630:	4393      	bics	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4a58      	ldr	r2, [pc, #352]	; (8006798 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006638:	4013      	ands	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	0192      	lsls	r2, r2, #6
 800664c:	4293      	cmp	r3, r2
 800664e:	d040      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0xde>
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	0192      	lsls	r2, r2, #6
 8006654:	4293      	cmp	r3, r2
 8006656:	d900      	bls.n	800665a <HAL_TIM_ConfigClockSource+0x66>
 8006658:	e088      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	0152      	lsls	r2, r2, #5
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <HAL_TIM_ConfigClockSource+0x70>
 8006662:	e088      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x182>
 8006664:	2280      	movs	r2, #128	; 0x80
 8006666:	0152      	lsls	r2, r2, #5
 8006668:	4293      	cmp	r3, r2
 800666a:	d900      	bls.n	800666e <HAL_TIM_ConfigClockSource+0x7a>
 800666c:	e07e      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800666e:	2b70      	cmp	r3, #112	; 0x70
 8006670:	d018      	beq.n	80066a4 <HAL_TIM_ConfigClockSource+0xb0>
 8006672:	d900      	bls.n	8006676 <HAL_TIM_ConfigClockSource+0x82>
 8006674:	e07a      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006676:	2b60      	cmp	r3, #96	; 0x60
 8006678:	d04f      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x126>
 800667a:	d900      	bls.n	800667e <HAL_TIM_ConfigClockSource+0x8a>
 800667c:	e076      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800667e:	2b50      	cmp	r3, #80	; 0x50
 8006680:	d03b      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x106>
 8006682:	d900      	bls.n	8006686 <HAL_TIM_ConfigClockSource+0x92>
 8006684:	e072      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d057      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x146>
 800668a:	d900      	bls.n	800668e <HAL_TIM_ConfigClockSource+0x9a>
 800668c:	e06e      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800668e:	2b30      	cmp	r3, #48	; 0x30
 8006690:	d063      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 8006692:	d86b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d060      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 8006698:	d868      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d05d      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d05b      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 80066a2:	e063      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066b4:	f000 f960 	bl	8006978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2277      	movs	r2, #119	; 0x77
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
      break;
 80066d0:	e052      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066e2:	f000 f949 	bl	8006978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	01c9      	lsls	r1, r1, #7
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]
      break;
 80066f8:	e03e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006706:	001a      	movs	r2, r3
 8006708:	f000 f8bc 	bl	8006884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2150      	movs	r1, #80	; 0x50
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f916 	bl	8006944 <TIM_ITRx_SetConfig>
      break;
 8006718:	e02e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006726:	001a      	movs	r2, r3
 8006728:	f000 f8da 	bl	80068e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2160      	movs	r1, #96	; 0x60
 8006732:	0018      	movs	r0, r3
 8006734:	f000 f906 	bl	8006944 <TIM_ITRx_SetConfig>
      break;
 8006738:	e01e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006746:	001a      	movs	r2, r3
 8006748:	f000 f89c 	bl	8006884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	0018      	movs	r0, r3
 8006754:	f000 f8f6 	bl	8006944 <TIM_ITRx_SetConfig>
      break;
 8006758:	e00e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0019      	movs	r1, r3
 8006764:	0010      	movs	r0, r2
 8006766:	f000 f8ed 	bl	8006944 <TIM_ITRx_SetConfig>
      break;
 800676a:	e005      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800676c:	230f      	movs	r3, #15
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
      break;
 8006774:	e000      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006776:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2239      	movs	r2, #57	; 0x39
 800677c:	2101      	movs	r1, #1
 800677e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2238      	movs	r2, #56	; 0x38
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]

  return status;
 8006788:	230f      	movs	r3, #15
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	781b      	ldrb	r3, [r3, #0]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b004      	add	sp, #16
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	ffff00ff 	.word	0xffff00ff

0800679c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067a4:	46c0      	nop			; (mov r8, r8)
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b002      	add	sp, #8
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	05db      	lsls	r3, r3, #23
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d007      	beq.n	8006806 <TIM_Base_SetConfig+0x2a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <TIM_Base_SetConfig+0x9c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_Base_SetConfig+0x2a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <TIM_Base_SetConfig+0xa0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d108      	bne.n	8006818 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2270      	movs	r2, #112	; 0x70
 800680a:	4393      	bics	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	05db      	lsls	r3, r3, #23
 800681e:	429a      	cmp	r2, r3
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0x56>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <TIM_Base_SetConfig+0x9c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0x56>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a13      	ldr	r2, [pc, #76]	; (800687c <TIM_Base_SetConfig+0xa0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a12      	ldr	r2, [pc, #72]	; (8006880 <TIM_Base_SetConfig+0xa4>)
 8006836:	4013      	ands	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	4393      	bics	r3, r2
 800684a:	001a      	movs	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	615a      	str	r2, [r3, #20]
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b004      	add	sp, #16
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40010800 	.word	0x40010800
 800687c:	40011400 	.word	0x40011400
 8006880:	fffffcff 	.word	0xfffffcff

08006884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	2201      	movs	r2, #1
 800689c:	4393      	bics	r3, r2
 800689e:	001a      	movs	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	22f0      	movs	r2, #240	; 0xf0
 80068ae:	4393      	bics	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	220a      	movs	r2, #10
 80068c0:	4393      	bics	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	46c0      	nop			; (mov r8, r8)
 80068da:	46bd      	mov	sp, r7
 80068dc:	b006      	add	sp, #24
 80068de:	bd80      	pop	{r7, pc}

080068e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	2210      	movs	r2, #16
 80068f2:	4393      	bics	r3, r2
 80068f4:	001a      	movs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <TIM_TI2_ConfigInputStage+0x60>)
 800690a:	4013      	ands	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	031b      	lsls	r3, r3, #12
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	22a0      	movs	r2, #160	; 0xa0
 800691c:	4393      	bics	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b006      	add	sp, #24
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	ffff0fff 	.word	0xffff0fff

08006944 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2270      	movs	r2, #112	; 0x70
 8006958:	4393      	bics	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	2207      	movs	r2, #7
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	609a      	str	r2, [r3, #8]
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b004      	add	sp, #16
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <TIM_ETR_SetConfig+0x3c>)
 8006990:	4013      	ands	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	431a      	orrs	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4313      	orrs	r3, r2
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	46c0      	nop			; (mov r8, r8)
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b006      	add	sp, #24
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	ffff00ff 	.word	0xffff00ff

080069b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2238      	movs	r2, #56	; 0x38
 80069c6:	5c9b      	ldrb	r3, [r3, r2]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e042      	b.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2238      	movs	r2, #56	; 0x38
 80069d4:	2101      	movs	r1, #1
 80069d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2239      	movs	r2, #57	; 0x39
 80069dc:	2102      	movs	r1, #2
 80069de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2270      	movs	r2, #112	; 0x70
 80069f4:	4393      	bics	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	05db      	lsls	r3, r3, #23
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0f      	ldr	r2, [pc, #60]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10c      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	4393      	bics	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2239      	movs	r2, #57	; 0x39
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2238      	movs	r2, #56	; 0x38
 8006a50:	2100      	movs	r1, #0
 8006a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b004      	add	sp, #16
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	40010800 	.word	0x40010800
 8006a64:	40011400 	.word	0x40011400

08006a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e044      	b.n	8006b04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d107      	bne.n	8006a92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2278      	movs	r2, #120	; 0x78
 8006a86:	2100      	movs	r1, #0
 8006a88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7fa fdb3 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2224      	movs	r2, #36	; 0x24
 8006a96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f8d0 	bl	8006c50 <UART_SetConfig>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e024      	b.n	8006b04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 fb47 	bl	8007158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	490d      	ldr	r1, [pc, #52]	; (8006b0c <HAL_UART_Init+0xa4>)
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	212a      	movs	r1, #42	; 0x2a
 8006ae6:	438a      	bics	r2, r1
 8006ae8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2101      	movs	r1, #1
 8006af6:	430a      	orrs	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f000 fbdf 	bl	80072c0 <UART_CheckIdleState>
 8006b02:	0003      	movs	r3, r0
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	ffffb7ff 	.word	0xffffb7ff

08006b10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	1dbb      	adds	r3, r7, #6
 8006b1e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d000      	beq.n	8006b2a <HAL_UART_Transmit+0x1a>
 8006b28:	e08c      	b.n	8006c44 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_UART_Transmit+0x28>
 8006b30:	1dbb      	adds	r3, r7, #6
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e084      	b.n	8006c46 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	015b      	lsls	r3, r3, #5
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d109      	bne.n	8006b5c <HAL_UART_Transmit+0x4c>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2201      	movs	r2, #1
 8006b54:	4013      	ands	r3, r2
 8006b56:	d001      	beq.n	8006b5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e074      	b.n	8006c46 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2284      	movs	r2, #132	; 0x84
 8006b60:	2100      	movs	r1, #0
 8006b62:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2221      	movs	r2, #33	; 0x21
 8006b68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6a:	f7fb f99d 	bl	8001ea8 <HAL_GetTick>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1dba      	adds	r2, r7, #6
 8006b76:	2150      	movs	r1, #80	; 0x50
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1dba      	adds	r2, r7, #6
 8006b80:	2152      	movs	r1, #82	; 0x52
 8006b82:	8812      	ldrh	r2, [r2, #0]
 8006b84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	015b      	lsls	r3, r3, #5
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d108      	bne.n	8006ba4 <HAL_UART_Transmit+0x94>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e003      	b.n	8006bac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bac:	e02f      	b.n	8006c0e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	0013      	movs	r3, r2
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2180      	movs	r1, #128	; 0x80
 8006bbc:	f000 fc28 	bl	8007410 <UART_WaitOnFlagUntilTimeout>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d004      	beq.n	8006bce <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e03b      	b.n	8006c46 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	001a      	movs	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	05d2      	lsls	r2, r2, #23
 8006be0:	0dd2      	lsrs	r2, r2, #23
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	3302      	adds	r3, #2
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e007      	b.n	8006bfc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2252      	movs	r2, #82	; 0x52
 8006c00:	5a9b      	ldrh	r3, [r3, r2]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b299      	uxth	r1, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2252      	movs	r2, #82	; 0x52
 8006c0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2252      	movs	r2, #82	; 0x52
 8006c12:	5a9b      	ldrh	r3, [r3, r2]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1c9      	bne.n	8006bae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	0013      	movs	r3, r2
 8006c24:	2200      	movs	r2, #0
 8006c26:	2140      	movs	r1, #64	; 0x40
 8006c28:	f000 fbf2 	bl	8007410 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e005      	b.n	8006c46 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e000      	b.n	8006c46 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b008      	add	sp, #32
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b08e      	sub	sp, #56	; 0x38
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c58:	231a      	movs	r3, #26
 8006c5a:	2218      	movs	r2, #24
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	19db      	adds	r3, r3, r7
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4ac6      	ldr	r2, [pc, #792]	; (8006f9c <UART_SetConfig+0x34c>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4ac1      	ldr	r2, [pc, #772]	; (8006fa0 <UART_SetConfig+0x350>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4abb      	ldr	r2, [pc, #748]	; (8006fa4 <UART_SetConfig+0x354>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	4ab7      	ldr	r2, [pc, #732]	; (8006fa8 <UART_SetConfig+0x358>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4ab3      	ldr	r2, [pc, #716]	; (8006fac <UART_SetConfig+0x35c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d131      	bne.n	8006d48 <UART_SetConfig+0xf8>
 8006ce4:	4bb2      	ldr	r3, [pc, #712]	; (8006fb0 <UART_SetConfig+0x360>)
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d01d      	beq.n	8006d2c <UART_SetConfig+0xdc>
 8006cf0:	d823      	bhi.n	8006d3a <UART_SetConfig+0xea>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d00c      	beq.n	8006d10 <UART_SetConfig+0xc0>
 8006cf6:	d820      	bhi.n	8006d3a <UART_SetConfig+0xea>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <UART_SetConfig+0xb2>
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d00e      	beq.n	8006d1e <UART_SetConfig+0xce>
 8006d00:	e01b      	b.n	8006d3a <UART_SetConfig+0xea>
 8006d02:	231b      	movs	r3, #27
 8006d04:	2218      	movs	r2, #24
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	19db      	adds	r3, r3, r7
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e09c      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d10:	231b      	movs	r3, #27
 8006d12:	2218      	movs	r2, #24
 8006d14:	189b      	adds	r3, r3, r2
 8006d16:	19db      	adds	r3, r3, r7
 8006d18:	2202      	movs	r2, #2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e095      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d1e:	231b      	movs	r3, #27
 8006d20:	2218      	movs	r2, #24
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	19db      	adds	r3, r3, r7
 8006d26:	2204      	movs	r2, #4
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	e08e      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d2c:	231b      	movs	r3, #27
 8006d2e:	2218      	movs	r2, #24
 8006d30:	189b      	adds	r3, r3, r2
 8006d32:	19db      	adds	r3, r3, r7
 8006d34:	2208      	movs	r2, #8
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	e087      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d3a:	231b      	movs	r3, #27
 8006d3c:	2218      	movs	r2, #24
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	19db      	adds	r3, r3, r7
 8006d42:	2210      	movs	r2, #16
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e080      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a99      	ldr	r2, [pc, #612]	; (8006fb4 <UART_SetConfig+0x364>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d131      	bne.n	8006db6 <UART_SetConfig+0x166>
 8006d52:	4b97      	ldr	r3, [pc, #604]	; (8006fb0 <UART_SetConfig+0x360>)
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	220c      	movs	r2, #12
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d01d      	beq.n	8006d9a <UART_SetConfig+0x14a>
 8006d5e:	d823      	bhi.n	8006da8 <UART_SetConfig+0x158>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d00c      	beq.n	8006d7e <UART_SetConfig+0x12e>
 8006d64:	d820      	bhi.n	8006da8 <UART_SetConfig+0x158>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <UART_SetConfig+0x120>
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d00e      	beq.n	8006d8c <UART_SetConfig+0x13c>
 8006d6e:	e01b      	b.n	8006da8 <UART_SetConfig+0x158>
 8006d70:	231b      	movs	r3, #27
 8006d72:	2218      	movs	r2, #24
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	19db      	adds	r3, r3, r7
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e065      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d7e:	231b      	movs	r3, #27
 8006d80:	2218      	movs	r2, #24
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	19db      	adds	r3, r3, r7
 8006d86:	2202      	movs	r2, #2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	e05e      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d8c:	231b      	movs	r3, #27
 8006d8e:	2218      	movs	r2, #24
 8006d90:	189b      	adds	r3, r3, r2
 8006d92:	19db      	adds	r3, r3, r7
 8006d94:	2204      	movs	r2, #4
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e057      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006d9a:	231b      	movs	r3, #27
 8006d9c:	2218      	movs	r2, #24
 8006d9e:	189b      	adds	r3, r3, r2
 8006da0:	19db      	adds	r3, r3, r7
 8006da2:	2208      	movs	r2, #8
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e050      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006da8:	231b      	movs	r3, #27
 8006daa:	2218      	movs	r2, #24
 8006dac:	189b      	adds	r3, r3, r2
 8006dae:	19db      	adds	r3, r3, r7
 8006db0:	2210      	movs	r2, #16
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e049      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7a      	ldr	r2, [pc, #488]	; (8006fa4 <UART_SetConfig+0x354>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d13e      	bne.n	8006e3e <UART_SetConfig+0x1ee>
 8006dc0:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <UART_SetConfig+0x360>)
 8006dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dc4:	23c0      	movs	r3, #192	; 0xc0
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4013      	ands	r3, r2
 8006dca:	22c0      	movs	r2, #192	; 0xc0
 8006dcc:	0112      	lsls	r2, r2, #4
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <UART_SetConfig+0x1d2>
 8006dd2:	22c0      	movs	r2, #192	; 0xc0
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d82a      	bhi.n	8006e30 <UART_SetConfig+0x1e0>
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d011      	beq.n	8006e06 <UART_SetConfig+0x1b6>
 8006de2:	2280      	movs	r2, #128	; 0x80
 8006de4:	0112      	lsls	r2, r2, #4
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d822      	bhi.n	8006e30 <UART_SetConfig+0x1e0>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <UART_SetConfig+0x1a8>
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	00d2      	lsls	r2, r2, #3
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <UART_SetConfig+0x1c4>
 8006df6:	e01b      	b.n	8006e30 <UART_SetConfig+0x1e0>
 8006df8:	231b      	movs	r3, #27
 8006dfa:	2218      	movs	r2, #24
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	19db      	adds	r3, r3, r7
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e021      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006e06:	231b      	movs	r3, #27
 8006e08:	2218      	movs	r2, #24
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	19db      	adds	r3, r3, r7
 8006e0e:	2202      	movs	r2, #2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e01a      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006e14:	231b      	movs	r3, #27
 8006e16:	2218      	movs	r2, #24
 8006e18:	189b      	adds	r3, r3, r2
 8006e1a:	19db      	adds	r3, r3, r7
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e013      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006e22:	231b      	movs	r3, #27
 8006e24:	2218      	movs	r2, #24
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	19db      	adds	r3, r3, r7
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006e30:	231b      	movs	r3, #27
 8006e32:	2218      	movs	r2, #24
 8006e34:	189b      	adds	r3, r3, r2
 8006e36:	19db      	adds	r3, r3, r7
 8006e38:	2210      	movs	r2, #16
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x1fa>
 8006e3e:	231b      	movs	r3, #27
 8006e40:	2218      	movs	r2, #24
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	19db      	adds	r3, r3, r7
 8006e46:	2210      	movs	r2, #16
 8006e48:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a55      	ldr	r2, [pc, #340]	; (8006fa4 <UART_SetConfig+0x354>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d000      	beq.n	8006e56 <UART_SetConfig+0x206>
 8006e54:	e084      	b.n	8006f60 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e56:	231b      	movs	r3, #27
 8006e58:	2218      	movs	r2, #24
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	19db      	adds	r3, r3, r7
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d01d      	beq.n	8006ea0 <UART_SetConfig+0x250>
 8006e64:	dc20      	bgt.n	8006ea8 <UART_SetConfig+0x258>
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d015      	beq.n	8006e96 <UART_SetConfig+0x246>
 8006e6a:	dc1d      	bgt.n	8006ea8 <UART_SetConfig+0x258>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <UART_SetConfig+0x226>
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d005      	beq.n	8006e80 <UART_SetConfig+0x230>
 8006e74:	e018      	b.n	8006ea8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e76:	f7fd fe15 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e7e:	e01c      	b.n	8006eba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <UART_SetConfig+0x360>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2210      	movs	r2, #16
 8006e86:	4013      	ands	r3, r2
 8006e88:	d002      	beq.n	8006e90 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e8a:	4b4b      	ldr	r3, [pc, #300]	; (8006fb8 <UART_SetConfig+0x368>)
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e8e:	e014      	b.n	8006eba <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006e90:	4b4a      	ldr	r3, [pc, #296]	; (8006fbc <UART_SetConfig+0x36c>)
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e94:	e011      	b.n	8006eba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e96:	f7fd fd55 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e9e:	e00c      	b.n	8006eba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ea6:	e008      	b.n	8006eba <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006eac:	231a      	movs	r3, #26
 8006eae:	2218      	movs	r2, #24
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	19db      	adds	r3, r3, r7
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
        break;
 8006eb8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d100      	bne.n	8006ec2 <UART_SetConfig+0x272>
 8006ec0:	e132      	b.n	8007128 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	0013      	movs	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d305      	bcc.n	8006ede <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d906      	bls.n	8006eec <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006ede:	231a      	movs	r3, #26
 8006ee0:	2218      	movs	r2, #24
 8006ee2:	189b      	adds	r3, r3, r2
 8006ee4:	19db      	adds	r3, r3, r7
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e11d      	b.n	8007128 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	6939      	ldr	r1, [r7, #16]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	000b      	movs	r3, r1
 8006efa:	0e1b      	lsrs	r3, r3, #24
 8006efc:	0010      	movs	r0, r2
 8006efe:	0205      	lsls	r5, r0, #8
 8006f00:	431d      	orrs	r5, r3
 8006f02:	000b      	movs	r3, r1
 8006f04:	021c      	lsls	r4, r3, #8
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68b8      	ldr	r0, [r7, #8]
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	1900      	adds	r0, r0, r4
 8006f18:	4169      	adcs	r1, r5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	607b      	str	r3, [r7, #4]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f7f9 f98c 	bl	8000244 <__aeabi_uldivmod>
 8006f2c:	0002      	movs	r2, r0
 8006f2e:	000b      	movs	r3, r1
 8006f30:	0013      	movs	r3, r2
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d309      	bcc.n	8006f52 <UART_SetConfig+0x302>
 8006f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	035b      	lsls	r3, r3, #13
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d204      	bcs.n	8006f52 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	e0ea      	b.n	8007128 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006f52:	231a      	movs	r3, #26
 8006f54:	2218      	movs	r2, #24
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	19db      	adds	r3, r3, r7
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e0e3      	b.n	8007128 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d000      	beq.n	8006f6e <UART_SetConfig+0x31e>
 8006f6c:	e085      	b.n	800707a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006f6e:	231b      	movs	r3, #27
 8006f70:	2218      	movs	r2, #24
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	19db      	adds	r3, r3, r7
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d837      	bhi.n	8006fec <UART_SetConfig+0x39c>
 8006f7c:	009a      	lsls	r2, r3, #2
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <UART_SetConfig+0x370>)
 8006f80:	18d3      	adds	r3, r2, r3
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fd fd8d 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8006f8a:	0003      	movs	r3, r0
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f8e:	e036      	b.n	8006ffe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f90:	f7fd fd9e 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8006f94:	0003      	movs	r3, r0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f98:	e031      	b.n	8006ffe <UART_SetConfig+0x3ae>
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	efff69f3 	.word	0xefff69f3
 8006fa0:	ffffcfff 	.word	0xffffcfff
 8006fa4:	40004800 	.word	0x40004800
 8006fa8:	fffff4ff 	.word	0xfffff4ff
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	00f42400 	.word	0x00f42400
 8006fc0:	0800c4b4 	.word	0x0800c4b4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc4:	4b60      	ldr	r3, [pc, #384]	; (8007148 <UART_SetConfig+0x4f8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2210      	movs	r2, #16
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d002      	beq.n	8006fd4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006fce:	4b5f      	ldr	r3, [pc, #380]	; (800714c <UART_SetConfig+0x4fc>)
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fd2:	e014      	b.n	8006ffe <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006fd4:	4b5e      	ldr	r3, [pc, #376]	; (8007150 <UART_SetConfig+0x500>)
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fd8:	e011      	b.n	8006ffe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fda:	f7fd fcb3 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fe2:	e00c      	b.n	8006ffe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fea:	e008      	b.n	8006ffe <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006ff0:	231a      	movs	r3, #26
 8006ff2:	2218      	movs	r2, #24
 8006ff4:	189b      	adds	r3, r3, r2
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
        break;
 8006ffc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d100      	bne.n	8007006 <UART_SetConfig+0x3b6>
 8007004:	e090      	b.n	8007128 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	005a      	lsls	r2, r3, #1
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	18d2      	adds	r2, r2, r3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	0019      	movs	r1, r3
 8007018:	0010      	movs	r0, r2
 800701a:	f7f9 f887 	bl	800012c <__udivsi3>
 800701e:	0003      	movs	r3, r0
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	2b0f      	cmp	r3, #15
 8007026:	d921      	bls.n	800706c <UART_SetConfig+0x41c>
 8007028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	429a      	cmp	r2, r3
 8007030:	d21c      	bcs.n	800706c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	b29a      	uxth	r2, r3
 8007036:	200e      	movs	r0, #14
 8007038:	2418      	movs	r4, #24
 800703a:	1903      	adds	r3, r0, r4
 800703c:	19db      	adds	r3, r3, r7
 800703e:	210f      	movs	r1, #15
 8007040:	438a      	bics	r2, r1
 8007042:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	2207      	movs	r2, #7
 800704c:	4013      	ands	r3, r2
 800704e:	b299      	uxth	r1, r3
 8007050:	1903      	adds	r3, r0, r4
 8007052:	19db      	adds	r3, r3, r7
 8007054:	1902      	adds	r2, r0, r4
 8007056:	19d2      	adds	r2, r2, r7
 8007058:	8812      	ldrh	r2, [r2, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1902      	adds	r2, r0, r4
 8007064:	19d2      	adds	r2, r2, r7
 8007066:	8812      	ldrh	r2, [r2, #0]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	e05d      	b.n	8007128 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800706c:	231a      	movs	r3, #26
 800706e:	2218      	movs	r2, #24
 8007070:	189b      	adds	r3, r3, r2
 8007072:	19db      	adds	r3, r3, r7
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e056      	b.n	8007128 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800707a:	231b      	movs	r3, #27
 800707c:	2218      	movs	r2, #24
 800707e:	189b      	adds	r3, r3, r2
 8007080:	19db      	adds	r3, r3, r7
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d822      	bhi.n	80070ce <UART_SetConfig+0x47e>
 8007088:	009a      	lsls	r2, r3, #2
 800708a:	4b32      	ldr	r3, [pc, #200]	; (8007154 <UART_SetConfig+0x504>)
 800708c:	18d3      	adds	r3, r2, r3
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007092:	f7fd fd07 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8007096:	0003      	movs	r3, r0
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800709a:	e021      	b.n	80070e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800709c:	f7fd fd18 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80070a0:	0003      	movs	r3, r0
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070a4:	e01c      	b.n	80070e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a6:	4b28      	ldr	r3, [pc, #160]	; (8007148 <UART_SetConfig+0x4f8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2210      	movs	r2, #16
 80070ac:	4013      	ands	r3, r2
 80070ae:	d002      	beq.n	80070b6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <UART_SetConfig+0x4fc>)
 80070b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b4:	e014      	b.n	80070e0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80070b6:	4b26      	ldr	r3, [pc, #152]	; (8007150 <UART_SetConfig+0x500>)
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070ba:	e011      	b.n	80070e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070bc:	f7fd fc42 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 80070c0:	0003      	movs	r3, r0
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c4:	e00c      	b.n	80070e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070cc:	e008      	b.n	80070e0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070d2:	231a      	movs	r3, #26
 80070d4:	2218      	movs	r2, #24
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
        break;
 80070de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	085a      	lsrs	r2, r3, #1
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	18d2      	adds	r2, r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	0019      	movs	r1, r3
 80070f6:	0010      	movs	r0, r2
 80070f8:	f7f9 f818 	bl	800012c <__udivsi3>
 80070fc:	0003      	movs	r3, r0
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d90a      	bls.n	800711c <UART_SetConfig+0x4cc>
 8007106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	025b      	lsls	r3, r3, #9
 800710c:	429a      	cmp	r2, r3
 800710e:	d205      	bcs.n	800711c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	b29a      	uxth	r2, r3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	e005      	b.n	8007128 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800711c:	231a      	movs	r3, #26
 800711e:	2218      	movs	r2, #24
 8007120:	189b      	adds	r3, r3, r2
 8007122:	19db      	adds	r3, r3, r7
 8007124:	2201      	movs	r2, #1
 8007126:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2200      	movs	r2, #0
 800712c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007134:	231a      	movs	r3, #26
 8007136:	2218      	movs	r2, #24
 8007138:	189b      	adds	r3, r3, r2
 800713a:	19db      	adds	r3, r3, r7
 800713c:	781b      	ldrb	r3, [r3, #0]
}
 800713e:	0018      	movs	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	b00e      	add	sp, #56	; 0x38
 8007144:	bdb0      	pop	{r4, r5, r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	40021000 	.word	0x40021000
 800714c:	003d0900 	.word	0x003d0900
 8007150:	00f42400 	.word	0x00f42400
 8007154:	0800c4d8 	.word	0x0800c4d8

08007158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2201      	movs	r2, #1
 8007166:	4013      	ands	r3, r2
 8007168:	d00b      	beq.n	8007182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4a4a      	ldr	r2, [pc, #296]	; (800729c <UART_AdvFeatureConfig+0x144>)
 8007172:	4013      	ands	r3, r2
 8007174:	0019      	movs	r1, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2202      	movs	r2, #2
 8007188:	4013      	ands	r3, r2
 800718a:	d00b      	beq.n	80071a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4a43      	ldr	r2, [pc, #268]	; (80072a0 <UART_AdvFeatureConfig+0x148>)
 8007194:	4013      	ands	r3, r2
 8007196:	0019      	movs	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2204      	movs	r2, #4
 80071aa:	4013      	ands	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a3b      	ldr	r2, [pc, #236]	; (80072a4 <UART_AdvFeatureConfig+0x14c>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	0019      	movs	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2208      	movs	r2, #8
 80071cc:	4013      	ands	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4a34      	ldr	r2, [pc, #208]	; (80072a8 <UART_AdvFeatureConfig+0x150>)
 80071d8:	4013      	ands	r3, r2
 80071da:	0019      	movs	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2210      	movs	r2, #16
 80071ee:	4013      	ands	r3, r2
 80071f0:	d00b      	beq.n	800720a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	4a2c      	ldr	r2, [pc, #176]	; (80072ac <UART_AdvFeatureConfig+0x154>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	0019      	movs	r1, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2220      	movs	r2, #32
 8007210:	4013      	ands	r3, r2
 8007212:	d00b      	beq.n	800722c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	4a25      	ldr	r2, [pc, #148]	; (80072b0 <UART_AdvFeatureConfig+0x158>)
 800721c:	4013      	ands	r3, r2
 800721e:	0019      	movs	r1, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2240      	movs	r2, #64	; 0x40
 8007232:	4013      	ands	r3, r2
 8007234:	d01d      	beq.n	8007272 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <UART_AdvFeatureConfig+0x15c>)
 800723e:	4013      	ands	r3, r2
 8007240:	0019      	movs	r1, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	035b      	lsls	r3, r3, #13
 8007256:	429a      	cmp	r2, r3
 8007258:	d10b      	bne.n	8007272 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <UART_AdvFeatureConfig+0x160>)
 8007262:	4013      	ands	r3, r2
 8007264:	0019      	movs	r1, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	4013      	ands	r3, r2
 800727a:	d00b      	beq.n	8007294 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4a0e      	ldr	r2, [pc, #56]	; (80072bc <UART_AdvFeatureConfig+0x164>)
 8007284:	4013      	ands	r3, r2
 8007286:	0019      	movs	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	605a      	str	r2, [r3, #4]
  }
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b002      	add	sp, #8
 800729a:	bd80      	pop	{r7, pc}
 800729c:	fffdffff 	.word	0xfffdffff
 80072a0:	fffeffff 	.word	0xfffeffff
 80072a4:	fffbffff 	.word	0xfffbffff
 80072a8:	ffff7fff 	.word	0xffff7fff
 80072ac:	ffffefff 	.word	0xffffefff
 80072b0:	ffffdfff 	.word	0xffffdfff
 80072b4:	ffefffff 	.word	0xffefffff
 80072b8:	ff9fffff 	.word	0xff9fffff
 80072bc:	fff7ffff 	.word	0xfff7ffff

080072c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b092      	sub	sp, #72	; 0x48
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2284      	movs	r2, #132	; 0x84
 80072cc:	2100      	movs	r1, #0
 80072ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072d0:	f7fa fdea 	bl	8001ea8 <HAL_GetTick>
 80072d4:	0003      	movs	r3, r0
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2208      	movs	r2, #8
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d12c      	bne.n	8007340 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	0391      	lsls	r1, r2, #14
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4a46      	ldr	r2, [pc, #280]	; (8007408 <UART_CheckIdleState+0x148>)
 80072f0:	9200      	str	r2, [sp, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f000 f88c 	bl	8007410 <UART_WaitOnFlagUntilTimeout>
 80072f8:	1e03      	subs	r3, r0, #0
 80072fa:	d021      	beq.n	8007340 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007304:	63bb      	str	r3, [r7, #56]	; 0x38
 8007306:	2301      	movs	r3, #1
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	f383 8810 	msr	PRIMASK, r3
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	438a      	bics	r2, r1
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2278      	movs	r2, #120	; 0x78
 8007338:	2100      	movs	r1, #0
 800733a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e05f      	b.n	8007400 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2204      	movs	r2, #4
 8007348:	4013      	ands	r3, r2
 800734a:	2b04      	cmp	r3, #4
 800734c:	d146      	bne.n	80073dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	03d1      	lsls	r1, r2, #15
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4a2c      	ldr	r2, [pc, #176]	; (8007408 <UART_CheckIdleState+0x148>)
 8007358:	9200      	str	r2, [sp, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	f000 f858 	bl	8007410 <UART_WaitOnFlagUntilTimeout>
 8007360:	1e03      	subs	r3, r0, #0
 8007362:	d03b      	beq.n	80073dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007364:	f3ef 8310 	mrs	r3, PRIMASK
 8007368:	60fb      	str	r3, [r7, #12]
  return(result);
 800736a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	2301      	movs	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f383 8810 	msr	PRIMASK, r3
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4921      	ldr	r1, [pc, #132]	; (800740c <UART_CheckIdleState+0x14c>)
 8007386:	400a      	ands	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007396:	f3ef 8310 	mrs	r3, PRIMASK
 800739a:	61bb      	str	r3, [r7, #24]
  return(result);
 800739c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
 80073a0:	2301      	movs	r3, #1
 80073a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f383 8810 	msr	PRIMASK, r3
}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2101      	movs	r1, #1
 80073b8:	438a      	bics	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2280      	movs	r2, #128	; 0x80
 80073cc:	2120      	movs	r1, #32
 80073ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2278      	movs	r2, #120	; 0x78
 80073d4:	2100      	movs	r1, #0
 80073d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e011      	b.n	8007400 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2280      	movs	r2, #128	; 0x80
 80073e6:	2120      	movs	r1, #32
 80073e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2278      	movs	r2, #120	; 0x78
 80073fa:	2100      	movs	r1, #0
 80073fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b010      	add	sp, #64	; 0x40
 8007406:	bd80      	pop	{r7, pc}
 8007408:	01ffffff 	.word	0x01ffffff
 800740c:	fffffedf 	.word	0xfffffedf

08007410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	1dfb      	adds	r3, r7, #7
 800741e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007420:	e04b      	b.n	80074ba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	3301      	adds	r3, #1
 8007426:	d048      	beq.n	80074ba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007428:	f7fa fd3e 	bl	8001ea8 <HAL_GetTick>
 800742c:	0002      	movs	r2, r0
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e04b      	b.n	80074da <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2204      	movs	r2, #4
 800744a:	4013      	ands	r3, r2
 800744c:	d035      	beq.n	80074ba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	2208      	movs	r2, #8
 8007456:	4013      	ands	r3, r2
 8007458:	2b08      	cmp	r3, #8
 800745a:	d111      	bne.n	8007480 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2208      	movs	r2, #8
 8007462:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	0018      	movs	r0, r3
 8007468:	f000 f83c 	bl	80074e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2284      	movs	r2, #132	; 0x84
 8007470:	2108      	movs	r1, #8
 8007472:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2278      	movs	r2, #120	; 0x78
 8007478:	2100      	movs	r1, #0
 800747a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e02c      	b.n	80074da <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	401a      	ands	r2, r3
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	429a      	cmp	r2, r3
 8007492:	d112      	bne.n	80074ba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2280      	movs	r2, #128	; 0x80
 800749a:	0112      	lsls	r2, r2, #4
 800749c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 f81f 	bl	80074e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2284      	movs	r2, #132	; 0x84
 80074aa:	2120      	movs	r1, #32
 80074ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2278      	movs	r2, #120	; 0x78
 80074b2:	2100      	movs	r1, #0
 80074b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e00f      	b.n	80074da <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	4013      	ands	r3, r2
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	425a      	negs	r2, r3
 80074ca:	4153      	adcs	r3, r2
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	001a      	movs	r2, r3
 80074d0:	1dfb      	adds	r3, r7, #7
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d0a4      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ec:	f3ef 8310 	mrs	r3, PRIMASK
 80074f0:	617b      	str	r3, [r7, #20]
  return(result);
 80074f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
 80074f6:	2301      	movs	r3, #1
 80074f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4926      	ldr	r1, [pc, #152]	; (80075a8 <UART_EndRxTransfer+0xc4>)
 800750e:	400a      	ands	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	623b      	str	r3, [r7, #32]
  return(result);
 8007524:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	633b      	str	r3, [r7, #48]	; 0x30
 8007528:	2301      	movs	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2101      	movs	r1, #1
 8007540:	438a      	bics	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b01      	cmp	r3, #1
 8007556:	d118      	bne.n	800758a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	60bb      	str	r3, [r7, #8]
  return(result);
 800755e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007562:	2301      	movs	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2110      	movs	r1, #16
 800757a:	438a      	bics	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f383 8810 	msr	PRIMASK, r3
}
 8007588:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2280      	movs	r2, #128	; 0x80
 800758e:	2120      	movs	r1, #32
 8007590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b00e      	add	sp, #56	; 0x38
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	fffffedf 	.word	0xfffffedf

080075ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80075b0:	4a06      	ldr	r2, [pc, #24]	; (80075cc <MX_FATFS_Init+0x20>)
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <MX_FATFS_Init+0x24>)
 80075b4:	0011      	movs	r1, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f003 fd5a 	bl	800b070 <FATFS_LinkDriver>
 80075bc:	0003      	movs	r3, r0
 80075be:	001a      	movs	r2, r3
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <MX_FATFS_Init+0x28>)
 80075c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80075c4:	46c0      	nop			; (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	20000c5c 	.word	0x20000c5c
 80075d0:	20000010 	.word	0x20000010
 80075d4:	20000c58 	.word	0x20000c58

080075d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80075dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80075de:	0018      	movs	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	0002      	movs	r2, r0
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); // User Modification
 80075f0:	1dfb      	adds	r3, r7, #7
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 fa19 	bl	8007a2c <USER_SPI_initialize>
 80075fa:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80075fc:	0018      	movs	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	b002      	add	sp, #8
 8007602:	bd80      	pop	{r7, pc}

08007604 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	0002      	movs	r2, r0
 800760c:	1dfb      	adds	r3, r7, #7
 800760e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //User Modification
 8007610:	1dfb      	adds	r3, r7, #7
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	0018      	movs	r0, r3
 8007616:	f000 fb1d 	bl	8007c54 <USER_SPI_status>
 800761a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}

08007624 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	250f      	movs	r5, #15
 8007632:	197b      	adds	r3, r7, r5
 8007634:	1c02      	adds	r2, r0, #0
 8007636:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007638:	683c      	ldr	r4, [r7, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	197b      	adds	r3, r7, r5
 8007640:	7818      	ldrb	r0, [r3, #0]
 8007642:	0023      	movs	r3, r4
 8007644:	f000 fb1c 	bl	8007c80 <USER_SPI_read>
 8007648:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bdb0      	pop	{r4, r5, r7, pc}

08007652 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007652:	b5b0      	push	{r4, r5, r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	250f      	movs	r5, #15
 8007660:	197b      	adds	r3, r7, r5
 8007662:	1c02      	adds	r2, r0, #0
 8007664:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8007666:	683c      	ldr	r4, [r7, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	197b      	adds	r3, r7, r5
 800766e:	7818      	ldrb	r0, [r3, #0]
 8007670:	0023      	movs	r3, r4
 8007672:	f000 fb71 	bl	8007d58 <USER_SPI_write>
 8007676:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8007678:	0018      	movs	r0, r3
 800767a:	46bd      	mov	sp, r7
 800767c:	b004      	add	sp, #16
 800767e:	bdb0      	pop	{r4, r5, r7, pc}

08007680 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	603a      	str	r2, [r7, #0]
 8007688:	1dfb      	adds	r3, r7, #7
 800768a:	1c02      	adds	r2, r0, #0
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	1dbb      	adds	r3, r7, #6
 8007690:	1c0a      	adds	r2, r1, #0
 8007692:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	1dbb      	adds	r3, r7, #6
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	1dfb      	adds	r3, r7, #7
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 fbda 	bl	8007e58 <USER_SPI_ioctl>
 80076a4:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80076a6:	0018      	movs	r0, r3
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b002      	add	sp, #8
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80076b8:	f7fa fbf6 	bl	8001ea8 <HAL_GetTick>
 80076bc:	0002      	movs	r2, r0
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <SPI_Timer_On+0x20>)
 80076c0:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80076c2:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <SPI_Timer_On+0x24>)
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]
}
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000c64 	.word	0x20000c64
 80076d4:	20000c68 	.word	0x20000c68

080076d8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80076dc:	f7fa fbe4 	bl	8001ea8 <HAL_GetTick>
 80076e0:	0002      	movs	r2, r0
 80076e2:	4b06      	ldr	r3, [pc, #24]	; (80076fc <SPI_Timer_Status+0x24>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <SPI_Timer_Status+0x28>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	419b      	sbcs	r3, r3
 80076f0:	425b      	negs	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
}
 80076f4:	0018      	movs	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20000c64 	.word	0x20000c64
 8007700:	20000c68 	.word	0x20000c68

08007704 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b087      	sub	sp, #28
 8007708:	af02      	add	r7, sp, #8
 800770a:	0002      	movs	r2, r0
 800770c:	1dfb      	adds	r3, r7, #7
 800770e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007710:	240f      	movs	r4, #15
 8007712:	193a      	adds	r2, r7, r4
 8007714:	1df9      	adds	r1, r7, #7
 8007716:	4806      	ldr	r0, [pc, #24]	; (8007730 <xchg_spi+0x2c>)
 8007718:	2332      	movs	r3, #50	; 0x32
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2301      	movs	r3, #1
 800771e:	f7fd fe9b 	bl	8005458 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007722:	193b      	adds	r3, r7, r4
 8007724:	781b      	ldrb	r3, [r3, #0]
}
 8007726:	0018      	movs	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	b005      	add	sp, #20
 800772c:	bd90      	pop	{r4, r7, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	2000018c 	.word	0x2000018c

08007734 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e00a      	b.n	800775a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	18d4      	adds	r4, r2, r3
 800774a:	20ff      	movs	r0, #255	; 0xff
 800774c:	f7ff ffda 	bl	8007704 <xchg_spi>
 8007750:	0003      	movs	r3, r0
 8007752:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d3f0      	bcc.n	8007744 <rcvr_spi_multi+0x10>
	}
}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	46c0      	nop			; (mov r8, r8)
 8007766:	46bd      	mov	sp, r7
 8007768:	b005      	add	sp, #20
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	b29a      	uxth	r2, r3
 800777a:	2301      	movs	r3, #1
 800777c:	425b      	negs	r3, r3
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4803      	ldr	r0, [pc, #12]	; (8007790 <xmit_spi_multi+0x24>)
 8007782:	f7fd fbdd 	bl	8004f40 <HAL_SPI_Transmit>
}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	46bd      	mov	sp, r7
 800778a:	b002      	add	sp, #8
 800778c:	bd80      	pop	{r7, pc}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	2000018c 	.word	0x2000018c

08007794 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007794:	b5b0      	push	{r4, r5, r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800779c:	f7fa fb84 	bl	8001ea8 <HAL_GetTick>
 80077a0:	0003      	movs	r3, r0
 80077a2:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80077a8:	250f      	movs	r5, #15
 80077aa:	197c      	adds	r4, r7, r5
 80077ac:	20ff      	movs	r0, #255	; 0xff
 80077ae:	f7ff ffa9 	bl	8007704 <xchg_spi>
 80077b2:	0003      	movs	r3, r0
 80077b4:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80077b6:	197b      	adds	r3, r7, r5
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	d007      	beq.n	80077ce <wait_ready+0x3a>
 80077be:	f7fa fb73 	bl	8001ea8 <HAL_GetTick>
 80077c2:	0002      	movs	r2, r0
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d8ec      	bhi.n	80077a8 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80077ce:	230f      	movs	r3, #15
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	3bff      	subs	r3, #255	; 0xff
 80077d6:	425a      	negs	r2, r3
 80077d8:	4153      	adcs	r3, r2
 80077da:	b2db      	uxtb	r3, r3
}
 80077dc:	0018      	movs	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	b006      	add	sp, #24
 80077e2:	bdb0      	pop	{r4, r5, r7, pc}

080077e4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <despiselect+0x1c>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	2180      	movs	r1, #128	; 0x80
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7fb fd16 	bl	8003220 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80077f4:	20ff      	movs	r0, #255	; 0xff
 80077f6:	f7ff ff85 	bl	8007704 <xchg_spi>

}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	50000800 	.word	0x50000800

08007804 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007808:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <spiselect+0x34>)
 800780a:	2200      	movs	r2, #0
 800780c:	2180      	movs	r1, #128	; 0x80
 800780e:	0018      	movs	r0, r3
 8007810:	f7fb fd06 	bl	8003220 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007814:	20ff      	movs	r0, #255	; 0xff
 8007816:	f7ff ff75 	bl	8007704 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800781a:	23fa      	movs	r3, #250	; 0xfa
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	0018      	movs	r0, r3
 8007820:	f7ff ffb8 	bl	8007794 <wait_ready>
 8007824:	1e03      	subs	r3, r0, #0
 8007826:	d001      	beq.n	800782c <spiselect+0x28>
 8007828:	2301      	movs	r3, #1
 800782a:	e002      	b.n	8007832 <spiselect+0x2e>

	despiselect();
 800782c:	f7ff ffda 	bl	80077e4 <despiselect>
	return 0;	/* Timeout */
 8007830:	2300      	movs	r3, #0
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	50000800 	.word	0x50000800

0800783c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800783c:	b5b0      	push	{r4, r5, r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007846:	20c8      	movs	r0, #200	; 0xc8
 8007848:	f7ff ff32 	bl	80076b0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800784c:	250f      	movs	r5, #15
 800784e:	197c      	adds	r4, r7, r5
 8007850:	20ff      	movs	r0, #255	; 0xff
 8007852:	f7ff ff57 	bl	8007704 <xchg_spi>
 8007856:	0003      	movs	r3, r0
 8007858:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800785a:	197b      	adds	r3, r7, r5
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2bff      	cmp	r3, #255	; 0xff
 8007860:	d103      	bne.n	800786a <rcvr_datablock+0x2e>
 8007862:	f7ff ff39 	bl	80076d8 <SPI_Timer_Status>
 8007866:	1e03      	subs	r3, r0, #0
 8007868:	d1f0      	bne.n	800784c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800786a:	230f      	movs	r3, #15
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2bfe      	cmp	r3, #254	; 0xfe
 8007872:	d001      	beq.n	8007878 <rcvr_datablock+0x3c>
 8007874:	2300      	movs	r3, #0
 8007876:	e00c      	b.n	8007892 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0011      	movs	r1, r2
 800787e:	0018      	movs	r0, r3
 8007880:	f7ff ff58 	bl	8007734 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007884:	20ff      	movs	r0, #255	; 0xff
 8007886:	f7ff ff3d 	bl	8007704 <xchg_spi>
 800788a:	20ff      	movs	r0, #255	; 0xff
 800788c:	f7ff ff3a 	bl	8007704 <xchg_spi>

	return 1;						/* Function succeeded */
 8007890:	2301      	movs	r3, #1
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	b004      	add	sp, #16
 8007898:	bdb0      	pop	{r4, r5, r7, pc}

0800789a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800789a:	b5b0      	push	{r4, r5, r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	000a      	movs	r2, r1
 80078a4:	1cfb      	adds	r3, r7, #3
 80078a6:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80078a8:	23fa      	movs	r3, #250	; 0xfa
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7ff ff71 	bl	8007794 <wait_ready>
 80078b2:	1e03      	subs	r3, r0, #0
 80078b4:	d101      	bne.n	80078ba <xmit_datablock+0x20>
 80078b6:	2300      	movs	r3, #0
 80078b8:	e025      	b.n	8007906 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 80078ba:	1cfb      	adds	r3, r7, #3
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	0018      	movs	r0, r3
 80078c0:	f7ff ff20 	bl	8007704 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80078c4:	1cfb      	adds	r3, r7, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2bfd      	cmp	r3, #253	; 0xfd
 80078ca:	d01b      	beq.n	8007904 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 80078cc:	2380      	movs	r3, #128	; 0x80
 80078ce:	009a      	lsls	r2, r3, #2
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	0011      	movs	r1, r2
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7ff ff49 	bl	800776c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80078da:	20ff      	movs	r0, #255	; 0xff
 80078dc:	f7ff ff12 	bl	8007704 <xchg_spi>
 80078e0:	20ff      	movs	r0, #255	; 0xff
 80078e2:	f7ff ff0f 	bl	8007704 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80078e6:	250f      	movs	r5, #15
 80078e8:	197c      	adds	r4, r7, r5
 80078ea:	20ff      	movs	r0, #255	; 0xff
 80078ec:	f7ff ff0a 	bl	8007704 <xchg_spi>
 80078f0:	0003      	movs	r3, r0
 80078f2:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80078f4:	197b      	adds	r3, r7, r5
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	221f      	movs	r2, #31
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b05      	cmp	r3, #5
 80078fe:	d001      	beq.n	8007904 <xmit_datablock+0x6a>
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <xmit_datablock+0x6c>
	}
	return 1;
 8007904:	2301      	movs	r3, #1
}
 8007906:	0018      	movs	r0, r3
 8007908:	46bd      	mov	sp, r7
 800790a:	b004      	add	sp, #16
 800790c:	bdb0      	pop	{r4, r5, r7, pc}

0800790e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800790e:	b5b0      	push	{r4, r5, r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	0002      	movs	r2, r0
 8007916:	6039      	str	r1, [r7, #0]
 8007918:	1dfb      	adds	r3, r7, #7
 800791a:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800791c:	1dfb      	adds	r3, r7, #7
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b25b      	sxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	da15      	bge.n	8007952 <send_cmd+0x44>
		cmd &= 0x7F;
 8007926:	1dfb      	adds	r3, r7, #7
 8007928:	1dfa      	adds	r2, r7, #7
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	217f      	movs	r1, #127	; 0x7f
 800792e:	400a      	ands	r2, r1
 8007930:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8007932:	250e      	movs	r5, #14
 8007934:	197c      	adds	r4, r7, r5
 8007936:	2100      	movs	r1, #0
 8007938:	2037      	movs	r0, #55	; 0x37
 800793a:	f7ff ffe8 	bl	800790e <send_cmd>
 800793e:	0003      	movs	r3, r0
 8007940:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8007942:	002a      	movs	r2, r5
 8007944:	18bb      	adds	r3, r7, r2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d902      	bls.n	8007952 <send_cmd+0x44>
 800794c:	18bb      	adds	r3, r7, r2
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	e067      	b.n	8007a22 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b0c      	cmp	r3, #12
 8007958:	d007      	beq.n	800796a <send_cmd+0x5c>
		despiselect();
 800795a:	f7ff ff43 	bl	80077e4 <despiselect>
		if (!spiselect()) return 0xFF;
 800795e:	f7ff ff51 	bl	8007804 <spiselect>
 8007962:	1e03      	subs	r3, r0, #0
 8007964:	d101      	bne.n	800796a <send_cmd+0x5c>
 8007966:	23ff      	movs	r3, #255	; 0xff
 8007968:	e05b      	b.n	8007a22 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800796a:	1dfb      	adds	r3, r7, #7
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	4313      	orrs	r3, r2
 8007972:	b2db      	uxtb	r3, r3
 8007974:	0018      	movs	r0, r3
 8007976:	f7ff fec5 	bl	8007704 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	0e1b      	lsrs	r3, r3, #24
 800797e:	b2db      	uxtb	r3, r3
 8007980:	0018      	movs	r0, r3
 8007982:	f7ff febf 	bl	8007704 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	b2db      	uxtb	r3, r3
 800798c:	0018      	movs	r0, r3
 800798e:	f7ff feb9 	bl	8007704 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	b2db      	uxtb	r3, r3
 8007998:	0018      	movs	r0, r3
 800799a:	f7ff feb3 	bl	8007704 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	0018      	movs	r0, r3
 80079a4:	f7ff feae 	bl	8007704 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80079a8:	210f      	movs	r1, #15
 80079aa:	187b      	adds	r3, r7, r1
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80079b0:	1dfb      	adds	r3, r7, #7
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <send_cmd+0xb0>
 80079b8:	187b      	adds	r3, r7, r1
 80079ba:	2295      	movs	r2, #149	; 0x95
 80079bc:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80079be:	1dfb      	adds	r3, r7, #7
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d103      	bne.n	80079ce <send_cmd+0xc0>
 80079c6:	230f      	movs	r3, #15
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	2287      	movs	r2, #135	; 0x87
 80079cc:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 80079ce:	230f      	movs	r3, #15
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7ff fe95 	bl	8007704 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80079da:	1dfb      	adds	r3, r7, #7
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	d102      	bne.n	80079e8 <send_cmd+0xda>
 80079e2:	20ff      	movs	r0, #255	; 0xff
 80079e4:	f7ff fe8e 	bl	8007704 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80079e8:	230f      	movs	r3, #15
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	220a      	movs	r2, #10
 80079ee:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 80079f0:	250e      	movs	r5, #14
 80079f2:	197c      	adds	r4, r7, r5
 80079f4:	20ff      	movs	r0, #255	; 0xff
 80079f6:	f7ff fe85 	bl	8007704 <xchg_spi>
 80079fa:	0003      	movs	r3, r0
 80079fc:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80079fe:	197b      	adds	r3, r7, r5
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da09      	bge.n	8007a1c <send_cmd+0x10e>
 8007a08:	210f      	movs	r1, #15
 8007a0a:	187b      	adds	r3, r7, r1
 8007a0c:	187a      	adds	r2, r7, r1
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	3a01      	subs	r2, #1
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e9      	bne.n	80079f0 <send_cmd+0xe2>

	return res;							/* Return received response */
 8007a1c:	230e      	movs	r3, #14
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	781b      	ldrb	r3, [r3, #0]
}
 8007a22:	0018      	movs	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b004      	add	sp, #16
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a2c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007a2c:	b5b0      	push	{r4, r5, r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	0002      	movs	r2, r0
 8007a34:	1dfb      	adds	r3, r7, #7
 8007a36:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007a38:	1dfb      	adds	r3, r7, #7
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <USER_SPI_initialize+0x18>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0fd      	b.n	8007c40 <USER_SPI_initialize+0x214>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007a44:	4b80      	ldr	r3, [pc, #512]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d003      	beq.n	8007a5a <USER_SPI_initialize+0x2e>
 8007a52:	4b7d      	ldr	r3, [pc, #500]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	e0f2      	b.n	8007c40 <USER_SPI_initialize+0x214>

	FCLK_SLOW();
 8007a5a:	4b7c      	ldr	r3, [pc, #496]	; (8007c4c <USER_SPI_initialize+0x220>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2238      	movs	r2, #56	; 0x38
 8007a62:	4393      	bics	r3, r2
 8007a64:	001a      	movs	r2, r3
 8007a66:	4b79      	ldr	r3, [pc, #484]	; (8007c4c <USER_SPI_initialize+0x220>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2130      	movs	r1, #48	; 0x30
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007a70:	230f      	movs	r3, #15
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	220a      	movs	r2, #10
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e008      	b.n	8007a8c <USER_SPI_initialize+0x60>
 8007a7a:	20ff      	movs	r0, #255	; 0xff
 8007a7c:	f7ff fe42 	bl	8007704 <xchg_spi>
 8007a80:	210f      	movs	r1, #15
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	187b      	adds	r3, r7, r1
 8007a88:	3a01      	subs	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	240f      	movs	r4, #15
 8007a8e:	193b      	adds	r3, r7, r4
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f1      	bne.n	8007a7a <USER_SPI_initialize+0x4e>

	ty = 0;
 8007a96:	230d      	movs	r3, #13
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7ff ff34 	bl	800790e <send_cmd>
 8007aa6:	0003      	movs	r3, r0
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d000      	beq.n	8007aae <USER_SPI_initialize+0x82>
 8007aac:	e0a6      	b.n	8007bfc <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007aae:	23fa      	movs	r3, #250	; 0xfa
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7ff fdfc 	bl	80076b0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007ab8:	23d5      	movs	r3, #213	; 0xd5
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	0019      	movs	r1, r3
 8007abe:	2008      	movs	r0, #8
 8007ac0:	f7ff ff25 	bl	800790e <send_cmd>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d162      	bne.n	8007b90 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007aca:	193b      	adds	r3, r7, r4
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e00f      	b.n	8007af2 <USER_SPI_initialize+0xc6>
 8007ad2:	250f      	movs	r5, #15
 8007ad4:	197b      	adds	r3, r7, r5
 8007ad6:	781c      	ldrb	r4, [r3, #0]
 8007ad8:	20ff      	movs	r0, #255	; 0xff
 8007ada:	f7ff fe13 	bl	8007704 <xchg_spi>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	001a      	movs	r2, r3
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	551a      	strb	r2, [r3, r4]
 8007ae8:	197b      	adds	r3, r7, r5
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	197b      	adds	r3, r7, r5
 8007aee:	3201      	adds	r2, #1
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	230f      	movs	r3, #15
 8007af4:	18fb      	adds	r3, r7, r3
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d9ea      	bls.n	8007ad2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007afc:	2208      	movs	r2, #8
 8007afe:	18bb      	adds	r3, r7, r2
 8007b00:	789b      	ldrb	r3, [r3, #2]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d000      	beq.n	8007b08 <USER_SPI_initialize+0xdc>
 8007b06:	e079      	b.n	8007bfc <USER_SPI_initialize+0x1d0>
 8007b08:	18bb      	adds	r3, r7, r2
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	2baa      	cmp	r3, #170	; 0xaa
 8007b0e:	d000      	beq.n	8007b12 <USER_SPI_initialize+0xe6>
 8007b10:	e074      	b.n	8007bfc <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	f7ff fde0 	bl	80076d8 <SPI_Timer_Status>
 8007b18:	1e03      	subs	r3, r0, #0
 8007b1a:	d007      	beq.n	8007b2c <USER_SPI_initialize+0x100>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	05db      	lsls	r3, r3, #23
 8007b20:	0019      	movs	r1, r3
 8007b22:	20a9      	movs	r0, #169	; 0xa9
 8007b24:	f7ff fef3 	bl	800790e <send_cmd>
 8007b28:	1e03      	subs	r3, r0, #0
 8007b2a:	d1f3      	bne.n	8007b14 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007b2c:	f7ff fdd4 	bl	80076d8 <SPI_Timer_Status>
 8007b30:	1e03      	subs	r3, r0, #0
 8007b32:	d063      	beq.n	8007bfc <USER_SPI_initialize+0x1d0>
 8007b34:	2100      	movs	r1, #0
 8007b36:	203a      	movs	r0, #58	; 0x3a
 8007b38:	f7ff fee9 	bl	800790e <send_cmd>
 8007b3c:	1e03      	subs	r3, r0, #0
 8007b3e:	d15d      	bne.n	8007bfc <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007b40:	230f      	movs	r3, #15
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e00f      	b.n	8007b6a <USER_SPI_initialize+0x13e>
 8007b4a:	250f      	movs	r5, #15
 8007b4c:	197b      	adds	r3, r7, r5
 8007b4e:	781c      	ldrb	r4, [r3, #0]
 8007b50:	20ff      	movs	r0, #255	; 0xff
 8007b52:	f7ff fdd7 	bl	8007704 <xchg_spi>
 8007b56:	0003      	movs	r3, r0
 8007b58:	001a      	movs	r2, r3
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	551a      	strb	r2, [r3, r4]
 8007b60:	197b      	adds	r3, r7, r5
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	197b      	adds	r3, r7, r5
 8007b66:	3201      	adds	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	230f      	movs	r3, #15
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d9ea      	bls.n	8007b4a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007b74:	2308      	movs	r3, #8
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	001a      	movs	r2, r3
 8007b7c:	2340      	movs	r3, #64	; 0x40
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d001      	beq.n	8007b86 <USER_SPI_initialize+0x15a>
 8007b82:	220c      	movs	r2, #12
 8007b84:	e000      	b.n	8007b88 <USER_SPI_initialize+0x15c>
 8007b86:	2204      	movs	r2, #4
 8007b88:	230d      	movs	r3, #13
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e035      	b.n	8007bfc <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007b90:	2100      	movs	r1, #0
 8007b92:	20a9      	movs	r0, #169	; 0xa9
 8007b94:	f7ff febb 	bl	800790e <send_cmd>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d808      	bhi.n	8007bb0 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007b9e:	230d      	movs	r3, #13
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	230e      	movs	r3, #14
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	22a9      	movs	r2, #169	; 0xa9
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e007      	b.n	8007bc0 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007bb0:	230d      	movs	r3, #13
 8007bb2:	18fb      	adds	r3, r7, r3
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	230e      	movs	r3, #14
 8007bba:	18fb      	adds	r3, r7, r3
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	f7ff fd89 	bl	80076d8 <SPI_Timer_Status>
 8007bc6:	1e03      	subs	r3, r0, #0
 8007bc8:	d008      	beq.n	8007bdc <USER_SPI_initialize+0x1b0>
 8007bca:	230e      	movs	r3, #14
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f7ff fe9b 	bl	800790e <send_cmd>
 8007bd8:	1e03      	subs	r3, r0, #0
 8007bda:	d1f2      	bne.n	8007bc2 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007bdc:	f7ff fd7c 	bl	80076d8 <SPI_Timer_Status>
 8007be0:	1e03      	subs	r3, r0, #0
 8007be2:	d007      	beq.n	8007bf4 <USER_SPI_initialize+0x1c8>
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	0019      	movs	r1, r3
 8007bea:	2010      	movs	r0, #16
 8007bec:	f7ff fe8f 	bl	800790e <send_cmd>
 8007bf0:	1e03      	subs	r3, r0, #0
 8007bf2:	d003      	beq.n	8007bfc <USER_SPI_initialize+0x1d0>
				ty = 0;
 8007bf4:	230d      	movs	r3, #13
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <USER_SPI_initialize+0x224>)
 8007bfe:	240d      	movs	r4, #13
 8007c00:	193a      	adds	r2, r7, r4
 8007c02:	7812      	ldrb	r2, [r2, #0]
 8007c04:	701a      	strb	r2, [r3, #0]
	despiselect();
 8007c06:	f7ff fded 	bl	80077e4 <despiselect>

	if (ty) {			/* OK */
 8007c0a:	193b      	adds	r3, r7, r4
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d010      	beq.n	8007c34 <USER_SPI_initialize+0x208>
		FCLK_FAST();			/* Set fast clock */
 8007c12:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <USER_SPI_initialize+0x220>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <USER_SPI_initialize+0x220>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2138      	movs	r1, #56	; 0x38
 8007c1e:	438a      	bics	r2, r1
 8007c20:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4393      	bics	r3, r2
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <USER_SPI_initialize+0x20e>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007c3a:	4b03      	ldr	r3, [pc, #12]	; (8007c48 <USER_SPI_initialize+0x21c>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
}
 8007c40:	0018      	movs	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b004      	add	sp, #16
 8007c46:	bdb0      	pop	{r4, r5, r7, pc}
 8007c48:	20000024 	.word	0x20000024
 8007c4c:	2000018c 	.word	0x2000018c
 8007c50:	20000c60 	.word	0x20000c60

08007c54 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	0002      	movs	r2, r0
 8007c5c:	1dfb      	adds	r3, r7, #7
 8007c5e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007c60:	1dfb      	adds	r3, r7, #7
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USER_SPI_status+0x18>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e002      	b.n	8007c72 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8007c6c:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <USER_SPI_status+0x28>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b2db      	uxtb	r3, r3
}
 8007c72:	0018      	movs	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b002      	add	sp, #8
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	20000024 	.word	0x20000024

08007c80 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	210f      	movs	r1, #15
 8007c8e:	187b      	adds	r3, r7, r1
 8007c90:	1c02      	adds	r2, r0, #0
 8007c92:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007c94:	187b      	adds	r3, r7, r1
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <USER_SPI_read+0x22>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <USER_SPI_read+0x26>
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	e04f      	b.n	8007d46 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <USER_SPI_read+0xd0>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	001a      	movs	r2, r3
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d001      	beq.n	8007cb8 <USER_SPI_read+0x38>
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e046      	b.n	8007d46 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007cb8:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <USER_SPI_read+0xd4>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	001a      	movs	r2, r3
 8007cbe:	2308      	movs	r3, #8
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	d102      	bne.n	8007cca <USER_SPI_read+0x4a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	025b      	lsls	r3, r3, #9
 8007cc8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d112      	bne.n	8007cf6 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	2011      	movs	r0, #17
 8007cd6:	f7ff fe1a 	bl	800790e <send_cmd>
 8007cda:	1e03      	subs	r3, r0, #0
 8007cdc:	d12d      	bne.n	8007d3a <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8007cde:	2380      	movs	r3, #128	; 0x80
 8007ce0:	009a      	lsls	r2, r3, #2
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	0011      	movs	r1, r2
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f7ff fda8 	bl	800783c <rcvr_datablock>
 8007cec:	1e03      	subs	r3, r0, #0
 8007cee:	d024      	beq.n	8007d3a <USER_SPI_read+0xba>
			count = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	e021      	b.n	8007d3a <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	0019      	movs	r1, r3
 8007cfa:	2012      	movs	r0, #18
 8007cfc:	f7ff fe07 	bl	800790e <send_cmd>
 8007d00:	1e03      	subs	r3, r0, #0
 8007d02:	d11a      	bne.n	8007d3a <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	009a      	lsls	r2, r3, #2
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f7ff fd95 	bl	800783c <rcvr_datablock>
 8007d12:	1e03      	subs	r3, r0, #0
 8007d14:	d00c      	beq.n	8007d30 <USER_SPI_read+0xb0>
				buff += 512;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	4694      	mov	ip, r2
 8007d1e:	4463      	add	r3, ip
 8007d20:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1ea      	bne.n	8007d04 <USER_SPI_read+0x84>
 8007d2e:	e000      	b.n	8007d32 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8007d30:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007d32:	2100      	movs	r1, #0
 8007d34:	200c      	movs	r0, #12
 8007d36:	f7ff fdea 	bl	800790e <send_cmd>
		}
	}
	despiselect();
 8007d3a:	f7ff fd53 	bl	80077e4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	1e5a      	subs	r2, r3, #1
 8007d42:	4193      	sbcs	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b004      	add	sp, #16
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	20000024 	.word	0x20000024
 8007d54:	20000c60 	.word	0x20000c60

08007d58 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	210f      	movs	r1, #15
 8007d66:	187b      	adds	r3, r7, r1
 8007d68:	1c02      	adds	r2, r0, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <USER_SPI_write+0x22>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <USER_SPI_write+0x26>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	e063      	b.n	8007e46 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007d7e:	4b34      	ldr	r3, [pc, #208]	; (8007e50 <USER_SPI_write+0xf8>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	001a      	movs	r2, r3
 8007d86:	2301      	movs	r3, #1
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d001      	beq.n	8007d90 <USER_SPI_write+0x38>
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e05a      	b.n	8007e46 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007d90:	4b2f      	ldr	r3, [pc, #188]	; (8007e50 <USER_SPI_write+0xf8>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	001a      	movs	r2, r3
 8007d98:	2304      	movs	r3, #4
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d001      	beq.n	8007da2 <USER_SPI_write+0x4a>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e051      	b.n	8007e46 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007da2:	4b2c      	ldr	r3, [pc, #176]	; (8007e54 <USER_SPI_write+0xfc>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	001a      	movs	r2, r3
 8007da8:	2308      	movs	r3, #8
 8007daa:	4013      	ands	r3, r2
 8007dac:	d102      	bne.n	8007db4 <USER_SPI_write+0x5c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	025b      	lsls	r3, r3, #9
 8007db2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d110      	bne.n	8007ddc <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	0019      	movs	r1, r3
 8007dbe:	2018      	movs	r0, #24
 8007dc0:	f7ff fda5 	bl	800790e <send_cmd>
 8007dc4:	1e03      	subs	r3, r0, #0
 8007dc6:	d138      	bne.n	8007e3a <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	21fe      	movs	r1, #254	; 0xfe
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f7ff fd64 	bl	800789a <xmit_datablock>
 8007dd2:	1e03      	subs	r3, r0, #0
 8007dd4:	d031      	beq.n	8007e3a <USER_SPI_write+0xe2>
			count = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	e02e      	b.n	8007e3a <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <USER_SPI_write+0xfc>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	001a      	movs	r2, r3
 8007de2:	2306      	movs	r3, #6
 8007de4:	4013      	ands	r3, r2
 8007de6:	d004      	beq.n	8007df2 <USER_SPI_write+0x9a>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	0019      	movs	r1, r3
 8007dec:	2097      	movs	r0, #151	; 0x97
 8007dee:	f7ff fd8e 	bl	800790e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0019      	movs	r1, r3
 8007df6:	2019      	movs	r0, #25
 8007df8:	f7ff fd89 	bl	800790e <send_cmd>
 8007dfc:	1e03      	subs	r3, r0, #0
 8007dfe:	d11c      	bne.n	8007e3a <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	21fc      	movs	r1, #252	; 0xfc
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff fd48 	bl	800789a <xmit_datablock>
 8007e0a:	1e03      	subs	r3, r0, #0
 8007e0c:	d00c      	beq.n	8007e28 <USER_SPI_write+0xd0>
				buff += 512;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2280      	movs	r2, #128	; 0x80
 8007e12:	0092      	lsls	r2, r2, #2
 8007e14:	4694      	mov	ip, r2
 8007e16:	4463      	add	r3, ip
 8007e18:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ec      	bne.n	8007e00 <USER_SPI_write+0xa8>
 8007e26:	e000      	b.n	8007e2a <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007e28:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007e2a:	21fd      	movs	r1, #253	; 0xfd
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f7ff fd34 	bl	800789a <xmit_datablock>
 8007e32:	1e03      	subs	r3, r0, #0
 8007e34:	d101      	bne.n	8007e3a <USER_SPI_write+0xe2>
 8007e36:	2301      	movs	r3, #1
 8007e38:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007e3a:	f7ff fcd3 	bl	80077e4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	1e5a      	subs	r2, r3, #1
 8007e42:	4193      	sbcs	r3, r2
 8007e44:	b2db      	uxtb	r3, r3
}
 8007e46:	0018      	movs	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	b004      	add	sp, #16
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	20000024 	.word	0x20000024
 8007e54:	20000c60 	.word	0x20000c60

08007e58 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b08d      	sub	sp, #52	; 0x34
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	603a      	str	r2, [r7, #0]
 8007e60:	1dfb      	adds	r3, r7, #7
 8007e62:	1c02      	adds	r2, r0, #0
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	1dbb      	adds	r3, r7, #6
 8007e68:	1c0a      	adds	r2, r1, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USER_SPI_ioctl+0x20>
 8007e74:	2304      	movs	r3, #4
 8007e76:	e178      	b.n	800816a <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e78:	4bbe      	ldr	r3, [pc, #760]	; (8008174 <USER_SPI_ioctl+0x31c>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	001a      	movs	r2, r3
 8007e80:	2301      	movs	r3, #1
 8007e82:	4013      	ands	r3, r2
 8007e84:	d001      	beq.n	8007e8a <USER_SPI_ioctl+0x32>
 8007e86:	2303      	movs	r3, #3
 8007e88:	e16f      	b.n	800816a <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8007e8a:	232f      	movs	r3, #47	; 0x2f
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	2201      	movs	r2, #1
 8007e90:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8007e92:	1dbb      	adds	r3, r7, #6
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d100      	bne.n	8007e9c <USER_SPI_ioctl+0x44>
 8007e9a:	e100      	b.n	800809e <USER_SPI_ioctl+0x246>
 8007e9c:	dd00      	ble.n	8007ea0 <USER_SPI_ioctl+0x48>
 8007e9e:	e14d      	b.n	800813c <USER_SPI_ioctl+0x2e4>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d100      	bne.n	8007ea6 <USER_SPI_ioctl+0x4e>
 8007ea4:	e074      	b.n	8007f90 <USER_SPI_ioctl+0x138>
 8007ea6:	dd00      	ble.n	8007eaa <USER_SPI_ioctl+0x52>
 8007ea8:	e148      	b.n	800813c <USER_SPI_ioctl+0x2e4>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <USER_SPI_ioctl+0x5c>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d00a      	beq.n	8007ec8 <USER_SPI_ioctl+0x70>
 8007eb2:	e143      	b.n	800813c <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007eb4:	f7ff fca6 	bl	8007804 <spiselect>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d100      	bne.n	8007ebe <USER_SPI_ioctl+0x66>
 8007ebc:	e143      	b.n	8008146 <USER_SPI_ioctl+0x2ee>
 8007ebe:	232f      	movs	r3, #47	; 0x2f
 8007ec0:	18fb      	adds	r3, r7, r3
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
		break;
 8007ec6:	e13e      	b.n	8008146 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007ec8:	2100      	movs	r1, #0
 8007eca:	2009      	movs	r0, #9
 8007ecc:	f7ff fd1f 	bl	800790e <send_cmd>
 8007ed0:	1e03      	subs	r3, r0, #0
 8007ed2:	d000      	beq.n	8007ed6 <USER_SPI_ioctl+0x7e>
 8007ed4:	e139      	b.n	800814a <USER_SPI_ioctl+0x2f2>
 8007ed6:	240c      	movs	r4, #12
 8007ed8:	193b      	adds	r3, r7, r4
 8007eda:	2110      	movs	r1, #16
 8007edc:	0018      	movs	r0, r3
 8007ede:	f7ff fcad 	bl	800783c <rcvr_datablock>
 8007ee2:	1e03      	subs	r3, r0, #0
 8007ee4:	d100      	bne.n	8007ee8 <USER_SPI_ioctl+0x90>
 8007ee6:	e130      	b.n	800814a <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007ee8:	0020      	movs	r0, r4
 8007eea:	183b      	adds	r3, r7, r0
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	099b      	lsrs	r3, r3, #6
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d115      	bne.n	8007f22 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007ef6:	183b      	adds	r3, r7, r0
 8007ef8:	7a5b      	ldrb	r3, [r3, #9]
 8007efa:	001a      	movs	r2, r3
 8007efc:	183b      	adds	r3, r7, r0
 8007efe:	7a1b      	ldrb	r3, [r3, #8]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	18d3      	adds	r3, r2, r3
 8007f04:	0019      	movs	r1, r3
 8007f06:	183b      	adds	r3, r7, r0
 8007f08:	79db      	ldrb	r3, [r3, #7]
 8007f0a:	041a      	lsls	r2, r3, #16
 8007f0c:	23fc      	movs	r3, #252	; 0xfc
 8007f0e:	039b      	lsls	r3, r3, #14
 8007f10:	4013      	ands	r3, r2
 8007f12:	18cb      	adds	r3, r1, r3
 8007f14:	3301      	adds	r3, #1
 8007f16:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	029a      	lsls	r2, r3, #10
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	e031      	b.n	8007f86 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007f22:	200c      	movs	r0, #12
 8007f24:	183b      	adds	r3, r7, r0
 8007f26:	795b      	ldrb	r3, [r3, #5]
 8007f28:	220f      	movs	r2, #15
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	183b      	adds	r3, r7, r0
 8007f30:	7a9b      	ldrb	r3, [r3, #10]
 8007f32:	09db      	lsrs	r3, r3, #7
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	18d3      	adds	r3, r2, r3
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	183b      	adds	r3, r7, r0
 8007f3c:	7a5b      	ldrb	r3, [r3, #9]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2106      	movs	r1, #6
 8007f44:	400b      	ands	r3, r1
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	18d3      	adds	r3, r2, r3
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	242e      	movs	r4, #46	; 0x2e
 8007f4e:	193b      	adds	r3, r7, r4
 8007f50:	3202      	adds	r2, #2
 8007f52:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007f54:	183b      	adds	r3, r7, r0
 8007f56:	7a1b      	ldrb	r3, [r3, #8]
 8007f58:	099b      	lsrs	r3, r3, #6
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	183b      	adds	r3, r7, r0
 8007f60:	79db      	ldrb	r3, [r3, #7]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	18d2      	adds	r2, r2, r3
 8007f66:	183b      	adds	r3, r7, r0
 8007f68:	799b      	ldrb	r3, [r3, #6]
 8007f6a:	0299      	lsls	r1, r3, #10
 8007f6c:	23c0      	movs	r3, #192	; 0xc0
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	400b      	ands	r3, r1
 8007f72:	18d3      	adds	r3, r2, r3
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007f78:	193b      	adds	r3, r7, r4
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	3b09      	subs	r3, #9
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	409a      	lsls	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007f86:	232f      	movs	r3, #47	; 0x2f
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007f8e:	e0dc      	b.n	800814a <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007f90:	4b79      	ldr	r3, [pc, #484]	; (8008178 <USER_SPI_ioctl+0x320>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	001a      	movs	r2, r3
 8007f96:	2304      	movs	r3, #4
 8007f98:	4013      	ands	r3, r2
 8007f9a:	d035      	beq.n	8008008 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	208d      	movs	r0, #141	; 0x8d
 8007fa0:	f7ff fcb5 	bl	800790e <send_cmd>
 8007fa4:	1e03      	subs	r3, r0, #0
 8007fa6:	d000      	beq.n	8007faa <USER_SPI_ioctl+0x152>
 8007fa8:	e0d1      	b.n	800814e <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8007faa:	20ff      	movs	r0, #255	; 0xff
 8007fac:	f7ff fbaa 	bl	8007704 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	2110      	movs	r1, #16
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f7ff fc40 	bl	800783c <rcvr_datablock>
 8007fbc:	1e03      	subs	r3, r0, #0
 8007fbe:	d100      	bne.n	8007fc2 <USER_SPI_ioctl+0x16a>
 8007fc0:	e0c5      	b.n	800814e <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007fc2:	232e      	movs	r3, #46	; 0x2e
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	2230      	movs	r2, #48	; 0x30
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e008      	b.n	8007fde <USER_SPI_ioctl+0x186>
 8007fcc:	20ff      	movs	r0, #255	; 0xff
 8007fce:	f7ff fb99 	bl	8007704 <xchg_spi>
 8007fd2:	212e      	movs	r1, #46	; 0x2e
 8007fd4:	187b      	adds	r3, r7, r1
 8007fd6:	781a      	ldrb	r2, [r3, #0]
 8007fd8:	187b      	adds	r3, r7, r1
 8007fda:	3a01      	subs	r2, #1
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	232e      	movs	r3, #46	; 0x2e
 8007fe0:	18fb      	adds	r3, r7, r3
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f1      	bne.n	8007fcc <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007fe8:	230c      	movs	r3, #12
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	7a9b      	ldrb	r3, [r3, #10]
 8007fee:	091b      	lsrs	r3, r3, #4
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	001a      	movs	r2, r3
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	4093      	lsls	r3, r2
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007ffe:	232f      	movs	r3, #47	; 0x2f
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008006:	e0a2      	b.n	800814e <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008008:	2100      	movs	r1, #0
 800800a:	2009      	movs	r0, #9
 800800c:	f7ff fc7f 	bl	800790e <send_cmd>
 8008010:	1e03      	subs	r3, r0, #0
 8008012:	d000      	beq.n	8008016 <USER_SPI_ioctl+0x1be>
 8008014:	e09b      	b.n	800814e <USER_SPI_ioctl+0x2f6>
 8008016:	240c      	movs	r4, #12
 8008018:	193b      	adds	r3, r7, r4
 800801a:	2110      	movs	r1, #16
 800801c:	0018      	movs	r0, r3
 800801e:	f7ff fc0d 	bl	800783c <rcvr_datablock>
 8008022:	1e03      	subs	r3, r0, #0
 8008024:	d100      	bne.n	8008028 <USER_SPI_ioctl+0x1d0>
 8008026:	e092      	b.n	800814e <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008028:	4b53      	ldr	r3, [pc, #332]	; (8008178 <USER_SPI_ioctl+0x320>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	001a      	movs	r2, r3
 800802e:	2302      	movs	r3, #2
 8008030:	4013      	ands	r3, r2
 8008032:	d016      	beq.n	8008062 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008034:	0021      	movs	r1, r4
 8008036:	187b      	adds	r3, r7, r1
 8008038:	7a9b      	ldrb	r3, [r3, #10]
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	227e      	movs	r2, #126	; 0x7e
 800803e:	4013      	ands	r3, r2
 8008040:	187a      	adds	r2, r7, r1
 8008042:	7ad2      	ldrb	r2, [r2, #11]
 8008044:	09d2      	lsrs	r2, r2, #7
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	189b      	adds	r3, r3, r2
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	187b      	adds	r3, r7, r1
 800804e:	7b5b      	ldrb	r3, [r3, #13]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	409a      	lsls	r2, r3
 8008058:	0013      	movs	r3, r2
 800805a:	001a      	movs	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	e018      	b.n	8008094 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008062:	210c      	movs	r1, #12
 8008064:	187b      	adds	r3, r7, r1
 8008066:	7a9b      	ldrb	r3, [r3, #10]
 8008068:	109b      	asrs	r3, r3, #2
 800806a:	b29b      	uxth	r3, r3
 800806c:	001a      	movs	r2, r3
 800806e:	231f      	movs	r3, #31
 8008070:	4013      	ands	r3, r2
 8008072:	3301      	adds	r3, #1
 8008074:	0008      	movs	r0, r1
 8008076:	187a      	adds	r2, r7, r1
 8008078:	7ad2      	ldrb	r2, [r2, #11]
 800807a:	00d2      	lsls	r2, r2, #3
 800807c:	2118      	movs	r1, #24
 800807e:	400a      	ands	r2, r1
 8008080:	1839      	adds	r1, r7, r0
 8008082:	7ac9      	ldrb	r1, [r1, #11]
 8008084:	0949      	lsrs	r1, r1, #5
 8008086:	b2c9      	uxtb	r1, r1
 8008088:	1852      	adds	r2, r2, r1
 800808a:	3201      	adds	r2, #1
 800808c:	4353      	muls	r3, r2
 800808e:	001a      	movs	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008094:	232f      	movs	r3, #47	; 0x2f
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
		break;
 800809c:	e057      	b.n	800814e <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800809e:	4b36      	ldr	r3, [pc, #216]	; (8008178 <USER_SPI_ioctl+0x320>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	001a      	movs	r2, r3
 80080a4:	2306      	movs	r3, #6
 80080a6:	4013      	ands	r3, r2
 80080a8:	d053      	beq.n	8008152 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80080aa:	240c      	movs	r4, #12
 80080ac:	193a      	adds	r2, r7, r4
 80080ae:	1dfb      	adds	r3, r7, #7
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	210b      	movs	r1, #11
 80080b4:	0018      	movs	r0, r3
 80080b6:	f7ff fecf 	bl	8007e58 <USER_SPI_ioctl>
 80080ba:	1e03      	subs	r3, r0, #0
 80080bc:	d14b      	bne.n	8008156 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80080be:	193b      	adds	r3, r7, r4
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	099b      	lsrs	r3, r3, #6
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <USER_SPI_ioctl+0x27e>
 80080ca:	193b      	adds	r3, r7, r4
 80080cc:	7a9b      	ldrb	r3, [r3, #10]
 80080ce:	001a      	movs	r2, r3
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	4013      	ands	r3, r2
 80080d4:	d041      	beq.n	800815a <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	623b      	str	r3, [r7, #32]
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <USER_SPI_ioctl+0x320>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	001a      	movs	r2, r3
 80080ec:	2308      	movs	r3, #8
 80080ee:	4013      	ands	r3, r2
 80080f0:	d105      	bne.n	80080fe <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	025b      	lsls	r3, r3, #9
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	025b      	lsls	r3, r3, #9
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	0019      	movs	r1, r3
 8008102:	2020      	movs	r0, #32
 8008104:	f7ff fc03 	bl	800790e <send_cmd>
 8008108:	1e03      	subs	r3, r0, #0
 800810a:	d128      	bne.n	800815e <USER_SPI_ioctl+0x306>
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	0019      	movs	r1, r3
 8008110:	2021      	movs	r0, #33	; 0x21
 8008112:	f7ff fbfc 	bl	800790e <send_cmd>
 8008116:	1e03      	subs	r3, r0, #0
 8008118:	d121      	bne.n	800815e <USER_SPI_ioctl+0x306>
 800811a:	2100      	movs	r1, #0
 800811c:	2026      	movs	r0, #38	; 0x26
 800811e:	f7ff fbf6 	bl	800790e <send_cmd>
 8008122:	1e03      	subs	r3, r0, #0
 8008124:	d11b      	bne.n	800815e <USER_SPI_ioctl+0x306>
 8008126:	4b15      	ldr	r3, [pc, #84]	; (800817c <USER_SPI_ioctl+0x324>)
 8008128:	0018      	movs	r0, r3
 800812a:	f7ff fb33 	bl	8007794 <wait_ready>
 800812e:	1e03      	subs	r3, r0, #0
 8008130:	d015      	beq.n	800815e <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008132:	232f      	movs	r3, #47	; 0x2f
 8008134:	18fb      	adds	r3, r7, r3
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
		}
		break;
 800813a:	e010      	b.n	800815e <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 800813c:	232f      	movs	r3, #47	; 0x2f
 800813e:	18fb      	adds	r3, r7, r3
 8008140:	2204      	movs	r2, #4
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e00c      	b.n	8008160 <USER_SPI_ioctl+0x308>
		break;
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	e00a      	b.n	8008160 <USER_SPI_ioctl+0x308>
		break;
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	e008      	b.n	8008160 <USER_SPI_ioctl+0x308>
		break;
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	e006      	b.n	8008160 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	e004      	b.n	8008160 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	e002      	b.n	8008160 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	e000      	b.n	8008160 <USER_SPI_ioctl+0x308>
		break;
 800815e:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8008160:	f7ff fb40 	bl	80077e4 <despiselect>

	return res;
 8008164:	232f      	movs	r3, #47	; 0x2f
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	781b      	ldrb	r3, [r3, #0]
}
 800816a:	0018      	movs	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	b00d      	add	sp, #52	; 0x34
 8008170:	bd90      	pop	{r4, r7, pc}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	20000024 	.word	0x20000024
 8008178:	20000c60 	.word	0x20000c60
 800817c:	00007530 	.word	0x00007530

08008180 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	0002      	movs	r2, r0
 8008188:	1dfb      	adds	r3, r7, #7
 800818a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800818c:	1dfb      	adds	r3, r7, #7
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4a0b      	ldr	r2, [pc, #44]	; (80081c0 <disk_status+0x40>)
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	18d3      	adds	r3, r2, r3
 8008196:	3304      	adds	r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	1dfa      	adds	r2, r7, #7
 800819e:	7812      	ldrb	r2, [r2, #0]
 80081a0:	4907      	ldr	r1, [pc, #28]	; (80081c0 <disk_status+0x40>)
 80081a2:	188a      	adds	r2, r1, r2
 80081a4:	7a12      	ldrb	r2, [r2, #8]
 80081a6:	250f      	movs	r5, #15
 80081a8:	197c      	adds	r4, r7, r5
 80081aa:	0010      	movs	r0, r2
 80081ac:	4798      	blx	r3
 80081ae:	0003      	movs	r3, r0
 80081b0:	7023      	strb	r3, [r4, #0]
  return stat;
 80081b2:	197b      	adds	r3, r7, r5
 80081b4:	781b      	ldrb	r3, [r3, #0]
}
 80081b6:	0018      	movs	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b004      	add	sp, #16
 80081bc:	bdb0      	pop	{r4, r5, r7, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	20000e94 	.word	0x20000e94

080081c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80081c4:	b590      	push	{r4, r7, lr}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	0002      	movs	r2, r0
 80081cc:	1dfb      	adds	r3, r7, #7
 80081ce:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80081d0:	200f      	movs	r0, #15
 80081d2:	183b      	adds	r3, r7, r0
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	4a10      	ldr	r2, [pc, #64]	; (8008220 <disk_initialize+0x5c>)
 80081de:	5cd3      	ldrb	r3, [r2, r3]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d116      	bne.n	8008212 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4a0d      	ldr	r2, [pc, #52]	; (8008220 <disk_initialize+0x5c>)
 80081ea:	2101      	movs	r1, #1
 80081ec:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80081ee:	1dfb      	adds	r3, r7, #7
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4a0b      	ldr	r2, [pc, #44]	; (8008220 <disk_initialize+0x5c>)
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	18d3      	adds	r3, r2, r3
 80081f8:	3304      	adds	r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	1dfa      	adds	r2, r7, #7
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	4907      	ldr	r1, [pc, #28]	; (8008220 <disk_initialize+0x5c>)
 8008204:	188a      	adds	r2, r1, r2
 8008206:	7a12      	ldrb	r2, [r2, #8]
 8008208:	183c      	adds	r4, r7, r0
 800820a:	0010      	movs	r0, r2
 800820c:	4798      	blx	r3
 800820e:	0003      	movs	r3, r0
 8008210:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8008212:	230f      	movs	r3, #15
 8008214:	18fb      	adds	r3, r7, r3
 8008216:	781b      	ldrb	r3, [r3, #0]
}
 8008218:	0018      	movs	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	b005      	add	sp, #20
 800821e:	bd90      	pop	{r4, r7, pc}
 8008220:	20000e94 	.word	0x20000e94

08008224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	210f      	movs	r1, #15
 8008232:	187b      	adds	r3, r7, r1
 8008234:	1c02      	adds	r2, r0, #0
 8008236:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008238:	187b      	adds	r3, r7, r1
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <disk_read+0x4c>)
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	18d3      	adds	r3, r2, r3
 8008242:	3304      	adds	r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689d      	ldr	r5, [r3, #8]
 8008248:	187b      	adds	r3, r7, r1
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <disk_read+0x4c>)
 800824e:	18d3      	adds	r3, r2, r3
 8008250:	7a18      	ldrb	r0, [r3, #8]
 8008252:	2617      	movs	r6, #23
 8008254:	19bc      	adds	r4, r7, r6
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	47a8      	blx	r5
 800825e:	0003      	movs	r3, r0
 8008260:	7023      	strb	r3, [r4, #0]
  return res;
 8008262:	19bb      	adds	r3, r7, r6
 8008264:	781b      	ldrb	r3, [r3, #0]
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b007      	add	sp, #28
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	20000e94 	.word	0x20000e94

08008274 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	210f      	movs	r1, #15
 8008282:	187b      	adds	r3, r7, r1
 8008284:	1c02      	adds	r2, r0, #0
 8008286:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008288:	187b      	adds	r3, r7, r1
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4a0c      	ldr	r2, [pc, #48]	; (80082c0 <disk_write+0x4c>)
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	18d3      	adds	r3, r2, r3
 8008292:	3304      	adds	r3, #4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68dd      	ldr	r5, [r3, #12]
 8008298:	187b      	adds	r3, r7, r1
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <disk_write+0x4c>)
 800829e:	18d3      	adds	r3, r2, r3
 80082a0:	7a18      	ldrb	r0, [r3, #8]
 80082a2:	2617      	movs	r6, #23
 80082a4:	19bc      	adds	r4, r7, r6
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	47a8      	blx	r5
 80082ae:	0003      	movs	r3, r0
 80082b0:	7023      	strb	r3, [r4, #0]
  return res;
 80082b2:	19bb      	adds	r3, r7, r6
 80082b4:	781b      	ldrb	r3, [r3, #0]
}
 80082b6:	0018      	movs	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b007      	add	sp, #28
 80082bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	20000e94 	.word	0x20000e94

080082c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	603a      	str	r2, [r7, #0]
 80082cc:	1dfb      	adds	r3, r7, #7
 80082ce:	1c02      	adds	r2, r0, #0
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	1dbb      	adds	r3, r7, #6
 80082d4:	1c0a      	adds	r2, r1, #0
 80082d6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80082d8:	1dfb      	adds	r3, r7, #7
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4a0c      	ldr	r2, [pc, #48]	; (8008310 <disk_ioctl+0x4c>)
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	18d3      	adds	r3, r2, r3
 80082e2:	3304      	adds	r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	1dfa      	adds	r2, r7, #7
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	4908      	ldr	r1, [pc, #32]	; (8008310 <disk_ioctl+0x4c>)
 80082ee:	188a      	adds	r2, r1, r2
 80082f0:	7a10      	ldrb	r0, [r2, #8]
 80082f2:	260f      	movs	r6, #15
 80082f4:	19bc      	adds	r4, r7, r6
 80082f6:	683d      	ldr	r5, [r7, #0]
 80082f8:	1dba      	adds	r2, r7, #6
 80082fa:	7811      	ldrb	r1, [r2, #0]
 80082fc:	002a      	movs	r2, r5
 80082fe:	4798      	blx	r3
 8008300:	0003      	movs	r3, r0
 8008302:	7023      	strb	r3, [r4, #0]
  return res;
 8008304:	19bb      	adds	r3, r7, r6
 8008306:	781b      	ldrb	r3, [r3, #0]
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b005      	add	sp, #20
 800830e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008310:	20000e94 	.word	0x20000e94

08008314 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3301      	adds	r3, #1
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	210e      	movs	r1, #14
 8008324:	187b      	adds	r3, r7, r1
 8008326:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8008328:	187b      	adds	r3, r7, r1
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	b21a      	sxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	b21b      	sxth	r3, r3
 8008336:	4313      	orrs	r3, r2
 8008338:	b21a      	sxth	r2, r3
 800833a:	187b      	adds	r3, r7, r1
 800833c:	801a      	strh	r2, [r3, #0]
	return rv;
 800833e:	187b      	adds	r3, r7, r1
 8008340:	881b      	ldrh	r3, [r3, #0]
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}

0800834a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3303      	adds	r3, #3
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	3202      	adds	r2, #2
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	3201      	adds	r2, #1
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	7812      	ldrb	r2, [r2, #0]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
	return rv;
 8008382:	68fb      	ldr	r3, [r7, #12]
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}

0800838c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	000a      	movs	r2, r1
 8008396:	1cbb      	adds	r3, r7, #2
 8008398:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	1cba      	adds	r2, r7, #2
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	1cbb      	adds	r3, r7, #2
 80083aa:	1cba      	adds	r2, r7, #2
 80083ac:	8812      	ldrh	r2, [r2, #0]
 80083ae:	0a12      	lsrs	r2, r2, #8
 80083b0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	1cba      	adds	r2, r7, #2
 80083ba:	8812      	ldrh	r2, [r2, #0]
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
}
 80083c0:	46c0      	nop			; (mov r8, r8)
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b002      	add	sp, #8
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	b2d2      	uxtb	r2, r2
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	0a1b      	lsrs	r3, r3, #8
 80083e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	0a1b      	lsrs	r3, r3, #8
 8008406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
}
 8008414:	46c0      	nop			; (mov r8, r8)
 8008416:	46bd      	mov	sp, r7
 8008418:	b002      	add	sp, #8
 800841a:	bd80      	pop	{r7, pc}

0800841c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00d      	beq.n	8008452 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	1c53      	adds	r3, r2, #1
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1c59      	adds	r1, r3, #1
 8008440:	6179      	str	r1, [r7, #20]
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3b01      	subs	r3, #1
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f1      	bne.n	8008436 <mem_cpy+0x1a>
	}
}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	46bd      	mov	sp, r7
 8008456:	b006      	add	sp, #24
 8008458:	bd80      	pop	{r7, pc}

0800845a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	617a      	str	r2, [r7, #20]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3b01      	subs	r3, #1
 800847a:	607b      	str	r3, [r7, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f3      	bne.n	800846a <mem_set+0x10>
}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	46c0      	nop			; (mov r8, r8)
 8008486:	46bd      	mov	sp, r7
 8008488:	b006      	add	sp, #24
 800848a:	bd80      	pop	{r7, pc}

0800848c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	61fb      	str	r3, [r7, #28]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	61fa      	str	r2, [r7, #28]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	0019      	movs	r1, r3
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	61ba      	str	r2, [r7, #24]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	1acb      	subs	r3, r1, r3
 80084b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3b01      	subs	r3, #1
 80084be:	607b      	str	r3, [r7, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <mem_cmp+0x40>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0eb      	beq.n	80084a4 <mem_cmp+0x18>

	return r;
 80084cc:	697b      	ldr	r3, [r7, #20]
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b008      	add	sp, #32
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80084e0:	e002      	b.n	80084e8 <chk_chr+0x12>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3301      	adds	r3, #1
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <chk_chr+0x26>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	001a      	movs	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d1f2      	bne.n	80084e2 <chk_chr+0xc>
	return *str;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
}
 8008500:	0018      	movs	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	b002      	add	sp, #8
 8008506:	bd80      	pop	{r7, pc}

08008508 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008512:	2300      	movs	r3, #0
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e027      	b.n	800856c <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 800851c:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <chk_lock+0xac>)
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	0112      	lsls	r2, r2, #4
 8008522:	58d3      	ldr	r3, [r2, r3]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01c      	beq.n	8008562 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008528:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <chk_lock+0xac>)
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	0112      	lsls	r2, r2, #4
 800852e:	58d2      	ldr	r2, [r2, r3]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d116      	bne.n	8008566 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <chk_lock+0xac>)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	3304      	adds	r3, #4
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008548:	429a      	cmp	r2, r3
 800854a:	d10c      	bne.n	8008566 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800854c:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <chk_lock+0xac>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	3308      	adds	r3, #8
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800855c:	429a      	cmp	r2, r3
 800855e:	d102      	bne.n	8008566 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8008560:	e007      	b.n	8008572 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8008562:	2301      	movs	r3, #1
 8008564:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d9d4      	bls.n	800851c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d109      	bne.n	800858c <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <chk_lock+0x7c>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d101      	bne.n	8008588 <chk_lock+0x80>
 8008584:	2300      	movs	r3, #0
 8008586:	e011      	b.n	80085ac <chk_lock+0xa4>
 8008588:	2312      	movs	r3, #18
 800858a:	e00f      	b.n	80085ac <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <chk_lock+0x9e>
 8008592:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <chk_lock+0xac>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	18d3      	adds	r3, r2, r3
 800859a:	330c      	adds	r3, #12
 800859c:	881a      	ldrh	r2, [r3, #0]
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d101      	bne.n	80085aa <chk_lock+0xa2>
 80085a6:	2310      	movs	r3, #16
 80085a8:	e000      	b.n	80085ac <chk_lock+0xa4>
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	0018      	movs	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b004      	add	sp, #16
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000c74 	.word	0x20000c74

080085b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e002      	b.n	80085ca <enq_lock+0x12>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	607b      	str	r3, [r7, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d805      	bhi.n	80085dc <enq_lock+0x24>
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <enq_lock+0x38>)
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	0112      	lsls	r2, r2, #4
 80085d6:	58d3      	ldr	r3, [r2, r3]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1f3      	bne.n	80085c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3b02      	subs	r3, #2
 80085e0:	1e5a      	subs	r2, r3, #1
 80085e2:	4193      	sbcs	r3, r2
 80085e4:	b2db      	uxtb	r3, r3
}
 80085e6:	0018      	movs	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b002      	add	sp, #8
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	20000c74 	.word	0x20000c74

080085f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e01e      	b.n	8008642 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8008604:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <inc_lock+0x110>)
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	0112      	lsls	r2, r2, #4
 800860a:	58d2      	ldr	r2, [r2, r3]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d113      	bne.n	800863c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8008614:	4a3b      	ldr	r2, [pc, #236]	; (8008704 <inc_lock+0x110>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	18d3      	adds	r3, r2, r3
 800861c:	3304      	adds	r3, #4
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008624:	429a      	cmp	r2, r3
 8008626:	d109      	bne.n	800863c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8008628:	4a36      	ldr	r2, [pc, #216]	; (8008704 <inc_lock+0x110>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	18d3      	adds	r3, r2, r3
 8008630:	3308      	adds	r3, #8
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008638:	429a      	cmp	r2, r3
 800863a:	d006      	beq.n	800864a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d9dd      	bls.n	8008604 <inc_lock+0x10>
 8008648:	e000      	b.n	800864c <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800864a:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d130      	bne.n	80086b4 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e002      	b.n	800865e <inc_lock+0x6a>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d805      	bhi.n	8008670 <inc_lock+0x7c>
 8008664:	4b27      	ldr	r3, [pc, #156]	; (8008704 <inc_lock+0x110>)
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	0112      	lsls	r2, r2, #4
 800866a:	58d3      	ldr	r3, [r2, r3]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f3      	bne.n	8008658 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d101      	bne.n	800867a <inc_lock+0x86>
 8008676:	2300      	movs	r3, #0
 8008678:	e03f      	b.n	80086fa <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6819      	ldr	r1, [r3, #0]
 800867e:	4b21      	ldr	r3, [pc, #132]	; (8008704 <inc_lock+0x110>)
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	0112      	lsls	r2, r2, #4
 8008684:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	491e      	ldr	r1, [pc, #120]	; (8008704 <inc_lock+0x110>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	18cb      	adds	r3, r1, r3
 8008692:	3304      	adds	r3, #4
 8008694:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695a      	ldr	r2, [r3, #20]
 800869a:	491a      	ldr	r1, [pc, #104]	; (8008704 <inc_lock+0x110>)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	18cb      	adds	r3, r1, r3
 80086a2:	3308      	adds	r3, #8
 80086a4:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <inc_lock+0x110>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	18d3      	adds	r3, r2, r3
 80086ae:	330c      	adds	r3, #12
 80086b0:	2200      	movs	r2, #0
 80086b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <inc_lock+0xda>
 80086ba:	4a12      	ldr	r2, [pc, #72]	; (8008704 <inc_lock+0x110>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	18d3      	adds	r3, r2, r3
 80086c2:	330c      	adds	r3, #12
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <inc_lock+0xda>
 80086ca:	2300      	movs	r3, #0
 80086cc:	e015      	b.n	80086fa <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d108      	bne.n	80086e6 <inc_lock+0xf2>
 80086d4:	4a0b      	ldr	r2, [pc, #44]	; (8008704 <inc_lock+0x110>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	330c      	adds	r3, #12
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	e001      	b.n	80086ea <inc_lock+0xf6>
 80086e6:	2380      	movs	r3, #128	; 0x80
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4906      	ldr	r1, [pc, #24]	; (8008704 <inc_lock+0x110>)
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	0112      	lsls	r2, r2, #4
 80086f0:	188a      	adds	r2, r1, r2
 80086f2:	320c      	adds	r2, #12
 80086f4:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3301      	adds	r3, #1
}
 80086fa:	0018      	movs	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b004      	add	sp, #16
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	20000c74 	.word	0x20000c74

08008708 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	607b      	str	r3, [r7, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d832      	bhi.n	8008782 <dec_lock+0x7a>
		n = Files[i].ctr;
 800871c:	200e      	movs	r0, #14
 800871e:	183b      	adds	r3, r7, r0
 8008720:	491d      	ldr	r1, [pc, #116]	; (8008798 <dec_lock+0x90>)
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	0112      	lsls	r2, r2, #4
 8008726:	188a      	adds	r2, r1, r2
 8008728:	320c      	adds	r2, #12
 800872a:	8812      	ldrh	r2, [r2, #0]
 800872c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800872e:	183b      	adds	r3, r7, r0
 8008730:	881a      	ldrh	r2, [r3, #0]
 8008732:	2380      	movs	r3, #128	; 0x80
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	429a      	cmp	r2, r3
 8008738:	d102      	bne.n	8008740 <dec_lock+0x38>
 800873a:	183b      	adds	r3, r7, r0
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008740:	210e      	movs	r1, #14
 8008742:	187b      	adds	r3, r7, r1
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <dec_lock+0x4c>
 800874a:	187b      	adds	r3, r7, r1
 800874c:	881a      	ldrh	r2, [r3, #0]
 800874e:	187b      	adds	r3, r7, r1
 8008750:	3a01      	subs	r2, #1
 8008752:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8008754:	4a10      	ldr	r2, [pc, #64]	; (8008798 <dec_lock+0x90>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	18d3      	adds	r3, r2, r3
 800875c:	330c      	adds	r3, #12
 800875e:	210e      	movs	r1, #14
 8008760:	187a      	adds	r2, r7, r1
 8008762:	8812      	ldrh	r2, [r2, #0]
 8008764:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008766:	187b      	adds	r3, r7, r1
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d104      	bne.n	8008778 <dec_lock+0x70>
 800876e:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <dec_lock+0x90>)
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	0112      	lsls	r2, r2, #4
 8008774:	2100      	movs	r1, #0
 8008776:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8008778:	230d      	movs	r3, #13
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
 8008780:	e003      	b.n	800878a <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008782:	230d      	movs	r3, #13
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	2202      	movs	r2, #2
 8008788:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800878a:	230d      	movs	r3, #13
 800878c:	18fb      	adds	r3, r7, r3
 800878e:	781b      	ldrb	r3, [r3, #0]
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b004      	add	sp, #16
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000c74 	.word	0x20000c74

0800879c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e00e      	b.n	80087c8 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <clear_lock+0x3c>)
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	0112      	lsls	r2, r2, #4
 80087b0:	58d3      	ldr	r3, [r2, r3]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d104      	bne.n	80087c2 <clear_lock+0x26>
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <clear_lock+0x3c>)
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	0112      	lsls	r2, r2, #4
 80087be:	2100      	movs	r1, #0
 80087c0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d9ed      	bls.n	80087aa <clear_lock+0xe>
	}
}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b004      	add	sp, #16
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000c74 	.word	0x20000c74

080087dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80087e4:	240f      	movs	r4, #15
 80087e6:	193b      	adds	r3, r7, r4
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	78db      	ldrb	r3, [r3, #3]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d034      	beq.n	800885e <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7858      	ldrb	r0, [r3, #1]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3334      	adds	r3, #52	; 0x34
 8008802:	0019      	movs	r1, r3
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	2301      	movs	r3, #1
 8008808:	f7ff fd34 	bl	8008274 <disk_write>
 800880c:	1e03      	subs	r3, r0, #0
 800880e:	d003      	beq.n	8008818 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8008810:	193b      	adds	r3, r7, r4
 8008812:	2201      	movs	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e022      	b.n	800885e <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	1ad2      	subs	r2, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	429a      	cmp	r2, r3
 800882c:	d217      	bcs.n	800885e <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	789b      	ldrb	r3, [r3, #2]
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e010      	b.n	8008858 <sync_window+0x7c>
					wsect += fs->fsize;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	18d3      	adds	r3, r2, r3
 800883e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	7858      	ldrb	r0, [r3, #1]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3334      	adds	r3, #52	; 0x34
 8008848:	0019      	movs	r1, r3
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	2301      	movs	r3, #1
 800884e:	f7ff fd11 	bl	8008274 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3b01      	subs	r3, #1
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d8eb      	bhi.n	8008836 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800885e:	230f      	movs	r3, #15
 8008860:	18fb      	adds	r3, r7, r3
 8008862:	781b      	ldrb	r3, [r3, #0]
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b007      	add	sp, #28
 800886a:	bd90      	pop	{r4, r7, pc}

0800886c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008876:	250f      	movs	r5, #15
 8008878:	197b      	adds	r3, r7, r5
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d01f      	beq.n	80088c8 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008888:	197c      	adds	r4, r7, r5
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	0018      	movs	r0, r3
 800888e:	f7ff ffa5 	bl	80087dc <sync_window>
 8008892:	0003      	movs	r3, r0
 8008894:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008896:	002c      	movs	r4, r5
 8008898:	193b      	adds	r3, r7, r4
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d113      	bne.n	80088c8 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7858      	ldrb	r0, [r3, #1]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3334      	adds	r3, #52	; 0x34
 80088a8:	0019      	movs	r1, r3
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	2301      	movs	r3, #1
 80088ae:	f7ff fcb9 	bl	8008224 <disk_read>
 80088b2:	1e03      	subs	r3, r0, #0
 80088b4:	d005      	beq.n	80088c2 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80088b6:	2301      	movs	r3, #1
 80088b8:	425b      	negs	r3, r3
 80088ba:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80088bc:	193b      	adds	r3, r7, r4
 80088be:	2201      	movs	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80088c8:	230f      	movs	r3, #15
 80088ca:	18fb      	adds	r3, r7, r3
 80088cc:	781b      	ldrb	r3, [r3, #0]
}
 80088ce:	0018      	movs	r0, r3
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b004      	add	sp, #16
 80088d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080088d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80088d8:	b5b0      	push	{r4, r5, r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80088e0:	250f      	movs	r5, #15
 80088e2:	197c      	adds	r4, r7, r5
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7ff ff78 	bl	80087dc <sync_window>
 80088ec:	0003      	movs	r3, r0
 80088ee:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80088f0:	197b      	adds	r3, r7, r5
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d15d      	bne.n	80089b4 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d14c      	bne.n	800899a <sync_fs+0xc2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	791b      	ldrb	r3, [r3, #4]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d148      	bne.n	800899a <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3334      	adds	r3, #52	; 0x34
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	0092      	lsls	r2, r2, #2
 8008910:	2100      	movs	r1, #0
 8008912:	0018      	movs	r0, r3
 8008914:	f7ff fda1 	bl	800845a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3334      	adds	r3, #52	; 0x34
 800891c:	33ff      	adds	r3, #255	; 0xff
 800891e:	33ff      	adds	r3, #255	; 0xff
 8008920:	4a28      	ldr	r2, [pc, #160]	; (80089c4 <sync_fs+0xec>)
 8008922:	0011      	movs	r1, r2
 8008924:	0018      	movs	r0, r3
 8008926:	f7ff fd31 	bl	800838c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3334      	adds	r3, #52	; 0x34
 800892e:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <sync_fs+0xf0>)
 8008930:	0011      	movs	r1, r2
 8008932:	0018      	movs	r0, r3
 8008934:	f7ff fd48 	bl	80083c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3334      	adds	r3, #52	; 0x34
 800893c:	33e5      	adds	r3, #229	; 0xe5
 800893e:	33ff      	adds	r3, #255	; 0xff
 8008940:	4a22      	ldr	r2, [pc, #136]	; (80089cc <sync_fs+0xf4>)
 8008942:	0011      	movs	r1, r2
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff fd3f 	bl	80083c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3334      	adds	r3, #52	; 0x34
 800894e:	33e9      	adds	r3, #233	; 0xe9
 8008950:	33ff      	adds	r3, #255	; 0xff
 8008952:	001a      	movs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	0019      	movs	r1, r3
 800895a:	0010      	movs	r0, r2
 800895c:	f7ff fd34 	bl	80083c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3334      	adds	r3, #52	; 0x34
 8008964:	33ed      	adds	r3, #237	; 0xed
 8008966:	33ff      	adds	r3, #255	; 0xff
 8008968:	001a      	movs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	0019      	movs	r1, r3
 8008970:	0010      	movs	r0, r2
 8008972:	f7ff fd29 	bl	80083c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7858      	ldrb	r0, [r3, #1]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3334      	adds	r3, #52	; 0x34
 8008988:	0019      	movs	r1, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800898e:	2301      	movs	r3, #1
 8008990:	f7ff fc70 	bl	8008274 <disk_write>
			fs->fsi_flag = 0;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	0018      	movs	r0, r3
 80089a4:	f7ff fc8e 	bl	80082c4 <disk_ioctl>
 80089a8:	1e03      	subs	r3, r0, #0
 80089aa:	d003      	beq.n	80089b4 <sync_fs+0xdc>
 80089ac:	230f      	movs	r3, #15
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80089b4:	230f      	movs	r3, #15
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	781b      	ldrb	r3, [r3, #0]
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b004      	add	sp, #16
 80089c0:	bdb0      	pop	{r4, r5, r7, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	0000aa55 	.word	0x0000aa55
 80089c8:	41615252 	.word	0x41615252
 80089cc:	61417272 	.word	0x61417272

080089d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	3b02      	subs	r3, #2
 80089de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	3b02      	subs	r3, #2
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d301      	bcc.n	80089f0 <clust2sect+0x20>
 80089ec:	2300      	movs	r3, #0
 80089ee:	e007      	b.n	8008a00 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	895b      	ldrh	r3, [r3, #10]
 80089f4:	001a      	movs	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	435a      	muls	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	18d3      	adds	r3, r2, r3
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b002      	add	sp, #8
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d904      	bls.n	8008a28 <get_fat+0x20>
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d302      	bcc.n	8008a2e <get_fat+0x26>
		val = 1;	/* Internal error */
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e092      	b.n	8008b54 <get_fat+0x14c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008a2e:	2301      	movs	r3, #1
 8008a30:	425b      	negs	r3, r3
 8008a32:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d064      	beq.n	8008b06 <get_fat+0xfe>
 8008a3c:	dd00      	ble.n	8008a40 <get_fat+0x38>
 8008a3e:	e07f      	b.n	8008b40 <get_fat+0x138>
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d002      	beq.n	8008a4a <get_fat+0x42>
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d043      	beq.n	8008ad0 <get_fat+0xc8>
 8008a48:	e07a      	b.n	8008b40 <get_fat+0x138>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	18d3      	adds	r3, r2, r3
 8008a56:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	0a5b      	lsrs	r3, r3, #9
 8008a60:	18d2      	adds	r2, r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	0011      	movs	r1, r2
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff ff00 	bl	800886c <move_window>
 8008a6c:	1e03      	subs	r3, r0, #0
 8008a6e:	d16a      	bne.n	8008b46 <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	60fa      	str	r2, [r7, #12]
 8008a76:	05db      	lsls	r3, r3, #23
 8008a78:	0ddb      	lsrs	r3, r3, #23
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	2134      	movs	r1, #52	; 0x34
 8008a7e:	18d3      	adds	r3, r2, r3
 8008a80:	185b      	adds	r3, r3, r1
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	0a5b      	lsrs	r3, r3, #9
 8008a8e:	18d2      	adds	r2, r2, r3
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	0011      	movs	r1, r2
 8008a94:	0018      	movs	r0, r3
 8008a96:	f7ff fee9 	bl	800886c <move_window>
 8008a9a:	1e03      	subs	r3, r0, #0
 8008a9c:	d155      	bne.n	8008b4a <get_fat+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	05db      	lsls	r3, r3, #23
 8008aa2:	0ddb      	lsrs	r3, r3, #23
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	2134      	movs	r1, #52	; 0x34
 8008aa8:	18d3      	adds	r3, r2, r3
 8008aaa:	185b      	adds	r3, r3, r1
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2201      	movs	r2, #1
 8008abc:	4013      	ands	r3, r2
 8008abe:	d002      	beq.n	8008ac6 <get_fat+0xbe>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	091b      	lsrs	r3, r3, #4
 8008ac4:	e002      	b.n	8008acc <get_fat+0xc4>
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	051b      	lsls	r3, r3, #20
 8008aca:	0d1b      	lsrs	r3, r3, #20
 8008acc:	617b      	str	r3, [r7, #20]
			break;
 8008ace:	e041      	b.n	8008b54 <get_fat+0x14c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	18d2      	adds	r2, r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	0011      	movs	r1, r2
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f7ff fec4 	bl	800886c <move_window>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d132      	bne.n	8008b4e <get_fat+0x146>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	3334      	adds	r3, #52	; 0x34
 8008aec:	001a      	movs	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	0059      	lsls	r1, r3, #1
 8008af2:	23ff      	movs	r3, #255	; 0xff
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	400b      	ands	r3, r1
 8008af8:	18d3      	adds	r3, r2, r3
 8008afa:	0018      	movs	r0, r3
 8008afc:	f7ff fc0a 	bl	8008314 <ld_word>
 8008b00:	0003      	movs	r3, r0
 8008b02:	617b      	str	r3, [r7, #20]
			break;
 8008b04:	e026      	b.n	8008b54 <get_fat+0x14c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	09db      	lsrs	r3, r3, #7
 8008b0e:	18d2      	adds	r2, r2, r3
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	0011      	movs	r1, r2
 8008b14:	0018      	movs	r0, r3
 8008b16:	f7ff fea9 	bl	800886c <move_window>
 8008b1a:	1e03      	subs	r3, r0, #0
 8008b1c:	d119      	bne.n	8008b52 <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	3334      	adds	r3, #52	; 0x34
 8008b22:	001a      	movs	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	0099      	lsls	r1, r3, #2
 8008b28:	23fe      	movs	r3, #254	; 0xfe
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	400b      	ands	r3, r1
 8008b2e:	18d3      	adds	r3, r2, r3
 8008b30:	0018      	movs	r0, r3
 8008b32:	f7ff fc0a 	bl	800834a <ld_dword>
 8008b36:	0003      	movs	r3, r0
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	617b      	str	r3, [r7, #20]
			break;
 8008b3e:	e009      	b.n	8008b54 <get_fat+0x14c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e006      	b.n	8008b54 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	e004      	b.n	8008b54 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b4a:	46c0      	nop			; (mov r8, r8)
 8008b4c:	e002      	b.n	8008b54 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	e000      	b.n	8008b54 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b52:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8008b54:	697b      	ldr	r3, [r7, #20]
}
 8008b56:	0018      	movs	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b006      	add	sp, #24
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008b5e:	b5b0      	push	{r4, r5, r7, lr}
 8008b60:	b088      	sub	sp, #32
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008b6a:	231f      	movs	r3, #31
 8008b6c:	18fb      	adds	r3, r7, r3
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d800      	bhi.n	8008b7a <put_fat+0x1c>
 8008b78:	e0eb      	b.n	8008d52 <put_fat+0x1f4>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d300      	bcc.n	8008b86 <put_fat+0x28>
 8008b84:	e0e5      	b.n	8008d52 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d100      	bne.n	8008b90 <put_fat+0x32>
 8008b8e:	e0a1      	b.n	8008cd4 <put_fat+0x176>
 8008b90:	dd00      	ble.n	8008b94 <put_fat+0x36>
 8008b92:	e0de      	b.n	8008d52 <put_fat+0x1f4>
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d003      	beq.n	8008ba0 <put_fat+0x42>
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d100      	bne.n	8008b9e <put_fat+0x40>
 8008b9c:	e075      	b.n	8008c8a <put_fat+0x12c>
 8008b9e:	e0d8      	b.n	8008d52 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	18d3      	adds	r3, r2, r3
 8008bac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	0a5b      	lsrs	r3, r3, #9
 8008bb6:	18d2      	adds	r2, r2, r3
 8008bb8:	251f      	movs	r5, #31
 8008bba:	197c      	adds	r4, r7, r5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	0011      	movs	r1, r2
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7ff fe53 	bl	800886c <move_window>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008bca:	197b      	adds	r3, r7, r5
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d000      	beq.n	8008bd4 <put_fat+0x76>
 8008bd2:	e0b7      	b.n	8008d44 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3334      	adds	r3, #52	; 0x34
 8008bd8:	001a      	movs	r2, r3
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	1c59      	adds	r1, r3, #1
 8008bde:	61b9      	str	r1, [r7, #24]
 8008be0:	05db      	lsls	r3, r3, #23
 8008be2:	0ddb      	lsrs	r3, r3, #23
 8008be4:	18d3      	adds	r3, r2, r3
 8008be6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2201      	movs	r2, #1
 8008bec:	4013      	ands	r3, r2
 8008bee:	d00d      	beq.n	8008c0c <put_fat+0xae>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	220f      	movs	r2, #15
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	b25a      	sxtb	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	b25b      	sxtb	r3, r3
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	e001      	b.n	8008c10 <put_fat+0xb2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	0a5b      	lsrs	r3, r3, #9
 8008c22:	18d2      	adds	r2, r2, r3
 8008c24:	251f      	movs	r5, #31
 8008c26:	197c      	adds	r4, r7, r5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0011      	movs	r1, r2
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7ff fe1d 	bl	800886c <move_window>
 8008c32:	0003      	movs	r3, r0
 8008c34:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008c36:	197b      	adds	r3, r7, r5
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d000      	beq.n	8008c40 <put_fat+0xe2>
 8008c3e:	e083      	b.n	8008d48 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3334      	adds	r3, #52	; 0x34
 8008c44:	001a      	movs	r2, r3
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	05db      	lsls	r3, r3, #23
 8008c4a:	0ddb      	lsrs	r3, r3, #23
 8008c4c:	18d3      	adds	r3, r2, r3
 8008c4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2201      	movs	r2, #1
 8008c54:	4013      	ands	r3, r2
 8008c56:	d003      	beq.n	8008c60 <put_fat+0x102>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	091b      	lsrs	r3, r3, #4
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	e00e      	b.n	8008c7e <put_fat+0x120>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b25b      	sxtb	r3, r3
 8008c66:	220f      	movs	r2, #15
 8008c68:	4393      	bics	r3, r2
 8008c6a:	b25a      	sxtb	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	210f      	movs	r1, #15
 8008c74:	400b      	ands	r3, r1
 8008c76:	b25b      	sxtb	r3, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	b25b      	sxtb	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	70da      	strb	r2, [r3, #3]
			break;
 8008c88:	e063      	b.n	8008d52 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	0a1b      	lsrs	r3, r3, #8
 8008c92:	18d2      	adds	r2, r2, r3
 8008c94:	251f      	movs	r5, #31
 8008c96:	197c      	adds	r4, r7, r5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0011      	movs	r1, r2
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7ff fde5 	bl	800886c <move_window>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008ca6:	197b      	adds	r3, r7, r5
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d14e      	bne.n	8008d4c <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3334      	adds	r3, #52	; 0x34
 8008cb2:	001a      	movs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	0059      	lsls	r1, r3, #1
 8008cb8:	23ff      	movs	r3, #255	; 0xff
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	400b      	ands	r3, r1
 8008cbe:	18d3      	adds	r3, r2, r3
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	0011      	movs	r1, r2
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7ff fb60 	bl	800838c <st_word>
			fs->wflag = 1;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	70da      	strb	r2, [r3, #3]
			break;
 8008cd2:	e03e      	b.n	8008d52 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	09db      	lsrs	r3, r3, #7
 8008cdc:	18d2      	adds	r2, r2, r3
 8008cde:	251f      	movs	r5, #31
 8008ce0:	197c      	adds	r4, r7, r5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	0011      	movs	r1, r2
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff fdc0 	bl	800886c <move_window>
 8008cec:	0003      	movs	r3, r0
 8008cee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008cf0:	197b      	adds	r3, r7, r5
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d12b      	bne.n	8008d50 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	091c      	lsrs	r4, r3, #4
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3334      	adds	r3, #52	; 0x34
 8008d02:	001a      	movs	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	0099      	lsls	r1, r3, #2
 8008d08:	23fe      	movs	r3, #254	; 0xfe
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	400b      	ands	r3, r1
 8008d0e:	18d3      	adds	r3, r2, r3
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7ff fb1a 	bl	800834a <ld_dword>
 8008d16:	0003      	movs	r3, r0
 8008d18:	0f1b      	lsrs	r3, r3, #28
 8008d1a:	071b      	lsls	r3, r3, #28
 8008d1c:	4323      	orrs	r3, r4
 8008d1e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3334      	adds	r3, #52	; 0x34
 8008d24:	001a      	movs	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	0099      	lsls	r1, r3, #2
 8008d2a:	23fe      	movs	r3, #254	; 0xfe
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	400b      	ands	r3, r1
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	0011      	movs	r1, r2
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff fb46 	bl	80083c8 <st_dword>
			fs->wflag = 1;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	70da      	strb	r2, [r3, #3]
			break;
 8008d42:	e006      	b.n	8008d52 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008d44:	46c0      	nop			; (mov r8, r8)
 8008d46:	e004      	b.n	8008d52 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008d48:	46c0      	nop			; (mov r8, r8)
 8008d4a:	e002      	b.n	8008d52 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008d4c:	46c0      	nop			; (mov r8, r8)
 8008d4e:	e000      	b.n	8008d52 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008d50:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8008d52:	231f      	movs	r3, #31
 8008d54:	18fb      	adds	r3, r7, r3
 8008d56:	781b      	ldrb	r3, [r3, #0]
}
 8008d58:	0018      	movs	r0, r3
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	b008      	add	sp, #32
 8008d5e:	bdb0      	pop	{r4, r5, r7, pc}

08008d60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008d60:	b5b0      	push	{r4, r5, r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008d6c:	231f      	movs	r3, #31
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d904      	bls.n	8008d8a <remove_chain+0x2a>
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d301      	bcc.n	8008d8e <remove_chain+0x2e>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e057      	b.n	8008e3e <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d011      	beq.n	8008db8 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008d94:	251f      	movs	r5, #31
 8008d96:	197c      	adds	r4, r7, r5
 8008d98:	2301      	movs	r3, #1
 8008d9a:	425a      	negs	r2, r3
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7ff fedc 	bl	8008b5e <put_fat>
 8008da6:	0003      	movs	r3, r0
 8008da8:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8008daa:	197b      	adds	r3, r7, r5
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <remove_chain+0x58>
 8008db2:	197b      	adds	r3, r7, r5
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	e042      	b.n	8008e3e <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7ff fe22 	bl	8008a08 <get_fat>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d035      	beq.n	8008e3a <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <remove_chain+0x78>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e032      	b.n	8008e3e <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <remove_chain+0x82>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e02d      	b.n	8008e3e <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008de2:	251f      	movs	r5, #31
 8008de4:	197c      	adds	r4, r7, r5
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2200      	movs	r2, #0
 8008dec:	0018      	movs	r0, r3
 8008dee:	f7ff feb6 	bl	8008b5e <put_fat>
 8008df2:	0003      	movs	r3, r0
 8008df4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8008df6:	197b      	adds	r3, r7, r5
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <remove_chain+0xa4>
 8008dfe:	197b      	adds	r3, r7, r5
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	e01c      	b.n	8008e3e <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	695a      	ldr	r2, [r3, #20]
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	3b02      	subs	r3, #2
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d20b      	bcs.n	8008e2a <remove_chain+0xca>
			fs->free_clst++;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	791b      	ldrb	r3, [r3, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	4313      	orrs	r3, r2
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d3bf      	bcc.n	8008db8 <remove_chain+0x58>
 8008e38:	e000      	b.n	8008e3c <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8008e3a:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	0018      	movs	r0, r3
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b008      	add	sp, #32
 8008e44:	bdb0      	pop	{r4, r5, r7, pc}

08008e46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008e46:	b5b0      	push	{r4, r5, r7, lr}
 8008e48:	b088      	sub	sp, #32
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10d      	bne.n	8008e78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <create_chain+0x2c>
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d31d      	bcc.n	8008eae <create_chain+0x68>
 8008e72:	2301      	movs	r3, #1
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	e01a      	b.n	8008eae <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	0011      	movs	r1, r2
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f7ff fdc2 	bl	8008a08 <get_fat>
 8008e84:	0003      	movs	r3, r0
 8008e86:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d801      	bhi.n	8008e92 <create_chain+0x4c>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e07b      	b.n	8008f8a <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	d101      	bne.n	8008e9c <create_chain+0x56>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e076      	b.n	8008f8a <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d201      	bcs.n	8008eaa <create_chain+0x64>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	e06f      	b.n	8008f8a <create_chain+0x144>
		scl = clst;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d307      	bcc.n	8008ed2 <create_chain+0x8c>
				ncl = 2;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d901      	bls.n	8008ed2 <create_chain+0x8c>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e05b      	b.n	8008f8a <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7ff fd95 	bl	8008a08 <get_fat>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00d      	beq.n	8008f04 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d002      	beq.n	8008ef4 <create_chain+0xae>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <create_chain+0xb2>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e048      	b.n	8008f8a <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d1d8      	bne.n	8008eb2 <create_chain+0x6c>
 8008f00:	2300      	movs	r3, #0
 8008f02:	e042      	b.n	8008f8a <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8008f04:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008f06:	2517      	movs	r5, #23
 8008f08:	197c      	adds	r4, r7, r5
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	425a      	negs	r2, r3
 8008f0e:	69f9      	ldr	r1, [r7, #28]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	0018      	movs	r0, r3
 8008f14:	f7ff fe23 	bl	8008b5e <put_fat>
 8008f18:	0003      	movs	r3, r0
 8008f1a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8008f1c:	197b      	adds	r3, r7, r5
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <create_chain+0xf6>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d008      	beq.n	8008f3c <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008f2a:	197c      	adds	r4, r7, r5
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7ff fe13 	bl	8008b5e <put_fat>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008f3c:	2317      	movs	r3, #23
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d116      	bne.n	8008f74 <create_chain+0x12e>
		fs->last_clst = ncl;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	3b02      	subs	r3, #2
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d804      	bhi.n	8008f64 <create_chain+0x11e>
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	1e5a      	subs	r2, r3, #1
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	791b      	ldrb	r3, [r3, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	711a      	strb	r2, [r3, #4]
 8008f72:	e009      	b.n	8008f88 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008f74:	2317      	movs	r3, #23
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d102      	bne.n	8008f84 <create_chain+0x13e>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	425b      	negs	r3, r3
 8008f82:	e000      	b.n	8008f86 <create_chain+0x140>
 8008f84:	2301      	movs	r3, #1
 8008f86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008f88:	69fb      	ldr	r3, [r7, #28]
}
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	b008      	add	sp, #32
 8008f90:	bdb0      	pop	{r4, r5, r7, pc}

08008f92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	0a5a      	lsrs	r2, r3, #9
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	895b      	ldrh	r3, [r3, #10]
 8008fb2:	0019      	movs	r1, r3
 8008fb4:	0010      	movs	r0, r2
 8008fb6:	f7f7 f8b9 	bl	800012c <__udivsi3>
 8008fba:	0003      	movs	r3, r0
 8008fbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	613a      	str	r2, [r7, #16]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <clmt_clust+0x40>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e010      	b.n	8008ff4 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d307      	bcc.n	8008fea <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fe8:	e7e9      	b.n	8008fbe <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8008fea:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	18d3      	adds	r3, r2, r3
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b006      	add	sp, #24
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	2380      	movs	r3, #128	; 0x80
 8009010:	039b      	lsls	r3, r3, #14
 8009012:	429a      	cmp	r2, r3
 8009014:	d203      	bcs.n	800901e <dir_sdi+0x22>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	221f      	movs	r2, #31
 800901a:	4013      	ands	r3, r2
 800901c:	d001      	beq.n	8009022 <dir_sdi+0x26>
		return FR_INT_ERR;
 800901e:	2302      	movs	r3, #2
 8009020:	e066      	b.n	80090f0 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d106      	bne.n	8009042 <dir_sdi+0x46>
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d902      	bls.n	8009042 <dir_sdi+0x46>
		clst = fs->dirbase;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10c      	bne.n	8009062 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	8912      	ldrh	r2, [r2, #8]
 8009050:	4293      	cmp	r3, r2
 8009052:	d301      	bcc.n	8009058 <dir_sdi+0x5c>
 8009054:	2302      	movs	r3, #2
 8009056:	e04b      	b.n	80090f0 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	61da      	str	r2, [r3, #28]
 8009060:	e02c      	b.n	80090bc <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	895b      	ldrh	r3, [r3, #10]
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800906a:	e01a      	b.n	80090a2 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	0011      	movs	r1, r2
 8009072:	0018      	movs	r0, r3
 8009074:	f7ff fcc8 	bl	8008a08 <get_fat>
 8009078:	0003      	movs	r3, r0
 800907a:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	3301      	adds	r3, #1
 8009080:	d101      	bne.n	8009086 <dir_sdi+0x8a>
 8009082:	2301      	movs	r3, #1
 8009084:	e034      	b.n	80090f0 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d904      	bls.n	8009096 <dir_sdi+0x9a>
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	429a      	cmp	r2, r3
 8009094:	d301      	bcc.n	800909a <dir_sdi+0x9e>
 8009096:	2302      	movs	r3, #2
 8009098:	e02a      	b.n	80090f0 <dir_sdi+0xf4>
			ofs -= csz;
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d2e0      	bcs.n	800906c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	0011      	movs	r1, r2
 80090b0:	0018      	movs	r0, r3
 80090b2:	f7ff fc8d 	bl	80089d0 <clust2sect>
 80090b6:	0002      	movs	r2, r0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <dir_sdi+0xd2>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e010      	b.n	80090f0 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	0a5b      	lsrs	r3, r3, #9
 80090d6:	18d2      	adds	r2, r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3334      	adds	r3, #52	; 0x34
 80090e0:	001a      	movs	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	05db      	lsls	r3, r3, #23
 80090e6:	0ddb      	lsrs	r3, r3, #23
 80090e8:	18d2      	adds	r2, r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	0018      	movs	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b006      	add	sp, #24
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	3320      	adds	r3, #32
 800910e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <dir_next+0x2a>
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	2380      	movs	r3, #128	; 0x80
 800911c:	039b      	lsls	r3, r3, #14
 800911e:	429a      	cmp	r2, r3
 8009120:	d301      	bcc.n	8009126 <dir_next+0x2e>
 8009122:	2304      	movs	r3, #4
 8009124:	e0ad      	b.n	8009282 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	05db      	lsls	r3, r3, #23
 800912a:	0ddb      	lsrs	r3, r3, #23
 800912c:	d000      	beq.n	8009130 <dir_next+0x38>
 800912e:	e09b      	b.n	8009268 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10b      	bne.n	800915a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	8912      	ldrh	r2, [r2, #8]
 800914a:	4293      	cmp	r3, r2
 800914c:	d200      	bcs.n	8009150 <dir_next+0x58>
 800914e:	e08b      	b.n	8009268 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	61da      	str	r2, [r3, #28]
 8009156:	2304      	movs	r3, #4
 8009158:	e093      	b.n	8009282 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	0a5b      	lsrs	r3, r3, #9
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	8952      	ldrh	r2, [r2, #10]
 8009162:	3a01      	subs	r2, #1
 8009164:	4013      	ands	r3, r2
 8009166:	d000      	beq.n	800916a <dir_next+0x72>
 8009168:	e07e      	b.n	8009268 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	0019      	movs	r1, r3
 8009172:	0010      	movs	r0, r2
 8009174:	f7ff fc48 	bl	8008a08 <get_fat>
 8009178:	0003      	movs	r3, r0
 800917a:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d801      	bhi.n	8009186 <dir_next+0x8e>
 8009182:	2302      	movs	r3, #2
 8009184:	e07d      	b.n	8009282 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	3301      	adds	r3, #1
 800918a:	d101      	bne.n	8009190 <dir_next+0x98>
 800918c:	2301      	movs	r3, #1
 800918e:	e078      	b.n	8009282 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	429a      	cmp	r2, r3
 8009198:	d35a      	bcc.n	8009250 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	61da      	str	r2, [r3, #28]
 80091a6:	2304      	movs	r3, #4
 80091a8:	e06b      	b.n	8009282 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	0019      	movs	r1, r3
 80091b2:	0010      	movs	r0, r2
 80091b4:	f7ff fe47 	bl	8008e46 <create_chain>
 80091b8:	0003      	movs	r3, r0
 80091ba:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <dir_next+0xce>
 80091c2:	2307      	movs	r3, #7
 80091c4:	e05d      	b.n	8009282 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <dir_next+0xd8>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e058      	b.n	8009282 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	3301      	adds	r3, #1
 80091d4:	d101      	bne.n	80091da <dir_next+0xe2>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e053      	b.n	8009282 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	0018      	movs	r0, r3
 80091de:	f7ff fafd 	bl	80087dc <sync_window>
 80091e2:	1e03      	subs	r3, r0, #0
 80091e4:	d001      	beq.n	80091ea <dir_next+0xf2>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e04b      	b.n	8009282 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3334      	adds	r3, #52	; 0x34
 80091ee:	2280      	movs	r2, #128	; 0x80
 80091f0:	0092      	lsls	r2, r2, #2
 80091f2:	2100      	movs	r1, #0
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff f930 	bl	800845a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091fa:	2300      	movs	r3, #0
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0011      	movs	r1, r2
 8009204:	0018      	movs	r0, r3
 8009206:	f7ff fbe3 	bl	80089d0 <clust2sect>
 800920a:	0002      	movs	r2, r0
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	631a      	str	r2, [r3, #48]	; 0x30
 8009210:	e012      	b.n	8009238 <dir_next+0x140>
						fs->wflag = 1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	0018      	movs	r0, r3
 800921c:	f7ff fade 	bl	80087dc <sync_window>
 8009220:	1e03      	subs	r3, r0, #0
 8009222:	d001      	beq.n	8009228 <dir_next+0x130>
 8009224:	2301      	movs	r3, #1
 8009226:	e02c      	b.n	8009282 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	3301      	adds	r3, #1
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	631a      	str	r2, [r3, #48]	; 0x30
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	895b      	ldrh	r3, [r3, #10]
 800923c:	001a      	movs	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	4293      	cmp	r3, r2
 8009242:	d3e6      	bcc.n	8009212 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	0011      	movs	r1, r2
 800925c:	0018      	movs	r0, r3
 800925e:	f7ff fbb7 	bl	80089d0 <clust2sect>
 8009262:	0002      	movs	r2, r0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3334      	adds	r3, #52	; 0x34
 8009272:	001a      	movs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	05db      	lsls	r3, r3, #23
 8009278:	0ddb      	lsrs	r3, r3, #23
 800927a:	18d2      	adds	r2, r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	0018      	movs	r0, r3
 8009284:	46bd      	mov	sp, r7
 8009286:	b006      	add	sp, #24
 8009288:	bd80      	pop	{r7, pc}

0800928a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800928a:	b5b0      	push	{r4, r5, r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800929a:	2517      	movs	r5, #23
 800929c:	197c      	adds	r4, r7, r5
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2100      	movs	r1, #0
 80092a2:	0018      	movs	r0, r3
 80092a4:	f7ff feaa 	bl	8008ffc <dir_sdi>
 80092a8:	0003      	movs	r3, r0
 80092aa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80092ac:	197b      	adds	r3, r7, r5
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d133      	bne.n	800931c <dir_alloc+0x92>
		n = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69da      	ldr	r2, [r3, #28]
 80092bc:	2517      	movs	r5, #23
 80092be:	197c      	adds	r4, r7, r5
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f7ff fad1 	bl	800886c <move_window>
 80092ca:	0003      	movs	r3, r0
 80092cc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80092ce:	197b      	adds	r3, r7, r5
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d121      	bne.n	800931a <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2be5      	cmp	r3, #229	; 0xe5
 80092de:	d004      	beq.n	80092ea <dir_alloc+0x60>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	3301      	adds	r3, #1
 80092ee:	613b      	str	r3, [r7, #16]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d102      	bne.n	80092fe <dir_alloc+0x74>
 80092f8:	e010      	b.n	800931c <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80092fa:	2300      	movs	r3, #0
 80092fc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80092fe:	2517      	movs	r5, #23
 8009300:	197c      	adds	r4, r7, r5
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2101      	movs	r1, #1
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff fef6 	bl	80090f8 <dir_next>
 800930c:	0003      	movs	r3, r0
 800930e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009310:	197b      	adds	r3, r7, r5
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0cf      	beq.n	80092b8 <dir_alloc+0x2e>
 8009318:	e000      	b.n	800931c <dir_alloc+0x92>
			if (res != FR_OK) break;
 800931a:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800931c:	2217      	movs	r2, #23
 800931e:	18bb      	adds	r3, r7, r2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b04      	cmp	r3, #4
 8009324:	d102      	bne.n	800932c <dir_alloc+0xa2>
 8009326:	18bb      	adds	r3, r7, r2
 8009328:	2207      	movs	r2, #7
 800932a:	701a      	strb	r2, [r3, #0]
	return res;
 800932c:	2317      	movs	r3, #23
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	781b      	ldrb	r3, [r3, #0]
}
 8009332:	0018      	movs	r0, r3
 8009334:	46bd      	mov	sp, r7
 8009336:	b006      	add	sp, #24
 8009338:	bdb0      	pop	{r4, r5, r7, pc}

0800933a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	331a      	adds	r3, #26
 8009348:	0018      	movs	r0, r3
 800934a:	f7fe ffe3 	bl	8008314 <ld_word>
 800934e:	0003      	movs	r3, r0
 8009350:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d109      	bne.n	800936e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	0018      	movs	r0, r3
 8009360:	f7fe ffd8 	bl	8008314 <ld_word>
 8009364:	0003      	movs	r3, r0
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	b004      	add	sp, #16
 8009376:	bd80      	pop	{r7, pc}

08009378 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	331a      	adds	r3, #26
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	b292      	uxth	r2, r2
 800938c:	0011      	movs	r1, r2
 800938e:	0018      	movs	r0, r3
 8009390:	f7fe fffc 	bl	800838c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d109      	bne.n	80093b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3314      	adds	r3, #20
 80093a0:	001a      	movs	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	0019      	movs	r1, r3
 80093aa:	0010      	movs	r0, r2
 80093ac:	f7fe ffee 	bl	800838c <st_word>
	}
}
 80093b0:	46c0      	nop			; (mov r8, r8)
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b004      	add	sp, #16
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	331a      	adds	r3, #26
 80093c6:	0018      	movs	r0, r3
 80093c8:	f7fe ffa4 	bl	8008314 <ld_word>
 80093cc:	1e03      	subs	r3, r0, #0
 80093ce:	d001      	beq.n	80093d4 <cmp_lfn+0x1c>
 80093d0:	2300      	movs	r3, #0
 80093d2:	e068      	b.n	80094a6 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	001a      	movs	r2, r3
 80093da:	233f      	movs	r3, #63	; 0x3f
 80093dc:	4013      	ands	r3, r2
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	0013      	movs	r3, r2
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	189b      	adds	r3, r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	189b      	adds	r3, r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80093ec:	230e      	movs	r3, #14
 80093ee:	18fb      	adds	r3, r7, r3
 80093f0:	2201      	movs	r2, #1
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	e03d      	b.n	8009476 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80093fa:	4a2d      	ldr	r2, [pc, #180]	; (80094b0 <cmp_lfn+0xf8>)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	18d3      	adds	r3, r2, r3
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	001a      	movs	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	189b      	adds	r3, r3, r2
 8009408:	250c      	movs	r5, #12
 800940a:	197c      	adds	r4, r7, r5
 800940c:	0018      	movs	r0, r3
 800940e:	f7fe ff81 	bl	8008314 <ld_word>
 8009412:	0003      	movs	r3, r0
 8009414:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8009416:	230e      	movs	r3, #14
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01f      	beq.n	8009460 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2bfe      	cmp	r3, #254	; 0xfe
 8009424:	d813      	bhi.n	800944e <cmp_lfn+0x96>
 8009426:	197b      	adds	r3, r7, r5
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	0018      	movs	r0, r3
 800942c:	f001 fe82 	bl	800b134 <ff_wtoupper>
 8009430:	0003      	movs	r3, r0
 8009432:	001c      	movs	r4, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	617a      	str	r2, [r7, #20]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	0018      	movs	r0, r3
 8009444:	f001 fe76 	bl	800b134 <ff_wtoupper>
 8009448:	0003      	movs	r3, r0
 800944a:	429c      	cmp	r4, r3
 800944c:	d001      	beq.n	8009452 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 800944e:	2300      	movs	r3, #0
 8009450:	e029      	b.n	80094a6 <cmp_lfn+0xee>
			}
			wc = uc;
 8009452:	230e      	movs	r3, #14
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	220c      	movs	r2, #12
 8009458:	18ba      	adds	r2, r7, r2
 800945a:	8812      	ldrh	r2, [r2, #0]
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	e007      	b.n	8009470 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009460:	230c      	movs	r3, #12
 8009462:	18fb      	adds	r3, r7, r3
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <cmp_lfn+0xfc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d001      	beq.n	8009470 <cmp_lfn+0xb8>
 800946c:	2300      	movs	r3, #0
 800946e:	e01a      	b.n	80094a6 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3301      	adds	r3, #1
 8009474:	613b      	str	r3, [r7, #16]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b0c      	cmp	r3, #12
 800947a:	d9be      	bls.n	80093fa <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	001a      	movs	r2, r3
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	4013      	ands	r3, r2
 8009486:	d00d      	beq.n	80094a4 <cmp_lfn+0xec>
 8009488:	230e      	movs	r3, #14
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <cmp_lfn+0xec>
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	18d3      	adds	r3, r2, r3
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <cmp_lfn+0xec>
 80094a0:	2300      	movs	r3, #0
 80094a2:	e000      	b.n	80094a6 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 80094a4:	2301      	movs	r3, #1
}
 80094a6:	0018      	movs	r0, r3
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b006      	add	sp, #24
 80094ac:	bdb0      	pop	{r4, r5, r7, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	0800c57c 	.word	0x0800c57c
 80094b4:	0000ffff 	.word	0x0000ffff

080094b8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b089      	sub	sp, #36	; 0x24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	0019      	movs	r1, r3
 80094c4:	1dfb      	adds	r3, r7, #7
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	1dbb      	adds	r3, r7, #6
 80094ca:	1c0a      	adds	r2, r1, #0
 80094cc:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	330d      	adds	r3, #13
 80094d2:	1dba      	adds	r2, r7, #6
 80094d4:	7812      	ldrb	r2, [r2, #0]
 80094d6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	330b      	adds	r3, #11
 80094dc:	220f      	movs	r2, #15
 80094de:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	330c      	adds	r3, #12
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	331a      	adds	r3, #26
 80094ec:	2100      	movs	r1, #0
 80094ee:	0018      	movs	r0, r3
 80094f0:	f7fe ff4c 	bl	800838c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80094f4:	1dfb      	adds	r3, r7, #7
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	1e5a      	subs	r2, r3, #1
 80094fa:	0013      	movs	r3, r2
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	189b      	adds	r3, r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	189b      	adds	r3, r3, r2
 8009504:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009506:	2316      	movs	r3, #22
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	2200      	movs	r2, #0
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	2300      	movs	r3, #0
 8009510:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009512:	2116      	movs	r1, #22
 8009514:	187b      	adds	r3, r7, r1
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	4a21      	ldr	r2, [pc, #132]	; (80095a0 <put_lfn+0xe8>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d008      	beq.n	8009530 <put_lfn+0x78>
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	61fa      	str	r2, [r7, #28]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	18d2      	adds	r2, r2, r3
 800952a:	187b      	adds	r3, r7, r1
 800952c:	8812      	ldrh	r2, [r2, #0]
 800952e:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009530:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <put_lfn+0xec>)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	001a      	movs	r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	189a      	adds	r2, r3, r2
 800953e:	2416      	movs	r4, #22
 8009540:	193b      	adds	r3, r7, r4
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	0019      	movs	r1, r3
 8009546:	0010      	movs	r0, r2
 8009548:	f7fe ff20 	bl	800838c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800954c:	0022      	movs	r2, r4
 800954e:	18bb      	adds	r3, r7, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <put_lfn+0xa6>
 8009556:	18bb      	adds	r3, r7, r2
 8009558:	2201      	movs	r2, #1
 800955a:	4252      	negs	r2, r2
 800955c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	3301      	adds	r3, #1
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b0c      	cmp	r3, #12
 8009568:	d9d3      	bls.n	8009512 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800956a:	2316      	movs	r3, #22
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	4a0b      	ldr	r2, [pc, #44]	; (80095a0 <put_lfn+0xe8>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d006      	beq.n	8009584 <put_lfn+0xcc>
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	18d3      	adds	r3, r2, r3
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d105      	bne.n	8009590 <put_lfn+0xd8>
 8009584:	1dfb      	adds	r3, r7, #7
 8009586:	1dfa      	adds	r2, r7, #7
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	2140      	movs	r1, #64	; 0x40
 800958c:	430a      	orrs	r2, r1
 800958e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	1dfa      	adds	r2, r7, #7
 8009594:	7812      	ldrb	r2, [r2, #0]
 8009596:	701a      	strb	r2, [r3, #0]
}
 8009598:	46c0      	nop			; (mov r8, r8)
 800959a:	46bd      	mov	sp, r7
 800959c:	b009      	add	sp, #36	; 0x24
 800959e:	bd90      	pop	{r4, r7, pc}
 80095a0:	0000ffff 	.word	0x0000ffff
 80095a4:	0800c57c 	.word	0x0800c57c

080095a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08c      	sub	sp, #48	; 0x30
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	220b      	movs	r2, #11
 80095bc:	0018      	movs	r0, r3
 80095be:	f7fe ff2d 	bl	800841c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b05      	cmp	r3, #5
 80095c6:	d92f      	bls.n	8009628 <gen_numname+0x80>
		sr = seq;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80095cc:	e026      	b.n	800961c <gen_numname+0x74>
			wc = *lfn++;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	1c9a      	adds	r2, r3, #2
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	2222      	movs	r2, #34	; 0x22
 80095d6:	18ba      	adds	r2, r7, r2
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80095dc:	2300      	movs	r3, #0
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e0:	e019      	b.n	8009616 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	005a      	lsls	r2, r3, #1
 80095e6:	2022      	movs	r0, #34	; 0x22
 80095e8:	183b      	adds	r3, r7, r0
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	2101      	movs	r1, #1
 80095ee:	400b      	ands	r3, r1
 80095f0:	18d3      	adds	r3, r2, r3
 80095f2:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80095f4:	183b      	adds	r3, r7, r0
 80095f6:	183a      	adds	r2, r7, r0
 80095f8:	8812      	ldrh	r2, [r2, #0]
 80095fa:	0852      	lsrs	r2, r2, #1
 80095fc:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	025b      	lsls	r3, r3, #9
 8009604:	4013      	ands	r3, r2
 8009606:	d003      	beq.n	8009610 <gen_numname+0x68>
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	4a30      	ldr	r2, [pc, #192]	; (80096cc <gen_numname+0x124>)
 800960c:	4053      	eors	r3, r2
 800960e:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	3301      	adds	r3, #1
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	2b0f      	cmp	r3, #15
 800961a:	d9e2      	bls.n	80095e2 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1d4      	bne.n	80095ce <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009628:	2307      	movs	r3, #7
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	220f      	movs	r2, #15
 8009632:	4013      	ands	r3, r2
 8009634:	b2da      	uxtb	r2, r3
 8009636:	212f      	movs	r1, #47	; 0x2f
 8009638:	187b      	adds	r3, r7, r1
 800963a:	3230      	adds	r2, #48	; 0x30
 800963c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 800963e:	187b      	adds	r3, r7, r1
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b39      	cmp	r3, #57	; 0x39
 8009644:	d904      	bls.n	8009650 <gen_numname+0xa8>
 8009646:	187b      	adds	r3, r7, r1
 8009648:	187a      	adds	r2, r7, r1
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	3207      	adds	r2, #7
 800964e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	1e5a      	subs	r2, r3, #1
 8009654:	62ba      	str	r2, [r7, #40]	; 0x28
 8009656:	2014      	movs	r0, #20
 8009658:	183a      	adds	r2, r7, r0
 800965a:	212f      	movs	r1, #47	; 0x2f
 800965c:	1879      	adds	r1, r7, r1
 800965e:	7809      	ldrb	r1, [r1, #0]
 8009660:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	091b      	lsrs	r3, r3, #4
 8009666:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1de      	bne.n	800962c <gen_numname+0x84>
	ns[i] = '~';
 800966e:	183a      	adds	r2, r7, r0
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	18d3      	adds	r3, r2, r3
 8009674:	227e      	movs	r2, #126	; 0x7e
 8009676:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
 800967c:	e002      	b.n	8009684 <gen_numname+0xdc>
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	3301      	adds	r3, #1
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	429a      	cmp	r2, r3
 800968a:	d205      	bcs.n	8009698 <gen_numname+0xf0>
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	18d3      	adds	r3, r2, r3
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b20      	cmp	r3, #32
 8009696:	d1f2      	bne.n	800967e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	2b07      	cmp	r3, #7
 800969c:	d806      	bhi.n	80096ac <gen_numname+0x104>
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80096a4:	2214      	movs	r2, #20
 80096a6:	18ba      	adds	r2, r7, r2
 80096a8:	5cd1      	ldrb	r1, [r2, r3]
 80096aa:	e000      	b.n	80096ae <gen_numname+0x106>
 80096ac:	2120      	movs	r1, #32
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	627a      	str	r2, [r7, #36]	; 0x24
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	18d3      	adds	r3, r2, r3
 80096b8:	1c0a      	adds	r2, r1, #0
 80096ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	2b07      	cmp	r3, #7
 80096c0:	d9ea      	bls.n	8009698 <gen_numname+0xf0>
}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	46c0      	nop			; (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b00c      	add	sp, #48	; 0x30
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	00011021 	.word	0x00011021

080096d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80096d8:	230f      	movs	r3, #15
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80096e0:	230b      	movs	r3, #11
 80096e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80096e4:	200f      	movs	r0, #15
 80096e6:	183b      	adds	r3, r7, r0
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	0852      	lsrs	r2, r2, #1
 80096ee:	01db      	lsls	r3, r3, #7
 80096f0:	4313      	orrs	r3, r2
 80096f2:	b2d9      	uxtb	r1, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	183b      	adds	r3, r7, r0
 80096fe:	188a      	adds	r2, r1, r2
 8009700:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3b01      	subs	r3, #1
 8009706:	60bb      	str	r3, [r7, #8]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1ea      	bne.n	80096e4 <sum_sfn+0x14>
	return sum;
 800970e:	183b      	adds	r3, r7, r0
 8009710:	781b      	ldrb	r3, [r3, #0]
}
 8009712:	0018      	movs	r0, r3
 8009714:	46bd      	mov	sp, r7
 8009716:	b004      	add	sp, #16
 8009718:	bd80      	pop	{r7, pc}

0800971a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800971a:	b5b0      	push	{r4, r5, r7, lr}
 800971c:	b086      	sub	sp, #24
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009728:	2517      	movs	r5, #23
 800972a:	197c      	adds	r4, r7, r5
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2100      	movs	r1, #0
 8009730:	0018      	movs	r0, r3
 8009732:	f7ff fc63 	bl	8008ffc <dir_sdi>
 8009736:	0003      	movs	r3, r0
 8009738:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800973a:	197b      	adds	r3, r7, r5
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <dir_find+0x2e>
 8009742:	197b      	adds	r3, r7, r5
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	e0df      	b.n	8009908 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009748:	2114      	movs	r1, #20
 800974a:	187b      	adds	r3, r7, r1
 800974c:	22ff      	movs	r2, #255	; 0xff
 800974e:	701a      	strb	r2, [r3, #0]
 8009750:	2315      	movs	r3, #21
 8009752:	18fb      	adds	r3, r7, r3
 8009754:	187a      	adds	r2, r7, r1
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	4252      	negs	r2, r2
 8009760:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	2517      	movs	r5, #23
 8009768:	197c      	adds	r4, r7, r5
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	0011      	movs	r1, r2
 800976e:	0018      	movs	r0, r3
 8009770:	f7ff f87c 	bl	800886c <move_window>
 8009774:	0003      	movs	r3, r0
 8009776:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8009778:	0029      	movs	r1, r5
 800977a:	187b      	adds	r3, r7, r1
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d000      	beq.n	8009784 <dir_find+0x6a>
 8009782:	e0b9      	b.n	80098f8 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a1a      	ldr	r2, [r3, #32]
 8009788:	2016      	movs	r0, #22
 800978a:	183b      	adds	r3, r7, r0
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009790:	183b      	adds	r3, r7, r0
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <dir_find+0x86>
 8009798:	187b      	adds	r3, r7, r1
 800979a:	2204      	movs	r2, #4
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e0b0      	b.n	8009902 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	330b      	adds	r3, #11
 80097a6:	781a      	ldrb	r2, [r3, #0]
 80097a8:	200f      	movs	r0, #15
 80097aa:	183b      	adds	r3, r7, r0
 80097ac:	213f      	movs	r1, #63	; 0x3f
 80097ae:	400a      	ands	r2, r1
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	0001      	movs	r1, r0
 80097b6:	187a      	adds	r2, r7, r1
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80097bc:	2316      	movs	r3, #22
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2be5      	cmp	r3, #229	; 0xe5
 80097c4:	d008      	beq.n	80097d8 <dir_find+0xbe>
 80097c6:	187b      	adds	r3, r7, r1
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4013      	ands	r3, r2
 80097ce:	d00c      	beq.n	80097ea <dir_find+0xd0>
 80097d0:	187b      	adds	r3, r7, r1
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b0f      	cmp	r3, #15
 80097d6:	d008      	beq.n	80097ea <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80097d8:	2315      	movs	r3, #21
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	701a      	strb	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	4252      	negs	r2, r2
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
 80097e8:	e077      	b.n	80098da <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80097ea:	230f      	movs	r3, #15
 80097ec:	18fb      	adds	r3, r7, r3
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b0f      	cmp	r3, #15
 80097f2:	d148      	bne.n	8009886 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	222f      	movs	r2, #47	; 0x2f
 80097f8:	5c9b      	ldrb	r3, [r3, r2]
 80097fa:	001a      	movs	r2, r3
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	4013      	ands	r3, r2
 8009800:	d000      	beq.n	8009804 <dir_find+0xea>
 8009802:	e06a      	b.n	80098da <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009804:	2116      	movs	r1, #22
 8009806:	187b      	adds	r3, r7, r1
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	4013      	ands	r3, r2
 800980e:	d015      	beq.n	800983c <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1a      	ldr	r2, [r3, #32]
 8009814:	2314      	movs	r3, #20
 8009816:	18fb      	adds	r3, r7, r3
 8009818:	7b52      	ldrb	r2, [r2, #13]
 800981a:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800981c:	187b      	adds	r3, r7, r1
 800981e:	0008      	movs	r0, r1
 8009820:	187a      	adds	r2, r7, r1
 8009822:	7812      	ldrb	r2, [r2, #0]
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	438a      	bics	r2, r1
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	2315      	movs	r3, #21
 800982c:	18fb      	adds	r3, r7, r3
 800982e:	183a      	adds	r2, r7, r0
 8009830:	7812      	ldrb	r2, [r2, #0]
 8009832:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695a      	ldr	r2, [r3, #20]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800983c:	2316      	movs	r3, #22
 800983e:	18fa      	adds	r2, r7, r3
 8009840:	2415      	movs	r4, #21
 8009842:	193b      	adds	r3, r7, r4
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d117      	bne.n	800987c <dir_find+0x162>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	330d      	adds	r3, #13
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2214      	movs	r2, #20
 8009856:	18ba      	adds	r2, r7, r2
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	429a      	cmp	r2, r3
 800985c:	d10e      	bne.n	800987c <dir_find+0x162>
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	0019      	movs	r1, r3
 8009868:	0010      	movs	r0, r2
 800986a:	f7ff fda5 	bl	80093b8 <cmp_lfn>
 800986e:	1e03      	subs	r3, r0, #0
 8009870:	d004      	beq.n	800987c <dir_find+0x162>
 8009872:	193b      	adds	r3, r7, r4
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	b2da      	uxtb	r2, r3
 800987a:	e000      	b.n	800987e <dir_find+0x164>
 800987c:	22ff      	movs	r2, #255	; 0xff
 800987e:	2315      	movs	r3, #21
 8009880:	18fb      	adds	r3, r7, r3
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e029      	b.n	80098da <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009886:	2315      	movs	r3, #21
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <dir_find+0x18e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	0018      	movs	r0, r3
 8009896:	f7ff ff1b 	bl	80096d0 <sum_sfn>
 800989a:	0003      	movs	r3, r0
 800989c:	001a      	movs	r2, r3
 800989e:	2314      	movs	r3, #20
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d029      	beq.n	80098fc <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	222f      	movs	r2, #47	; 0x2f
 80098ac:	5c9b      	ldrb	r3, [r3, r2]
 80098ae:	001a      	movs	r2, r3
 80098b0:	2301      	movs	r3, #1
 80098b2:	4013      	ands	r3, r2
 80098b4:	d109      	bne.n	80098ca <dir_find+0x1b0>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a18      	ldr	r0, [r3, #32]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3324      	adds	r3, #36	; 0x24
 80098be:	220b      	movs	r2, #11
 80098c0:	0019      	movs	r1, r3
 80098c2:	f7fe fde3 	bl	800848c <mem_cmp>
 80098c6:	1e03      	subs	r3, r0, #0
 80098c8:	d01a      	beq.n	8009900 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80098ca:	2315      	movs	r3, #21
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	22ff      	movs	r2, #255	; 0xff
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	4252      	negs	r2, r2
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098da:	2517      	movs	r5, #23
 80098dc:	197c      	adds	r4, r7, r5
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	0018      	movs	r0, r3
 80098e4:	f7ff fc08 	bl	80090f8 <dir_next>
 80098e8:	0003      	movs	r3, r0
 80098ea:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80098ec:	197b      	adds	r3, r7, r5
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d100      	bne.n	80098f6 <dir_find+0x1dc>
 80098f4:	e735      	b.n	8009762 <dir_find+0x48>
 80098f6:	e004      	b.n	8009902 <dir_find+0x1e8>
		if (res != FR_OK) break;
 80098f8:	46c0      	nop			; (mov r8, r8)
 80098fa:	e002      	b.n	8009902 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80098fc:	46c0      	nop			; (mov r8, r8)
 80098fe:	e000      	b.n	8009902 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009900:	46c0      	nop			; (mov r8, r8)

	return res;
 8009902:	2317      	movs	r3, #23
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	781b      	ldrb	r3, [r3, #0]
}
 8009908:	0018      	movs	r0, r3
 800990a:	46bd      	mov	sp, r7
 800990c:	b006      	add	sp, #24
 800990e:	bdb0      	pop	{r4, r5, r7, pc}

08009910 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009910:	b5b0      	push	{r4, r5, r7, lr}
 8009912:	b08c      	sub	sp, #48	; 0x30
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	222f      	movs	r2, #47	; 0x2f
 8009922:	5c9b      	ldrb	r3, [r3, r2]
 8009924:	001a      	movs	r2, r3
 8009926:	23a0      	movs	r3, #160	; 0xa0
 8009928:	4013      	ands	r3, r2
 800992a:	d001      	beq.n	8009930 <dir_register+0x20>
 800992c:	2306      	movs	r3, #6
 800992e:	e0fb      	b.n	8009b28 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009930:	2300      	movs	r3, #0
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
 8009934:	e002      	b.n	800993c <dir_register+0x2c>
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	3301      	adds	r3, #1
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	18d3      	adds	r3, r2, r3
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f4      	bne.n	8009936 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3324      	adds	r3, #36	; 0x24
 8009950:	0019      	movs	r1, r3
 8009952:	240c      	movs	r4, #12
 8009954:	193b      	adds	r3, r7, r4
 8009956:	220c      	movs	r2, #12
 8009958:	0018      	movs	r0, r3
 800995a:	f7fe fd5f 	bl	800841c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800995e:	193b      	adds	r3, r7, r4
 8009960:	7adb      	ldrb	r3, [r3, #11]
 8009962:	001a      	movs	r2, r3
 8009964:	2301      	movs	r3, #1
 8009966:	4013      	ands	r3, r2
 8009968:	d037      	beq.n	80099da <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	222f      	movs	r2, #47	; 0x2f
 800996e:	2140      	movs	r1, #64	; 0x40
 8009970:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8009972:	2301      	movs	r3, #1
 8009974:	62bb      	str	r3, [r7, #40]	; 0x28
 8009976:	e018      	b.n	80099aa <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3324      	adds	r3, #36	; 0x24
 800997c:	0018      	movs	r0, r3
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	210c      	movs	r1, #12
 8009986:	1879      	adds	r1, r7, r1
 8009988:	f7ff fe0e 	bl	80095a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800998c:	252f      	movs	r5, #47	; 0x2f
 800998e:	197c      	adds	r4, r7, r5
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	0018      	movs	r0, r3
 8009994:	f7ff fec1 	bl	800971a <dir_find>
 8009998:	0003      	movs	r3, r0
 800999a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800999c:	197b      	adds	r3, r7, r5
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	3301      	adds	r3, #1
 80099a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	2b63      	cmp	r3, #99	; 0x63
 80099ae:	d9e3      	bls.n	8009978 <dir_register+0x68>
 80099b0:	e000      	b.n	80099b4 <dir_register+0xa4>
			if (res != FR_OK) break;
 80099b2:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	2b64      	cmp	r3, #100	; 0x64
 80099b8:	d101      	bne.n	80099be <dir_register+0xae>
 80099ba:	2307      	movs	r3, #7
 80099bc:	e0b4      	b.n	8009b28 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80099be:	222f      	movs	r2, #47	; 0x2f
 80099c0:	18bb      	adds	r3, r7, r2
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d002      	beq.n	80099ce <dir_register+0xbe>
 80099c8:	18bb      	adds	r3, r7, r2
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	e0ac      	b.n	8009b28 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80099ce:	230c      	movs	r3, #12
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	7ad9      	ldrb	r1, [r3, #11]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	222f      	movs	r2, #47	; 0x2f
 80099d8:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80099da:	230c      	movs	r3, #12
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	7adb      	ldrb	r3, [r3, #11]
 80099e0:	001a      	movs	r2, r3
 80099e2:	2302      	movs	r3, #2
 80099e4:	4013      	ands	r3, r2
 80099e6:	d008      	beq.n	80099fa <dir_register+0xea>
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	330c      	adds	r3, #12
 80099ec:	210d      	movs	r1, #13
 80099ee:	0018      	movs	r0, r3
 80099f0:	f7f6 fb9c 	bl	800012c <__udivsi3>
 80099f4:	0003      	movs	r3, r0
 80099f6:	3301      	adds	r3, #1
 80099f8:	e000      	b.n	80099fc <dir_register+0xec>
 80099fa:	2301      	movs	r3, #1
 80099fc:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80099fe:	252f      	movs	r5, #47	; 0x2f
 8009a00:	197c      	adds	r4, r7, r5
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	0011      	movs	r1, r2
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f7ff fc3e 	bl	800928a <dir_alloc>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009a12:	0029      	movs	r1, r5
 8009a14:	187b      	adds	r3, r7, r1
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d153      	bne.n	8009ac4 <dir_register+0x1b4>
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	623b      	str	r3, [r7, #32]
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d04d      	beq.n	8009ac4 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	015b      	lsls	r3, r3, #5
 8009a30:	1ad2      	subs	r2, r2, r3
 8009a32:	000d      	movs	r5, r1
 8009a34:	187c      	adds	r4, r7, r1
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	0011      	movs	r1, r2
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f7ff fade 	bl	8008ffc <dir_sdi>
 8009a40:	0003      	movs	r3, r0
 8009a42:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009a44:	197b      	adds	r3, r7, r5
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d13b      	bne.n	8009ac4 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3324      	adds	r3, #36	; 0x24
 8009a50:	221b      	movs	r2, #27
 8009a52:	18bc      	adds	r4, r7, r2
 8009a54:	0018      	movs	r0, r3
 8009a56:	f7ff fe3b 	bl	80096d0 <sum_sfn>
 8009a5a:	0003      	movs	r3, r0
 8009a5c:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69da      	ldr	r2, [r3, #28]
 8009a62:	252f      	movs	r5, #47	; 0x2f
 8009a64:	197c      	adds	r4, r7, r5
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	0011      	movs	r1, r2
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7fe fefe 	bl	800886c <move_window>
 8009a70:	0003      	movs	r3, r0
 8009a72:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8009a74:	002c      	movs	r4, r5
 8009a76:	193b      	adds	r3, r7, r4
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d121      	bne.n	8009ac2 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	68d8      	ldr	r0, [r3, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a19      	ldr	r1, [r3, #32]
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	231b      	movs	r3, #27
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f7ff fd12 	bl	80094b8 <put_lfn>
				fs->wflag = 1;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	2201      	movs	r2, #1
 8009a98:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009a9a:	0025      	movs	r5, r4
 8009a9c:	193c      	adds	r4, r7, r4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f7ff fb28 	bl	80090f8 <dir_next>
 8009aa8:	0003      	movs	r3, r0
 8009aaa:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8009aac:	197b      	adds	r3, r7, r5
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d107      	bne.n	8009ac4 <dir_register+0x1b4>
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1ce      	bne.n	8009a5e <dir_register+0x14e>
 8009ac0:	e000      	b.n	8009ac4 <dir_register+0x1b4>
				if (res != FR_OK) break;
 8009ac2:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ac4:	252f      	movs	r5, #47	; 0x2f
 8009ac6:	197b      	adds	r3, r7, r5
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d129      	bne.n	8009b22 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	69da      	ldr	r2, [r3, #28]
 8009ad2:	197c      	adds	r4, r7, r5
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	0011      	movs	r1, r2
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7fe fec7 	bl	800886c <move_window>
 8009ade:	0003      	movs	r3, r0
 8009ae0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009ae2:	197b      	adds	r3, r7, r5
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d11b      	bne.n	8009b22 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	2220      	movs	r2, #32
 8009af0:	2100      	movs	r1, #0
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7fe fcb1 	bl	800845a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a18      	ldr	r0, [r3, #32]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3324      	adds	r3, #36	; 0x24
 8009b00:	220b      	movs	r2, #11
 8009b02:	0019      	movs	r1, r3
 8009b04:	f7fe fc8a 	bl	800841c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	222f      	movs	r2, #47	; 0x2f
 8009b0c:	5c9a      	ldrb	r2, [r3, r2]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	330c      	adds	r3, #12
 8009b14:	2118      	movs	r1, #24
 8009b16:	400a      	ands	r2, r1
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b22:	232f      	movs	r3, #47	; 0x2f
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	781b      	ldrb	r3, [r3, #0]
}
 8009b28:	0018      	movs	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	b00c      	add	sp, #48	; 0x30
 8009b2e:	bdb0      	pop	{r4, r5, r7, pc}

08009b30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b08a      	sub	sp, #40	; 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	61ba      	str	r2, [r7, #24]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	18d3      	adds	r3, r2, r3
 8009b5a:	781a      	ldrb	r2, [r3, #0]
 8009b5c:	2124      	movs	r1, #36	; 0x24
 8009b5e:	187b      	adds	r3, r7, r1
 8009b60:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8009b62:	000a      	movs	r2, r1
 8009b64:	18bb      	adds	r3, r7, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	2b1f      	cmp	r3, #31
 8009b6a:	d94e      	bls.n	8009c0a <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009b6c:	18bb      	adds	r3, r7, r2
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	2b2f      	cmp	r3, #47	; 0x2f
 8009b72:	d007      	beq.n	8009b84 <create_name+0x54>
 8009b74:	18bb      	adds	r3, r7, r2
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	2b5c      	cmp	r3, #92	; 0x5c
 8009b7a:	d110      	bne.n	8009b9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b7c:	e002      	b.n	8009b84 <create_name+0x54>
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	3301      	adds	r3, #1
 8009b82:	61bb      	str	r3, [r7, #24]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	18d3      	adds	r3, r2, r3
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8009b8e:	d0f6      	beq.n	8009b7e <create_name+0x4e>
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	18d3      	adds	r3, r2, r3
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b5c      	cmp	r3, #92	; 0x5c
 8009b9a:	d0f0      	beq.n	8009b7e <create_name+0x4e>
			break;
 8009b9c:	e036      	b.n	8009c0c <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2bfe      	cmp	r3, #254	; 0xfe
 8009ba2:	d901      	bls.n	8009ba8 <create_name+0x78>
 8009ba4:	2306      	movs	r3, #6
 8009ba6:	e1c2      	b.n	8009f2e <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009ba8:	2524      	movs	r5, #36	; 0x24
 8009baa:	197b      	adds	r3, r7, r5
 8009bac:	197a      	adds	r2, r7, r5
 8009bae:	8812      	ldrh	r2, [r2, #0]
 8009bb0:	21ff      	movs	r1, #255	; 0xff
 8009bb2:	400a      	ands	r2, r1
 8009bb4:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009bb6:	197c      	adds	r4, r7, r5
 8009bb8:	197b      	adds	r3, r7, r5
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f001 fa66 	bl	800b090 <ff_convert>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009bc8:	197b      	adds	r3, r7, r5
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <create_name+0xa4>
 8009bd0:	2306      	movs	r3, #6
 8009bd2:	e1ac      	b.n	8009f2e <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009bd4:	2224      	movs	r2, #36	; 0x24
 8009bd6:	18bb      	adds	r3, r7, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	2b7f      	cmp	r3, #127	; 0x7f
 8009bdc:	d80a      	bhi.n	8009bf4 <create_name+0xc4>
 8009bde:	18bb      	adds	r3, r7, r2
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	4ba7      	ldr	r3, [pc, #668]	; (8009e80 <create_name+0x350>)
 8009be4:	0011      	movs	r1, r2
 8009be6:	0018      	movs	r0, r3
 8009be8:	f7fe fc75 	bl	80084d6 <chk_chr>
 8009bec:	1e03      	subs	r3, r0, #0
 8009bee:	d001      	beq.n	8009bf4 <create_name+0xc4>
 8009bf0:	2306      	movs	r3, #6
 8009bf2:	e19c      	b.n	8009f2e <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	617a      	str	r2, [r7, #20]
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	18d3      	adds	r3, r2, r3
 8009c00:	2224      	movs	r2, #36	; 0x24
 8009c02:	18ba      	adds	r2, r7, r2
 8009c04:	8812      	ldrh	r2, [r2, #0]
 8009c06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c08:	e7a2      	b.n	8009b50 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c0a:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	18d2      	adds	r2, r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009c16:	2324      	movs	r3, #36	; 0x24
 8009c18:	18fb      	adds	r3, r7, r3
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	2b1f      	cmp	r3, #31
 8009c1e:	d801      	bhi.n	8009c24 <create_name+0xf4>
 8009c20:	2204      	movs	r2, #4
 8009c22:	e000      	b.n	8009c26 <create_name+0xf6>
 8009c24:	2200      	movs	r2, #0
 8009c26:	2327      	movs	r3, #39	; 0x27
 8009c28:	18fb      	adds	r3, r7, r3
 8009c2a:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c2c:	e016      	b.n	8009c5c <create_name+0x12c>
		w = lfn[di - 1];
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	4a94      	ldr	r2, [pc, #592]	; (8009e84 <create_name+0x354>)
 8009c32:	4694      	mov	ip, r2
 8009c34:	4463      	add	r3, ip
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	18d2      	adds	r2, r2, r3
 8009c3c:	2124      	movs	r1, #36	; 0x24
 8009c3e:	187b      	adds	r3, r7, r1
 8009c40:	8812      	ldrh	r2, [r2, #0]
 8009c42:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8009c44:	000a      	movs	r2, r1
 8009c46:	18bb      	adds	r3, r7, r2
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	d003      	beq.n	8009c56 <create_name+0x126>
 8009c4e:	18bb      	adds	r3, r7, r2
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	2b2e      	cmp	r3, #46	; 0x2e
 8009c54:	d106      	bne.n	8009c64 <create_name+0x134>
		di--;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e5      	bne.n	8009c2e <create_name+0xfe>
 8009c62:	e000      	b.n	8009c66 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8009c64:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	18d3      	adds	r3, r2, r3
 8009c6e:	2200      	movs	r2, #0
 8009c70:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <create_name+0x14c>
 8009c78:	2306      	movs	r3, #6
 8009c7a:	e158      	b.n	8009f2e <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3324      	adds	r3, #36	; 0x24
 8009c80:	220b      	movs	r2, #11
 8009c82:	2120      	movs	r1, #32
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7fe fbe8 	bl	800845a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	e002      	b.n	8009c96 <create_name+0x166>
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	18d3      	adds	r3, r2, r3
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d0f5      	beq.n	8009c90 <create_name+0x160>
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	18d3      	adds	r3, r2, r3
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	2b2e      	cmp	r3, #46	; 0x2e
 8009cb0:	d0ee      	beq.n	8009c90 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <create_name+0x19e>
 8009cb8:	2227      	movs	r2, #39	; 0x27
 8009cba:	18bb      	adds	r3, r7, r2
 8009cbc:	18ba      	adds	r2, r7, r2
 8009cbe:	7812      	ldrb	r2, [r2, #0]
 8009cc0:	2103      	movs	r1, #3
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009cc6:	e002      	b.n	8009cce <create_name+0x19e>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <create_name+0x1b8>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	4a6b      	ldr	r2, [pc, #428]	; (8009e84 <create_name+0x354>)
 8009cd8:	4694      	mov	ip, r2
 8009cda:	4463      	add	r3, ip
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	18d3      	adds	r3, r2, r3
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce6:	d1ef      	bne.n	8009cc8 <create_name+0x198>

	i = b = 0; ni = 8;
 8009ce8:	2326      	movs	r3, #38	; 0x26
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	623b      	str	r3, [r7, #32]
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	61ba      	str	r2, [r7, #24]
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	18d2      	adds	r2, r2, r3
 8009d04:	2124      	movs	r1, #36	; 0x24
 8009d06:	187b      	adds	r3, r7, r1
 8009d08:	8812      	ldrh	r2, [r2, #0]
 8009d0a:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8009d0c:	000a      	movs	r2, r1
 8009d0e:	18bb      	adds	r3, r7, r2
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d100      	bne.n	8009d18 <create_name+0x1e8>
 8009d16:	e0b1      	b.n	8009e7c <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d18:	18bb      	adds	r3, r7, r2
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d007      	beq.n	8009d30 <create_name+0x200>
 8009d20:	18bb      	adds	r3, r7, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10b      	bne.n	8009d40 <create_name+0x210>
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d007      	beq.n	8009d40 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d30:	2227      	movs	r2, #39	; 0x27
 8009d32:	18bb      	adds	r3, r7, r2
 8009d34:	18ba      	adds	r2, r7, r2
 8009d36:	7812      	ldrb	r2, [r2, #0]
 8009d38:	2103      	movs	r1, #3
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	e09c      	b.n	8009e7a <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d40:	6a3a      	ldr	r2, [r7, #32]
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d203      	bcs.n	8009d50 <create_name+0x220>
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d127      	bne.n	8009da0 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b0b      	cmp	r3, #11
 8009d54:	d107      	bne.n	8009d66 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8009d56:	2227      	movs	r2, #39	; 0x27
 8009d58:	18bb      	adds	r3, r7, r2
 8009d5a:	18ba      	adds	r2, r7, r2
 8009d5c:	7812      	ldrb	r2, [r2, #0]
 8009d5e:	2103      	movs	r1, #3
 8009d60:	430a      	orrs	r2, r1
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e095      	b.n	8009e92 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d006      	beq.n	8009d7c <create_name+0x24c>
 8009d6e:	2227      	movs	r2, #39	; 0x27
 8009d70:	18bb      	adds	r3, r7, r2
 8009d72:	18ba      	adds	r2, r7, r2
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	2103      	movs	r1, #3
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d900      	bls.n	8009d86 <create_name+0x256>
 8009d84:	e084      	b.n	8009e90 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	61bb      	str	r3, [r7, #24]
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	623b      	str	r3, [r7, #32]
 8009d8e:	230b      	movs	r3, #11
 8009d90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009d92:	2226      	movs	r2, #38	; 0x26
 8009d94:	18bb      	adds	r3, r7, r2
 8009d96:	18ba      	adds	r2, r7, r2
 8009d98:	7812      	ldrb	r2, [r2, #0]
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	e06c      	b.n	8009e7a <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009da0:	2524      	movs	r5, #36	; 0x24
 8009da2:	197b      	adds	r3, r7, r5
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	2b7f      	cmp	r3, #127	; 0x7f
 8009da8:	d91a      	bls.n	8009de0 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009daa:	197c      	adds	r4, r7, r5
 8009dac:	197b      	adds	r3, r7, r5
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	2100      	movs	r1, #0
 8009db2:	0018      	movs	r0, r3
 8009db4:	f001 f96c 	bl	800b090 <ff_convert>
 8009db8:	0003      	movs	r3, r0
 8009dba:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009dbc:	197b      	adds	r3, r7, r5
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <create_name+0x2a2>
 8009dc4:	197b      	adds	r3, r7, r5
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	3b80      	subs	r3, #128	; 0x80
 8009dca:	4a2f      	ldr	r2, [pc, #188]	; (8009e88 <create_name+0x358>)
 8009dcc:	5cd2      	ldrb	r2, [r2, r3]
 8009dce:	197b      	adds	r3, r7, r5
 8009dd0:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009dd2:	2227      	movs	r2, #39	; 0x27
 8009dd4:	18bb      	adds	r3, r7, r2
 8009dd6:	18ba      	adds	r2, r7, r2
 8009dd8:	7812      	ldrb	r2, [r2, #0]
 8009dda:	2102      	movs	r1, #2
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009de0:	2224      	movs	r2, #36	; 0x24
 8009de2:	18bb      	adds	r3, r7, r2
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d008      	beq.n	8009dfc <create_name+0x2cc>
 8009dea:	18bb      	adds	r3, r7, r2
 8009dec:	881a      	ldrh	r2, [r3, #0]
 8009dee:	4b27      	ldr	r3, [pc, #156]	; (8009e8c <create_name+0x35c>)
 8009df0:	0011      	movs	r1, r2
 8009df2:	0018      	movs	r0, r3
 8009df4:	f7fe fb6f 	bl	80084d6 <chk_chr>
 8009df8:	1e03      	subs	r3, r0, #0
 8009dfa:	d00b      	beq.n	8009e14 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009dfc:	2324      	movs	r3, #36	; 0x24
 8009dfe:	18fb      	adds	r3, r7, r3
 8009e00:	225f      	movs	r2, #95	; 0x5f
 8009e02:	801a      	strh	r2, [r3, #0]
 8009e04:	2227      	movs	r2, #39	; 0x27
 8009e06:	18bb      	adds	r3, r7, r2
 8009e08:	18ba      	adds	r2, r7, r2
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	2103      	movs	r1, #3
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	e025      	b.n	8009e60 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009e14:	2224      	movs	r2, #36	; 0x24
 8009e16:	18bb      	adds	r3, r7, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	2b40      	cmp	r3, #64	; 0x40
 8009e1c:	d90b      	bls.n	8009e36 <create_name+0x306>
 8009e1e:	18bb      	adds	r3, r7, r2
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	2b5a      	cmp	r3, #90	; 0x5a
 8009e24:	d807      	bhi.n	8009e36 <create_name+0x306>
					b |= 2;
 8009e26:	2226      	movs	r2, #38	; 0x26
 8009e28:	18bb      	adds	r3, r7, r2
 8009e2a:	18ba      	adds	r2, r7, r2
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	2102      	movs	r1, #2
 8009e30:	430a      	orrs	r2, r1
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	e014      	b.n	8009e60 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009e36:	2024      	movs	r0, #36	; 0x24
 8009e38:	183b      	adds	r3, r7, r0
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	2b60      	cmp	r3, #96	; 0x60
 8009e3e:	d90f      	bls.n	8009e60 <create_name+0x330>
 8009e40:	183b      	adds	r3, r7, r0
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	2b7a      	cmp	r3, #122	; 0x7a
 8009e46:	d80b      	bhi.n	8009e60 <create_name+0x330>
						b |= 1; w -= 0x20;
 8009e48:	2226      	movs	r2, #38	; 0x26
 8009e4a:	18bb      	adds	r3, r7, r2
 8009e4c:	18ba      	adds	r2, r7, r2
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	2101      	movs	r1, #1
 8009e52:	430a      	orrs	r2, r1
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	183b      	adds	r3, r7, r0
 8009e58:	183a      	adds	r2, r7, r0
 8009e5a:	8812      	ldrh	r2, [r2, #0]
 8009e5c:	3a20      	subs	r2, #32
 8009e5e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	623a      	str	r2, [r7, #32]
 8009e66:	2224      	movs	r2, #36	; 0x24
 8009e68:	18ba      	adds	r2, r7, r2
 8009e6a:	8812      	ldrh	r2, [r2, #0]
 8009e6c:	b2d0      	uxtb	r0, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	2124      	movs	r1, #36	; 0x24
 8009e72:	18d3      	adds	r3, r2, r3
 8009e74:	185b      	adds	r3, r3, r1
 8009e76:	1c02      	adds	r2, r0, #0
 8009e78:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8009e7a:	e73d      	b.n	8009cf8 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8009e7c:	46c0      	nop			; (mov r8, r8)
 8009e7e:	e008      	b.n	8009e92 <create_name+0x362>
 8009e80:	0800bd54 	.word	0x0800bd54
 8009e84:	7fffffff 	.word	0x7fffffff
 8009e88:	0800c4fc 	.word	0x0800c4fc
 8009e8c:	0800bd60 	.word	0x0800bd60
			if (si > di) break;			/* No extension */
 8009e90:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2224      	movs	r2, #36	; 0x24
 8009e96:	5c9b      	ldrb	r3, [r3, r2]
 8009e98:	2be5      	cmp	r3, #229	; 0xe5
 8009e9a:	d103      	bne.n	8009ea4 <create_name+0x374>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2224      	movs	r2, #36	; 0x24
 8009ea0:	2105      	movs	r1, #5
 8009ea2:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d105      	bne.n	8009eb6 <create_name+0x386>
 8009eaa:	2226      	movs	r2, #38	; 0x26
 8009eac:	18bb      	adds	r3, r7, r2
 8009eae:	18ba      	adds	r2, r7, r2
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	0092      	lsls	r2, r2, #2
 8009eb4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009eb6:	2126      	movs	r1, #38	; 0x26
 8009eb8:	187b      	adds	r3, r7, r1
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	220c      	movs	r2, #12
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	2b0c      	cmp	r3, #12
 8009ec2:	d005      	beq.n	8009ed0 <create_name+0x3a0>
 8009ec4:	187b      	adds	r3, r7, r1
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2203      	movs	r2, #3
 8009eca:	4013      	ands	r3, r2
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d106      	bne.n	8009ede <create_name+0x3ae>
 8009ed0:	2227      	movs	r2, #39	; 0x27
 8009ed2:	18bb      	adds	r3, r7, r2
 8009ed4:	18ba      	adds	r2, r7, r2
 8009ed6:	7812      	ldrb	r2, [r2, #0]
 8009ed8:	2102      	movs	r1, #2
 8009eda:	430a      	orrs	r2, r1
 8009edc:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ede:	2127      	movs	r1, #39	; 0x27
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	d11a      	bne.n	8009f20 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009eea:	2326      	movs	r3, #38	; 0x26
 8009eec:	18fb      	adds	r3, r7, r3
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d105      	bne.n	8009f04 <create_name+0x3d4>
 8009ef8:	187b      	adds	r3, r7, r1
 8009efa:	187a      	adds	r2, r7, r1
 8009efc:	7812      	ldrb	r2, [r2, #0]
 8009efe:	2110      	movs	r1, #16
 8009f00:	430a      	orrs	r2, r1
 8009f02:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009f04:	2326      	movs	r3, #38	; 0x26
 8009f06:	18fb      	adds	r3, r7, r3
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	220c      	movs	r2, #12
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d106      	bne.n	8009f20 <create_name+0x3f0>
 8009f12:	2227      	movs	r2, #39	; 0x27
 8009f14:	18bb      	adds	r3, r7, r2
 8009f16:	18ba      	adds	r2, r7, r2
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	2108      	movs	r1, #8
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2227      	movs	r2, #39	; 0x27
 8009f24:	18ba      	adds	r2, r7, r2
 8009f26:	212f      	movs	r1, #47	; 0x2f
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8009f2c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009f2e:	0018      	movs	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	b00a      	add	sp, #40	; 0x28
 8009f34:	bdb0      	pop	{r4, r5, r7, pc}
 8009f36:	46c0      	nop			; (mov r8, r8)

08009f38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f4c:	e002      	b.n	8009f54 <follow_path+0x1c>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3301      	adds	r3, #1
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b2f      	cmp	r3, #47	; 0x2f
 8009f5a:	d0f8      	beq.n	8009f4e <follow_path+0x16>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2b5c      	cmp	r3, #92	; 0x5c
 8009f62:	d0f4      	beq.n	8009f4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2200      	movs	r2, #0
 8009f68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b1f      	cmp	r3, #31
 8009f70:	d80d      	bhi.n	8009f8e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	222f      	movs	r2, #47	; 0x2f
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8009f7a:	2317      	movs	r3, #23
 8009f7c:	18fc      	adds	r4, r7, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2100      	movs	r1, #0
 8009f82:	0018      	movs	r0, r3
 8009f84:	f7ff f83a 	bl	8008ffc <dir_sdi>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	7023      	strb	r3, [r4, #0]
 8009f8c:	e052      	b.n	800a034 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f8e:	2517      	movs	r5, #23
 8009f90:	197c      	adds	r4, r7, r5
 8009f92:	003a      	movs	r2, r7
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	0011      	movs	r1, r2
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f7ff fdc9 	bl	8009b30 <create_name>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009fa2:	197b      	adds	r3, r7, r5
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d13f      	bne.n	800a02a <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009faa:	197c      	adds	r4, r7, r5
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f7ff fbb3 	bl	800971a <dir_find>
 8009fb4:	0003      	movs	r3, r0
 8009fb6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8009fb8:	200b      	movs	r0, #11
 8009fba:	183b      	adds	r3, r7, r0
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	212f      	movs	r1, #47	; 0x2f
 8009fc0:	5c52      	ldrb	r2, [r2, r1]
 8009fc2:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fc4:	197b      	adds	r3, r7, r5
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00c      	beq.n	8009fe6 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fcc:	197b      	adds	r3, r7, r5
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	d12c      	bne.n	800a02e <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fd4:	183b      	adds	r3, r7, r0
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2204      	movs	r2, #4
 8009fda:	4013      	ands	r3, r2
 8009fdc:	d127      	bne.n	800a02e <follow_path+0xf6>
 8009fde:	197b      	adds	r3, r7, r5
 8009fe0:	2205      	movs	r2, #5
 8009fe2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8009fe4:	e023      	b.n	800a02e <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fe6:	230b      	movs	r3, #11
 8009fe8:	18fb      	adds	r3, r7, r3
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2204      	movs	r2, #4
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d11f      	bne.n	800a032 <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	799b      	ldrb	r3, [r3, #6]
 8009ff6:	001a      	movs	r2, r3
 8009ff8:	2310      	movs	r3, #16
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d104      	bne.n	800a008 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8009ffe:	2317      	movs	r3, #23
 800a000:	18fb      	adds	r3, r7, r3
 800a002:	2205      	movs	r2, #5
 800a004:	701a      	strb	r2, [r3, #0]
 800a006:	e015      	b.n	800a034 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3334      	adds	r3, #52	; 0x34
 800a00c:	001a      	movs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	05db      	lsls	r3, r3, #23
 800a014:	0ddb      	lsrs	r3, r3, #23
 800a016:	18d2      	adds	r2, r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	0011      	movs	r1, r2
 800a01c:	0018      	movs	r0, r3
 800a01e:	f7ff f98c 	bl	800933a <ld_clust>
 800a022:	0002      	movs	r2, r0
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a028:	e7b1      	b.n	8009f8e <follow_path+0x56>
			if (res != FR_OK) break;
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	e002      	b.n	800a034 <follow_path+0xfc>
				break;
 800a02e:	46c0      	nop			; (mov r8, r8)
 800a030:	e000      	b.n	800a034 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a032:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800a034:	2317      	movs	r3, #23
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	781b      	ldrb	r3, [r3, #0]
}
 800a03a:	0018      	movs	r0, r3
 800a03c:	46bd      	mov	sp, r7
 800a03e:	b006      	add	sp, #24
 800a040:	bdb0      	pop	{r4, r5, r7, pc}

0800a042 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a04a:	2301      	movs	r3, #1
 800a04c:	425b      	negs	r3, r3
 800a04e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d031      	beq.n	800a0bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e002      	b.n	800a066 <get_ldnumber+0x24>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	3301      	adds	r3, #1
 800a064:	617b      	str	r3, [r7, #20]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b1f      	cmp	r3, #31
 800a06c:	d903      	bls.n	800a076 <get_ldnumber+0x34>
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b3a      	cmp	r3, #58	; 0x3a
 800a074:	d1f4      	bne.n	800a060 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b3a      	cmp	r3, #58	; 0x3a
 800a07c:	d11c      	bne.n	800a0b8 <get_ldnumber+0x76>
			tp = *path;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	60fa      	str	r2, [r7, #12]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	3b30      	subs	r3, #48	; 0x30
 800a08e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b09      	cmp	r3, #9
 800a094:	d80e      	bhi.n	800a0b4 <get_ldnumber+0x72>
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d10a      	bne.n	800a0b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d107      	bne.n	800a0b4 <get_ldnumber+0x72>
					vol = (int)i;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	e002      	b.n	800a0be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a0bc:	693b      	ldr	r3, [r7, #16]
}
 800a0be:	0018      	movs	r0, r3
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	b006      	add	sp, #24
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	70da      	strb	r2, [r3, #3]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4252      	negs	r2, r2
 800a0de:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	0011      	movs	r1, r2
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f7fe fbc0 	bl	800886c <move_window>
 800a0ec:	1e03      	subs	r3, r0, #0
 800a0ee:	d001      	beq.n	800a0f4 <check_fs+0x2c>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	e037      	b.n	800a164 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3334      	adds	r3, #52	; 0x34
 800a0f8:	33ff      	adds	r3, #255	; 0xff
 800a0fa:	33ff      	adds	r3, #255	; 0xff
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7fe f909 	bl	8008314 <ld_word>
 800a102:	0003      	movs	r3, r0
 800a104:	001a      	movs	r2, r3
 800a106:	4b19      	ldr	r3, [pc, #100]	; (800a16c <check_fs+0xa4>)
 800a108:	429a      	cmp	r2, r3
 800a10a:	d001      	beq.n	800a110 <check_fs+0x48>
 800a10c:	2303      	movs	r3, #3
 800a10e:	e029      	b.n	800a164 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2234      	movs	r2, #52	; 0x34
 800a114:	5c9b      	ldrb	r3, [r3, r2]
 800a116:	2be9      	cmp	r3, #233	; 0xe9
 800a118:	d009      	beq.n	800a12e <check_fs+0x66>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2234      	movs	r2, #52	; 0x34
 800a11e:	5c9b      	ldrb	r3, [r3, r2]
 800a120:	2beb      	cmp	r3, #235	; 0xeb
 800a122:	d11e      	bne.n	800a162 <check_fs+0x9a>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2236      	movs	r2, #54	; 0x36
 800a128:	5c9b      	ldrb	r3, [r3, r2]
 800a12a:	2b90      	cmp	r3, #144	; 0x90
 800a12c:	d119      	bne.n	800a162 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3334      	adds	r3, #52	; 0x34
 800a132:	3336      	adds	r3, #54	; 0x36
 800a134:	0018      	movs	r0, r3
 800a136:	f7fe f908 	bl	800834a <ld_dword>
 800a13a:	0003      	movs	r3, r0
 800a13c:	021b      	lsls	r3, r3, #8
 800a13e:	0a1b      	lsrs	r3, r3, #8
 800a140:	4a0b      	ldr	r2, [pc, #44]	; (800a170 <check_fs+0xa8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d101      	bne.n	800a14a <check_fs+0x82>
 800a146:	2300      	movs	r3, #0
 800a148:	e00c      	b.n	800a164 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3334      	adds	r3, #52	; 0x34
 800a14e:	3352      	adds	r3, #82	; 0x52
 800a150:	0018      	movs	r0, r3
 800a152:	f7fe f8fa 	bl	800834a <ld_dword>
 800a156:	0003      	movs	r3, r0
 800a158:	4a06      	ldr	r2, [pc, #24]	; (800a174 <check_fs+0xac>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d101      	bne.n	800a162 <check_fs+0x9a>
 800a15e:	2300      	movs	r3, #0
 800a160:	e000      	b.n	800a164 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a162:	2302      	movs	r3, #2
}
 800a164:	0018      	movs	r0, r3
 800a166:	46bd      	mov	sp, r7
 800a168:	b002      	add	sp, #8
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	0000aa55 	.word	0x0000aa55
 800a170:	00544146 	.word	0x00544146
 800a174:	33544146 	.word	0x33544146

0800a178 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a178:	b5b0      	push	{r4, r5, r7, lr}
 800a17a:	b096      	sub	sp, #88	; 0x58
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	1dfb      	adds	r3, r7, #7
 800a184:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	0018      	movs	r0, r3
 800a190:	f7ff ff57 	bl	800a042 <get_ldnumber>
 800a194:	0003      	movs	r3, r0
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da01      	bge.n	800a1a2 <find_volume+0x2a>
 800a19e:	230b      	movs	r3, #11
 800a1a0:	e24e      	b.n	800a640 <find_volume+0x4c8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1a2:	4bcc      	ldr	r3, [pc, #816]	; (800a4d4 <find_volume+0x35c>)
 800a1a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a6:	0092      	lsls	r2, r2, #2
 800a1a8:	58d3      	ldr	r3, [r2, r3]
 800a1aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <find_volume+0x3e>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	e244      	b.n	800a640 <find_volume+0x4c8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a1bc:	1dfb      	adds	r3, r7, #7
 800a1be:	1dfa      	adds	r2, r7, #7
 800a1c0:	7812      	ldrb	r2, [r2, #0]
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	438a      	bics	r2, r1
 800a1c6:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01b      	beq.n	800a208 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	2537      	movs	r5, #55	; 0x37
 800a1d6:	197c      	adds	r4, r7, r5
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f7fd ffd1 	bl	8008180 <disk_status>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a1e2:	0029      	movs	r1, r5
 800a1e4:	187b      	adds	r3, r7, r1
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	d10c      	bne.n	800a208 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a1ee:	1dfb      	adds	r3, r7, #7
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <find_volume+0x8c>
 800a1f6:	187b      	adds	r3, r7, r1
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2204      	movs	r2, #4
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	d001      	beq.n	800a204 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800a200:	230a      	movs	r3, #10
 800a202:	e21d      	b.n	800a640 <find_volume+0x4c8>
			}
			return FR_OK;				/* The file system object is valid */
 800a204:	2300      	movs	r3, #0
 800a206:	e21b      	b.n	800a640 <find_volume+0x4c8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a210:	b2da      	uxtb	r2, r3
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2537      	movs	r5, #55	; 0x37
 800a21c:	197c      	adds	r4, r7, r5
 800a21e:	0018      	movs	r0, r3
 800a220:	f7fd ffd0 	bl	80081c4 <disk_initialize>
 800a224:	0003      	movs	r3, r0
 800a226:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a228:	197b      	adds	r3, r7, r5
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2201      	movs	r2, #1
 800a22e:	4013      	ands	r3, r2
 800a230:	d001      	beq.n	800a236 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a232:	2303      	movs	r3, #3
 800a234:	e204      	b.n	800a640 <find_volume+0x4c8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a236:	1dfb      	adds	r3, r7, #7
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <find_volume+0xd6>
 800a23e:	2337      	movs	r3, #55	; 0x37
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	2204      	movs	r2, #4
 800a246:	4013      	ands	r3, r2
 800a248:	d001      	beq.n	800a24e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800a24a:	230a      	movs	r3, #10
 800a24c:	e1f8      	b.n	800a640 <find_volume+0x4c8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a252:	2557      	movs	r5, #87	; 0x57
 800a254:	197c      	adds	r4, r7, r5
 800a256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	0011      	movs	r1, r2
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7ff ff33 	bl	800a0c8 <check_fs>
 800a262:	0003      	movs	r3, r0
 800a264:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a266:	197b      	adds	r3, r7, r5
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d14b      	bne.n	800a306 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a26e:	2300      	movs	r3, #0
 800a270:	643b      	str	r3, [r7, #64]	; 0x40
 800a272:	e01d      	b.n	800a2b0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	3334      	adds	r3, #52	; 0x34
 800a278:	001a      	movs	r2, r3
 800a27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a27c:	011b      	lsls	r3, r3, #4
 800a27e:	33bf      	adds	r3, #191	; 0xbf
 800a280:	33ff      	adds	r3, #255	; 0xff
 800a282:	18d3      	adds	r3, r2, r3
 800a284:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	3304      	adds	r3, #4
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <find_volume+0x126>
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	3308      	adds	r3, #8
 800a294:	0018      	movs	r0, r3
 800a296:	f7fe f858 	bl	800834a <ld_dword>
 800a29a:	0003      	movs	r3, r0
 800a29c:	e000      	b.n	800a2a0 <find_volume+0x128>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	2214      	movs	r2, #20
 800a2a2:	18ba      	adds	r2, r7, r2
 800a2a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2a6:	0089      	lsls	r1, r1, #2
 800a2a8:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d9de      	bls.n	800a274 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <find_volume+0x14e>
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a2c6:	2314      	movs	r3, #20
 800a2c8:	18fb      	adds	r3, r7, r3
 800a2ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2cc:	0092      	lsls	r2, r2, #2
 800a2ce:	58d3      	ldr	r3, [r2, r3]
 800a2d0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d008      	beq.n	800a2ea <find_volume+0x172>
 800a2d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	0011      	movs	r1, r2
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f7ff fef2 	bl	800a0c8 <check_fs>
 800a2e4:	0003      	movs	r3, r0
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	e000      	b.n	800a2ec <find_volume+0x174>
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	2157      	movs	r1, #87	; 0x57
 800a2ee:	187b      	adds	r3, r7, r1
 800a2f0:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a2f2:	187b      	adds	r3, r7, r1
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d905      	bls.n	800a306 <find_volume+0x18e>
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a302:	2b03      	cmp	r3, #3
 800a304:	d9df      	bls.n	800a2c6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a306:	2357      	movs	r3, #87	; 0x57
 800a308:	18fb      	adds	r3, r7, r3
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d101      	bne.n	800a314 <find_volume+0x19c>
 800a310:	2301      	movs	r3, #1
 800a312:	e195      	b.n	800a640 <find_volume+0x4c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a314:	2357      	movs	r3, #87	; 0x57
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d901      	bls.n	800a322 <find_volume+0x1aa>
 800a31e:	230d      	movs	r3, #13
 800a320:	e18e      	b.n	800a640 <find_volume+0x4c8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	3334      	adds	r3, #52	; 0x34
 800a326:	330b      	adds	r3, #11
 800a328:	0018      	movs	r0, r3
 800a32a:	f7fd fff3 	bl	8008314 <ld_word>
 800a32e:	0003      	movs	r3, r0
 800a330:	001a      	movs	r2, r3
 800a332:	2380      	movs	r3, #128	; 0x80
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	429a      	cmp	r2, r3
 800a338:	d001      	beq.n	800a33e <find_volume+0x1c6>
 800a33a:	230d      	movs	r3, #13
 800a33c:	e180      	b.n	800a640 <find_volume+0x4c8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	3334      	adds	r3, #52	; 0x34
 800a342:	3316      	adds	r3, #22
 800a344:	0018      	movs	r0, r3
 800a346:	f7fd ffe5 	bl	8008314 <ld_word>
 800a34a:	0003      	movs	r3, r0
 800a34c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d107      	bne.n	800a364 <find_volume+0x1ec>
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	3334      	adds	r3, #52	; 0x34
 800a358:	3324      	adds	r3, #36	; 0x24
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7fd fff5 	bl	800834a <ld_dword>
 800a360:	0003      	movs	r3, r0
 800a362:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a368:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	2244      	movs	r2, #68	; 0x44
 800a36e:	5c9a      	ldrb	r2, [r3, r2]
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	789b      	ldrb	r3, [r3, #2]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d005      	beq.n	800a388 <find_volume+0x210>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d001      	beq.n	800a388 <find_volume+0x210>
 800a384:	230d      	movs	r3, #13
 800a386:	e15b      	b.n	800a640 <find_volume+0x4c8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	001a      	movs	r2, r3
 800a38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a390:	4353      	muls	r3, r2
 800a392:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	2241      	movs	r2, #65	; 0x41
 800a398:	5c9b      	ldrb	r3, [r3, r2]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	895b      	ldrh	r3, [r3, #10]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d007      	beq.n	800a3b8 <find_volume+0x240>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	895b      	ldrh	r3, [r3, #10]
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	895b      	ldrh	r3, [r3, #10]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d001      	beq.n	800a3bc <find_volume+0x244>
 800a3b8:	230d      	movs	r3, #13
 800a3ba:	e141      	b.n	800a640 <find_volume+0x4c8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	3334      	adds	r3, #52	; 0x34
 800a3c0:	3311      	adds	r3, #17
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f7fd ffa6 	bl	8008314 <ld_word>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	001a      	movs	r2, r3
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	891b      	ldrh	r3, [r3, #8]
 800a3d4:	220f      	movs	r2, #15
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <find_volume+0x26a>
 800a3de:	230d      	movs	r3, #13
 800a3e0:	e12e      	b.n	800a640 <find_volume+0x4c8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	3334      	adds	r3, #52	; 0x34
 800a3e6:	3313      	adds	r3, #19
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7fd ff93 	bl	8008314 <ld_word>
 800a3ee:	0003      	movs	r3, r0
 800a3f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d107      	bne.n	800a408 <find_volume+0x290>
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3334      	adds	r3, #52	; 0x34
 800a3fc:	3320      	adds	r3, #32
 800a3fe:	0018      	movs	r0, r3
 800a400:	f7fd ffa3 	bl	800834a <ld_dword>
 800a404:	0003      	movs	r3, r0
 800a406:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	3334      	adds	r3, #52	; 0x34
 800a40c:	330e      	adds	r3, #14
 800a40e:	252e      	movs	r5, #46	; 0x2e
 800a410:	197c      	adds	r4, r7, r5
 800a412:	0018      	movs	r0, r3
 800a414:	f7fd ff7e 	bl	8008314 <ld_word>
 800a418:	0003      	movs	r3, r0
 800a41a:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a41c:	197b      	adds	r3, r7, r5
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <find_volume+0x2b0>
 800a424:	230d      	movs	r3, #13
 800a426:	e10b      	b.n	800a640 <find_volume+0x4c8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a428:	232e      	movs	r3, #46	; 0x2e
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	881a      	ldrh	r2, [r3, #0]
 800a42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a430:	18d3      	adds	r3, r2, r3
 800a432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a434:	8912      	ldrh	r2, [r2, #8]
 800a436:	0912      	lsrs	r2, r2, #4
 800a438:	b292      	uxth	r2, r2
 800a43a:	189b      	adds	r3, r3, r2
 800a43c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a43e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	429a      	cmp	r2, r3
 800a444:	d201      	bcs.n	800a44a <find_volume+0x2d2>
 800a446:	230d      	movs	r3, #13
 800a448:	e0fa      	b.n	800a640 <find_volume+0x4c8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a44a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	895b      	ldrh	r3, [r3, #10]
 800a454:	0019      	movs	r1, r3
 800a456:	0010      	movs	r0, r2
 800a458:	f7f5 fe68 	bl	800012c <__udivsi3>
 800a45c:	0003      	movs	r3, r0
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <find_volume+0x2f2>
 800a466:	230d      	movs	r3, #13
 800a468:	e0ea      	b.n	800a640 <find_volume+0x4c8>
		fmt = FS_FAT32;
 800a46a:	2157      	movs	r1, #87	; 0x57
 800a46c:	187b      	adds	r3, r7, r1
 800a46e:	2203      	movs	r2, #3
 800a470:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	4a18      	ldr	r2, [pc, #96]	; (800a4d8 <find_volume+0x360>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d802      	bhi.n	800a480 <find_volume+0x308>
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	2202      	movs	r2, #2
 800a47e:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	4a16      	ldr	r2, [pc, #88]	; (800a4dc <find_volume+0x364>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d803      	bhi.n	800a490 <find_volume+0x318>
 800a488:	2357      	movs	r3, #87	; 0x57
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	1c9a      	adds	r2, r3, #2
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a49c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a49e:	232e      	movs	r3, #46	; 0x2e
 800a4a0:	18fb      	adds	r3, r7, r3
 800a4a2:	881a      	ldrh	r2, [r3, #0]
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4a6:	18d2      	adds	r2, r2, r3
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a4ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	18d2      	adds	r2, r2, r3
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a4b6:	2357      	movs	r3, #87	; 0x57
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d123      	bne.n	800a508 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	3334      	adds	r3, #52	; 0x34
 800a4c4:	332a      	adds	r3, #42	; 0x2a
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f7fd ff24 	bl	8008314 <ld_word>
 800a4cc:	1e03      	subs	r3, r0, #0
 800a4ce:	d007      	beq.n	800a4e0 <find_volume+0x368>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e0b5      	b.n	800a640 <find_volume+0x4c8>
 800a4d4:	20000c6c 	.word	0x20000c6c
 800a4d8:	0000fff5 	.word	0x0000fff5
 800a4dc:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	891b      	ldrh	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <find_volume+0x374>
 800a4e8:	230d      	movs	r3, #13
 800a4ea:	e0a9      	b.n	800a640 <find_volume+0x4c8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	3334      	adds	r3, #52	; 0x34
 800a4f0:	332c      	adds	r3, #44	; 0x2c
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f7fd ff29 	bl	800834a <ld_dword>
 800a4f8:	0002      	movs	r2, r0
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	647b      	str	r3, [r7, #68]	; 0x44
 800a506:	e020      	b.n	800a54a <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	891b      	ldrh	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <find_volume+0x39c>
 800a510:	230d      	movs	r3, #13
 800a512:	e095      	b.n	800a640 <find_volume+0x4c8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a51a:	18d2      	adds	r2, r2, r3
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a520:	2357      	movs	r3, #87	; 0x57
 800a522:	18fb      	adds	r3, r7, r3
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d103      	bne.n	800a532 <find_volume+0x3ba>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	e00a      	b.n	800a548 <find_volume+0x3d0>
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	699a      	ldr	r2, [r3, #24]
 800a536:	0013      	movs	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	189b      	adds	r3, r3, r2
 800a53c:	085a      	lsrs	r2, r3, #1
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	2101      	movs	r1, #1
 800a544:	400b      	ands	r3, r1
 800a546:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a548:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	69da      	ldr	r2, [r3, #28]
 800a54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a550:	493d      	ldr	r1, [pc, #244]	; (800a648 <find_volume+0x4d0>)
 800a552:	468c      	mov	ip, r1
 800a554:	4463      	add	r3, ip
 800a556:	0a5b      	lsrs	r3, r3, #9
 800a558:	429a      	cmp	r2, r3
 800a55a:	d201      	bcs.n	800a560 <find_volume+0x3e8>
 800a55c:	230d      	movs	r3, #13
 800a55e:	e06f      	b.n	800a640 <find_volume+0x4c8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	2201      	movs	r2, #1
 800a564:	4252      	negs	r2, r2
 800a566:	615a      	str	r2, [r3, #20]
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	2280      	movs	r2, #128	; 0x80
 800a574:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a576:	2357      	movs	r3, #87	; 0x57
 800a578:	18fb      	adds	r3, r7, r3
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d148      	bne.n	800a612 <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	3334      	adds	r3, #52	; 0x34
 800a584:	3330      	adds	r3, #48	; 0x30
 800a586:	0018      	movs	r0, r3
 800a588:	f7fd fec4 	bl	8008314 <ld_word>
 800a58c:	0003      	movs	r3, r0
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d13f      	bne.n	800a612 <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	0011      	movs	r1, r2
 800a59a:	0018      	movs	r0, r3
 800a59c:	f7fe f966 	bl	800886c <move_window>
 800a5a0:	1e03      	subs	r3, r0, #0
 800a5a2:	d136      	bne.n	800a612 <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	3334      	adds	r3, #52	; 0x34
 800a5ae:	33ff      	adds	r3, #255	; 0xff
 800a5b0:	33ff      	adds	r3, #255	; 0xff
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f7fd feae 	bl	8008314 <ld_word>
 800a5b8:	0003      	movs	r3, r0
 800a5ba:	001a      	movs	r2, r3
 800a5bc:	4b23      	ldr	r3, [pc, #140]	; (800a64c <find_volume+0x4d4>)
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d127      	bne.n	800a612 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	3334      	adds	r3, #52	; 0x34
 800a5c6:	0018      	movs	r0, r3
 800a5c8:	f7fd febf 	bl	800834a <ld_dword>
 800a5cc:	0003      	movs	r3, r0
 800a5ce:	4a20      	ldr	r2, [pc, #128]	; (800a650 <find_volume+0x4d8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d11e      	bne.n	800a612 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	3334      	adds	r3, #52	; 0x34
 800a5d8:	33e5      	adds	r3, #229	; 0xe5
 800a5da:	33ff      	adds	r3, #255	; 0xff
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f7fd feb4 	bl	800834a <ld_dword>
 800a5e2:	0003      	movs	r3, r0
 800a5e4:	4a1b      	ldr	r2, [pc, #108]	; (800a654 <find_volume+0x4dc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d113      	bne.n	800a612 <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	3334      	adds	r3, #52	; 0x34
 800a5ee:	33e9      	adds	r3, #233	; 0xe9
 800a5f0:	33ff      	adds	r3, #255	; 0xff
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7fd fea9 	bl	800834a <ld_dword>
 800a5f8:	0002      	movs	r2, r0
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	3334      	adds	r3, #52	; 0x34
 800a602:	33ed      	adds	r3, #237	; 0xed
 800a604:	33ff      	adds	r3, #255	; 0xff
 800a606:	0018      	movs	r0, r3
 800a608:	f7fd fe9f 	bl	800834a <ld_dword>
 800a60c:	0002      	movs	r2, r0
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	2257      	movs	r2, #87	; 0x57
 800a616:	18ba      	adds	r2, r7, r2
 800a618:	7812      	ldrb	r2, [r2, #0]
 800a61a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a61c:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <find_volume+0x4e0>)
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	b29a      	uxth	r2, r3
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <find_volume+0x4e0>)
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <find_volume+0x4e0>)
 800a62a:	881a      	ldrh	r2, [r3, #0]
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <find_volume+0x4e4>)
 800a634:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	0018      	movs	r0, r3
 800a63a:	f7fe f8af 	bl	800879c <clear_lock>
#endif
	return FR_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	0018      	movs	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	b016      	add	sp, #88	; 0x58
 800a646:	bdb0      	pop	{r4, r5, r7, pc}
 800a648:	000001ff 	.word	0x000001ff
 800a64c:	0000aa55 	.word	0x0000aa55
 800a650:	41615252 	.word	0x41615252
 800a654:	61417272 	.word	0x61417272
 800a658:	20000c70 	.word	0x20000c70
 800a65c:	20000c94 	.word	0x20000c94

0800a660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a66a:	240f      	movs	r4, #15
 800a66c:	193b      	adds	r3, r7, r4
 800a66e:	2209      	movs	r2, #9
 800a670:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01d      	beq.n	800a6b4 <validate+0x54>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d019      	beq.n	800a6b4 <validate+0x54>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d014      	beq.n	800a6b4 <validate+0x54>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	889a      	ldrh	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	88db      	ldrh	r3, [r3, #6]
 800a694:	429a      	cmp	r2, r3
 800a696:	d10d      	bne.n	800a6b4 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	785b      	ldrb	r3, [r3, #1]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f7fd fd6e 	bl	8008180 <disk_status>
 800a6a4:	0003      	movs	r3, r0
 800a6a6:	001a      	movs	r2, r3
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	d102      	bne.n	800a6b4 <validate+0x54>
			res = FR_OK;
 800a6ae:	193b      	adds	r3, r7, r4
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a6b4:	230f      	movs	r3, #15
 800a6b6:	18fb      	adds	r3, r7, r3
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <validate+0x64>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	e000      	b.n	800a6c6 <validate+0x66>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	601a      	str	r2, [r3, #0]
	return res;
 800a6ca:	230f      	movs	r3, #15
 800a6cc:	18fb      	adds	r3, r7, r3
 800a6ce:	781b      	ldrb	r3, [r3, #0]
}
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b005      	add	sp, #20
 800a6d6:	bd90      	pop	{r4, r7, pc}

0800a6d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a6d8:	b5b0      	push	{r4, r5, r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	1dfb      	adds	r3, r7, #7
 800a6e4:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a6ea:	2310      	movs	r3, #16
 800a6ec:	18fb      	adds	r3, r7, r3
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f7ff fca7 	bl	800a042 <get_ldnumber>
 800a6f4:	0003      	movs	r3, r0
 800a6f6:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da01      	bge.n	800a702 <f_mount+0x2a>
 800a6fe:	230b      	movs	r3, #11
 800a700:	e030      	b.n	800a764 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a702:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <f_mount+0x94>)
 800a704:	69fa      	ldr	r2, [r7, #28]
 800a706:	0092      	lsls	r2, r2, #2
 800a708:	58d3      	ldr	r3, [r2, r3]
 800a70a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	0018      	movs	r0, r3
 800a716:	f7fe f841 	bl	800879c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a72c:	68f9      	ldr	r1, [r7, #12]
 800a72e:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <f_mount+0x94>)
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <f_mount+0x6c>
 800a73c:	1dfb      	adds	r3, r7, #7
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d001      	beq.n	800a748 <f_mount+0x70>
 800a744:	2300      	movs	r3, #0
 800a746:	e00d      	b.n	800a764 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a748:	2517      	movs	r5, #23
 800a74a:	197c      	adds	r4, r7, r5
 800a74c:	230c      	movs	r3, #12
 800a74e:	18f9      	adds	r1, r7, r3
 800a750:	2308      	movs	r3, #8
 800a752:	18fb      	adds	r3, r7, r3
 800a754:	2200      	movs	r2, #0
 800a756:	0018      	movs	r0, r3
 800a758:	f7ff fd0e 	bl	800a178 <find_volume>
 800a75c:	0003      	movs	r3, r0
 800a75e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800a760:	197b      	adds	r3, r7, r5
 800a762:	781b      	ldrb	r3, [r3, #0]
}
 800a764:	0018      	movs	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	b008      	add	sp, #32
 800a76a:	bdb0      	pop	{r4, r5, r7, pc}
 800a76c:	20000c6c 	.word	0x20000c6c

0800a770 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a772:	b09b      	sub	sp, #108	; 0x6c
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	1dfb      	adds	r3, r7, #7
 800a77c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <f_open+0x18>
 800a784:	2309      	movs	r3, #9
 800a786:	e1e3      	b.n	800ab50 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a788:	1dfb      	adds	r3, r7, #7
 800a78a:	1dfa      	adds	r2, r7, #7
 800a78c:	7812      	ldrb	r2, [r2, #0]
 800a78e:	213f      	movs	r1, #63	; 0x3f
 800a790:	400a      	ands	r2, r1
 800a792:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800a794:	2567      	movs	r5, #103	; 0x67
 800a796:	197c      	adds	r4, r7, r5
 800a798:	1dfb      	adds	r3, r7, #7
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	2314      	movs	r3, #20
 800a79e:	18f9      	adds	r1, r7, r3
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	18fb      	adds	r3, r7, r3
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7ff fce7 	bl	800a178 <find_volume>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a7ae:	197b      	adds	r3, r7, r5
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d000      	beq.n	800a7b8 <f_open+0x48>
 800a7b6:	e1c0      	b.n	800ab3a <f_open+0x3ca>
		dj.obj.fs = fs;
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	2618      	movs	r6, #24
 800a7bc:	19bb      	adds	r3, r7, r6
 800a7be:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	197c      	adds	r4, r7, r5
 800a7c4:	19bb      	adds	r3, r7, r6
 800a7c6:	0011      	movs	r1, r2
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f7ff fbb5 	bl	8009f38 <follow_path>
 800a7ce:	0003      	movs	r3, r0
 800a7d0:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a7d2:	0029      	movs	r1, r5
 800a7d4:	197b      	adds	r3, r7, r5
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d11b      	bne.n	800a814 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a7dc:	19bb      	adds	r3, r7, r6
 800a7de:	222f      	movs	r2, #47	; 0x2f
 800a7e0:	5c9b      	ldrb	r3, [r3, r2]
 800a7e2:	b25b      	sxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da03      	bge.n	800a7f0 <f_open+0x80>
				res = FR_INVALID_NAME;
 800a7e8:	187b      	adds	r3, r7, r1
 800a7ea:	2206      	movs	r2, #6
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	e011      	b.n	800a814 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7f0:	1dfb      	adds	r3, r7, #7
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	4393      	bics	r3, r2
 800a7f8:	1e5a      	subs	r2, r3, #1
 800a7fa:	4193      	sbcs	r3, r2
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	001a      	movs	r2, r3
 800a800:	2367      	movs	r3, #103	; 0x67
 800a802:	18fc      	adds	r4, r7, r3
 800a804:	2318      	movs	r3, #24
 800a806:	18fb      	adds	r3, r7, r3
 800a808:	0011      	movs	r1, r2
 800a80a:	0018      	movs	r0, r3
 800a80c:	f7fd fe7c 	bl	8008508 <chk_lock>
 800a810:	0003      	movs	r3, r0
 800a812:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a814:	1dfb      	adds	r3, r7, #7
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	221c      	movs	r2, #28
 800a81a:	4013      	ands	r3, r2
 800a81c:	d100      	bne.n	800a820 <f_open+0xb0>
 800a81e:	e096      	b.n	800a94e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800a820:	2267      	movs	r2, #103	; 0x67
 800a822:	18bb      	adds	r3, r7, r2
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d01a      	beq.n	800a860 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a82a:	18bb      	adds	r3, r7, r2
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d10f      	bne.n	800a852 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a832:	f7fd fec1 	bl	80085b8 <enq_lock>
 800a836:	1e03      	subs	r3, r0, #0
 800a838:	d007      	beq.n	800a84a <f_open+0xda>
 800a83a:	2318      	movs	r3, #24
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	0018      	movs	r0, r3
 800a840:	f7ff f866 	bl	8009910 <dir_register>
 800a844:	0003      	movs	r3, r0
 800a846:	001a      	movs	r2, r3
 800a848:	e000      	b.n	800a84c <f_open+0xdc>
 800a84a:	2212      	movs	r2, #18
 800a84c:	2367      	movs	r3, #103	; 0x67
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a852:	1dfb      	adds	r3, r7, #7
 800a854:	1dfa      	adds	r2, r7, #7
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	2108      	movs	r1, #8
 800a85a:	430a      	orrs	r2, r1
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	e014      	b.n	800a88a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a860:	2318      	movs	r3, #24
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	799b      	ldrb	r3, [r3, #6]
 800a866:	001a      	movs	r2, r3
 800a868:	2311      	movs	r3, #17
 800a86a:	4013      	ands	r3, r2
 800a86c:	d004      	beq.n	800a878 <f_open+0x108>
					res = FR_DENIED;
 800a86e:	2367      	movs	r3, #103	; 0x67
 800a870:	18fb      	adds	r3, r7, r3
 800a872:	2207      	movs	r2, #7
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	e008      	b.n	800a88a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a878:	1dfb      	adds	r3, r7, #7
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2204      	movs	r2, #4
 800a87e:	4013      	ands	r3, r2
 800a880:	d003      	beq.n	800a88a <f_open+0x11a>
 800a882:	2367      	movs	r3, #103	; 0x67
 800a884:	18fb      	adds	r3, r7, r3
 800a886:	2208      	movs	r2, #8
 800a888:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a88a:	2467      	movs	r4, #103	; 0x67
 800a88c:	193b      	adds	r3, r7, r4
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d000      	beq.n	800a896 <f_open+0x126>
 800a894:	e07b      	b.n	800a98e <f_open+0x21e>
 800a896:	1dfb      	adds	r3, r7, #7
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2208      	movs	r2, #8
 800a89c:	4013      	ands	r3, r2
 800a89e:	d100      	bne.n	800a8a2 <f_open+0x132>
 800a8a0:	e075      	b.n	800a98e <f_open+0x21e>
				dw = GET_FATTIME();
 800a8a2:	f7fc fe99 	bl	80075d8 <get_fattime>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a8aa:	2518      	movs	r5, #24
 800a8ac:	197b      	adds	r3, r7, r5
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	330e      	adds	r3, #14
 800a8b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8b4:	0011      	movs	r1, r2
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f7fd fd86 	bl	80083c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8bc:	197b      	adds	r3, r7, r5
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	3316      	adds	r3, #22
 800a8c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8c4:	0011      	movs	r1, r2
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f7fd fd7e 	bl	80083c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a8cc:	197b      	adds	r3, r7, r5
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	330b      	adds	r3, #11
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	197b      	adds	r3, r7, r5
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	0019      	movs	r1, r3
 800a8de:	0010      	movs	r0, r2
 800a8e0:	f7fe fd2b 	bl	800933a <ld_clust>
 800a8e4:	0003      	movs	r3, r0
 800a8e6:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a8e8:	6978      	ldr	r0, [r7, #20]
 800a8ea:	197b      	adds	r3, r7, r5
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	0019      	movs	r1, r3
 800a8f2:	f7fe fd41 	bl	8009378 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a8f6:	197b      	adds	r3, r7, r5
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	331c      	adds	r3, #28
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	0018      	movs	r0, r3
 800a900:	f7fd fd62 	bl	80083c8 <st_dword>
					fs->wflag = 1;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2201      	movs	r2, #1
 800a908:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d03e      	beq.n	800a98e <f_open+0x21e>
						dw = fs->winsect;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a916:	0026      	movs	r6, r4
 800a918:	193c      	adds	r4, r7, r4
 800a91a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a91c:	197b      	adds	r3, r7, r5
 800a91e:	2200      	movs	r2, #0
 800a920:	0018      	movs	r0, r3
 800a922:	f7fe fa1d 	bl	8008d60 <remove_chain>
 800a926:	0003      	movs	r3, r0
 800a928:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800a92a:	19bb      	adds	r3, r7, r6
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d12d      	bne.n	800a98e <f_open+0x21e>
							res = move_window(fs, dw);
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	19bc      	adds	r4, r7, r6
 800a936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a938:	0011      	movs	r1, r2
 800a93a:	0018      	movs	r0, r3
 800a93c:	f7fd ff96 	bl	800886c <move_window>
 800a940:	0003      	movs	r3, r0
 800a942:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a948:	3a01      	subs	r2, #1
 800a94a:	611a      	str	r2, [r3, #16]
 800a94c:	e01f      	b.n	800a98e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a94e:	2167      	movs	r1, #103	; 0x67
 800a950:	187b      	adds	r3, r7, r1
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d11a      	bne.n	800a98e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a958:	2318      	movs	r3, #24
 800a95a:	18fb      	adds	r3, r7, r3
 800a95c:	799b      	ldrb	r3, [r3, #6]
 800a95e:	001a      	movs	r2, r3
 800a960:	2310      	movs	r3, #16
 800a962:	4013      	ands	r3, r2
 800a964:	d003      	beq.n	800a96e <f_open+0x1fe>
					res = FR_NO_FILE;
 800a966:	187b      	adds	r3, r7, r1
 800a968:	2204      	movs	r2, #4
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e00f      	b.n	800a98e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a96e:	1dfb      	adds	r3, r7, #7
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2202      	movs	r2, #2
 800a974:	4013      	ands	r3, r2
 800a976:	d00a      	beq.n	800a98e <f_open+0x21e>
 800a978:	2318      	movs	r3, #24
 800a97a:	18fb      	adds	r3, r7, r3
 800a97c:	799b      	ldrb	r3, [r3, #6]
 800a97e:	001a      	movs	r2, r3
 800a980:	2301      	movs	r3, #1
 800a982:	4013      	ands	r3, r2
 800a984:	d003      	beq.n	800a98e <f_open+0x21e>
						res = FR_DENIED;
 800a986:	2367      	movs	r3, #103	; 0x67
 800a988:	18fb      	adds	r3, r7, r3
 800a98a:	2207      	movs	r2, #7
 800a98c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800a98e:	2367      	movs	r3, #103	; 0x67
 800a990:	18fb      	adds	r3, r7, r3
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d12b      	bne.n	800a9f0 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a998:	1dfb      	adds	r3, r7, #7
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2208      	movs	r2, #8
 800a99e:	4013      	ands	r3, r2
 800a9a0:	d005      	beq.n	800a9ae <f_open+0x23e>
				mode |= FA_MODIFIED;
 800a9a2:	1dfb      	adds	r3, r7, #7
 800a9a4:	1dfa      	adds	r2, r7, #7
 800a9a6:	7812      	ldrb	r2, [r2, #0]
 800a9a8:	2140      	movs	r1, #64	; 0x40
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a9b6:	2118      	movs	r1, #24
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	6a1a      	ldr	r2, [r3, #32]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9c0:	1dfb      	adds	r3, r7, #7
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4393      	bics	r3, r2
 800a9c8:	1e5a      	subs	r2, r3, #1
 800a9ca:	4193      	sbcs	r3, r2
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	187b      	adds	r3, r7, r1
 800a9d2:	0011      	movs	r1, r2
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f7fd fe0d 	bl	80085f4 <inc_lock>
 800a9da:	0002      	movs	r2, r0
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <f_open+0x280>
 800a9e8:	2367      	movs	r3, #103	; 0x67
 800a9ea:	18fb      	adds	r3, r7, r3
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a9f0:	2367      	movs	r3, #103	; 0x67
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d000      	beq.n	800a9fc <f_open+0x28c>
 800a9fa:	e09e      	b.n	800ab3a <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	2418      	movs	r4, #24
 800aa00:	193b      	adds	r3, r7, r4
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	0019      	movs	r1, r3
 800aa06:	0010      	movs	r0, r2
 800aa08:	f7fe fc97 	bl	800933a <ld_clust>
 800aa0c:	0002      	movs	r2, r0
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa12:	193b      	adds	r3, r7, r4
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	331c      	adds	r3, #28
 800aa18:	0018      	movs	r0, r3
 800aa1a:	f7fd fc96 	bl	800834a <ld_dword>
 800aa1e:	0002      	movs	r2, r0
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	88da      	ldrh	r2, [r3, #6]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	1dfa      	adds	r2, r7, #7
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3330      	adds	r3, #48	; 0x30
 800aa56:	2280      	movs	r2, #128	; 0x80
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f7fd fcfc 	bl	800845a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa62:	1dfb      	adds	r3, r7, #7
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2220      	movs	r2, #32
 800aa68:	4013      	ands	r3, r2
 800aa6a:	d066      	beq.n	800ab3a <f_open+0x3ca>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d062      	beq.n	800ab3a <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	895b      	ldrh	r3, [r3, #10]
 800aa80:	025b      	lsls	r3, r3, #9
 800aa82:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa90:	e019      	b.n	800aac6 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa96:	0011      	movs	r1, r2
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f7fd ffb5 	bl	8008a08 <get_fat>
 800aa9e:	0003      	movs	r3, r0
 800aaa0:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aaa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d803      	bhi.n	800aab0 <f_open+0x340>
 800aaa8:	2367      	movs	r3, #103	; 0x67
 800aaaa:	18fb      	adds	r3, r7, r3
 800aaac:	2202      	movs	r2, #2
 800aaae:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aab2:	3301      	adds	r3, #1
 800aab4:	d103      	bne.n	800aabe <f_open+0x34e>
 800aab6:	2367      	movs	r3, #103	; 0x67
 800aab8:	18fb      	adds	r3, r7, r3
 800aaba:	2201      	movs	r2, #1
 800aabc:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aabe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aac6:	2367      	movs	r3, #103	; 0x67
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d103      	bne.n	800aad8 <f_open+0x368>
 800aad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d8dc      	bhi.n	800aa92 <f_open+0x322>
				}
				fp->clust = clst;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aadc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aade:	2467      	movs	r4, #103	; 0x67
 800aae0:	193b      	adds	r3, r7, r4
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d128      	bne.n	800ab3a <f_open+0x3ca>
 800aae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaea:	05db      	lsls	r3, r3, #23
 800aaec:	0ddb      	lsrs	r3, r3, #23
 800aaee:	d024      	beq.n	800ab3a <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaf4:	0011      	movs	r1, r2
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f7fd ff6a 	bl	80089d0 <clust2sect>
 800aafc:	0003      	movs	r3, r0
 800aafe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <f_open+0x39e>
						res = FR_INT_ERR;
 800ab06:	193b      	adds	r3, r7, r4
 800ab08:	2202      	movs	r2, #2
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e015      	b.n	800ab3a <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab10:	0a5a      	lsrs	r2, r3, #9
 800ab12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab14:	18d2      	adds	r2, r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	7858      	ldrb	r0, [r3, #1]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3330      	adds	r3, #48	; 0x30
 800ab22:	0019      	movs	r1, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a1a      	ldr	r2, [r3, #32]
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f7fd fb7b 	bl	8008224 <disk_read>
 800ab2e:	1e03      	subs	r3, r0, #0
 800ab30:	d003      	beq.n	800ab3a <f_open+0x3ca>
 800ab32:	2367      	movs	r3, #103	; 0x67
 800ab34:	18fb      	adds	r3, r7, r3
 800ab36:	2201      	movs	r2, #1
 800ab38:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab3a:	2367      	movs	r3, #103	; 0x67
 800ab3c:	18fb      	adds	r3, r7, r3
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <f_open+0x3da>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab4a:	2367      	movs	r3, #103	; 0x67
 800ab4c:	18fb      	adds	r3, r7, r3
 800ab4e:	781b      	ldrb	r3, [r3, #0]
}
 800ab50:	0018      	movs	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	b01b      	add	sp, #108	; 0x6c
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab58:	b5b0      	push	{r4, r5, r7, lr}
 800ab5a:	b08c      	sub	sp, #48	; 0x30
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	252f      	movs	r5, #47	; 0x2f
 800ab74:	197c      	adds	r4, r7, r5
 800ab76:	2210      	movs	r2, #16
 800ab78:	18ba      	adds	r2, r7, r2
 800ab7a:	0011      	movs	r1, r2
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	f7ff fd6f 	bl	800a660 <validate>
 800ab82:	0003      	movs	r3, r0
 800ab84:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab86:	197b      	adds	r3, r7, r5
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d107      	bne.n	800ab9e <f_write+0x46>
 800ab8e:	197b      	adds	r3, r7, r5
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	7d52      	ldrb	r2, [r2, #21]
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	197b      	adds	r3, r7, r5
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <f_write+0x4e>
 800ab9e:	232f      	movs	r3, #47	; 0x2f
 800aba0:	18fb      	adds	r3, r7, r3
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	e14e      	b.n	800ae44 <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	7d1b      	ldrb	r3, [r3, #20]
 800abaa:	001a      	movs	r2, r3
 800abac:	2302      	movs	r3, #2
 800abae:	4013      	ands	r3, r2
 800abb0:	d101      	bne.n	800abb6 <f_write+0x5e>
 800abb2:	2307      	movs	r3, #7
 800abb4:	e146      	b.n	800ae44 <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	699a      	ldr	r2, [r3, #24]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	18d2      	adds	r2, r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d300      	bcc.n	800abc8 <f_write+0x70>
 800abc6:	e12f      	b.n	800ae28 <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	43db      	mvns	r3, r3
 800abce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800abd0:	e12a      	b.n	800ae28 <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	05db      	lsls	r3, r3, #23
 800abd8:	0ddb      	lsrs	r3, r3, #23
 800abda:	d000      	beq.n	800abde <f_write+0x86>
 800abdc:	e0e3      	b.n	800ada6 <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	0a5b      	lsrs	r3, r3, #9
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	8952      	ldrh	r2, [r2, #10]
 800abe8:	3a01      	subs	r2, #1
 800abea:	4013      	ands	r3, r2
 800abec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d146      	bne.n	800ac82 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10d      	bne.n	800ac18 <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d11e      	bne.n	800ac46 <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	f7fe f91a 	bl	8008e46 <create_chain>
 800ac12:	0003      	movs	r3, r0
 800ac14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac16:	e016      	b.n	800ac46 <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	699a      	ldr	r2, [r3, #24]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	0011      	movs	r1, r2
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f7fe f9b2 	bl	8008f92 <clmt_clust>
 800ac2e:	0003      	movs	r3, r0
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac32:	e008      	b.n	800ac46 <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	0019      	movs	r1, r3
 800ac3c:	0010      	movs	r0, r2
 800ac3e:	f7fe f902 	bl	8008e46 <create_chain>
 800ac42:	0003      	movs	r3, r0
 800ac44:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d100      	bne.n	800ac4e <f_write+0xf6>
 800ac4c:	e0f1      	b.n	800ae32 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d104      	bne.n	800ac5e <f_write+0x106>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2202      	movs	r2, #2
 800ac58:	755a      	strb	r2, [r3, #21]
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e0f2      	b.n	800ae44 <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	3301      	adds	r3, #1
 800ac62:	d104      	bne.n	800ac6e <f_write+0x116>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	755a      	strb	r2, [r3, #21]
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e0ea      	b.n	800ae44 <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <f_write+0x12a>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	7d1b      	ldrb	r3, [r3, #20]
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	da17      	bge.n	800acbc <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	7858      	ldrb	r0, [r3, #1]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3330      	adds	r3, #48	; 0x30
 800ac94:	0019      	movs	r1, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1a      	ldr	r2, [r3, #32]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f7fd faea 	bl	8008274 <disk_write>
 800aca0:	1e03      	subs	r3, r0, #0
 800aca2:	d004      	beq.n	800acae <f_write+0x156>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	755a      	strb	r2, [r3, #21]
 800acaa:	2301      	movs	r3, #1
 800acac:	e0ca      	b.n	800ae44 <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	7d1b      	ldrb	r3, [r3, #20]
 800acb2:	227f      	movs	r2, #127	; 0x7f
 800acb4:	4013      	ands	r3, r2
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	0019      	movs	r1, r3
 800acc4:	0010      	movs	r0, r2
 800acc6:	f7fd fe83 	bl	80089d0 <clust2sect>
 800acca:	0003      	movs	r3, r0
 800accc:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <f_write+0x186>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2202      	movs	r2, #2
 800acd8:	755a      	strb	r2, [r3, #21]
 800acda:	2302      	movs	r3, #2
 800acdc:	e0b2      	b.n	800ae44 <f_write+0x2ec>
			sect += csect;
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	18d3      	adds	r3, r2, r3
 800ace4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	0a5b      	lsrs	r3, r3, #9
 800acea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d03b      	beq.n	800ad6a <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	18d3      	adds	r3, r2, r3
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	8952      	ldrh	r2, [r2, #10]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d905      	bls.n	800ad0c <f_write+0x1b4>
					cc = fs->csize - csect;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	895b      	ldrh	r3, [r3, #10]
 800ad04:	001a      	movs	r2, r3
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	7858      	ldrb	r0, [r3, #1]
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	69f9      	ldr	r1, [r7, #28]
 800ad16:	f7fd faad 	bl	8008274 <disk_write>
 800ad1a:	1e03      	subs	r3, r0, #0
 800ad1c:	d004      	beq.n	800ad28 <f_write+0x1d0>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2201      	movs	r2, #1
 800ad22:	755a      	strb	r2, [r3, #21]
 800ad24:	2301      	movs	r3, #1
 800ad26:	e08d      	b.n	800ae44 <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a1a      	ldr	r2, [r3, #32]
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	6a3a      	ldr	r2, [r7, #32]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d915      	bls.n	800ad62 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3330      	adds	r3, #48	; 0x30
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a1a      	ldr	r2, [r3, #32]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	025b      	lsls	r3, r3, #9
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	18d3      	adds	r3, r2, r3
 800ad4a:	2280      	movs	r2, #128	; 0x80
 800ad4c:	0092      	lsls	r2, r2, #2
 800ad4e:	0019      	movs	r1, r3
 800ad50:	f7fd fb64 	bl	800841c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	7d1b      	ldrb	r3, [r3, #20]
 800ad58:	227f      	movs	r2, #127	; 0x7f
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	025b      	lsls	r3, r3, #9
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad68:	e040      	b.n	800adec <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d015      	beq.n	800ada0 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	699a      	ldr	r2, [r3, #24]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d20f      	bcs.n	800ada0 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	7858      	ldrb	r0, [r3, #1]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3330      	adds	r3, #48	; 0x30
 800ad88:	0019      	movs	r1, r3
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f7fd fa49 	bl	8008224 <disk_read>
 800ad92:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800ad94:	d004      	beq.n	800ada0 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	755a      	strb	r2, [r3, #21]
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e051      	b.n	800ae44 <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	05db      	lsls	r3, r3, #23
 800adac:	0ddb      	lsrs	r3, r3, #23
 800adae:	2280      	movs	r2, #128	; 0x80
 800adb0:	0092      	lsls	r2, r2, #2
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800adb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d901      	bls.n	800adc2 <f_write+0x26a>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3330      	adds	r3, #48	; 0x30
 800adc6:	001a      	movs	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	05db      	lsls	r3, r3, #23
 800adce:	0ddb      	lsrs	r3, r3, #23
 800add0:	18d3      	adds	r3, r2, r3
 800add2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add4:	69f9      	ldr	r1, [r7, #28]
 800add6:	0018      	movs	r0, r3
 800add8:	f7fd fb20 	bl	800841c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	7d1b      	ldrb	r3, [r3, #20]
 800ade0:	2280      	movs	r2, #128	; 0x80
 800ade2:	4252      	negs	r2, r2
 800ade4:	4313      	orrs	r3, r2
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	18d3      	adds	r3, r2, r3
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	699a      	ldr	r2, [r3, #24]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	18d2      	adds	r2, r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	619a      	str	r2, [r3, #24]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	68d9      	ldr	r1, [r3, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	699a      	ldr	r2, [r3, #24]
 800ae08:	000b      	movs	r3, r1
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d200      	bcs.n	800ae10 <f_write+0x2b8>
 800ae0e:	0013      	movs	r3, r2
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	60d3      	str	r3, [r2, #12]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	18d2      	adds	r2, r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d000      	beq.n	800ae30 <f_write+0x2d8>
 800ae2e:	e6d0      	b.n	800abd2 <f_write+0x7a>
 800ae30:	e000      	b.n	800ae34 <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae32:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	7d1b      	ldrb	r3, [r3, #20]
 800ae38:	2240      	movs	r2, #64	; 0x40
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b00c      	add	sp, #48	; 0x30
 800ae4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae4c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae4c:	b5b0      	push	{r4, r5, r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2517      	movs	r5, #23
 800ae58:	197c      	adds	r4, r7, r5
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	18ba      	adds	r2, r7, r2
 800ae5e:	0011      	movs	r1, r2
 800ae60:	0018      	movs	r0, r3
 800ae62:	f7ff fbfd 	bl	800a660 <validate>
 800ae66:	0003      	movs	r3, r0
 800ae68:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800ae6a:	197b      	adds	r3, r7, r5
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d16e      	bne.n	800af50 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7d1b      	ldrb	r3, [r3, #20]
 800ae76:	001a      	movs	r2, r3
 800ae78:	2340      	movs	r3, #64	; 0x40
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	d068      	beq.n	800af50 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7d1b      	ldrb	r3, [r3, #20]
 800ae82:	b25b      	sxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da14      	bge.n	800aeb2 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	7858      	ldrb	r0, [r3, #1]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3330      	adds	r3, #48	; 0x30
 800ae90:	0019      	movs	r1, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1a      	ldr	r2, [r3, #32]
 800ae96:	2301      	movs	r3, #1
 800ae98:	f7fd f9ec 	bl	8008274 <disk_write>
 800ae9c:	1e03      	subs	r3, r0, #0
 800ae9e:	d001      	beq.n	800aea4 <f_sync+0x58>
 800aea0:	2301      	movs	r3, #1
 800aea2:	e058      	b.n	800af56 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7d1b      	ldrb	r3, [r3, #20]
 800aea8:	227f      	movs	r2, #127	; 0x7f
 800aeaa:	4013      	ands	r3, r2
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aeb2:	f7fc fb91 	bl	80075d8 <get_fattime>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	2517      	movs	r5, #23
 800aec2:	197c      	adds	r4, r7, r5
 800aec4:	0019      	movs	r1, r3
 800aec6:	0010      	movs	r0, r2
 800aec8:	f7fd fcd0 	bl	800886c <move_window>
 800aecc:	0003      	movs	r3, r0
 800aece:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800aed0:	002c      	movs	r4, r5
 800aed2:	193b      	adds	r3, r7, r4
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d13a      	bne.n	800af50 <f_sync+0x104>
					dir = fp->dir_ptr;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aede:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	330b      	adds	r3, #11
 800aee4:	781a      	ldrb	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	330b      	adds	r3, #11
 800aeea:	2120      	movs	r1, #32
 800aeec:	430a      	orrs	r2, r1
 800aeee:	b2d2      	uxtb	r2, r2
 800aef0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689a      	ldr	r2, [r3, #8]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	0019      	movs	r1, r3
 800aefe:	f7fe fa3b 	bl	8009378 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	331c      	adds	r3, #28
 800af06:	001a      	movs	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	0019      	movs	r1, r3
 800af0e:	0010      	movs	r0, r2
 800af10:	f7fd fa5a 	bl	80083c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3316      	adds	r3, #22
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	0011      	movs	r1, r2
 800af1c:	0018      	movs	r0, r3
 800af1e:	f7fd fa53 	bl	80083c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3312      	adds	r3, #18
 800af26:	2100      	movs	r1, #0
 800af28:	0018      	movs	r0, r3
 800af2a:	f7fd fa2f 	bl	800838c <st_word>
					fs->wflag = 1;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2201      	movs	r2, #1
 800af32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	193c      	adds	r4, r7, r4
 800af38:	0018      	movs	r0, r3
 800af3a:	f7fd fccd 	bl	80088d8 <sync_fs>
 800af3e:	0003      	movs	r3, r0
 800af40:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	2240      	movs	r2, #64	; 0x40
 800af48:	4393      	bics	r3, r2
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af50:	2317      	movs	r3, #23
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	781b      	ldrb	r3, [r3, #0]
}
 800af56:	0018      	movs	r0, r3
 800af58:	46bd      	mov	sp, r7
 800af5a:	b006      	add	sp, #24
 800af5c:	bdb0      	pop	{r4, r5, r7, pc}

0800af5e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af5e:	b5b0      	push	{r4, r5, r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af66:	250f      	movs	r5, #15
 800af68:	197c      	adds	r4, r7, r5
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0018      	movs	r0, r3
 800af6e:	f7ff ff6d 	bl	800ae4c <f_sync>
 800af72:	0003      	movs	r3, r0
 800af74:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800af76:	197b      	adds	r3, r7, r5
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11c      	bne.n	800afb8 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	197c      	adds	r4, r7, r5
 800af82:	2208      	movs	r2, #8
 800af84:	18ba      	adds	r2, r7, r2
 800af86:	0011      	movs	r1, r2
 800af88:	0018      	movs	r0, r3
 800af8a:	f7ff fb69 	bl	800a660 <validate>
 800af8e:	0003      	movs	r3, r0
 800af90:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800af92:	197b      	adds	r3, r7, r5
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10e      	bne.n	800afb8 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	197c      	adds	r4, r7, r5
 800afa0:	0018      	movs	r0, r3
 800afa2:	f7fd fbb1 	bl	8008708 <dec_lock>
 800afa6:	0003      	movs	r3, r0
 800afa8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800afaa:	197b      	adds	r3, r7, r5
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800afb8:	230f      	movs	r3, #15
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	781b      	ldrb	r3, [r3, #0]
}
 800afbe:	0018      	movs	r0, r3
 800afc0:	46bd      	mov	sp, r7
 800afc2:	b004      	add	sp, #16
 800afc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800afc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	1dfb      	adds	r3, r7, #7
 800afd4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800afd6:	2417      	movs	r4, #23
 800afd8:	193b      	adds	r3, r7, r4
 800afda:	2201      	movs	r2, #1
 800afdc:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800afde:	2016      	movs	r0, #22
 800afe0:	183b      	adds	r3, r7, r0
 800afe2:	2200      	movs	r2, #0
 800afe4:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800afe8:	7a5b      	ldrb	r3, [r3, #9]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d136      	bne.n	800b05e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aff0:	4b1e      	ldr	r3, [pc, #120]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800aff2:	7a5b      	ldrb	r3, [r3, #9]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	001a      	movs	r2, r3
 800aff8:	4b1c      	ldr	r3, [pc, #112]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800affa:	2100      	movs	r1, #0
 800affc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800affe:	4b1b      	ldr	r3, [pc, #108]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b000:	7a5b      	ldrb	r3, [r3, #9]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	4a19      	ldr	r2, [pc, #100]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	18d3      	adds	r3, r2, r3
 800b00a:	3304      	adds	r3, #4
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800b010:	4b16      	ldr	r3, [pc, #88]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b012:	7a5b      	ldrb	r3, [r3, #9]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	001a      	movs	r2, r3
 800b018:	4b14      	ldr	r3, [pc, #80]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b01a:	189b      	adds	r3, r3, r2
 800b01c:	1dfa      	adds	r2, r7, #7
 800b01e:	7812      	ldrb	r2, [r2, #0]
 800b020:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b024:	7a5b      	ldrb	r3, [r3, #9]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	b2d1      	uxtb	r1, r2
 800b02c:	4a0f      	ldr	r2, [pc, #60]	; (800b06c <FATFS_LinkDriverEx+0xa4>)
 800b02e:	7251      	strb	r1, [r2, #9]
 800b030:	183a      	adds	r2, r7, r0
 800b032:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800b034:	183b      	adds	r3, r7, r0
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	3330      	adds	r3, #48	; 0x30
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	3301      	adds	r3, #1
 800b044:	223a      	movs	r2, #58	; 0x3a
 800b046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3302      	adds	r3, #2
 800b04c:	222f      	movs	r2, #47	; 0x2f
 800b04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3303      	adds	r3, #3
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b058:	193b      	adds	r3, r7, r4
 800b05a:	2200      	movs	r2, #0
 800b05c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b05e:	2317      	movs	r3, #23
 800b060:	18fb      	adds	r3, r7, r3
 800b062:	781b      	ldrb	r3, [r3, #0]
}
 800b064:	0018      	movs	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	b007      	add	sp, #28
 800b06a:	bd90      	pop	{r4, r7, pc}
 800b06c:	20000e94 	.word	0x20000e94

0800b070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	0018      	movs	r0, r3
 800b082:	f7ff ffa1 	bl	800afc8 <FATFS_LinkDriverEx>
 800b086:	0003      	movs	r3, r0
}
 800b088:	0018      	movs	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b002      	add	sp, #8
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	0002      	movs	r2, r0
 800b098:	6039      	str	r1, [r7, #0]
 800b09a:	1dbb      	adds	r3, r7, #6
 800b09c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b09e:	1dbb      	adds	r3, r7, #6
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	2b7f      	cmp	r3, #127	; 0x7f
 800b0a4:	d805      	bhi.n	800b0b2 <ff_convert+0x22>
		c = chr;
 800b0a6:	230e      	movs	r3, #14
 800b0a8:	18fb      	adds	r3, r7, r3
 800b0aa:	1dba      	adds	r2, r7, #6
 800b0ac:	8812      	ldrh	r2, [r2, #0]
 800b0ae:	801a      	strh	r2, [r3, #0]
 800b0b0:	e037      	b.n	800b122 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d010      	beq.n	800b0da <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b0b8:	1dbb      	adds	r3, r7, #6
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	2bff      	cmp	r3, #255	; 0xff
 800b0be:	d807      	bhi.n	800b0d0 <ff_convert+0x40>
 800b0c0:	1dbb      	adds	r3, r7, #6
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	3b80      	subs	r3, #128	; 0x80
 800b0c6:	001a      	movs	r2, r3
 800b0c8:	4b19      	ldr	r3, [pc, #100]	; (800b130 <ff_convert+0xa0>)
 800b0ca:	0052      	lsls	r2, r2, #1
 800b0cc:	5ad2      	ldrh	r2, [r2, r3]
 800b0ce:	e000      	b.n	800b0d2 <ff_convert+0x42>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	230e      	movs	r3, #14
 800b0d4:	18fb      	adds	r3, r7, r3
 800b0d6:	801a      	strh	r2, [r3, #0]
 800b0d8:	e023      	b.n	800b122 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b0da:	230e      	movs	r3, #14
 800b0dc:	18fb      	adds	r3, r7, r3
 800b0de:	2200      	movs	r2, #0
 800b0e0:	801a      	strh	r2, [r3, #0]
 800b0e2:	e00e      	b.n	800b102 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800b0e4:	210e      	movs	r1, #14
 800b0e6:	187b      	adds	r3, r7, r1
 800b0e8:	881a      	ldrh	r2, [r3, #0]
 800b0ea:	4b11      	ldr	r3, [pc, #68]	; (800b130 <ff_convert+0xa0>)
 800b0ec:	0052      	lsls	r2, r2, #1
 800b0ee:	5ad3      	ldrh	r3, [r2, r3]
 800b0f0:	1dba      	adds	r2, r7, #6
 800b0f2:	8812      	ldrh	r2, [r2, #0]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d00a      	beq.n	800b10e <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800b0f8:	187b      	adds	r3, r7, r1
 800b0fa:	881a      	ldrh	r2, [r3, #0]
 800b0fc:	187b      	adds	r3, r7, r1
 800b0fe:	3201      	adds	r2, #1
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	230e      	movs	r3, #14
 800b104:	18fb      	adds	r3, r7, r3
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	2b7f      	cmp	r3, #127	; 0x7f
 800b10a:	d9eb      	bls.n	800b0e4 <ff_convert+0x54>
 800b10c:	e000      	b.n	800b110 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800b10e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800b110:	210e      	movs	r1, #14
 800b112:	187b      	adds	r3, r7, r1
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	3380      	adds	r3, #128	; 0x80
 800b118:	b29a      	uxth	r2, r3
 800b11a:	187b      	adds	r3, r7, r1
 800b11c:	21ff      	movs	r1, #255	; 0xff
 800b11e:	400a      	ands	r2, r1
 800b120:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800b122:	230e      	movs	r3, #14
 800b124:	18fb      	adds	r3, r7, r3
 800b126:	881b      	ldrh	r3, [r3, #0]
}
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b004      	add	sp, #16
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	0800c58c 	.word	0x0800c58c

0800b134 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b134:	b5b0      	push	{r4, r5, r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	0002      	movs	r2, r0
 800b13c:	1dbb      	adds	r3, r7, #6
 800b13e:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b140:	1dbb      	adds	r3, r7, #6
 800b142:	881a      	ldrh	r2, [r3, #0]
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	015b      	lsls	r3, r3, #5
 800b148:	429a      	cmp	r2, r3
 800b14a:	d201      	bcs.n	800b150 <ff_wtoupper+0x1c>
 800b14c:	4b4d      	ldr	r3, [pc, #308]	; (800b284 <ff_wtoupper+0x150>)
 800b14e:	e000      	b.n	800b152 <ff_wtoupper+0x1e>
 800b150:	4b4d      	ldr	r3, [pc, #308]	; (800b288 <ff_wtoupper+0x154>)
 800b152:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	1c9a      	adds	r2, r3, #2
 800b158:	617a      	str	r2, [r7, #20]
 800b15a:	2412      	movs	r4, #18
 800b15c:	193a      	adds	r2, r7, r4
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800b162:	193b      	adds	r3, r7, r4
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d100      	bne.n	800b16c <ff_wtoupper+0x38>
 800b16a:	e084      	b.n	800b276 <ff_wtoupper+0x142>
 800b16c:	1dba      	adds	r2, r7, #6
 800b16e:	193b      	adds	r3, r7, r4
 800b170:	8812      	ldrh	r2, [r2, #0]
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d200      	bcs.n	800b17a <ff_wtoupper+0x46>
 800b178:	e07d      	b.n	800b276 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	1c9a      	adds	r2, r3, #2
 800b17e:	617a      	str	r2, [r7, #20]
 800b180:	2010      	movs	r0, #16
 800b182:	183a      	adds	r2, r7, r0
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	8013      	strh	r3, [r2, #0]
 800b188:	250e      	movs	r5, #14
 800b18a:	197b      	adds	r3, r7, r5
 800b18c:	183a      	adds	r2, r7, r0
 800b18e:	8812      	ldrh	r2, [r2, #0]
 800b190:	0a12      	lsrs	r2, r2, #8
 800b192:	801a      	strh	r2, [r3, #0]
 800b194:	183b      	adds	r3, r7, r0
 800b196:	183a      	adds	r2, r7, r0
 800b198:	8812      	ldrh	r2, [r2, #0]
 800b19a:	21ff      	movs	r1, #255	; 0xff
 800b19c:	400a      	ands	r2, r1
 800b19e:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800b1a0:	1dbb      	adds	r3, r7, #6
 800b1a2:	881a      	ldrh	r2, [r3, #0]
 800b1a4:	193b      	adds	r3, r7, r4
 800b1a6:	8819      	ldrh	r1, [r3, #0]
 800b1a8:	183b      	adds	r3, r7, r0
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	18cb      	adds	r3, r1, r3
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	da52      	bge.n	800b258 <ff_wtoupper+0x124>
			switch (cmd) {
 800b1b2:	197b      	adds	r3, r7, r5
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	2b08      	cmp	r3, #8
 800b1b8:	d85c      	bhi.n	800b274 <ff_wtoupper+0x140>
 800b1ba:	009a      	lsls	r2, r3, #2
 800b1bc:	4b33      	ldr	r3, [pc, #204]	; (800b28c <ff_wtoupper+0x158>)
 800b1be:	18d3      	adds	r3, r2, r3
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b1c4:	1dbb      	adds	r3, r7, #6
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	2312      	movs	r3, #18
 800b1ca:	18fb      	adds	r3, r7, r3
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	18d2      	adds	r2, r2, r3
 800b1d6:	1dbb      	adds	r3, r7, #6
 800b1d8:	8812      	ldrh	r2, [r2, #0]
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	e03b      	b.n	800b256 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b1de:	1dba      	adds	r2, r7, #6
 800b1e0:	2312      	movs	r3, #18
 800b1e2:	18fb      	adds	r3, r7, r3
 800b1e4:	8812      	ldrh	r2, [r2, #0]
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	1dbb      	adds	r3, r7, #6
 800b1f4:	1db9      	adds	r1, r7, #6
 800b1f6:	8809      	ldrh	r1, [r1, #0]
 800b1f8:	1a8a      	subs	r2, r1, r2
 800b1fa:	801a      	strh	r2, [r3, #0]
 800b1fc:	e02b      	b.n	800b256 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b1fe:	1dbb      	adds	r3, r7, #6
 800b200:	1dba      	adds	r2, r7, #6
 800b202:	8812      	ldrh	r2, [r2, #0]
 800b204:	3a10      	subs	r2, #16
 800b206:	801a      	strh	r2, [r3, #0]
 800b208:	e025      	b.n	800b256 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b20a:	1dbb      	adds	r3, r7, #6
 800b20c:	1dba      	adds	r2, r7, #6
 800b20e:	8812      	ldrh	r2, [r2, #0]
 800b210:	3a20      	subs	r2, #32
 800b212:	801a      	strh	r2, [r3, #0]
 800b214:	e01f      	b.n	800b256 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b216:	1dbb      	adds	r3, r7, #6
 800b218:	1dba      	adds	r2, r7, #6
 800b21a:	8812      	ldrh	r2, [r2, #0]
 800b21c:	3a30      	subs	r2, #48	; 0x30
 800b21e:	801a      	strh	r2, [r3, #0]
 800b220:	e019      	b.n	800b256 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b222:	1dbb      	adds	r3, r7, #6
 800b224:	1dba      	adds	r2, r7, #6
 800b226:	8812      	ldrh	r2, [r2, #0]
 800b228:	3a1a      	subs	r2, #26
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	e013      	b.n	800b256 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b22e:	1dbb      	adds	r3, r7, #6
 800b230:	1dba      	adds	r2, r7, #6
 800b232:	8812      	ldrh	r2, [r2, #0]
 800b234:	3208      	adds	r2, #8
 800b236:	801a      	strh	r2, [r3, #0]
 800b238:	e00d      	b.n	800b256 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b23a:	1dbb      	adds	r3, r7, #6
 800b23c:	1dba      	adds	r2, r7, #6
 800b23e:	8812      	ldrh	r2, [r2, #0]
 800b240:	3a50      	subs	r2, #80	; 0x50
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	e007      	b.n	800b256 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b246:	1dbb      	adds	r3, r7, #6
 800b248:	1dba      	adds	r2, r7, #6
 800b24a:	8812      	ldrh	r2, [r2, #0]
 800b24c:	4910      	ldr	r1, [pc, #64]	; (800b290 <ff_wtoupper+0x15c>)
 800b24e:	468c      	mov	ip, r1
 800b250:	4462      	add	r2, ip
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800b256:	e00d      	b.n	800b274 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800b258:	230e      	movs	r3, #14
 800b25a:	18fb      	adds	r3, r7, r3
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d000      	beq.n	800b264 <ff_wtoupper+0x130>
 800b262:	e777      	b.n	800b154 <ff_wtoupper+0x20>
 800b264:	2310      	movs	r3, #16
 800b266:	18fb      	adds	r3, r7, r3
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	18d3      	adds	r3, r2, r3
 800b270:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b272:	e76f      	b.n	800b154 <ff_wtoupper+0x20>
			break;
 800b274:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800b276:	1dbb      	adds	r3, r7, #6
 800b278:	881b      	ldrh	r3, [r3, #0]
}
 800b27a:	0018      	movs	r0, r3
 800b27c:	46bd      	mov	sp, r7
 800b27e:	b006      	add	sp, #24
 800b280:	bdb0      	pop	{r4, r5, r7, pc}
 800b282:	46c0      	nop			; (mov r8, r8)
 800b284:	0800c6b0 	.word	0x0800c6b0
 800b288:	0800c8a4 	.word	0x0800c8a4
 800b28c:	0800c68c 	.word	0x0800c68c
 800b290:	ffffe3a0 	.word	0xffffe3a0

0800b294 <siprintf>:
 800b294:	b40e      	push	{r1, r2, r3}
 800b296:	b500      	push	{lr}
 800b298:	490b      	ldr	r1, [pc, #44]	; (800b2c8 <siprintf+0x34>)
 800b29a:	b09c      	sub	sp, #112	; 0x70
 800b29c:	ab1d      	add	r3, sp, #116	; 0x74
 800b29e:	9002      	str	r0, [sp, #8]
 800b2a0:	9006      	str	r0, [sp, #24]
 800b2a2:	9107      	str	r1, [sp, #28]
 800b2a4:	9104      	str	r1, [sp, #16]
 800b2a6:	4809      	ldr	r0, [pc, #36]	; (800b2cc <siprintf+0x38>)
 800b2a8:	4909      	ldr	r1, [pc, #36]	; (800b2d0 <siprintf+0x3c>)
 800b2aa:	cb04      	ldmia	r3!, {r2}
 800b2ac:	9105      	str	r1, [sp, #20]
 800b2ae:	6800      	ldr	r0, [r0, #0]
 800b2b0:	a902      	add	r1, sp, #8
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	f000 f9a2 	bl	800b5fc <_svfiprintf_r>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	9b02      	ldr	r3, [sp, #8]
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	b01c      	add	sp, #112	; 0x70
 800b2c0:	bc08      	pop	{r3}
 800b2c2:	b003      	add	sp, #12
 800b2c4:	4718      	bx	r3
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	7fffffff 	.word	0x7fffffff
 800b2cc:	20000074 	.word	0x20000074
 800b2d0:	ffff0208 	.word	0xffff0208

0800b2d4 <memset>:
 800b2d4:	0003      	movs	r3, r0
 800b2d6:	1882      	adds	r2, r0, r2
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	7019      	strb	r1, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <__errno>:
 800b2e4:	4b01      	ldr	r3, [pc, #4]	; (800b2ec <__errno+0x8>)
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	4770      	bx	lr
 800b2ea:	46c0      	nop			; (mov r8, r8)
 800b2ec:	20000074 	.word	0x20000074

0800b2f0 <__libc_init_array>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	4c0c      	ldr	r4, [pc, #48]	; (800b328 <__libc_init_array+0x38>)
 800b2f6:	4d0d      	ldr	r5, [pc, #52]	; (800b32c <__libc_init_array+0x3c>)
 800b2f8:	1b64      	subs	r4, r4, r5
 800b2fa:	10a4      	asrs	r4, r4, #2
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	d109      	bne.n	800b314 <__libc_init_array+0x24>
 800b300:	2600      	movs	r6, #0
 800b302:	f000 fc6d 	bl	800bbe0 <_init>
 800b306:	4c0a      	ldr	r4, [pc, #40]	; (800b330 <__libc_init_array+0x40>)
 800b308:	4d0a      	ldr	r5, [pc, #40]	; (800b334 <__libc_init_array+0x44>)
 800b30a:	1b64      	subs	r4, r4, r5
 800b30c:	10a4      	asrs	r4, r4, #2
 800b30e:	42a6      	cmp	r6, r4
 800b310:	d105      	bne.n	800b31e <__libc_init_array+0x2e>
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	00b3      	lsls	r3, r6, #2
 800b316:	58eb      	ldr	r3, [r5, r3]
 800b318:	4798      	blx	r3
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7ee      	b.n	800b2fc <__libc_init_array+0xc>
 800b31e:	00b3      	lsls	r3, r6, #2
 800b320:	58eb      	ldr	r3, [r5, r3]
 800b322:	4798      	blx	r3
 800b324:	3601      	adds	r6, #1
 800b326:	e7f2      	b.n	800b30e <__libc_init_array+0x1e>
 800b328:	0800c99c 	.word	0x0800c99c
 800b32c:	0800c99c 	.word	0x0800c99c
 800b330:	0800c9a0 	.word	0x0800c9a0
 800b334:	0800c99c 	.word	0x0800c99c

0800b338 <__retarget_lock_acquire_recursive>:
 800b338:	4770      	bx	lr

0800b33a <__retarget_lock_release_recursive>:
 800b33a:	4770      	bx	lr

0800b33c <_free_r>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	0005      	movs	r5, r0
 800b340:	2900      	cmp	r1, #0
 800b342:	d010      	beq.n	800b366 <_free_r+0x2a>
 800b344:	1f0c      	subs	r4, r1, #4
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da00      	bge.n	800b34e <_free_r+0x12>
 800b34c:	18e4      	adds	r4, r4, r3
 800b34e:	0028      	movs	r0, r5
 800b350:	f000 f8e2 	bl	800b518 <__malloc_lock>
 800b354:	4a1d      	ldr	r2, [pc, #116]	; (800b3cc <_free_r+0x90>)
 800b356:	6813      	ldr	r3, [r2, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d105      	bne.n	800b368 <_free_r+0x2c>
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	6014      	str	r4, [r2, #0]
 800b360:	0028      	movs	r0, r5
 800b362:	f000 f8e1 	bl	800b528 <__malloc_unlock>
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d908      	bls.n	800b37e <_free_r+0x42>
 800b36c:	6820      	ldr	r0, [r4, #0]
 800b36e:	1821      	adds	r1, r4, r0
 800b370:	428b      	cmp	r3, r1
 800b372:	d1f3      	bne.n	800b35c <_free_r+0x20>
 800b374:	6819      	ldr	r1, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	1809      	adds	r1, r1, r0
 800b37a:	6021      	str	r1, [r4, #0]
 800b37c:	e7ee      	b.n	800b35c <_free_r+0x20>
 800b37e:	001a      	movs	r2, r3
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <_free_r+0x4e>
 800b386:	42a3      	cmp	r3, r4
 800b388:	d9f9      	bls.n	800b37e <_free_r+0x42>
 800b38a:	6811      	ldr	r1, [r2, #0]
 800b38c:	1850      	adds	r0, r2, r1
 800b38e:	42a0      	cmp	r0, r4
 800b390:	d10b      	bne.n	800b3aa <_free_r+0x6e>
 800b392:	6820      	ldr	r0, [r4, #0]
 800b394:	1809      	adds	r1, r1, r0
 800b396:	1850      	adds	r0, r2, r1
 800b398:	6011      	str	r1, [r2, #0]
 800b39a:	4283      	cmp	r3, r0
 800b39c:	d1e0      	bne.n	800b360 <_free_r+0x24>
 800b39e:	6818      	ldr	r0, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	1841      	adds	r1, r0, r1
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	6053      	str	r3, [r2, #4]
 800b3a8:	e7da      	b.n	800b360 <_free_r+0x24>
 800b3aa:	42a0      	cmp	r0, r4
 800b3ac:	d902      	bls.n	800b3b4 <_free_r+0x78>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	e7d5      	b.n	800b360 <_free_r+0x24>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	1821      	adds	r1, r4, r0
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	d103      	bne.n	800b3c4 <_free_r+0x88>
 800b3bc:	6819      	ldr	r1, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	1809      	adds	r1, r1, r0
 800b3c2:	6021      	str	r1, [r4, #0]
 800b3c4:	6063      	str	r3, [r4, #4]
 800b3c6:	6054      	str	r4, [r2, #4]
 800b3c8:	e7ca      	b.n	800b360 <_free_r+0x24>
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	20000fe0 	.word	0x20000fe0

0800b3d0 <sbrk_aligned>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	4e0f      	ldr	r6, [pc, #60]	; (800b410 <sbrk_aligned+0x40>)
 800b3d4:	000d      	movs	r5, r1
 800b3d6:	6831      	ldr	r1, [r6, #0]
 800b3d8:	0004      	movs	r4, r0
 800b3da:	2900      	cmp	r1, #0
 800b3dc:	d102      	bne.n	800b3e4 <sbrk_aligned+0x14>
 800b3de:	f000 fba1 	bl	800bb24 <_sbrk_r>
 800b3e2:	6030      	str	r0, [r6, #0]
 800b3e4:	0029      	movs	r1, r5
 800b3e6:	0020      	movs	r0, r4
 800b3e8:	f000 fb9c 	bl	800bb24 <_sbrk_r>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d00a      	beq.n	800b406 <sbrk_aligned+0x36>
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	1cc5      	adds	r5, r0, #3
 800b3f4:	439d      	bics	r5, r3
 800b3f6:	42a8      	cmp	r0, r5
 800b3f8:	d007      	beq.n	800b40a <sbrk_aligned+0x3a>
 800b3fa:	1a29      	subs	r1, r5, r0
 800b3fc:	0020      	movs	r0, r4
 800b3fe:	f000 fb91 	bl	800bb24 <_sbrk_r>
 800b402:	3001      	adds	r0, #1
 800b404:	d101      	bne.n	800b40a <sbrk_aligned+0x3a>
 800b406:	2501      	movs	r5, #1
 800b408:	426d      	negs	r5, r5
 800b40a:	0028      	movs	r0, r5
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
 800b40e:	46c0      	nop			; (mov r8, r8)
 800b410:	20000fe4 	.word	0x20000fe4

0800b414 <_malloc_r>:
 800b414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b416:	2203      	movs	r2, #3
 800b418:	1ccb      	adds	r3, r1, #3
 800b41a:	4393      	bics	r3, r2
 800b41c:	3308      	adds	r3, #8
 800b41e:	0006      	movs	r6, r0
 800b420:	001f      	movs	r7, r3
 800b422:	2b0c      	cmp	r3, #12
 800b424:	d238      	bcs.n	800b498 <_malloc_r+0x84>
 800b426:	270c      	movs	r7, #12
 800b428:	42b9      	cmp	r1, r7
 800b42a:	d837      	bhi.n	800b49c <_malloc_r+0x88>
 800b42c:	0030      	movs	r0, r6
 800b42e:	f000 f873 	bl	800b518 <__malloc_lock>
 800b432:	4b38      	ldr	r3, [pc, #224]	; (800b514 <_malloc_r+0x100>)
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	001c      	movs	r4, r3
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d133      	bne.n	800b4a6 <_malloc_r+0x92>
 800b43e:	0039      	movs	r1, r7
 800b440:	0030      	movs	r0, r6
 800b442:	f7ff ffc5 	bl	800b3d0 <sbrk_aligned>
 800b446:	0004      	movs	r4, r0
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d15e      	bne.n	800b50a <_malloc_r+0xf6>
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	681c      	ldr	r4, [r3, #0]
 800b450:	0025      	movs	r5, r4
 800b452:	2d00      	cmp	r5, #0
 800b454:	d14e      	bne.n	800b4f4 <_malloc_r+0xe0>
 800b456:	2c00      	cmp	r4, #0
 800b458:	d051      	beq.n	800b4fe <_malloc_r+0xea>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	0029      	movs	r1, r5
 800b45e:	18e3      	adds	r3, r4, r3
 800b460:	0030      	movs	r0, r6
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	f000 fb5e 	bl	800bb24 <_sbrk_r>
 800b468:	9b01      	ldr	r3, [sp, #4]
 800b46a:	4283      	cmp	r3, r0
 800b46c:	d147      	bne.n	800b4fe <_malloc_r+0xea>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	0030      	movs	r0, r6
 800b472:	1aff      	subs	r7, r7, r3
 800b474:	0039      	movs	r1, r7
 800b476:	f7ff ffab 	bl	800b3d0 <sbrk_aligned>
 800b47a:	3001      	adds	r0, #1
 800b47c:	d03f      	beq.n	800b4fe <_malloc_r+0xea>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	19db      	adds	r3, r3, r7
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d040      	beq.n	800b50e <_malloc_r+0xfa>
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	42a2      	cmp	r2, r4
 800b490:	d133      	bne.n	800b4fa <_malloc_r+0xe6>
 800b492:	2200      	movs	r2, #0
 800b494:	605a      	str	r2, [r3, #4]
 800b496:	e014      	b.n	800b4c2 <_malloc_r+0xae>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dac5      	bge.n	800b428 <_malloc_r+0x14>
 800b49c:	230c      	movs	r3, #12
 800b49e:	2500      	movs	r5, #0
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	0028      	movs	r0, r5
 800b4a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4a6:	6821      	ldr	r1, [r4, #0]
 800b4a8:	1bc9      	subs	r1, r1, r7
 800b4aa:	d420      	bmi.n	800b4ee <_malloc_r+0xda>
 800b4ac:	290b      	cmp	r1, #11
 800b4ae:	d918      	bls.n	800b4e2 <_malloc_r+0xce>
 800b4b0:	19e2      	adds	r2, r4, r7
 800b4b2:	6027      	str	r7, [r4, #0]
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d112      	bne.n	800b4de <_malloc_r+0xca>
 800b4b8:	9b00      	ldr	r3, [sp, #0]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	6863      	ldr	r3, [r4, #4]
 800b4be:	6011      	str	r1, [r2, #0]
 800b4c0:	6053      	str	r3, [r2, #4]
 800b4c2:	0030      	movs	r0, r6
 800b4c4:	0025      	movs	r5, r4
 800b4c6:	f000 f82f 	bl	800b528 <__malloc_unlock>
 800b4ca:	2207      	movs	r2, #7
 800b4cc:	350b      	adds	r5, #11
 800b4ce:	1d23      	adds	r3, r4, #4
 800b4d0:	4395      	bics	r5, r2
 800b4d2:	1aea      	subs	r2, r5, r3
 800b4d4:	429d      	cmp	r5, r3
 800b4d6:	d0e4      	beq.n	800b4a2 <_malloc_r+0x8e>
 800b4d8:	1b5b      	subs	r3, r3, r5
 800b4da:	50a3      	str	r3, [r4, r2]
 800b4dc:	e7e1      	b.n	800b4a2 <_malloc_r+0x8e>
 800b4de:	605a      	str	r2, [r3, #4]
 800b4e0:	e7ec      	b.n	800b4bc <_malloc_r+0xa8>
 800b4e2:	6862      	ldr	r2, [r4, #4]
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d1d5      	bne.n	800b494 <_malloc_r+0x80>
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	601a      	str	r2, [r3, #0]
 800b4ec:	e7e9      	b.n	800b4c2 <_malloc_r+0xae>
 800b4ee:	0023      	movs	r3, r4
 800b4f0:	6864      	ldr	r4, [r4, #4]
 800b4f2:	e7a2      	b.n	800b43a <_malloc_r+0x26>
 800b4f4:	002c      	movs	r4, r5
 800b4f6:	686d      	ldr	r5, [r5, #4]
 800b4f8:	e7ab      	b.n	800b452 <_malloc_r+0x3e>
 800b4fa:	0013      	movs	r3, r2
 800b4fc:	e7c4      	b.n	800b488 <_malloc_r+0x74>
 800b4fe:	230c      	movs	r3, #12
 800b500:	0030      	movs	r0, r6
 800b502:	6033      	str	r3, [r6, #0]
 800b504:	f000 f810 	bl	800b528 <__malloc_unlock>
 800b508:	e7cb      	b.n	800b4a2 <_malloc_r+0x8e>
 800b50a:	6027      	str	r7, [r4, #0]
 800b50c:	e7d9      	b.n	800b4c2 <_malloc_r+0xae>
 800b50e:	605b      	str	r3, [r3, #4]
 800b510:	deff      	udf	#255	; 0xff
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	20000fe0 	.word	0x20000fe0

0800b518 <__malloc_lock>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	4802      	ldr	r0, [pc, #8]	; (800b524 <__malloc_lock+0xc>)
 800b51c:	f7ff ff0c 	bl	800b338 <__retarget_lock_acquire_recursive>
 800b520:	bd10      	pop	{r4, pc}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	20000fdc 	.word	0x20000fdc

0800b528 <__malloc_unlock>:
 800b528:	b510      	push	{r4, lr}
 800b52a:	4802      	ldr	r0, [pc, #8]	; (800b534 <__malloc_unlock+0xc>)
 800b52c:	f7ff ff05 	bl	800b33a <__retarget_lock_release_recursive>
 800b530:	bd10      	pop	{r4, pc}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	20000fdc 	.word	0x20000fdc

0800b538 <__ssputs_r>:
 800b538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b53a:	b085      	sub	sp, #20
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	9203      	str	r2, [sp, #12]
 800b540:	688e      	ldr	r6, [r1, #8]
 800b542:	9a01      	ldr	r2, [sp, #4]
 800b544:	0007      	movs	r7, r0
 800b546:	000c      	movs	r4, r1
 800b548:	680b      	ldr	r3, [r1, #0]
 800b54a:	4296      	cmp	r6, r2
 800b54c:	d831      	bhi.n	800b5b2 <__ssputs_r+0x7a>
 800b54e:	898a      	ldrh	r2, [r1, #12]
 800b550:	2190      	movs	r1, #144	; 0x90
 800b552:	00c9      	lsls	r1, r1, #3
 800b554:	420a      	tst	r2, r1
 800b556:	d029      	beq.n	800b5ac <__ssputs_r+0x74>
 800b558:	2003      	movs	r0, #3
 800b55a:	6921      	ldr	r1, [r4, #16]
 800b55c:	1a5b      	subs	r3, r3, r1
 800b55e:	9302      	str	r3, [sp, #8]
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	4343      	muls	r3, r0
 800b564:	0fdd      	lsrs	r5, r3, #31
 800b566:	18ed      	adds	r5, r5, r3
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	9802      	ldr	r0, [sp, #8]
 800b56c:	3301      	adds	r3, #1
 800b56e:	181b      	adds	r3, r3, r0
 800b570:	106d      	asrs	r5, r5, #1
 800b572:	42ab      	cmp	r3, r5
 800b574:	d900      	bls.n	800b578 <__ssputs_r+0x40>
 800b576:	001d      	movs	r5, r3
 800b578:	0552      	lsls	r2, r2, #21
 800b57a:	d529      	bpl.n	800b5d0 <__ssputs_r+0x98>
 800b57c:	0029      	movs	r1, r5
 800b57e:	0038      	movs	r0, r7
 800b580:	f7ff ff48 	bl	800b414 <_malloc_r>
 800b584:	1e06      	subs	r6, r0, #0
 800b586:	d02d      	beq.n	800b5e4 <__ssputs_r+0xac>
 800b588:	9a02      	ldr	r2, [sp, #8]
 800b58a:	6921      	ldr	r1, [r4, #16]
 800b58c:	f000 fae7 	bl	800bb5e <memcpy>
 800b590:	89a2      	ldrh	r2, [r4, #12]
 800b592:	4b19      	ldr	r3, [pc, #100]	; (800b5f8 <__ssputs_r+0xc0>)
 800b594:	401a      	ands	r2, r3
 800b596:	2380      	movs	r3, #128	; 0x80
 800b598:	4313      	orrs	r3, r2
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	9b02      	ldr	r3, [sp, #8]
 800b59e:	6126      	str	r6, [r4, #16]
 800b5a0:	18f6      	adds	r6, r6, r3
 800b5a2:	6026      	str	r6, [r4, #0]
 800b5a4:	6165      	str	r5, [r4, #20]
 800b5a6:	9e01      	ldr	r6, [sp, #4]
 800b5a8:	1aed      	subs	r5, r5, r3
 800b5aa:	60a5      	str	r5, [r4, #8]
 800b5ac:	9b01      	ldr	r3, [sp, #4]
 800b5ae:	429e      	cmp	r6, r3
 800b5b0:	d900      	bls.n	800b5b4 <__ssputs_r+0x7c>
 800b5b2:	9e01      	ldr	r6, [sp, #4]
 800b5b4:	0032      	movs	r2, r6
 800b5b6:	9903      	ldr	r1, [sp, #12]
 800b5b8:	6820      	ldr	r0, [r4, #0]
 800b5ba:	f000 fa9f 	bl	800bafc <memmove>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	68a3      	ldr	r3, [r4, #8]
 800b5c2:	1b9b      	subs	r3, r3, r6
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	199b      	adds	r3, r3, r6
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d0:	002a      	movs	r2, r5
 800b5d2:	0038      	movs	r0, r7
 800b5d4:	f000 facc 	bl	800bb70 <_realloc_r>
 800b5d8:	1e06      	subs	r6, r0, #0
 800b5da:	d1df      	bne.n	800b59c <__ssputs_r+0x64>
 800b5dc:	0038      	movs	r0, r7
 800b5de:	6921      	ldr	r1, [r4, #16]
 800b5e0:	f7ff feac 	bl	800b33c <_free_r>
 800b5e4:	230c      	movs	r3, #12
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	603b      	str	r3, [r7, #0]
 800b5ea:	89a2      	ldrh	r2, [r4, #12]
 800b5ec:	3334      	adds	r3, #52	; 0x34
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	4240      	negs	r0, r0
 800b5f4:	e7ea      	b.n	800b5cc <__ssputs_r+0x94>
 800b5f6:	46c0      	nop			; (mov r8, r8)
 800b5f8:	fffffb7f 	.word	0xfffffb7f

0800b5fc <_svfiprintf_r>:
 800b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fe:	b0a1      	sub	sp, #132	; 0x84
 800b600:	9003      	str	r0, [sp, #12]
 800b602:	001d      	movs	r5, r3
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	000f      	movs	r7, r1
 800b608:	0016      	movs	r6, r2
 800b60a:	061b      	lsls	r3, r3, #24
 800b60c:	d511      	bpl.n	800b632 <_svfiprintf_r+0x36>
 800b60e:	690b      	ldr	r3, [r1, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10e      	bne.n	800b632 <_svfiprintf_r+0x36>
 800b614:	2140      	movs	r1, #64	; 0x40
 800b616:	f7ff fefd 	bl	800b414 <_malloc_r>
 800b61a:	6038      	str	r0, [r7, #0]
 800b61c:	6138      	str	r0, [r7, #16]
 800b61e:	2800      	cmp	r0, #0
 800b620:	d105      	bne.n	800b62e <_svfiprintf_r+0x32>
 800b622:	230c      	movs	r3, #12
 800b624:	9a03      	ldr	r2, [sp, #12]
 800b626:	3801      	subs	r0, #1
 800b628:	6013      	str	r3, [r2, #0]
 800b62a:	b021      	add	sp, #132	; 0x84
 800b62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	617b      	str	r3, [r7, #20]
 800b632:	2300      	movs	r3, #0
 800b634:	ac08      	add	r4, sp, #32
 800b636:	6163      	str	r3, [r4, #20]
 800b638:	3320      	adds	r3, #32
 800b63a:	7663      	strb	r3, [r4, #25]
 800b63c:	3310      	adds	r3, #16
 800b63e:	76a3      	strb	r3, [r4, #26]
 800b640:	9507      	str	r5, [sp, #28]
 800b642:	0035      	movs	r5, r6
 800b644:	782b      	ldrb	r3, [r5, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <_svfiprintf_r+0x52>
 800b64a:	2b25      	cmp	r3, #37	; 0x25
 800b64c:	d148      	bne.n	800b6e0 <_svfiprintf_r+0xe4>
 800b64e:	1bab      	subs	r3, r5, r6
 800b650:	9305      	str	r3, [sp, #20]
 800b652:	42b5      	cmp	r5, r6
 800b654:	d00b      	beq.n	800b66e <_svfiprintf_r+0x72>
 800b656:	0032      	movs	r2, r6
 800b658:	0039      	movs	r1, r7
 800b65a:	9803      	ldr	r0, [sp, #12]
 800b65c:	f7ff ff6c 	bl	800b538 <__ssputs_r>
 800b660:	3001      	adds	r0, #1
 800b662:	d100      	bne.n	800b666 <_svfiprintf_r+0x6a>
 800b664:	e0af      	b.n	800b7c6 <_svfiprintf_r+0x1ca>
 800b666:	6963      	ldr	r3, [r4, #20]
 800b668:	9a05      	ldr	r2, [sp, #20]
 800b66a:	189b      	adds	r3, r3, r2
 800b66c:	6163      	str	r3, [r4, #20]
 800b66e:	782b      	ldrb	r3, [r5, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d100      	bne.n	800b676 <_svfiprintf_r+0x7a>
 800b674:	e0a7      	b.n	800b7c6 <_svfiprintf_r+0x1ca>
 800b676:	2201      	movs	r2, #1
 800b678:	2300      	movs	r3, #0
 800b67a:	4252      	negs	r2, r2
 800b67c:	6062      	str	r2, [r4, #4]
 800b67e:	a904      	add	r1, sp, #16
 800b680:	3254      	adds	r2, #84	; 0x54
 800b682:	1852      	adds	r2, r2, r1
 800b684:	1c6e      	adds	r6, r5, #1
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	60e3      	str	r3, [r4, #12]
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	7013      	strb	r3, [r2, #0]
 800b68e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b690:	4b55      	ldr	r3, [pc, #340]	; (800b7e8 <_svfiprintf_r+0x1ec>)
 800b692:	2205      	movs	r2, #5
 800b694:	0018      	movs	r0, r3
 800b696:	7831      	ldrb	r1, [r6, #0]
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	f000 fa55 	bl	800bb48 <memchr>
 800b69e:	1c75      	adds	r5, r6, #1
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d11f      	bne.n	800b6e4 <_svfiprintf_r+0xe8>
 800b6a4:	6822      	ldr	r2, [r4, #0]
 800b6a6:	06d3      	lsls	r3, r2, #27
 800b6a8:	d504      	bpl.n	800b6b4 <_svfiprintf_r+0xb8>
 800b6aa:	2353      	movs	r3, #83	; 0x53
 800b6ac:	a904      	add	r1, sp, #16
 800b6ae:	185b      	adds	r3, r3, r1
 800b6b0:	2120      	movs	r1, #32
 800b6b2:	7019      	strb	r1, [r3, #0]
 800b6b4:	0713      	lsls	r3, r2, #28
 800b6b6:	d504      	bpl.n	800b6c2 <_svfiprintf_r+0xc6>
 800b6b8:	2353      	movs	r3, #83	; 0x53
 800b6ba:	a904      	add	r1, sp, #16
 800b6bc:	185b      	adds	r3, r3, r1
 800b6be:	212b      	movs	r1, #43	; 0x2b
 800b6c0:	7019      	strb	r1, [r3, #0]
 800b6c2:	7833      	ldrb	r3, [r6, #0]
 800b6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c6:	d016      	beq.n	800b6f6 <_svfiprintf_r+0xfa>
 800b6c8:	0035      	movs	r5, r6
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	200a      	movs	r0, #10
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	782a      	ldrb	r2, [r5, #0]
 800b6d2:	1c6e      	adds	r6, r5, #1
 800b6d4:	3a30      	subs	r2, #48	; 0x30
 800b6d6:	2a09      	cmp	r2, #9
 800b6d8:	d94e      	bls.n	800b778 <_svfiprintf_r+0x17c>
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d111      	bne.n	800b702 <_svfiprintf_r+0x106>
 800b6de:	e017      	b.n	800b710 <_svfiprintf_r+0x114>
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	e7af      	b.n	800b644 <_svfiprintf_r+0x48>
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	1ac0      	subs	r0, r0, r3
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4083      	lsls	r3, r0
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	002e      	movs	r6, r5
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	e7cc      	b.n	800b690 <_svfiprintf_r+0x94>
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	1d19      	adds	r1, r3, #4
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	9107      	str	r1, [sp, #28]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	db01      	blt.n	800b706 <_svfiprintf_r+0x10a>
 800b702:	930b      	str	r3, [sp, #44]	; 0x2c
 800b704:	e004      	b.n	800b710 <_svfiprintf_r+0x114>
 800b706:	425b      	negs	r3, r3
 800b708:	60e3      	str	r3, [r4, #12]
 800b70a:	2302      	movs	r3, #2
 800b70c:	4313      	orrs	r3, r2
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	782b      	ldrb	r3, [r5, #0]
 800b712:	2b2e      	cmp	r3, #46	; 0x2e
 800b714:	d10a      	bne.n	800b72c <_svfiprintf_r+0x130>
 800b716:	786b      	ldrb	r3, [r5, #1]
 800b718:	2b2a      	cmp	r3, #42	; 0x2a
 800b71a:	d135      	bne.n	800b788 <_svfiprintf_r+0x18c>
 800b71c:	9b07      	ldr	r3, [sp, #28]
 800b71e:	3502      	adds	r5, #2
 800b720:	1d1a      	adds	r2, r3, #4
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	9207      	str	r2, [sp, #28]
 800b726:	2b00      	cmp	r3, #0
 800b728:	db2b      	blt.n	800b782 <_svfiprintf_r+0x186>
 800b72a:	9309      	str	r3, [sp, #36]	; 0x24
 800b72c:	4e2f      	ldr	r6, [pc, #188]	; (800b7ec <_svfiprintf_r+0x1f0>)
 800b72e:	2203      	movs	r2, #3
 800b730:	0030      	movs	r0, r6
 800b732:	7829      	ldrb	r1, [r5, #0]
 800b734:	f000 fa08 	bl	800bb48 <memchr>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d006      	beq.n	800b74a <_svfiprintf_r+0x14e>
 800b73c:	2340      	movs	r3, #64	; 0x40
 800b73e:	1b80      	subs	r0, r0, r6
 800b740:	4083      	lsls	r3, r0
 800b742:	6822      	ldr	r2, [r4, #0]
 800b744:	3501      	adds	r5, #1
 800b746:	4313      	orrs	r3, r2
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	7829      	ldrb	r1, [r5, #0]
 800b74c:	2206      	movs	r2, #6
 800b74e:	4828      	ldr	r0, [pc, #160]	; (800b7f0 <_svfiprintf_r+0x1f4>)
 800b750:	1c6e      	adds	r6, r5, #1
 800b752:	7621      	strb	r1, [r4, #24]
 800b754:	f000 f9f8 	bl	800bb48 <memchr>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d03c      	beq.n	800b7d6 <_svfiprintf_r+0x1da>
 800b75c:	4b25      	ldr	r3, [pc, #148]	; (800b7f4 <_svfiprintf_r+0x1f8>)
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d125      	bne.n	800b7ae <_svfiprintf_r+0x1b2>
 800b762:	2207      	movs	r2, #7
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	3307      	adds	r3, #7
 800b768:	4393      	bics	r3, r2
 800b76a:	3308      	adds	r3, #8
 800b76c:	9307      	str	r3, [sp, #28]
 800b76e:	6963      	ldr	r3, [r4, #20]
 800b770:	9a04      	ldr	r2, [sp, #16]
 800b772:	189b      	adds	r3, r3, r2
 800b774:	6163      	str	r3, [r4, #20]
 800b776:	e764      	b.n	800b642 <_svfiprintf_r+0x46>
 800b778:	4343      	muls	r3, r0
 800b77a:	0035      	movs	r5, r6
 800b77c:	2101      	movs	r1, #1
 800b77e:	189b      	adds	r3, r3, r2
 800b780:	e7a6      	b.n	800b6d0 <_svfiprintf_r+0xd4>
 800b782:	2301      	movs	r3, #1
 800b784:	425b      	negs	r3, r3
 800b786:	e7d0      	b.n	800b72a <_svfiprintf_r+0x12e>
 800b788:	2300      	movs	r3, #0
 800b78a:	200a      	movs	r0, #10
 800b78c:	001a      	movs	r2, r3
 800b78e:	3501      	adds	r5, #1
 800b790:	6063      	str	r3, [r4, #4]
 800b792:	7829      	ldrb	r1, [r5, #0]
 800b794:	1c6e      	adds	r6, r5, #1
 800b796:	3930      	subs	r1, #48	; 0x30
 800b798:	2909      	cmp	r1, #9
 800b79a:	d903      	bls.n	800b7a4 <_svfiprintf_r+0x1a8>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0c5      	beq.n	800b72c <_svfiprintf_r+0x130>
 800b7a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a2:	e7c3      	b.n	800b72c <_svfiprintf_r+0x130>
 800b7a4:	4342      	muls	r2, r0
 800b7a6:	0035      	movs	r5, r6
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	1852      	adds	r2, r2, r1
 800b7ac:	e7f1      	b.n	800b792 <_svfiprintf_r+0x196>
 800b7ae:	aa07      	add	r2, sp, #28
 800b7b0:	9200      	str	r2, [sp, #0]
 800b7b2:	0021      	movs	r1, r4
 800b7b4:	003a      	movs	r2, r7
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <_svfiprintf_r+0x1fc>)
 800b7b8:	9803      	ldr	r0, [sp, #12]
 800b7ba:	e000      	b.n	800b7be <_svfiprintf_r+0x1c2>
 800b7bc:	bf00      	nop
 800b7be:	9004      	str	r0, [sp, #16]
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	d1d3      	bne.n	800b76e <_svfiprintf_r+0x172>
 800b7c6:	89bb      	ldrh	r3, [r7, #12]
 800b7c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b7ca:	065b      	lsls	r3, r3, #25
 800b7cc:	d400      	bmi.n	800b7d0 <_svfiprintf_r+0x1d4>
 800b7ce:	e72c      	b.n	800b62a <_svfiprintf_r+0x2e>
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	4240      	negs	r0, r0
 800b7d4:	e729      	b.n	800b62a <_svfiprintf_r+0x2e>
 800b7d6:	aa07      	add	r2, sp, #28
 800b7d8:	9200      	str	r2, [sp, #0]
 800b7da:	0021      	movs	r1, r4
 800b7dc:	003a      	movs	r2, r7
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <_svfiprintf_r+0x1fc>)
 800b7e0:	9803      	ldr	r0, [sp, #12]
 800b7e2:	f000 f87b 	bl	800b8dc <_printf_i>
 800b7e6:	e7ea      	b.n	800b7be <_svfiprintf_r+0x1c2>
 800b7e8:	0800c960 	.word	0x0800c960
 800b7ec:	0800c966 	.word	0x0800c966
 800b7f0:	0800c96a 	.word	0x0800c96a
 800b7f4:	00000000 	.word	0x00000000
 800b7f8:	0800b539 	.word	0x0800b539

0800b7fc <_printf_common>:
 800b7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7fe:	0016      	movs	r6, r2
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	688a      	ldr	r2, [r1, #8]
 800b804:	690b      	ldr	r3, [r1, #16]
 800b806:	000c      	movs	r4, r1
 800b808:	9000      	str	r0, [sp, #0]
 800b80a:	4293      	cmp	r3, r2
 800b80c:	da00      	bge.n	800b810 <_printf_common+0x14>
 800b80e:	0013      	movs	r3, r2
 800b810:	0022      	movs	r2, r4
 800b812:	6033      	str	r3, [r6, #0]
 800b814:	3243      	adds	r2, #67	; 0x43
 800b816:	7812      	ldrb	r2, [r2, #0]
 800b818:	2a00      	cmp	r2, #0
 800b81a:	d001      	beq.n	800b820 <_printf_common+0x24>
 800b81c:	3301      	adds	r3, #1
 800b81e:	6033      	str	r3, [r6, #0]
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	069b      	lsls	r3, r3, #26
 800b824:	d502      	bpl.n	800b82c <_printf_common+0x30>
 800b826:	6833      	ldr	r3, [r6, #0]
 800b828:	3302      	adds	r3, #2
 800b82a:	6033      	str	r3, [r6, #0]
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	2306      	movs	r3, #6
 800b830:	0015      	movs	r5, r2
 800b832:	401d      	ands	r5, r3
 800b834:	421a      	tst	r2, r3
 800b836:	d027      	beq.n	800b888 <_printf_common+0x8c>
 800b838:	0023      	movs	r3, r4
 800b83a:	3343      	adds	r3, #67	; 0x43
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	1e5a      	subs	r2, r3, #1
 800b840:	4193      	sbcs	r3, r2
 800b842:	6822      	ldr	r2, [r4, #0]
 800b844:	0692      	lsls	r2, r2, #26
 800b846:	d430      	bmi.n	800b8aa <_printf_common+0xae>
 800b848:	0022      	movs	r2, r4
 800b84a:	9901      	ldr	r1, [sp, #4]
 800b84c:	9800      	ldr	r0, [sp, #0]
 800b84e:	9d08      	ldr	r5, [sp, #32]
 800b850:	3243      	adds	r2, #67	; 0x43
 800b852:	47a8      	blx	r5
 800b854:	3001      	adds	r0, #1
 800b856:	d025      	beq.n	800b8a4 <_printf_common+0xa8>
 800b858:	2206      	movs	r2, #6
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	2500      	movs	r5, #0
 800b85e:	4013      	ands	r3, r2
 800b860:	2b04      	cmp	r3, #4
 800b862:	d105      	bne.n	800b870 <_printf_common+0x74>
 800b864:	6833      	ldr	r3, [r6, #0]
 800b866:	68e5      	ldr	r5, [r4, #12]
 800b868:	1aed      	subs	r5, r5, r3
 800b86a:	43eb      	mvns	r3, r5
 800b86c:	17db      	asrs	r3, r3, #31
 800b86e:	401d      	ands	r5, r3
 800b870:	68a3      	ldr	r3, [r4, #8]
 800b872:	6922      	ldr	r2, [r4, #16]
 800b874:	4293      	cmp	r3, r2
 800b876:	dd01      	ble.n	800b87c <_printf_common+0x80>
 800b878:	1a9b      	subs	r3, r3, r2
 800b87a:	18ed      	adds	r5, r5, r3
 800b87c:	2600      	movs	r6, #0
 800b87e:	42b5      	cmp	r5, r6
 800b880:	d120      	bne.n	800b8c4 <_printf_common+0xc8>
 800b882:	2000      	movs	r0, #0
 800b884:	e010      	b.n	800b8a8 <_printf_common+0xac>
 800b886:	3501      	adds	r5, #1
 800b888:	68e3      	ldr	r3, [r4, #12]
 800b88a:	6832      	ldr	r2, [r6, #0]
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	42ab      	cmp	r3, r5
 800b890:	ddd2      	ble.n	800b838 <_printf_common+0x3c>
 800b892:	0022      	movs	r2, r4
 800b894:	2301      	movs	r3, #1
 800b896:	9901      	ldr	r1, [sp, #4]
 800b898:	9800      	ldr	r0, [sp, #0]
 800b89a:	9f08      	ldr	r7, [sp, #32]
 800b89c:	3219      	adds	r2, #25
 800b89e:	47b8      	blx	r7
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d1f0      	bne.n	800b886 <_printf_common+0x8a>
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	4240      	negs	r0, r0
 800b8a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8aa:	2030      	movs	r0, #48	; 0x30
 800b8ac:	18e1      	adds	r1, r4, r3
 800b8ae:	3143      	adds	r1, #67	; 0x43
 800b8b0:	7008      	strb	r0, [r1, #0]
 800b8b2:	0021      	movs	r1, r4
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	3145      	adds	r1, #69	; 0x45
 800b8b8:	7809      	ldrb	r1, [r1, #0]
 800b8ba:	18a2      	adds	r2, r4, r2
 800b8bc:	3243      	adds	r2, #67	; 0x43
 800b8be:	3302      	adds	r3, #2
 800b8c0:	7011      	strb	r1, [r2, #0]
 800b8c2:	e7c1      	b.n	800b848 <_printf_common+0x4c>
 800b8c4:	0022      	movs	r2, r4
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	9901      	ldr	r1, [sp, #4]
 800b8ca:	9800      	ldr	r0, [sp, #0]
 800b8cc:	9f08      	ldr	r7, [sp, #32]
 800b8ce:	321a      	adds	r2, #26
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d0e6      	beq.n	800b8a4 <_printf_common+0xa8>
 800b8d6:	3601      	adds	r6, #1
 800b8d8:	e7d1      	b.n	800b87e <_printf_common+0x82>
	...

0800b8dc <_printf_i>:
 800b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8de:	b08b      	sub	sp, #44	; 0x2c
 800b8e0:	9206      	str	r2, [sp, #24]
 800b8e2:	000a      	movs	r2, r1
 800b8e4:	3243      	adds	r2, #67	; 0x43
 800b8e6:	9307      	str	r3, [sp, #28]
 800b8e8:	9005      	str	r0, [sp, #20]
 800b8ea:	9204      	str	r2, [sp, #16]
 800b8ec:	7e0a      	ldrb	r2, [r1, #24]
 800b8ee:	000c      	movs	r4, r1
 800b8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8f2:	2a78      	cmp	r2, #120	; 0x78
 800b8f4:	d809      	bhi.n	800b90a <_printf_i+0x2e>
 800b8f6:	2a62      	cmp	r2, #98	; 0x62
 800b8f8:	d80b      	bhi.n	800b912 <_printf_i+0x36>
 800b8fa:	2a00      	cmp	r2, #0
 800b8fc:	d100      	bne.n	800b900 <_printf_i+0x24>
 800b8fe:	e0be      	b.n	800ba7e <_printf_i+0x1a2>
 800b900:	497c      	ldr	r1, [pc, #496]	; (800baf4 <_printf_i+0x218>)
 800b902:	9103      	str	r1, [sp, #12]
 800b904:	2a58      	cmp	r2, #88	; 0x58
 800b906:	d100      	bne.n	800b90a <_printf_i+0x2e>
 800b908:	e093      	b.n	800ba32 <_printf_i+0x156>
 800b90a:	0026      	movs	r6, r4
 800b90c:	3642      	adds	r6, #66	; 0x42
 800b90e:	7032      	strb	r2, [r6, #0]
 800b910:	e022      	b.n	800b958 <_printf_i+0x7c>
 800b912:	0010      	movs	r0, r2
 800b914:	3863      	subs	r0, #99	; 0x63
 800b916:	2815      	cmp	r0, #21
 800b918:	d8f7      	bhi.n	800b90a <_printf_i+0x2e>
 800b91a:	f7f4 fbfd 	bl	8000118 <__gnu_thumb1_case_shi>
 800b91e:	0016      	.short	0x0016
 800b920:	fff6001f 	.word	0xfff6001f
 800b924:	fff6fff6 	.word	0xfff6fff6
 800b928:	001ffff6 	.word	0x001ffff6
 800b92c:	fff6fff6 	.word	0xfff6fff6
 800b930:	fff6fff6 	.word	0xfff6fff6
 800b934:	003600a3 	.word	0x003600a3
 800b938:	fff60083 	.word	0xfff60083
 800b93c:	00b4fff6 	.word	0x00b4fff6
 800b940:	0036fff6 	.word	0x0036fff6
 800b944:	fff6fff6 	.word	0xfff6fff6
 800b948:	0087      	.short	0x0087
 800b94a:	0026      	movs	r6, r4
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	3642      	adds	r6, #66	; 0x42
 800b950:	1d11      	adds	r1, r2, #4
 800b952:	6019      	str	r1, [r3, #0]
 800b954:	6813      	ldr	r3, [r2, #0]
 800b956:	7033      	strb	r3, [r6, #0]
 800b958:	2301      	movs	r3, #1
 800b95a:	e0a2      	b.n	800baa2 <_printf_i+0x1c6>
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	6809      	ldr	r1, [r1, #0]
 800b960:	1d02      	adds	r2, r0, #4
 800b962:	060d      	lsls	r5, r1, #24
 800b964:	d50b      	bpl.n	800b97e <_printf_i+0xa2>
 800b966:	6805      	ldr	r5, [r0, #0]
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	2d00      	cmp	r5, #0
 800b96c:	da03      	bge.n	800b976 <_printf_i+0x9a>
 800b96e:	232d      	movs	r3, #45	; 0x2d
 800b970:	9a04      	ldr	r2, [sp, #16]
 800b972:	426d      	negs	r5, r5
 800b974:	7013      	strb	r3, [r2, #0]
 800b976:	4b5f      	ldr	r3, [pc, #380]	; (800baf4 <_printf_i+0x218>)
 800b978:	270a      	movs	r7, #10
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	e01b      	b.n	800b9b6 <_printf_i+0xda>
 800b97e:	6805      	ldr	r5, [r0, #0]
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	0649      	lsls	r1, r1, #25
 800b984:	d5f1      	bpl.n	800b96a <_printf_i+0x8e>
 800b986:	b22d      	sxth	r5, r5
 800b988:	e7ef      	b.n	800b96a <_printf_i+0x8e>
 800b98a:	680d      	ldr	r5, [r1, #0]
 800b98c:	6819      	ldr	r1, [r3, #0]
 800b98e:	1d08      	adds	r0, r1, #4
 800b990:	6018      	str	r0, [r3, #0]
 800b992:	062e      	lsls	r6, r5, #24
 800b994:	d501      	bpl.n	800b99a <_printf_i+0xbe>
 800b996:	680d      	ldr	r5, [r1, #0]
 800b998:	e003      	b.n	800b9a2 <_printf_i+0xc6>
 800b99a:	066d      	lsls	r5, r5, #25
 800b99c:	d5fb      	bpl.n	800b996 <_printf_i+0xba>
 800b99e:	680d      	ldr	r5, [r1, #0]
 800b9a0:	b2ad      	uxth	r5, r5
 800b9a2:	4b54      	ldr	r3, [pc, #336]	; (800baf4 <_printf_i+0x218>)
 800b9a4:	2708      	movs	r7, #8
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	2a6f      	cmp	r2, #111	; 0x6f
 800b9aa:	d000      	beq.n	800b9ae <_printf_i+0xd2>
 800b9ac:	3702      	adds	r7, #2
 800b9ae:	0023      	movs	r3, r4
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	3343      	adds	r3, #67	; 0x43
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	6863      	ldr	r3, [r4, #4]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	db03      	blt.n	800b9c6 <_printf_i+0xea>
 800b9be:	2104      	movs	r1, #4
 800b9c0:	6822      	ldr	r2, [r4, #0]
 800b9c2:	438a      	bics	r2, r1
 800b9c4:	6022      	str	r2, [r4, #0]
 800b9c6:	2d00      	cmp	r5, #0
 800b9c8:	d102      	bne.n	800b9d0 <_printf_i+0xf4>
 800b9ca:	9e04      	ldr	r6, [sp, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00c      	beq.n	800b9ea <_printf_i+0x10e>
 800b9d0:	9e04      	ldr	r6, [sp, #16]
 800b9d2:	0028      	movs	r0, r5
 800b9d4:	0039      	movs	r1, r7
 800b9d6:	f7f4 fc2f 	bl	8000238 <__aeabi_uidivmod>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	3e01      	subs	r6, #1
 800b9de:	5c5b      	ldrb	r3, [r3, r1]
 800b9e0:	7033      	strb	r3, [r6, #0]
 800b9e2:	002b      	movs	r3, r5
 800b9e4:	0005      	movs	r5, r0
 800b9e6:	429f      	cmp	r7, r3
 800b9e8:	d9f3      	bls.n	800b9d2 <_printf_i+0xf6>
 800b9ea:	2f08      	cmp	r7, #8
 800b9ec:	d109      	bne.n	800ba02 <_printf_i+0x126>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	07db      	lsls	r3, r3, #31
 800b9f2:	d506      	bpl.n	800ba02 <_printf_i+0x126>
 800b9f4:	6862      	ldr	r2, [r4, #4]
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	dc02      	bgt.n	800ba02 <_printf_i+0x126>
 800b9fc:	2330      	movs	r3, #48	; 0x30
 800b9fe:	3e01      	subs	r6, #1
 800ba00:	7033      	strb	r3, [r6, #0]
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	1b9b      	subs	r3, r3, r6
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	9b07      	ldr	r3, [sp, #28]
 800ba0a:	0021      	movs	r1, r4
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	9805      	ldr	r0, [sp, #20]
 800ba10:	9b06      	ldr	r3, [sp, #24]
 800ba12:	aa09      	add	r2, sp, #36	; 0x24
 800ba14:	f7ff fef2 	bl	800b7fc <_printf_common>
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d147      	bne.n	800baac <_printf_i+0x1d0>
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	4240      	negs	r0, r0
 800ba20:	b00b      	add	sp, #44	; 0x2c
 800ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba24:	2220      	movs	r2, #32
 800ba26:	6809      	ldr	r1, [r1, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	6022      	str	r2, [r4, #0]
 800ba2c:	2278      	movs	r2, #120	; 0x78
 800ba2e:	4932      	ldr	r1, [pc, #200]	; (800baf8 <_printf_i+0x21c>)
 800ba30:	9103      	str	r1, [sp, #12]
 800ba32:	0021      	movs	r1, r4
 800ba34:	3145      	adds	r1, #69	; 0x45
 800ba36:	700a      	strb	r2, [r1, #0]
 800ba38:	6819      	ldr	r1, [r3, #0]
 800ba3a:	6822      	ldr	r2, [r4, #0]
 800ba3c:	c920      	ldmia	r1!, {r5}
 800ba3e:	0610      	lsls	r0, r2, #24
 800ba40:	d402      	bmi.n	800ba48 <_printf_i+0x16c>
 800ba42:	0650      	lsls	r0, r2, #25
 800ba44:	d500      	bpl.n	800ba48 <_printf_i+0x16c>
 800ba46:	b2ad      	uxth	r5, r5
 800ba48:	6019      	str	r1, [r3, #0]
 800ba4a:	07d3      	lsls	r3, r2, #31
 800ba4c:	d502      	bpl.n	800ba54 <_printf_i+0x178>
 800ba4e:	2320      	movs	r3, #32
 800ba50:	4313      	orrs	r3, r2
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	2710      	movs	r7, #16
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	d1a9      	bne.n	800b9ae <_printf_i+0xd2>
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	4393      	bics	r3, r2
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	e7a4      	b.n	800b9ae <_printf_i+0xd2>
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	680d      	ldr	r5, [r1, #0]
 800ba68:	1d10      	adds	r0, r2, #4
 800ba6a:	6949      	ldr	r1, [r1, #20]
 800ba6c:	6018      	str	r0, [r3, #0]
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	062e      	lsls	r6, r5, #24
 800ba72:	d501      	bpl.n	800ba78 <_printf_i+0x19c>
 800ba74:	6019      	str	r1, [r3, #0]
 800ba76:	e002      	b.n	800ba7e <_printf_i+0x1a2>
 800ba78:	066d      	lsls	r5, r5, #25
 800ba7a:	d5fb      	bpl.n	800ba74 <_printf_i+0x198>
 800ba7c:	8019      	strh	r1, [r3, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9e04      	ldr	r6, [sp, #16]
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	e7c0      	b.n	800ba08 <_printf_i+0x12c>
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	1d11      	adds	r1, r2, #4
 800ba8a:	6019      	str	r1, [r3, #0]
 800ba8c:	6816      	ldr	r6, [r2, #0]
 800ba8e:	2100      	movs	r1, #0
 800ba90:	0030      	movs	r0, r6
 800ba92:	6862      	ldr	r2, [r4, #4]
 800ba94:	f000 f858 	bl	800bb48 <memchr>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d001      	beq.n	800baa0 <_printf_i+0x1c4>
 800ba9c:	1b80      	subs	r0, r0, r6
 800ba9e:	6060      	str	r0, [r4, #4]
 800baa0:	6863      	ldr	r3, [r4, #4]
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	2300      	movs	r3, #0
 800baa6:	9a04      	ldr	r2, [sp, #16]
 800baa8:	7013      	strb	r3, [r2, #0]
 800baaa:	e7ad      	b.n	800ba08 <_printf_i+0x12c>
 800baac:	0032      	movs	r2, r6
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	9906      	ldr	r1, [sp, #24]
 800bab2:	9805      	ldr	r0, [sp, #20]
 800bab4:	9d07      	ldr	r5, [sp, #28]
 800bab6:	47a8      	blx	r5
 800bab8:	3001      	adds	r0, #1
 800baba:	d0af      	beq.n	800ba1c <_printf_i+0x140>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079b      	lsls	r3, r3, #30
 800bac0:	d415      	bmi.n	800baee <_printf_i+0x212>
 800bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac4:	68e0      	ldr	r0, [r4, #12]
 800bac6:	4298      	cmp	r0, r3
 800bac8:	daaa      	bge.n	800ba20 <_printf_i+0x144>
 800baca:	0018      	movs	r0, r3
 800bacc:	e7a8      	b.n	800ba20 <_printf_i+0x144>
 800bace:	0022      	movs	r2, r4
 800bad0:	2301      	movs	r3, #1
 800bad2:	9906      	ldr	r1, [sp, #24]
 800bad4:	9805      	ldr	r0, [sp, #20]
 800bad6:	9e07      	ldr	r6, [sp, #28]
 800bad8:	3219      	adds	r2, #25
 800bada:	47b0      	blx	r6
 800badc:	3001      	adds	r0, #1
 800bade:	d09d      	beq.n	800ba1c <_printf_i+0x140>
 800bae0:	3501      	adds	r5, #1
 800bae2:	68e3      	ldr	r3, [r4, #12]
 800bae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	42ab      	cmp	r3, r5
 800baea:	dcf0      	bgt.n	800bace <_printf_i+0x1f2>
 800baec:	e7e9      	b.n	800bac2 <_printf_i+0x1e6>
 800baee:	2500      	movs	r5, #0
 800baf0:	e7f7      	b.n	800bae2 <_printf_i+0x206>
 800baf2:	46c0      	nop			; (mov r8, r8)
 800baf4:	0800c971 	.word	0x0800c971
 800baf8:	0800c982 	.word	0x0800c982

0800bafc <memmove>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	4288      	cmp	r0, r1
 800bb00:	d902      	bls.n	800bb08 <memmove+0xc>
 800bb02:	188b      	adds	r3, r1, r2
 800bb04:	4298      	cmp	r0, r3
 800bb06:	d303      	bcc.n	800bb10 <memmove+0x14>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e007      	b.n	800bb1c <memmove+0x20>
 800bb0c:	5c8b      	ldrb	r3, [r1, r2]
 800bb0e:	5483      	strb	r3, [r0, r2]
 800bb10:	3a01      	subs	r2, #1
 800bb12:	d2fb      	bcs.n	800bb0c <memmove+0x10>
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	5ccc      	ldrb	r4, [r1, r3]
 800bb18:	54c4      	strb	r4, [r0, r3]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d1fa      	bne.n	800bb16 <memmove+0x1a>
 800bb20:	e7f8      	b.n	800bb14 <memmove+0x18>
	...

0800bb24 <_sbrk_r>:
 800bb24:	2300      	movs	r3, #0
 800bb26:	b570      	push	{r4, r5, r6, lr}
 800bb28:	4d06      	ldr	r5, [pc, #24]	; (800bb44 <_sbrk_r+0x20>)
 800bb2a:	0004      	movs	r4, r0
 800bb2c:	0008      	movs	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f5 fe0a 	bl	8001748 <_sbrk>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d103      	bne.n	800bb40 <_sbrk_r+0x1c>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d000      	beq.n	800bb40 <_sbrk_r+0x1c>
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	bd70      	pop	{r4, r5, r6, pc}
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	20000fd8 	.word	0x20000fd8

0800bb48 <memchr>:
 800bb48:	b2c9      	uxtb	r1, r1
 800bb4a:	1882      	adds	r2, r0, r2
 800bb4c:	4290      	cmp	r0, r2
 800bb4e:	d101      	bne.n	800bb54 <memchr+0xc>
 800bb50:	2000      	movs	r0, #0
 800bb52:	4770      	bx	lr
 800bb54:	7803      	ldrb	r3, [r0, #0]
 800bb56:	428b      	cmp	r3, r1
 800bb58:	d0fb      	beq.n	800bb52 <memchr+0xa>
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	e7f6      	b.n	800bb4c <memchr+0x4>

0800bb5e <memcpy>:
 800bb5e:	2300      	movs	r3, #0
 800bb60:	b510      	push	{r4, lr}
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d100      	bne.n	800bb68 <memcpy+0xa>
 800bb66:	bd10      	pop	{r4, pc}
 800bb68:	5ccc      	ldrb	r4, [r1, r3]
 800bb6a:	54c4      	strb	r4, [r0, r3]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	e7f8      	b.n	800bb62 <memcpy+0x4>

0800bb70 <_realloc_r>:
 800bb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb72:	0007      	movs	r7, r0
 800bb74:	000e      	movs	r6, r1
 800bb76:	0014      	movs	r4, r2
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	d105      	bne.n	800bb88 <_realloc_r+0x18>
 800bb7c:	0011      	movs	r1, r2
 800bb7e:	f7ff fc49 	bl	800b414 <_malloc_r>
 800bb82:	0005      	movs	r5, r0
 800bb84:	0028      	movs	r0, r5
 800bb86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	d103      	bne.n	800bb94 <_realloc_r+0x24>
 800bb8c:	f7ff fbd6 	bl	800b33c <_free_r>
 800bb90:	0025      	movs	r5, r4
 800bb92:	e7f7      	b.n	800bb84 <_realloc_r+0x14>
 800bb94:	f000 f81b 	bl	800bbce <_malloc_usable_size_r>
 800bb98:	9001      	str	r0, [sp, #4]
 800bb9a:	4284      	cmp	r4, r0
 800bb9c:	d803      	bhi.n	800bba6 <_realloc_r+0x36>
 800bb9e:	0035      	movs	r5, r6
 800bba0:	0843      	lsrs	r3, r0, #1
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	d3ee      	bcc.n	800bb84 <_realloc_r+0x14>
 800bba6:	0021      	movs	r1, r4
 800bba8:	0038      	movs	r0, r7
 800bbaa:	f7ff fc33 	bl	800b414 <_malloc_r>
 800bbae:	1e05      	subs	r5, r0, #0
 800bbb0:	d0e8      	beq.n	800bb84 <_realloc_r+0x14>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	0022      	movs	r2, r4
 800bbb6:	429c      	cmp	r4, r3
 800bbb8:	d900      	bls.n	800bbbc <_realloc_r+0x4c>
 800bbba:	001a      	movs	r2, r3
 800bbbc:	0031      	movs	r1, r6
 800bbbe:	0028      	movs	r0, r5
 800bbc0:	f7ff ffcd 	bl	800bb5e <memcpy>
 800bbc4:	0031      	movs	r1, r6
 800bbc6:	0038      	movs	r0, r7
 800bbc8:	f7ff fbb8 	bl	800b33c <_free_r>
 800bbcc:	e7da      	b.n	800bb84 <_realloc_r+0x14>

0800bbce <_malloc_usable_size_r>:
 800bbce:	1f0b      	subs	r3, r1, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	1f18      	subs	r0, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da01      	bge.n	800bbdc <_malloc_usable_size_r+0xe>
 800bbd8:	580b      	ldr	r3, [r1, r0]
 800bbda:	18c0      	adds	r0, r0, r3
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <_init>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr

0800bbec <_fini>:
 800bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf2:	bc08      	pop	{r3}
 800bbf4:	469e      	mov	lr, r3
 800bbf6:	4770      	bx	lr
